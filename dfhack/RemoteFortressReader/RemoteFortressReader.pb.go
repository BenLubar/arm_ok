// Code generated by protoc-gen-go.
// source: RemoteFortressReader.proto
// DO NOT EDIT!

/*
Package RemoteFortressReader is a generated protocol buffer package.

It is generated from these files:
	RemoteFortressReader.proto

It has these top-level messages:
	Tiletype
	TiletypeList
	MapBlock
	MatPair
	ColorDefinition
	MaterialDefinition
	MaterialList
	UnitDefinition
	UnitList
	BlockRequest
	BlockList
	PlantDef
	PlantList
	ViewInfo
	MapInfo
*/
package RemoteFortressReader

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

// We use shapes, etc, because the actual tiletypes may differ between DF versions.
type TiletypeShape int32

const (
	TiletypeShape_NO_SHAPE      TiletypeShape = -1
	TiletypeShape_EMPTY         TiletypeShape = 0
	TiletypeShape_FLOOR         TiletypeShape = 1
	TiletypeShape_BOULDER       TiletypeShape = 2
	TiletypeShape_PEBBLES       TiletypeShape = 3
	TiletypeShape_WALL          TiletypeShape = 4
	TiletypeShape_FORTIFICATION TiletypeShape = 5
	TiletypeShape_STAIR_UP      TiletypeShape = 6
	TiletypeShape_STAIR_DOWN    TiletypeShape = 7
	TiletypeShape_STAIR_UPDOWN  TiletypeShape = 8
	TiletypeShape_RAMP          TiletypeShape = 9
	TiletypeShape_RAMP_TOP      TiletypeShape = 10
	TiletypeShape_BROOK_BED     TiletypeShape = 11
	TiletypeShape_BROOK_TOP     TiletypeShape = 12
	TiletypeShape_TREE_SHAPE    TiletypeShape = 13
	TiletypeShape_SAPLING       TiletypeShape = 14
	TiletypeShape_SHRUB         TiletypeShape = 15
	TiletypeShape_ENDLESS_PIT   TiletypeShape = 16
	TiletypeShape_BRANCH        TiletypeShape = 17
	TiletypeShape_TRUNK_BRANCH  TiletypeShape = 18
	TiletypeShape_TWIG          TiletypeShape = 19
)

var TiletypeShape_name = map[int32]string{
	-1: "NO_SHAPE",
	0:  "EMPTY",
	1:  "FLOOR",
	2:  "BOULDER",
	3:  "PEBBLES",
	4:  "WALL",
	5:  "FORTIFICATION",
	6:  "STAIR_UP",
	7:  "STAIR_DOWN",
	8:  "STAIR_UPDOWN",
	9:  "RAMP",
	10: "RAMP_TOP",
	11: "BROOK_BED",
	12: "BROOK_TOP",
	13: "TREE_SHAPE",
	14: "SAPLING",
	15: "SHRUB",
	16: "ENDLESS_PIT",
	17: "BRANCH",
	18: "TRUNK_BRANCH",
	19: "TWIG",
}
var TiletypeShape_value = map[string]int32{
	"NO_SHAPE":      -1,
	"EMPTY":         0,
	"FLOOR":         1,
	"BOULDER":       2,
	"PEBBLES":       3,
	"WALL":          4,
	"FORTIFICATION": 5,
	"STAIR_UP":      6,
	"STAIR_DOWN":    7,
	"STAIR_UPDOWN":  8,
	"RAMP":          9,
	"RAMP_TOP":      10,
	"BROOK_BED":     11,
	"BROOK_TOP":     12,
	"TREE_SHAPE":    13,
	"SAPLING":       14,
	"SHRUB":         15,
	"ENDLESS_PIT":   16,
	"BRANCH":        17,
	"TRUNK_BRANCH":  18,
	"TWIG":          19,
}

func (x TiletypeShape) Enum() *TiletypeShape {
	p := new(TiletypeShape)
	*p = x
	return p
}
func (x TiletypeShape) String() string {
	return proto.EnumName(TiletypeShape_name, int32(x))
}
func (x *TiletypeShape) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TiletypeShape_value, data, "TiletypeShape")
	if err != nil {
		return err
	}
	*x = TiletypeShape(value)
	return nil
}

type TiletypeSpecial int32

const (
	TiletypeSpecial_NO_SPECIAL   TiletypeSpecial = -1
	TiletypeSpecial_NORMAL       TiletypeSpecial = 0
	TiletypeSpecial_RIVER_SOURCE TiletypeSpecial = 1
	TiletypeSpecial_WATERFALL    TiletypeSpecial = 2
	TiletypeSpecial_SMOOTH       TiletypeSpecial = 3
	TiletypeSpecial_FURROWED     TiletypeSpecial = 4
	TiletypeSpecial_WET          TiletypeSpecial = 5
	TiletypeSpecial_DEAD         TiletypeSpecial = 6
	TiletypeSpecial_WORN_1       TiletypeSpecial = 7
	TiletypeSpecial_WORN_2       TiletypeSpecial = 8
	TiletypeSpecial_WORN_3       TiletypeSpecial = 9
	TiletypeSpecial_TRACK        TiletypeSpecial = 10
	TiletypeSpecial_SMOOTH_DEAD  TiletypeSpecial = 11
)

var TiletypeSpecial_name = map[int32]string{
	-1: "NO_SPECIAL",
	0:  "NORMAL",
	1:  "RIVER_SOURCE",
	2:  "WATERFALL",
	3:  "SMOOTH",
	4:  "FURROWED",
	5:  "WET",
	6:  "DEAD",
	7:  "WORN_1",
	8:  "WORN_2",
	9:  "WORN_3",
	10: "TRACK",
	11: "SMOOTH_DEAD",
}
var TiletypeSpecial_value = map[string]int32{
	"NO_SPECIAL":   -1,
	"NORMAL":       0,
	"RIVER_SOURCE": 1,
	"WATERFALL":    2,
	"SMOOTH":       3,
	"FURROWED":     4,
	"WET":          5,
	"DEAD":         6,
	"WORN_1":       7,
	"WORN_2":       8,
	"WORN_3":       9,
	"TRACK":        10,
	"SMOOTH_DEAD":  11,
}

func (x TiletypeSpecial) Enum() *TiletypeSpecial {
	p := new(TiletypeSpecial)
	*p = x
	return p
}
func (x TiletypeSpecial) String() string {
	return proto.EnumName(TiletypeSpecial_name, int32(x))
}
func (x *TiletypeSpecial) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TiletypeSpecial_value, data, "TiletypeSpecial")
	if err != nil {
		return err
	}
	*x = TiletypeSpecial(value)
	return nil
}

type TiletypeMaterial int32

const (
	TiletypeMaterial_NO_MATERIAL     TiletypeMaterial = -1
	TiletypeMaterial_AIR             TiletypeMaterial = 0
	TiletypeMaterial_SOIL            TiletypeMaterial = 1
	TiletypeMaterial_STONE           TiletypeMaterial = 2
	TiletypeMaterial_FEATURE         TiletypeMaterial = 3
	TiletypeMaterial_LAVA_STONE      TiletypeMaterial = 4
	TiletypeMaterial_MINERAL         TiletypeMaterial = 5
	TiletypeMaterial_FROZEN_LIQUID   TiletypeMaterial = 6
	TiletypeMaterial_CONSTRUCTION    TiletypeMaterial = 7
	TiletypeMaterial_GRASS_LIGHT     TiletypeMaterial = 8
	TiletypeMaterial_GRASS_DARK      TiletypeMaterial = 9
	TiletypeMaterial_GRASS_DRY       TiletypeMaterial = 10
	TiletypeMaterial_GRASS_DEAD      TiletypeMaterial = 11
	TiletypeMaterial_PLANT           TiletypeMaterial = 12
	TiletypeMaterial_HFS             TiletypeMaterial = 13
	TiletypeMaterial_CAMPFIRE        TiletypeMaterial = 14
	TiletypeMaterial_FIRE            TiletypeMaterial = 15
	TiletypeMaterial_ASHES           TiletypeMaterial = 16
	TiletypeMaterial_MAGMA           TiletypeMaterial = 17
	TiletypeMaterial_DRIFTWOOD       TiletypeMaterial = 18
	TiletypeMaterial_POOL            TiletypeMaterial = 19
	TiletypeMaterial_BROOK           TiletypeMaterial = 20
	TiletypeMaterial_RIVER           TiletypeMaterial = 21
	TiletypeMaterial_ROOT            TiletypeMaterial = 22
	TiletypeMaterial_TREE_MATERIAL   TiletypeMaterial = 23
	TiletypeMaterial_MUSHROOM        TiletypeMaterial = 24
	TiletypeMaterial_UNDERWORLD_GATE TiletypeMaterial = 25
)

var TiletypeMaterial_name = map[int32]string{
	-1: "NO_MATERIAL",
	0:  "AIR",
	1:  "SOIL",
	2:  "STONE",
	3:  "FEATURE",
	4:  "LAVA_STONE",
	5:  "MINERAL",
	6:  "FROZEN_LIQUID",
	7:  "CONSTRUCTION",
	8:  "GRASS_LIGHT",
	9:  "GRASS_DARK",
	10: "GRASS_DRY",
	11: "GRASS_DEAD",
	12: "PLANT",
	13: "HFS",
	14: "CAMPFIRE",
	15: "FIRE",
	16: "ASHES",
	17: "MAGMA",
	18: "DRIFTWOOD",
	19: "POOL",
	20: "BROOK",
	21: "RIVER",
	22: "ROOT",
	23: "TREE_MATERIAL",
	24: "MUSHROOM",
	25: "UNDERWORLD_GATE",
}
var TiletypeMaterial_value = map[string]int32{
	"NO_MATERIAL":     -1,
	"AIR":             0,
	"SOIL":            1,
	"STONE":           2,
	"FEATURE":         3,
	"LAVA_STONE":      4,
	"MINERAL":         5,
	"FROZEN_LIQUID":   6,
	"CONSTRUCTION":    7,
	"GRASS_LIGHT":     8,
	"GRASS_DARK":      9,
	"GRASS_DRY":       10,
	"GRASS_DEAD":      11,
	"PLANT":           12,
	"HFS":             13,
	"CAMPFIRE":        14,
	"FIRE":            15,
	"ASHES":           16,
	"MAGMA":           17,
	"DRIFTWOOD":       18,
	"POOL":            19,
	"BROOK":           20,
	"RIVER":           21,
	"ROOT":            22,
	"TREE_MATERIAL":   23,
	"MUSHROOM":        24,
	"UNDERWORLD_GATE": 25,
}

func (x TiletypeMaterial) Enum() *TiletypeMaterial {
	p := new(TiletypeMaterial)
	*p = x
	return p
}
func (x TiletypeMaterial) String() string {
	return proto.EnumName(TiletypeMaterial_name, int32(x))
}
func (x *TiletypeMaterial) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TiletypeMaterial_value, data, "TiletypeMaterial")
	if err != nil {
		return err
	}
	*x = TiletypeMaterial(value)
	return nil
}

type TiletypeVariant int32

const (
	TiletypeVariant_NO_VARIANT TiletypeVariant = -1
	TiletypeVariant_VAR_1      TiletypeVariant = 0
	TiletypeVariant_VAR_2      TiletypeVariant = 1
	TiletypeVariant_VAR_3      TiletypeVariant = 2
	TiletypeVariant_VAR_4      TiletypeVariant = 3
)

var TiletypeVariant_name = map[int32]string{
	-1: "NO_VARIANT",
	0:  "VAR_1",
	1:  "VAR_2",
	2:  "VAR_3",
	3:  "VAR_4",
}
var TiletypeVariant_value = map[string]int32{
	"NO_VARIANT": -1,
	"VAR_1":      0,
	"VAR_2":      1,
	"VAR_3":      2,
	"VAR_4":      3,
}

func (x TiletypeVariant) Enum() *TiletypeVariant {
	p := new(TiletypeVariant)
	*p = x
	return p
}
func (x TiletypeVariant) String() string {
	return proto.EnumName(TiletypeVariant_name, int32(x))
}
func (x *TiletypeVariant) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TiletypeVariant_value, data, "TiletypeVariant")
	if err != nil {
		return err
	}
	*x = TiletypeVariant(value)
	return nil
}

type Tiletype struct {
	Id               *int32            `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Name             *string           `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Caption          *string           `protobuf:"bytes,3,opt,name=caption" json:"caption,omitempty"`
	Shape            *TiletypeShape    `protobuf:"varint,4,opt,name=shape,enum=RemoteFortressReader.TiletypeShape" json:"shape,omitempty"`
	Special          *TiletypeSpecial  `protobuf:"varint,5,opt,name=special,enum=RemoteFortressReader.TiletypeSpecial" json:"special,omitempty"`
	Material         *TiletypeMaterial `protobuf:"varint,6,opt,name=material,enum=RemoteFortressReader.TiletypeMaterial" json:"material,omitempty"`
	Variant          *TiletypeVariant  `protobuf:"varint,7,opt,name=variant,enum=RemoteFortressReader.TiletypeVariant" json:"variant,omitempty"`
	Direction        *string           `protobuf:"bytes,8,opt,name=direction" json:"direction,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Tiletype) Reset()         { *m = Tiletype{} }
func (m *Tiletype) String() string { return proto.CompactTextString(m) }
func (*Tiletype) ProtoMessage()    {}

func (m *Tiletype) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Tiletype) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Tiletype) GetCaption() string {
	if m != nil && m.Caption != nil {
		return *m.Caption
	}
	return ""
}

func (m *Tiletype) GetShape() TiletypeShape {
	if m != nil && m.Shape != nil {
		return *m.Shape
	}
	return TiletypeShape_NO_SHAPE
}

func (m *Tiletype) GetSpecial() TiletypeSpecial {
	if m != nil && m.Special != nil {
		return *m.Special
	}
	return TiletypeSpecial_NO_SPECIAL
}

func (m *Tiletype) GetMaterial() TiletypeMaterial {
	if m != nil && m.Material != nil {
		return *m.Material
	}
	return TiletypeMaterial_NO_MATERIAL
}

func (m *Tiletype) GetVariant() TiletypeVariant {
	if m != nil && m.Variant != nil {
		return *m.Variant
	}
	return TiletypeVariant_NO_VARIANT
}

func (m *Tiletype) GetDirection() string {
	if m != nil && m.Direction != nil {
		return *m.Direction
	}
	return ""
}

type TiletypeList struct {
	TiletypeList     []*Tiletype `protobuf:"bytes,1,rep,name=tiletype_list" json:"tiletype_list,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *TiletypeList) Reset()         { *m = TiletypeList{} }
func (m *TiletypeList) String() string { return proto.CompactTextString(m) }
func (*TiletypeList) ProtoMessage()    {}

func (m *TiletypeList) GetTiletypeList() []*Tiletype {
	if m != nil {
		return m.TiletypeList
	}
	return nil
}

type MapBlock struct {
	MapX             *int32     `protobuf:"varint,1,req,name=map_x" json:"map_x,omitempty"`
	MapY             *int32     `protobuf:"varint,2,req,name=map_y" json:"map_y,omitempty"`
	MapZ             *int32     `protobuf:"varint,3,req,name=map_z" json:"map_z,omitempty"`
	Tiles            []int32    `protobuf:"varint,4,rep,name=tiles" json:"tiles,omitempty"`
	Materials        []*MatPair `protobuf:"bytes,5,rep,name=materials" json:"materials,omitempty"`
	LayerMaterials   []*MatPair `protobuf:"bytes,6,rep,name=layer_materials" json:"layer_materials,omitempty"`
	VeinMaterials    []*MatPair `protobuf:"bytes,7,rep,name=vein_materials" json:"vein_materials,omitempty"`
	BaseMaterials    []*MatPair `protobuf:"bytes,8,rep,name=base_materials" json:"base_materials,omitempty"`
	Magma            []int32    `protobuf:"varint,9,rep,name=magma" json:"magma,omitempty"`
	Water            []int32    `protobuf:"varint,10,rep,name=water" json:"water,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *MapBlock) Reset()         { *m = MapBlock{} }
func (m *MapBlock) String() string { return proto.CompactTextString(m) }
func (*MapBlock) ProtoMessage()    {}

func (m *MapBlock) GetMapX() int32 {
	if m != nil && m.MapX != nil {
		return *m.MapX
	}
	return 0
}

func (m *MapBlock) GetMapY() int32 {
	if m != nil && m.MapY != nil {
		return *m.MapY
	}
	return 0
}

func (m *MapBlock) GetMapZ() int32 {
	if m != nil && m.MapZ != nil {
		return *m.MapZ
	}
	return 0
}

func (m *MapBlock) GetTiles() []int32 {
	if m != nil {
		return m.Tiles
	}
	return nil
}

func (m *MapBlock) GetMaterials() []*MatPair {
	if m != nil {
		return m.Materials
	}
	return nil
}

func (m *MapBlock) GetLayerMaterials() []*MatPair {
	if m != nil {
		return m.LayerMaterials
	}
	return nil
}

func (m *MapBlock) GetVeinMaterials() []*MatPair {
	if m != nil {
		return m.VeinMaterials
	}
	return nil
}

func (m *MapBlock) GetBaseMaterials() []*MatPair {
	if m != nil {
		return m.BaseMaterials
	}
	return nil
}

func (m *MapBlock) GetMagma() []int32 {
	if m != nil {
		return m.Magma
	}
	return nil
}

func (m *MapBlock) GetWater() []int32 {
	if m != nil {
		return m.Water
	}
	return nil
}

type MatPair struct {
	MatType          *int32 `protobuf:"varint,1,req,name=mat_type" json:"mat_type,omitempty"`
	MatIndex         *int32 `protobuf:"varint,2,req,name=mat_index" json:"mat_index,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatPair) Reset()         { *m = MatPair{} }
func (m *MatPair) String() string { return proto.CompactTextString(m) }
func (*MatPair) ProtoMessage()    {}

func (m *MatPair) GetMatType() int32 {
	if m != nil && m.MatType != nil {
		return *m.MatType
	}
	return 0
}

func (m *MatPair) GetMatIndex() int32 {
	if m != nil && m.MatIndex != nil {
		return *m.MatIndex
	}
	return 0
}

type ColorDefinition struct {
	Red              *int32 `protobuf:"varint,1,req,name=red" json:"red,omitempty"`
	Green            *int32 `protobuf:"varint,2,req,name=green" json:"green,omitempty"`
	Blue             *int32 `protobuf:"varint,3,req,name=blue" json:"blue,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ColorDefinition) Reset()         { *m = ColorDefinition{} }
func (m *ColorDefinition) String() string { return proto.CompactTextString(m) }
func (*ColorDefinition) ProtoMessage()    {}

func (m *ColorDefinition) GetRed() int32 {
	if m != nil && m.Red != nil {
		return *m.Red
	}
	return 0
}

func (m *ColorDefinition) GetGreen() int32 {
	if m != nil && m.Green != nil {
		return *m.Green
	}
	return 0
}

func (m *ColorDefinition) GetBlue() int32 {
	if m != nil && m.Blue != nil {
		return *m.Blue
	}
	return 0
}

type MaterialDefinition struct {
	MatPair          *MatPair         `protobuf:"bytes,1,req,name=mat_pair" json:"mat_pair,omitempty"`
	Id               *string          `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name             *string          `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	StateColor       *ColorDefinition `protobuf:"bytes,4,opt,name=state_color" json:"state_color,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *MaterialDefinition) Reset()         { *m = MaterialDefinition{} }
func (m *MaterialDefinition) String() string { return proto.CompactTextString(m) }
func (*MaterialDefinition) ProtoMessage()    {}

func (m *MaterialDefinition) GetMatPair() *MatPair {
	if m != nil {
		return m.MatPair
	}
	return nil
}

func (m *MaterialDefinition) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *MaterialDefinition) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MaterialDefinition) GetStateColor() *ColorDefinition {
	if m != nil {
		return m.StateColor
	}
	return nil
}

type MaterialList struct {
	MaterialList     []*MaterialDefinition `protobuf:"bytes,1,rep,name=material_list" json:"material_list,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *MaterialList) Reset()         { *m = MaterialList{} }
func (m *MaterialList) String() string { return proto.CompactTextString(m) }
func (*MaterialList) ProtoMessage()    {}

func (m *MaterialList) GetMaterialList() []*MaterialDefinition {
	if m != nil {
		return m.MaterialList
	}
	return nil
}

type UnitDefinition struct {
	Id               *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	IsValid          *bool  `protobuf:"varint,2,opt,name=isValid" json:"isValid,omitempty"`
	PosX             *int32 `protobuf:"varint,3,opt,name=pos_x" json:"pos_x,omitempty"`
	PosY             *int32 `protobuf:"varint,4,opt,name=pos_y" json:"pos_y,omitempty"`
	PosZ             *int32 `protobuf:"varint,5,opt,name=pos_z" json:"pos_z,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UnitDefinition) Reset()         { *m = UnitDefinition{} }
func (m *UnitDefinition) String() string { return proto.CompactTextString(m) }
func (*UnitDefinition) ProtoMessage()    {}

func (m *UnitDefinition) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *UnitDefinition) GetIsValid() bool {
	if m != nil && m.IsValid != nil {
		return *m.IsValid
	}
	return false
}

func (m *UnitDefinition) GetPosX() int32 {
	if m != nil && m.PosX != nil {
		return *m.PosX
	}
	return 0
}

func (m *UnitDefinition) GetPosY() int32 {
	if m != nil && m.PosY != nil {
		return *m.PosY
	}
	return 0
}

func (m *UnitDefinition) GetPosZ() int32 {
	if m != nil && m.PosZ != nil {
		return *m.PosZ
	}
	return 0
}

type UnitList struct {
	CreatureList     []*UnitDefinition `protobuf:"bytes,1,rep,name=creature_list" json:"creature_list,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *UnitList) Reset()         { *m = UnitList{} }
func (m *UnitList) String() string { return proto.CompactTextString(m) }
func (*UnitList) ProtoMessage()    {}

func (m *UnitList) GetCreatureList() []*UnitDefinition {
	if m != nil {
		return m.CreatureList
	}
	return nil
}

type BlockRequest struct {
	BlocksNeeded     *int32 `protobuf:"varint,1,opt,name=blocks_needed" json:"blocks_needed,omitempty"`
	MinX             *int32 `protobuf:"varint,2,opt,name=min_x" json:"min_x,omitempty"`
	MaxX             *int32 `protobuf:"varint,3,opt,name=max_x" json:"max_x,omitempty"`
	MinY             *int32 `protobuf:"varint,4,opt,name=min_y" json:"min_y,omitempty"`
	MaxY             *int32 `protobuf:"varint,5,opt,name=max_y" json:"max_y,omitempty"`
	MinZ             *int32 `protobuf:"varint,6,opt,name=min_z" json:"min_z,omitempty"`
	MaxZ             *int32 `protobuf:"varint,7,opt,name=max_z" json:"max_z,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BlockRequest) Reset()         { *m = BlockRequest{} }
func (m *BlockRequest) String() string { return proto.CompactTextString(m) }
func (*BlockRequest) ProtoMessage()    {}

func (m *BlockRequest) GetBlocksNeeded() int32 {
	if m != nil && m.BlocksNeeded != nil {
		return *m.BlocksNeeded
	}
	return 0
}

func (m *BlockRequest) GetMinX() int32 {
	if m != nil && m.MinX != nil {
		return *m.MinX
	}
	return 0
}

func (m *BlockRequest) GetMaxX() int32 {
	if m != nil && m.MaxX != nil {
		return *m.MaxX
	}
	return 0
}

func (m *BlockRequest) GetMinY() int32 {
	if m != nil && m.MinY != nil {
		return *m.MinY
	}
	return 0
}

func (m *BlockRequest) GetMaxY() int32 {
	if m != nil && m.MaxY != nil {
		return *m.MaxY
	}
	return 0
}

func (m *BlockRequest) GetMinZ() int32 {
	if m != nil && m.MinZ != nil {
		return *m.MinZ
	}
	return 0
}

func (m *BlockRequest) GetMaxZ() int32 {
	if m != nil && m.MaxZ != nil {
		return *m.MaxZ
	}
	return 0
}

type BlockList struct {
	MapBlocks        []*MapBlock `protobuf:"bytes,1,rep,name=map_blocks" json:"map_blocks,omitempty"`
	MapX             *int32      `protobuf:"varint,2,opt,name=map_x" json:"map_x,omitempty"`
	MapY             *int32      `protobuf:"varint,3,opt,name=map_y" json:"map_y,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *BlockList) Reset()         { *m = BlockList{} }
func (m *BlockList) String() string { return proto.CompactTextString(m) }
func (*BlockList) ProtoMessage()    {}

func (m *BlockList) GetMapBlocks() []*MapBlock {
	if m != nil {
		return m.MapBlocks
	}
	return nil
}

func (m *BlockList) GetMapX() int32 {
	if m != nil && m.MapX != nil {
		return *m.MapX
	}
	return 0
}

func (m *BlockList) GetMapY() int32 {
	if m != nil && m.MapY != nil {
		return *m.MapY
	}
	return 0
}

type PlantDef struct {
	PosX             *int32 `protobuf:"varint,1,req,name=pos_x" json:"pos_x,omitempty"`
	PosY             *int32 `protobuf:"varint,2,req,name=pos_y" json:"pos_y,omitempty"`
	PosZ             *int32 `protobuf:"varint,3,req,name=pos_z" json:"pos_z,omitempty"`
	Index            *int32 `protobuf:"varint,4,req,name=index" json:"index,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PlantDef) Reset()         { *m = PlantDef{} }
func (m *PlantDef) String() string { return proto.CompactTextString(m) }
func (*PlantDef) ProtoMessage()    {}

func (m *PlantDef) GetPosX() int32 {
	if m != nil && m.PosX != nil {
		return *m.PosX
	}
	return 0
}

func (m *PlantDef) GetPosY() int32 {
	if m != nil && m.PosY != nil {
		return *m.PosY
	}
	return 0
}

func (m *PlantDef) GetPosZ() int32 {
	if m != nil && m.PosZ != nil {
		return *m.PosZ
	}
	return 0
}

func (m *PlantDef) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

type PlantList struct {
	PlantList        []*PlantDef `protobuf:"bytes,1,rep,name=plant_list" json:"plant_list,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *PlantList) Reset()         { *m = PlantList{} }
func (m *PlantList) String() string { return proto.CompactTextString(m) }
func (*PlantList) ProtoMessage()    {}

func (m *PlantList) GetPlantList() []*PlantDef {
	if m != nil {
		return m.PlantList
	}
	return nil
}

type ViewInfo struct {
	ViewPosX         *int32 `protobuf:"varint,1,opt,name=view_pos_x" json:"view_pos_x,omitempty"`
	ViewPosY         *int32 `protobuf:"varint,2,opt,name=view_pos_y" json:"view_pos_y,omitempty"`
	ViewPosZ         *int32 `protobuf:"varint,3,opt,name=view_pos_z" json:"view_pos_z,omitempty"`
	ViewSizeX        *int32 `protobuf:"varint,4,opt,name=view_size_x" json:"view_size_x,omitempty"`
	ViewSizeY        *int32 `protobuf:"varint,5,opt,name=view_size_y" json:"view_size_y,omitempty"`
	CursorPosX       *int32 `protobuf:"varint,6,opt,name=cursor_pos_x" json:"cursor_pos_x,omitempty"`
	CursorPosY       *int32 `protobuf:"varint,7,opt,name=cursor_pos_y" json:"cursor_pos_y,omitempty"`
	CursorPosZ       *int32 `protobuf:"varint,8,opt,name=cursor_pos_z" json:"cursor_pos_z,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ViewInfo) Reset()         { *m = ViewInfo{} }
func (m *ViewInfo) String() string { return proto.CompactTextString(m) }
func (*ViewInfo) ProtoMessage()    {}

func (m *ViewInfo) GetViewPosX() int32 {
	if m != nil && m.ViewPosX != nil {
		return *m.ViewPosX
	}
	return 0
}

func (m *ViewInfo) GetViewPosY() int32 {
	if m != nil && m.ViewPosY != nil {
		return *m.ViewPosY
	}
	return 0
}

func (m *ViewInfo) GetViewPosZ() int32 {
	if m != nil && m.ViewPosZ != nil {
		return *m.ViewPosZ
	}
	return 0
}

func (m *ViewInfo) GetViewSizeX() int32 {
	if m != nil && m.ViewSizeX != nil {
		return *m.ViewSizeX
	}
	return 0
}

func (m *ViewInfo) GetViewSizeY() int32 {
	if m != nil && m.ViewSizeY != nil {
		return *m.ViewSizeY
	}
	return 0
}

func (m *ViewInfo) GetCursorPosX() int32 {
	if m != nil && m.CursorPosX != nil {
		return *m.CursorPosX
	}
	return 0
}

func (m *ViewInfo) GetCursorPosY() int32 {
	if m != nil && m.CursorPosY != nil {
		return *m.CursorPosY
	}
	return 0
}

func (m *ViewInfo) GetCursorPosZ() int32 {
	if m != nil && m.CursorPosZ != nil {
		return *m.CursorPosZ
	}
	return 0
}

type MapInfo struct {
	BlockSizeX       *int32  `protobuf:"varint,1,opt,name=block_size_x" json:"block_size_x,omitempty"`
	BlockSizeY       *int32  `protobuf:"varint,2,opt,name=block_size_y" json:"block_size_y,omitempty"`
	BlockSizeZ       *int32  `protobuf:"varint,3,opt,name=block_size_z" json:"block_size_z,omitempty"`
	BlockPosX        *int32  `protobuf:"varint,4,opt,name=block_pos_x" json:"block_pos_x,omitempty"`
	BlockPosY        *int32  `protobuf:"varint,5,opt,name=block_pos_y" json:"block_pos_y,omitempty"`
	BlockPosZ        *int32  `protobuf:"varint,6,opt,name=block_pos_z" json:"block_pos_z,omitempty"`
	WorldName        *string `protobuf:"bytes,7,opt,name=world_name" json:"world_name,omitempty"`
	WorldNameEnglish *string `protobuf:"bytes,8,opt,name=world_name_english" json:"world_name_english,omitempty"`
	SaveName         *string `protobuf:"bytes,9,opt,name=save_name" json:"save_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MapInfo) Reset()         { *m = MapInfo{} }
func (m *MapInfo) String() string { return proto.CompactTextString(m) }
func (*MapInfo) ProtoMessage()    {}

func (m *MapInfo) GetBlockSizeX() int32 {
	if m != nil && m.BlockSizeX != nil {
		return *m.BlockSizeX
	}
	return 0
}

func (m *MapInfo) GetBlockSizeY() int32 {
	if m != nil && m.BlockSizeY != nil {
		return *m.BlockSizeY
	}
	return 0
}

func (m *MapInfo) GetBlockSizeZ() int32 {
	if m != nil && m.BlockSizeZ != nil {
		return *m.BlockSizeZ
	}
	return 0
}

func (m *MapInfo) GetBlockPosX() int32 {
	if m != nil && m.BlockPosX != nil {
		return *m.BlockPosX
	}
	return 0
}

func (m *MapInfo) GetBlockPosY() int32 {
	if m != nil && m.BlockPosY != nil {
		return *m.BlockPosY
	}
	return 0
}

func (m *MapInfo) GetBlockPosZ() int32 {
	if m != nil && m.BlockPosZ != nil {
		return *m.BlockPosZ
	}
	return 0
}

func (m *MapInfo) GetWorldName() string {
	if m != nil && m.WorldName != nil {
		return *m.WorldName
	}
	return ""
}

func (m *MapInfo) GetWorldNameEnglish() string {
	if m != nil && m.WorldNameEnglish != nil {
		return *m.WorldNameEnglish
	}
	return ""
}

func (m *MapInfo) GetSaveName() string {
	if m != nil && m.SaveName != nil {
		return *m.SaveName
	}
	return ""
}

func init() {
	proto.RegisterEnum("RemoteFortressReader.TiletypeShape", TiletypeShape_name, TiletypeShape_value)
	proto.RegisterEnum("RemoteFortressReader.TiletypeSpecial", TiletypeSpecial_name, TiletypeSpecial_value)
	proto.RegisterEnum("RemoteFortressReader.TiletypeMaterial", TiletypeMaterial_name, TiletypeMaterial_value)
	proto.RegisterEnum("RemoteFortressReader.TiletypeVariant", TiletypeVariant_name, TiletypeVariant_value)
}
