// AUTOMATICALLY GENERATED FILE. DO NOT EDIT.

package main

var _ = handle(asset.init(asset{Name: "armok_web.js", Content: "" +
	"\"use strict\";\n(function() {\n\nError.stackTraceLimit = Infinity;\n\nvar $global, $module;\nif (typeof window !== \"undefined\") { /* web page */\n  $global = window;\n} else if (typeof self !== \"undefined\") { /* web worker */\n  $global = self;\n} else if (typeof global !== \"undefined\") { /* Node.js */\n  $global = global;\n  $global.require = require;\n} else { /* others (e.g. Nashorn) */\n  $global = this;\n}\n\nif ($global === undefined || $global.Array === undefined) {\n  throw new Error(\"no global object found\");\n}\nif (typeof module !== \"undefined\") {\n  $module = module;\n}\n\nvar $packages = {}, $idCounter = 0;\nvar $keys = function(m) { return m ? Object.keys(m) : []; };\nvar $min = Math.min;\nvar $mod = function(x, y) { return x % y; };\nvar $parseInt = parseInt;\nvar $parseFloat = function(f) {\n  if (f !== undefined && f !== null && f.constructor === Number) {\n    return f;\n  }\n  return parseFloat(f);\n};\nvar $flushConsole = function() {};\nvar $throwRuntimeError; /* set by package \"runtime\" */\nvar $throwNilPointerError = function() { $throwRuntimeError(\"invalid memory address or nil pointer dereference\"); };\nvar $call = function(fn, rcvr, args) { return fn.apply(rcvr, args); };\nvar $makeFunc = function(fn) { return function() { return fn(new ($sliceType($jsObjectPtr))($global.Array.prototype.slice.call(arguments, []))); } };\n\nvar $froundBuf = new Float32Array(1);\nvar $fround = Math.fround || function(f) { $froundBuf[0] = f; return $froundBuf[0]; };\n\nvar $mapArray = function(array, f) {\n  var newArray = new array.constructor(array.length);\n  for (var i = 0; i < array.length; i++) {\n    newArray[i] = f(array[i]);\n  }\n  return newArray;\n};\n\nvar $methodVal = function(recv, name) {\n  var vals = recv.$methodVals || {};\n  recv.$methodVals = vals; /* noop for primitives */\n  var f = vals[name];\n  if (f !== undefined) {\n    return f;\n  }\n  var method = recv[name];\n  f = function() {\n    $stackDepthOffset--;\n    try {\n      return method.apply(recv, arguments);\n    } finally {\n      $stackDepthOffset++;\n    }\n  };\n  vals[name] = f;\n  return f;\n};\n\nvar $methodExpr = function(method) {\n  if (method.$expr === undefined) {\n    method.$expr = function() {\n      $stackDepthOffset--;\n      try {\n        return Function.call.apply(method, arguments);\n      } finally {\n        $stackDepthOffset++;\n      }\n    };\n  }\n  return method.$expr;\n};\n\nvar $subslice = function(slice, low, high, max) {\n  if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {\n    $throwRuntimeError(\"slice bounds out of range\");\n  }\n  var s = new slice.constructor(slice.$array);\n  s.$offset = slice.$offset + low;\n  s.$length = slice.$length - low;\n  s.$capacity = slice.$capacity - low;\n  if (high !== undefined) {\n    s.$length = high - low;\n  }\n  if (max !== undefined) {\n    s.$capacity = max - low;\n  }\n  return s;\n};\n\nvar $sliceToArray = function(slice) {\n  if (slice.$length === 0) {\n    return [];\n  }\n  if (slice.$array.constructor !== Array) {\n    return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);\n  }\n  return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);\n};\n\nvar $decodeRune = function(str, pos) {\n  var c0 = str.charCodeAt(pos);\n\n  if (c0 < 0x80) {\n    return [c0, 1];\n  }\n\n  if (c0 !== c0 || c0 < 0xC0) {\n    return [0xFFFD, 1];\n  }\n\n  var c1 = str.charCodeAt(pos + 1);\n  if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {\n    return [0xFFFD, 1];\n  }\n\n  if (c0 < 0xE0) {\n    var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);\n    if (r <= 0x7F) {\n      return [0xFFFD, 1];\n    }\n    return [r, 2];\n  }\n\n  var c2 = str.charCodeAt(pos + 2);\n  if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {\n    return [0xFFFD, 1];\n  }\n\n  if (c0 < 0xF0) {\n    var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);\n    if (r <= 0x7FF) {\n      return [0xFFFD, 1];\n    }\n    if (0xD800 <= r && r <= 0xDFFF) {\n      return [0xFFFD, 1];\n    }\n    return [r, 3];\n  }\n\n  var c3 = str.charCodeAt(pos + 3);\n  if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {\n    return [0xFFFD, 1];\n  }\n\n  if (c0 < 0xF8) {\n    var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);\n    if (r <= 0xFFFF || 0x10FFFF < r) {\n      return [0xFFFD, 1];\n    }\n    return [r, 4];\n  }\n\n  return [0xFFFD, 1];\n};\n\nvar $encodeRune = function(r) {\n  if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {\n    r = 0xFFFD;\n  }\n  if (r <= 0x7F) {\n    return String.fromCharCode(r);\n  }\n  if (r <= 0x7FF) {\n    return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));\n  }\n  if (r <= 0xFFFF) {\n    return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));\n  }\n  return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));\n};\n\nvar $stringToBytes = function(str) {\n  var array = new Uint8Array(str.length);\n  for (var i = 0; i < str.length; i++) {\n    array[i] = str.charCodeAt(i);\n  }\n  return array;\n};\n\nvar $bytesToString = function(slice) {\n  if (slice.$length === 0) {\n    return \"\";\n  }\n  var str = \"\";\n  for (var i = 0; i < slice.$length; i += 10000) {\n    str += String.fromCharCode.apply(undefined, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));\n  }\n  return str;\n};\n\nvar $stringToRunes = function(str) {\n  var array = new Int32Array(str.length);\n  var rune, j = 0;\n  for (var i = 0; i < str.length; i += rune[1], j++) {\n    rune = $decodeRune(str, i);\n    array[j] = rune[0];\n  }\n  return array.subarray(0, j);\n};\n\nvar $runesToString = function(slice) {\n  if (slice.$length === 0) {\n    return \"\";\n  }\n  var str = \"\";\n  for (var i = 0; i < slice.$length; i++) {\n    str += $encodeRune(slice.$array[slice.$offset + i]);\n  }\n  return str;\n};\n\nvar $copyString = function(dst, src) {\n  var n = Math.min(src.length, dst.$length);\n  for (var i = 0; i < n; i++) {\n    dst.$array[dst.$offset + i] = src.charCodeAt(i);\n  }\n  return n;\n};\n\nvar $copySlice = function(dst, src) {\n  var n = Math.min(src.$length, dst.$length);\n  $internalCopy(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);\n  return n;\n};\n\nvar $copy = function(dst, src, typ) {\n  switch (typ.kind) {\n  case $kindArray:\n    $internalCopy(dst, src, 0, 0, src.length, typ.elem);\n    break;\n  case $kindStruct:\n    for (var i = 0; i < typ.fields.length; i++) {\n      var f = typ.fields[i];\n      switch (f.typ.kind) {\n      case $kindArray:\n      case $kindStruct:\n        $copy(dst[f.prop], src[f.prop], f.typ);\n        continue;\n      default:\n        dst[f.prop] = src[f.prop];\n        continue;\n      }\n    }\n    break;\n  }\n};\n\nvar $internalCopy = function(dst, src, dstOffset, srcOffset, n, elem) {\n  if (n === 0 || (dst === src && dstOffset === srcOffset)) {\n    return;\n  }\n\n  if (src.subarray) {\n    dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);\n    return;\n  }\n\n  switch (elem.kind) {\n  case $kindArray:\n  case $kindStruct:\n    if (dst === src && dstOffset > srcOffset) {\n      for (var i = n - 1; i >= 0; i--) {\n        $copy(dst[dstOffset + i], src[srcOffset + i], elem);\n      }\n      return;\n    }\n    for (var i = 0; i < n; i++) {\n      $copy(dst[dstOffset + i], src[srcOffset + i], elem);\n    }\n    return;\n  }\n\n  if (dst === src && dstOffset > srcOffset) {\n    for (var i = n - 1; i >= 0; i--) {\n      dst[dstOffset + i] = src[srcOffset + i];\n    }\n    return;\n  }\n  for (var i = 0; i < n; i++) {\n    dst[dstOffset + i] = src[srcOffset + i];\n  }\n};\n\nvar $clone = function(src, type) {\n  var clone = type.zero();\n  $copy(clone, src, type);\n  return clone;\n};\n\nvar $pointerOfStructConversion = function(obj, type) {\n  if(obj.$proxies === undefined) {\n    obj.$proxies = {};\n    obj.$proxies[obj.constructor.string] = obj;\n  }\n  var proxy = obj.$proxies[type.string];\n  if (proxy === undefined) {\n    var properties = {};\n    for (var i = 0; i < type.elem.fields.length; i++) {\n      (function(fieldProp) {\n        properties[fieldProp] = {\n          get: function() { return obj[fieldProp]; },\n          set: function(value) { obj[fieldProp] = value; },\n        };\n      })(type.elem.fields[i].prop);\n    }\n    proxy = Object.create(type.prototype, properties);\n    proxy.$val = proxy;\n    obj.$proxies[type.string] = proxy;\n    proxy.$proxies = obj.$proxies;\n  }\n  return proxy;\n};\n\nvar $append = function(slice) {\n  return $internalAppend(slice, arguments, 1, arguments.length - 1);\n};\n\nvar $appendSlice = function(slice, toAppend) {\n  return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);\n};\n\nvar $internalAppend = function(slice, array, offset, length) {\n  if (length === 0) {\n    return slice;\n  }\n\n  var newArray = slice.$array;\n  var newOffset = slice.$offset;\n  var newLength = slice.$length + length;\n  var newCapacity = slice.$capacity;\n\n  if (newLength > newCapacity) {\n    newOffset = 0;\n    newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));\n\n    if (slice.$array.constructor === Array) {\n      newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);\n      newArray.length = newCapacity;\n      var zero = slice.constructor.elem.zero;\n      for (var i = slice.$length; i < newCapacity; i++) {\n        newArray[i] = zero();\n      }\n    } else {\n      newArray = new slice.$array.constructor(newCapacity);\n      newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));\n    }\n  }\n\n  $internalCopy(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);\n\n  var newSlice = new slice.constructor(newArray);\n  newSlice.$offset = newOffset;\n  newSlice.$length = newLength;\n  newSlice.$capacity = newCapacity;\n  return newSlice;\n};\n\nvar $equal = function(a, b, type) {\n  if (type === $jsObjectPtr) {\n    return a === b;\n  }\n  switch (type.kind) {\n  case $kindComplex64:\n  case $kindComplex128:\n    return a.$real === b.$real && a.$imag === b.$imag;\n  case $kindInt64:\n  case $kindUint64:\n    return a.$high === b.$high && a.$low === b.$low;\n  case $kindArray:\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (var i = 0; i < a.length; i++) {\n      if (!$equal(a[i], b[i], type.elem)) {\n        return false;\n      }\n    }\n    return true;\n  case $kindStruct:\n    for (var i = 0; i < type.fields.length; i++) {\n      var f = type.fields[i];\n      if (!$equal(a[f.prop], b[f.prop], f.typ)) {\n        return false;\n      }\n    }\n    return true;\n  case $kindInterface:\n    return $interfaceIsEqual(a, b);\n  default:\n    return a === b;\n  }\n};\n\nvar $interfaceIsEqual = function(a, b) {\n  if (a === $ifaceNil || b === $ifaceNil) {\n    return a === b;\n  }\n  if (a.constructor !== b.constructor) {\n    return false;\n  }\n  if (!a.constructor.comparable) {\n    $throwRuntimeError(\"comparing uncomparable type \" + a.constructor.string);\n  }\n  return $equal(a.$val, b.$val, a.constructor);\n};\n\nvar $kindBool = 1;\nvar $kindInt = 2;\nvar $kindInt8 = 3;\nvar $kindInt16 = 4;\nvar $kindInt32 = 5;\nvar $kindInt64 = 6;\nvar $kindUint = 7;\nvar $kindUint8 = 8;\nvar $kindUint16 = 9;\nvar $kindUint32 = 10;\nvar $kindUint64 = 11;\nvar $kindUintptr = 12;\nvar $kindFloat32 = 13;\nvar $kindFloat64 = 14;\nvar $kindComplex64 = 15;\nvar $kindComplex128 = 16;\nvar $kindArray = 17;\nvar $kindChan = 18;\nvar $kindFunc = 19;\nvar $kindInterface = 20;\nvar $kindMap = 21;\nvar $kindPtr = 22;\nvar $kindSlice = 23;\nvar $kindString = 24;\nvar $kindStruct = 25;\nvar $kindUnsafePointer = 26;\n\nvar $methodSynthesizers = [];\nvar $addMethodSynthesizer = function(f) {\n  if ($methodSynthesizers === null) {\n    f();\n    return;\n  }\n  $methodSynthesizers.push(f);\n};\nvar $synthesizeMethods = function() {\n  $methodSynthesizers.forEach(function(f) { f(); });\n  $methodSynthesizers = null;\n};\n\nvar $newType = function(size, kind, string, name, pkg, constructor) {\n  var typ;\n  switch(kind) {\n  case $kindBool:\n  case $kindInt:\n  case $kindInt8:\n  case $kindInt16:\n  case $kindInt32:\n  case $kindUint:\n  case $kindUint8:\n  case $kindUint16:\n  case $kindUint32:\n  case $kindUintptr:\n  case $kindString:\n  case $kindUnsafePointer:\n    typ = function(v) { this.$val = v; };\n    typ.prototype.$key = function() { return string + \"$\" + this.$val; };\n    break;\n\n  case $kindFloat32:\n  case $kindFloat64:\n    typ = function(v) { this.$val = v; };\n    typ.prototype.$key = function() { return string + \"$\" + $floatKey(this.$val); };\n    break;\n\n  case $kindInt64:\n    typ = function(high, low) {\n      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;\n      this.$low = low >>> 0;\n      this.$val = this;\n    };\n    typ.prototype.$key = function() { return string + \"$\" + this.$high + \"$\" + this.$low; };\n    break;\n\n  case $kindUint64:\n    typ = function(high, low) {\n      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;\n      this.$low = low >>> 0;\n      this.$val = this;\n    };\n    typ.prototype.$key = function() { return string + \"$\" + this.$high + \"$\" + this.$low; };\n    break;\n\n  case $kindComplex64:\n    typ = function(real, imag) {\n      this.$real = $fround(real);\n      this.$imag = $fround(imag);\n      this.$val = this;\n    };\n    typ.prototype.$key = function() { return string + \"$\" + this.$real + \"$\" + this.$imag; };\n    break;\n\n  case $kindComplex128:\n    typ = function(real, imag) {\n      this.$real = real;\n      this.$imag = imag;\n      this.$val = this;\n    };\n    typ.prototype.$key = function() { return string + \"$\" + this.$real + \"$\" + this.$imag; };\n    break;\n\n  case $kindArray:\n    typ = function(v) { this.$val = v; };\n    typ.ptr = $newType(4, $kindPtr, \"*\" + string, \"\", \"\", function(array) {\n      this.$get = function() { return array; };\n      this.$set = function(v) { $copy(this, v, typ); };\n      this.$val = array;\n    });\n    typ.init = function(elem, len) {\n      typ.elem = elem;\n      typ.len = len;\n      typ.comparable = elem.comparable;\n      typ.prototype.$key = function() {\n        return string + \"$\" + Array.prototype.join.call($mapArray(this.$val, function(e) {\n          var key = e.$key ? e.$key() : String(e);\n          return key.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\$/g, \"\\\\$\");\n        }), \"$\");\n      };\n      typ.ptr.init(typ);\n      Object.defineProperty(typ.ptr.nil, \"nilCheck\", { get: $throwNilPointerError });\n    };\n    break;\n\n  case $kindChan:\n    typ = function(capacity) {\n      this.$val = this;\n      this.$capacity = capacity;\n      this.$buffer = [];\n      this.$sendQueue = [];\n      this.$recvQueue = [];\n      this.$closed = false;\n    };\n    typ.prototype.$key = function() {\n      if (this.$id === undefined) {\n        $idCounter++;\n        this.$id = $idCounter;\n      }\n      return String(this.$id);\n    };\n    typ.init = function(elem, sendOnly, recvOnly) {\n      typ.elem = elem;\n      typ.sendOnly = sendOnly;\n      typ.recvOnly = recvOnly;\n      typ.nil = new typ(0);\n      typ.nil.$sendQueue = typ.nil.$recvQueue = { length: 0, push: function() {}, shift: function() { return undefined; }, indexOf: function() { return -1; } };\n    };\n    break;\n\n  case $kindFunc:\n    typ = function(v) { this.$val = v; };\n    typ.init = function(params, results, variadic) {\n      typ.params = params;\n      typ.results = results;\n      typ.variadic = variadic;\n      typ.comparable = false;\n    };\n    break;\n\n  case $kindInterface:\n    typ = { implementedBy: {}, missingMethodFor: {} };\n    typ.init = function(methods) {\n      typ.methods = methods;\n      methods.forEach(function(m) {\n        $ifaceNil[m.prop] = $throwNilPointerError;\n      });\n    };\n    break;\n\n  case $kindMap:\n    typ = function(v) { this.$val = v; };\n    typ.init = function(key, elem) {\n      typ.key = key;\n      typ.elem = elem;\n      typ.comparable = false;\n    };\n    break;\n\n  case $kindPtr:\n    typ = constructor || function(getter, setter, target) {\n      this.$get = getter;\n      this.$set = setter;\n      this.$target = target;\n      this.$val = this;\n    };\n    typ.prototype.$key = function() {\n      if (this.$id === undefined) {\n        $idCounter++;\n        this.$id = $idCounter;\n      }\n      return String(this.$id);\n    };\n    typ.init = function(elem) {\n      typ.elem = elem;\n      typ.nil = new typ($throwNilPointerError, $throwNilPointerError);\n    };\n    break;\n\n  case $kindSlice:\n    typ = function(array) {\n      if (array.constructor !== typ.nativeArray) {\n        array = new typ.nativeArray(array);\n      }\n      this.$array = array;\n      this.$offset = 0;\n      this.$length = array.length;\n      this.$capacity = array.length;\n      this.$val = this;\n    };\n    typ.init = function(elem) {\n      typ.elem = elem;\n      typ.comparable = false;\n      typ.nativeArray = $nativeArray(elem.kind);\n      typ.nil = new typ([]);\n    };\n    break;\n\n  case $kindStruct:\n    typ = function(v) { this.$val = v; };\n    typ.ptr = $newType(4, $kindPtr, \"*\" + string, \"\", \"\", constructor);\n    typ.ptr.elem = typ;\n    typ.ptr.prototype.$get = function() { return this; };\n    typ.ptr.prototype.$set = function(v) { $copy(this, v, typ); };\n    typ.init = function(fields) {\n      typ.fields = fields;\n      fields.forEach(function(f) {\n        if (!f.typ.comparable) {\n          typ.comparable = false;\n        }\n      });\n      typ.prototype.$key = function() {\n        var val = this.$val;\n        return string + \"$\" + $mapArray(fields, function(f) {\n          var e = val[f.prop];\n          var key = e.$key ? e.$key() : String(e);\n          return key.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\$/g, \"\\\\$\");\n        }).join(\"$\");\n      };\n      /* nil value */\n      var properties = {};\n      fields.forEach(function(f) {\n        properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };\n      });\n      typ.ptr.nil = Object.create(constructor.prototype, properties);\n      typ.ptr.nil.$val = typ.ptr.nil;\n      /* methods for embedded fields */\n      $addMethodSynthesizer(function() {\n        var synthesizeMethod = function(target, m, f) {\n          if (target.prototype[m.prop] !== undefined) { return; }\n          target.prototype[m.prop] = function() {\n            var v = this.$val[f.prop];\n            if (f.typ === $jsObjectPtr) {\n              v = new $jsObjectPtr(v);\n            }\n            if (v.$val === undefined) {\n              v = new f.typ(v);\n            }\n            return v[m.prop].apply(v, arguments);\n          };\n        };\n        fields.forEach(function(f) {\n          if (f.name === \"\") {\n            $methodSet(f.typ).forEach(function(m) {\n              synthesizeMethod(typ, m, f);\n              synthesizeMethod(typ.ptr, m, f);\n            });\n            $methodSet($ptrType(f.typ)).forEach(function(m) {\n              synthesizeMethod(typ.ptr, m, f);\n            });\n          }\n        });\n      });\n    };\n    break;\n\n  default:\n    $panic(new $String(\"invalid kind: \" + kind));\n  }\n\n  switch (kind) {\n  case $kindBool:\n  case $kindMap:\n    typ.zero = function() { return false; };\n    break;\n\n  case $kindInt:\n  case $kindInt8:\n  case $kindInt16:\n  case $kindInt32:\n  case $kindUint:\n  case $kindUint8 :\n  case $kindUint16:\n  case $kindUint32:\n  case $kindUintptr:\n  case $kindUnsafePointer:\n  case $kindFloat32:\n  case $kindFloat64:\n    typ.zero = function() { return 0; };\n    break;\n\n  case $kindString:\n    typ.zero = function() { return \"\"; };\n    break;\n\n  case $kindInt64:\n  case $kindUint64:\n  case $kindComplex64:\n  case $kindComplex128:\n    var zero = new typ(0, 0);\n    typ.zero = function() { return zero; };\n    break;\n\n  case $kindChan:\n  case $kindPtr:\n  case $kindSlice:\n    typ.zero = function() { return typ.nil; };\n    break;\n\n  case $kindFunc:\n    typ.zero = function() { return $throwNilPointerError; };\n    break;\n\n  case $kindInterface:\n    typ.zero = function() { return $ifaceNil; };\n    break;\n\n  case $kindArray:\n    typ.zero = function() {\n      var arrayClass = $nativeArray(typ.elem.kind);\n      if (arrayClass !== Array) {\n        return new arrayClass(typ.len);\n      }\n      var array = new Array(typ.len);\n      for (var i = 0; i < typ.len; i++) {\n        array[i] = typ.elem.zero();\n      }\n      return array;\n    };\n    break;\n\n  case $kindStruct:\n    typ.zero = function() { return new typ.ptr(); };\n    break;\n\n  default:\n    $panic(new $String(\"invalid kind: \" + kind));\n  }\n\n  typ.size = size;\n  typ.kind = kind;\n  typ.string = string;\n  typ.typeName = name;\n  typ.pkg = pkg;\n  typ.methods = [];\n  typ.methodSetCache = null;\n  typ.comparable = true;\n  return typ;\n};\n\nvar $methodSet = function(typ) {\n  if (typ.methodSetCache !== null) {\n    return typ.methodSetCache;\n  }\n  var base = {};\n\n  var isPtr = (typ.kind === $kindPtr);\n  if (isPtr && typ.elem.kind === $kindInterface) {\n    typ.methodSetCache = [];\n    return [];\n  }\n\n  var current = [{typ: isPtr ? typ.elem : typ, indirect: isPtr}];\n\n  var seen = {};\n\n  while (current.length > 0) {\n    var next = [];\n    var mset = [];\n\n    current.forEach(function(e) {\n      if (seen[e.typ.string]) {\n        return;\n      }\n      seen[e.typ.string] = true;\n\n      if(e.typ.typeName !== \"\") {\n        mset = mset.concat(e.typ.methods);\n        if (e.indirect) {\n          mset = mset.concat($ptrType(e.typ).methods);\n        }\n      }\n\n      switch (e.typ.kind) {\n      case $kindStruct:\n        e.typ.fields.forEach(function(f) {\n          if (f.name === \"\") {\n            var fTyp = f.typ;\n            var fIsPtr = (fTyp.kind === $kindPtr);\n            next.push({typ: fIsPtr ? fTyp.elem : fTyp, indirect: e.indirect || fIsPtr});\n          }\n        });\n        break;\n\n      case $kindInterface:\n        mset = mset.concat(e.typ.methods);\n        break;\n      }\n    });\n\n    mset.forEach(function(m) {\n      if (base[m.name] === undefined) {\n        base[m.name] = m;\n      }\n    });\n\n    current = next;\n  }\n\n  typ.methodSetCache = [];\n  Object.keys(base).sort().forEach(function(name) {\n    typ.methodSetCache.push(base[name]);\n  });\n  return typ.methodSetCache;\n};\n\nvar $Bool          = $newType( 1, $kindBool,          \"bool\",           \"bool\",       \"\", null);\nvar $Int           = $newType( 4, $kindInt,           \"int\",            \"int\",        \"\", null);\nvar $Int8          = $newType( 1, $kindInt8,          \"int8\",           \"int8\",       \"\", null);\nvar $Int16         = $newType( 2, $kindInt16,         \"int16\",          \"int16\",      \"\", null);\nvar $Int32         = $newType( 4, $kindInt32,         \"int32\",          \"int32\",      \"\", null);\nvar $Int64         = $newType( 8, $kindInt64,         \"int64\",          \"int64\",      \"\", null);\nvar $Uint          = $newType( 4, $kindUint,          \"uint\",           \"uint\",       \"\", null);\nvar $Uint8         = $newType( 1, $kindUint8,         \"uint8\",          \"uint8\",      \"\", null);\nvar $Uint16        = $newType( 2, $kindUint16,        \"uint16\",         \"uint16\",     \"\", null);\nvar $Uint32        = $newType( 4, $kindUint32,        \"uint32\",         \"uint32\",     \"\", null);\nvar $Uint64        = $newType( 8, $kindUint64,        \"uint64\",         \"uint64\",     \"\", null);\nvar $Uintptr       = $newType( 4, $kindUintptr,       \"uintptr\",        \"uintptr\",    \"\", null);\nvar $Float32       = $newType( 4, $kindFloat32,       \"float32\",        \"float32\",    \"\", null);\nvar $Float64       = $newType( 8, $kindFloat64,       \"float64\",        \"float64\",    \"\", null);\nvar $Complex64     = $newType( 8, $kindComplex64,     \"complex64\",      \"complex64\",  \"\", null);\nvar $Complex128    = $newType(16, $kindComplex128,    \"complex128\",     \"complex128\", \"\", null);\nvar $String        = $newType( 8, $kindString,        \"string\",         \"string\",     \"\", null);\nvar $UnsafePointer = $newType( 4, $kindUnsafePointer, \"unsafe.Pointer\", \"Pointer\",    \"\", null);\n\nvar $nativeArray = function(elemKind) {\n  switch (elemKind) {\n  case $kindInt:\n    return Int32Array;\n  case $kindInt8:\n    return Int8Array;\n  case $kindInt16:\n    return Int16Array;\n  case $kindInt32:\n    return Int32Array;\n  case $kindUint:\n    return Uint32Array;\n  case $kindUint8:\n    return Uint8Array;\n  case $kindUint16:\n    return Uint16Array;\n  case $kindUint32:\n    return Uint32Array;\n  case $kindUintptr:\n    return Uint32Array;\n  case $kindFloat32:\n    return Float32Array;\n  case $kindFloat64:\n    return Float64Array;\n  default:\n    return Array;\n  }\n};\nvar $toNativeArray = function(elemKind, array) {\n  var nativeArray = $nativeArray(elemKind);\n  if (nativeArray === Array) {\n    return array;\n  }\n  return new nativeArray(array);\n};\nvar $arrayTypes = {};\nvar $arrayType = function(elem, len) {\n  var string = \"[\" + len + \"]\" + elem.string;\n  var typ = $arrayTypes[string];\n  if (typ === undefined) {\n    typ = $newType(12, $kindArray, string, \"\", \"\", null);\n    $arrayTypes[string] = typ;\n    typ.init(elem, len);\n  }\n  return typ;\n};\n\nvar $chanType = function(elem, sendOnly, recvOnly) {\n  var string = (recvOnly ? \"<-\" : \"\") + \"chan\" + (sendOnly ? \"<- \" : \" \") + elem.string;\n  var field = sendOnly ? \"SendChan\" : (recvOnly ? \"RecvChan\" : \"Chan\");\n  var typ = elem[field];\n  if (typ === undefined) {\n    typ = $newType(4, $kindChan, string, \"\", \"\", null);\n    elem[field] = typ;\n    typ.init(elem, sendOnly, recvOnly);\n  }\n  return typ;\n};\n\nvar $funcTypes = {};\nvar $funcType = function(params, results, variadic) {\n  var paramTypes = $mapArray(params, function(p) { return p.string; });\n  if (variadic) {\n    paramTypes[paramTypes.length - 1] = \"...\" + paramTypes[paramTypes.length - 1].substr(2);\n  }\n  var string = \"func(\" + paramTypes.join(\", \") + \")\";\n  if (results.length === 1) {\n    string += \" \" + results[0].string;\n  } else if (results.length > 1) {\n    string += \" (\" + $mapArray(results, function(r) { return r.string; }).join(\", \") + \")\";\n  }\n  var typ = $funcTypes[string];\n  if (typ === undefined) {\n    typ = $newType(4, $kindFunc, string, \"\", \"\", null);\n    $funcTypes[string] = typ;\n    typ.init(params, results, variadic);\n  }\n  return typ;\n};\n\nvar $interfaceTypes = {};\nvar $interfaceType = function(methods) {\n  var string = \"interface {}\";\n  if (methods.length !== 0) {\n    string = \"interface { \" + $mapArray(methods, function(m) {\n      return (m.pkg !== \"\" ? m.pkg + \".\" : \"\") + m.name + m.typ.string.substr(4);\n    }).join(\"; \") + \" }\";\n  }\n  var typ = $interfaceTypes[string];\n  if (typ === undefined) {\n    typ = $newType(8, $kindInterface, string, \"\", \"\", null);\n    $interfaceTypes[string] = typ;\n    typ.init(methods);\n  }\n  return typ;\n};\nvar $emptyInterface = $interfaceType([]);\nvar $ifaceNil = { $key: function() { return \"nil\"; } };\nvar $error = $newType(8, $kindInterface, \"error\", \"error\", \"\", null);\n$error.init([{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}]);\n\nvar $Map = function() {};\n(function() {\n  var names = Object.getOwnPropertyNames(Object.prototype);\n  for (var i = 0; i < names.length; i++) {\n    $Map.prototype[names[i]] = undefined;\n  }\n})();\nvar $mapTypes = {};\nvar $mapType = function(key, elem) {\n  var string = \"map[\" + key.string + \"]\" + elem.string;\n  var typ = $mapTypes[string];\n  if (typ === undefined) {\n    typ = $newType(4, $kindMap, string, \"\", \"\", null);\n    $mapTypes[string] = typ;\n    typ.init(key, elem);\n  }\n  return typ;\n};\n\nvar $ptrType = function(elem) {\n  var typ = elem.ptr;\n  if (typ === undefined) {\n    typ = $newType(4, $kindPtr, \"*\" + elem.string, \"\", \"\", null);\n    elem.ptr = typ;\n    typ.init(elem);\n  }\n  return typ;\n};\n\nvar $newDataPointer = function(data, constructor) {\n  if (constructor.elem.kind === $kindStruct) {\n    return data;\n  }\n  return new constructor(function() { return data; }, function(v) { data = v; });\n};\n\nvar $indexPtr = function(array, index, constructor) {\n  array.$ptr = array.$ptr || {};\n  return array.$ptr[index] || (array.$ptr[index] = new constructor(function() { return array[index]; }, function(v) { array[index] = v; }));\n};\n\nvar $sliceType = function(elem) {\n  var typ = elem.Slice;\n  if (typ === undefined) {\n    typ = $newType(12, $kindSlice, \"[]\" + elem.string, \"\", \"\", null);\n    elem.Slice = typ;\n    typ.init(elem);\n  }\n  return typ;\n};\nvar $makeSlice = function(typ, length, capacity) {\n  capacity = capacity || length;\n  var array = new typ.nativeArray(capacity);\n  if (typ.nativeArray === Array) {\n    for (var i = 0; i < capacity; i++) {\n      array[i] = typ.elem.zero();\n    }\n  }\n  var slice = new typ(array);\n  slice.$length = length;\n  return slice;\n};\n\nvar $structTypes = {};\nvar $structType = function(fields) {\n  var string = \"struct { \" + $mapArray(fields, function(f) {\n    return f.name + \" \" + f.typ.string + (f.tag !== \"\" ? (\" \\\"\" + f.tag.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"\") : \"\");\n  }).join(\"; \") + \" }\";\n  if (fields.length === 0) {\n    string = \"struct {}\";\n  }\n  var typ = $structTypes[string];\n  if (typ === undefined) {\n    typ = $newType(0, $kindStruct, string, \"\", \"\", function() {\n      this.$val = this;\n      for (var i = 0; i < fields.length; i++) {\n        var f = fields[i];\n        var arg = arguments[i];\n        this[f.prop] = arg !== undefined ? arg : f.typ.zero();\n      }\n    });\n    $structTypes[string] = typ;\n    typ.init(fields);\n  }\n  return typ;\n};\n\nvar $assertType = function(value, type, returnTuple) {\n  var isInterface = (type.kind === $kindInterface), ok, missingMethod = \"\";\n  if (value === $ifaceNil) {\n    ok = false;\n  } else if (!isInterface) {\n    ok = value.constructor === type;\n  } else {\n    var valueTypeString = value.constructor.string;\n    ok = type.implementedBy[valueTypeString];\n    if (ok === undefined) {\n      ok = true;\n      var valueMethodSet = $methodSet(value.constructor);\n      var interfaceMethods = type.methods;\n      for (var i = 0; i < interfaceMethods.length; i++) {\n        var tm = interfaceMethods[i];\n        var found = false;\n        for (var j = 0; j < valueMethodSet.length; j++) {\n          var vm = valueMethodSet[j];\n          if (vm.name === tm.name && vm.pkg === tm.pkg && vm.typ === tm.typ) {\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          ok = false;\n          type.missingMethodFor[valueTypeString] = tm.name;\n          break;\n        }\n      }\n      type.implementedBy[valueTypeString] = ok;\n    }\n    if (!ok) {\n      missingMethod = type.missingMethodFor[valueTypeString];\n    }\n  }\n\n  if (!ok) {\n    if (returnTuple) {\n      return [type.zero(), false];\n    }\n    $panic(new $packages[\"runtime\"].TypeAssertionError.ptr(\"\", (value === $ifaceNil ? \"\" : value.constructor.string), type.string, missingMethod));\n  }\n\n  if (!isInterface) {\n    value = value.$val;\n  }\n  if (type === $jsObjectPtr) {\n    value = value.object;\n  }\n  return returnTuple ? [value, true] : value;\n};\n\nvar $floatKey = function(f) {\n  if (f !== f) {\n    $idCounter++;\n    return \"NaN$\" + $idCounter;\n  }\n  return String(f);\n};\n\nvar $flatten64 = function(x) {\n  return x.$high * 4294967296 + x.$low;\n};\n\nvar $shiftLeft64 = function(x, y) {\n  if (y === 0) {\n    return x;\n  }\n  if (y < 32) {\n    return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);\n  }\n  if (y < 64) {\n    return new x.constructor(x.$low << (y - 32), 0);\n  }\n  return new x.constructor(0, 0);\n};\n\nvar $shiftRightInt64 = function(x, y) {\n  if (y === 0) {\n    return x;\n  }\n  if (y < 32) {\n    return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);\n  }\n  if (y < 64) {\n    return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);\n  }\n  if (x.$high < 0) {\n    return new x.constructor(-1, 4294967295);\n  }\n  return new x.constructor(0, 0);\n};\n\nvar $shiftRightUint64 = function(x, y) {\n  if (y === 0) {\n    return x;\n  }\n  if (y < 32) {\n    return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);\n  }\n  if (y < 64) {\n    return new x.constructor(0, x.$high >>> (y - 32));\n  }\n  return new x.constructor(0, 0);\n};\n\nvar $mul64 = function(x, y) {\n  var high = 0, low = 0;\n  if ((y.$low & 1) !== 0) {\n    high = x.$high;\n    low = x.$low;\n  }\n  for (var i = 1; i < 32; i++) {\n    if ((y.$low & 1<<i) !== 0) {\n      high += x.$high << i | x.$low >>> (32 - i);\n      low += (x.$low << i) >>> 0;\n    }\n  }\n  for (var i = 0; i < 32; i++) {\n    if ((y.$high & 1<<i) !== 0) {\n      high += x.$low << i;\n    }\n  }\n  return new x.constructor(high, low);\n};\n\nvar $div64 = function(x, y, returnRemainder) {\n  if (y.$high === 0 && y.$low === 0) {\n    $throwRuntimeError(\"integer divide by zero\");\n  }\n\n  var s = 1;\n  var rs = 1;\n\n  var xHigh = x.$high;\n  var xLow = x.$low;\n  if (xHigh < 0) {\n    s = -1;\n    rs = -1;\n    xHigh = -xHigh;\n    if (xLow !== 0) {\n      xHigh--;\n      xLow = 4294967296 - xLow;\n    }\n  }\n\n  var yHigh = y.$high;\n  var yLow = y.$low;\n  if (y.$high < 0) {\n    s *= -1;\n    yHigh = -yHigh;\n    if (yLow !== 0) {\n      yHigh--;\n      yLow = 4294967296 - yLow;\n    }\n  }\n\n  var high = 0, low = 0, n = 0;\n  while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {\n    yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;\n    yLow = (yLow << 1) >>> 0;\n    n++;\n  }\n  for (var i = 0; i <= n; i++) {\n    high = high << 1 | low >>> 31;\n    low = (low << 1) >>> 0;\n    if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {\n      xHigh = xHigh - yHigh;\n      xLow = xLow - yLow;\n      if (xLow < 0) {\n        xHigh--;\n        xLow += 4294967296;\n      }\n      low++;\n      if (low === 4294967296) {\n        high++;\n        low = 0;\n      }\n    }\n    yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;\n    yHigh = yHigh >>> 1;\n  }\n\n  if (returnRemainder) {\n    return new x.constructor(xHigh * rs, xLow * rs);\n  }\n  return new x.constructor(high * s, low * s);\n};\n\nvar $divComplex = function(n, d) {\n  var ninf = n.$real === 1/0 || n.$real === -1/0 || n.$imag === 1/0 || n.$imag === -1/0;\n  var dinf = d.$real === 1/0 || d.$real === -1/0 || d.$imag === 1/0 || d.$imag === -1/0;\n  var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);\n  var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);\n  if(nnan || dnan) {\n    return new n.constructor(0/0, 0/0);\n  }\n  if (ninf && !dinf) {\n    return new n.constructor(1/0, 1/0);\n  }\n  if (!ninf && dinf) {\n    return new n.constructor(0, 0);\n  }\n  if (d.$real === 0 && d.$imag === 0) {\n    if (n.$real === 0 && n.$imag === 0) {\n      return new n.constructor(0/0, 0/0);\n    }\n    return new n.constructor(1/0, 1/0);\n  }\n  var a = Math.abs(d.$real);\n  var b = Math.abs(d.$imag);\n  if (a <= b) {\n    var ratio = d.$real / d.$imag;\n    var denom = d.$real * ratio + d.$imag;\n    return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);\n  }\n  var ratio = d.$imag / d.$real;\n  var denom = d.$imag * ratio + d.$real;\n  return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);\n};\n\nvar $stackDepthOffset = 0;\nvar $getStackDepth = function() {\n  var err = new Error();\n  if (err.stack === undefined) {\n    return undefined;\n  }\n  return $stackDepthOffset + err.stack.split(\"\\n\").length;\n};\n\nvar $panicStackDepth = null, $panicValue;\nvar $callDeferred = function(deferred, jsErr, fromPanic) {\n  if (!fromPanic && deferred !== null && deferred.index >= $curGoroutine.deferStack.length) {\n    throw jsErr;\n  }\n  if (jsErr !== null) {\n    var newErr = null;\n    try {\n      $curGoroutine.deferStack.push(deferred);\n      $panic(new $jsErrorPtr(jsErr));\n    } catch (err) {\n      newErr = err;\n    }\n    $curGoroutine.deferStack.pop();\n    $callDeferred(deferred, newErr);\n    return;\n  }\n  if ($curGoroutine.asleep) {\n    return;\n  }\n\n  $stackDepthOffset--;\n  var outerPanicStackDepth = $panicStackDepth;\n  var outerPanicValue = $panicValue;\n\n  var localPanicValue = $curGoroutine.panicStack.pop();\n  if (localPanicValue !== undefined) {\n    $panicStackDepth = $getStackDepth();\n    $panicValue = localPanicValue;\n  }\n\n  try {\n    while (true) {\n      if (deferred === null) {\n        deferred = $curGoroutine.deferStack[$curGoroutine.deferStack.length - 1];\n        if (deferred === undefined) {\n          if (localPanicValue.Object instanceof Error) {\n            throw localPanicValue.Object;\n          }\n          var msg;\n          if (localPanicValue.constructor === $String) {\n            msg = localPanicValue.$val;\n          } else if (localPanicValue.Error !== undefined) {\n            msg = localPanicValue.Error();\n          } else if (localPanicValue.String !== undefined) {\n            msg = localPanicValue.String();\n          } else {\n            msg = localPanicValue;\n          }\n          throw new Error(msg);\n        }\n      }\n      var call = deferred.pop();\n      if (call === undefined) {\n        $curGoroutine.deferStack.pop();\n        if (localPanicValue !== undefined) {\n          deferred = null;\n          continue;\n        }\n        return;\n      }\n      var r = call[0].apply(call[2], call[1]);\n      if (r && r.$blk !== undefined) {\n        deferred.push([r.$blk, [], r]);\n        if (fromPanic) {\n          throw null;\n        }\n        return;\n      }\n\n      if (localPanicValue !== undefined && $panicStackDepth === null) {\n        throw null; /* error was recovered */\n      }\n    }\n  } finally {\n    if (localPanicValue !== undefined) {\n      if ($panicStackDepth !== null) {\n        $curGoroutine.panicStack.push(localPanicValue);\n      }\n      $panicStackDepth = outerPanicStackDepth;\n      $panicValue = outerPanicValue;\n    }\n    $stackDepthOffset++;\n  }\n};\n\nvar $panic = function(value) {\n  $curGoroutine.panicStack.push(value);\n  $callDeferred(null, null, true);\n};\nvar $recover = function() {\n  if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {\n    return $ifaceNil;\n  }\n  $panicStackDepth = null;\n  return $panicValue;\n};\nvar $throw = function(err) { throw err; };\n\nvar $dummyGoroutine = { asleep: false, exit: false, deferStack: [], panicStack: [], canBlock: false };\nvar $curGoroutine = $dummyGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true;\nvar $go = function(fun, args, direct) {\n  $totalGoroutines++;\n  $awakeGoroutines++;\n  var $goroutine = function() {\n    var rescheduled = false;\n    try {\n      $curGoroutine = $goroutine;\n      var r = fun.apply(undefined, args);\n      if (r && r.$blk !== undefined) {\n        fun = function() { r.$blk(); };\n        args = [];\n        rescheduled = true;\n        return;\n      }\n      $goroutine.exit = true;\n    } catch (err) {\n      $goroutine.exit = true;\n      throw err;\n    } finally {\n      $curGoroutine = $dummyGoroutine;\n      if ($goroutine.exit && !rescheduled) { /* also set by runtime.Goexit() */\n        $totalGoroutines--;\n        $goroutine.asleep = true;\n      }\n      if ($goroutine.asleep && !rescheduled) {\n        $awakeGoroutines--;\n        if ($awakeGoroutines === 0 && $totalGoroutines !== 0 && $checkForDeadlock) {\n          console.error(\"fatal error: all goroutines are asleep - deadlock!\");\n        }\n      }\n    }\n  };\n  $goroutine.asleep = false;\n  $goroutine.exit = false;\n  $goroutine.deferStack = [];\n  $goroutine.panicStack = [];\n  $goroutine.canBlock = true;\n  $schedule($goroutine, direct);\n};\n\nvar $scheduled = [], $schedulerLoopActive = false;\nvar $schedule = function(goroutine, direct) {\n  if (goroutine.asleep) {\n    goroutine.asleep = false;\n    $awakeGoroutines++;\n  }\n\n  if (direct) {\n    goroutine();\n    return;\n  }\n\n  $scheduled.push(goroutine);\n  if (!$schedulerLoopActive) {\n    $schedulerLoopActive = true;\n    setTimeout(function() {\n      while (true) {\n        var r = $scheduled.shift();\n        if (r === undefined) {\n          $schedulerLoopActive = false;\n          break;\n        }\n        r();\n      };\n    }, 0);\n  }\n};\n\nvar $block = function() {\n  if (!$curGoroutine.canBlock) {\n    $throwRuntimeError(\"cannot block in JavaScript callback, fix by wrapping code in goroutine\");\n  }\n  $curGoroutine.asleep = true;\n};\n\nvar $send = function(chan, value) {\n  if (chan.$closed) {\n    $throwRuntimeError(\"send on closed channel\");\n  }\n  var queuedRecv = chan.$recvQueue.shift();\n  if (queuedRecv !== undefined) {\n    queuedRecv([value, true]);\n    return;\n  }\n  if (chan.$buffer.length < chan.$capacity) {\n    chan.$buffer.push(value);\n    return;\n  }\n\n  var thisGoroutine = $curGoroutine;\n  chan.$sendQueue.push(function() {\n    $schedule(thisGoroutine);\n    return value;\n  });\n  $block();\n  return {\n    $blk: function() {\n      if (chan.$closed) {\n        $throwRuntimeError(\"send on closed channel\");\n      }\n    },\n  };\n};\nvar $recv = function(chan) {\n  var queuedSend = chan.$sendQueue.shift();\n  if (queuedSend !== undefined) {\n    chan.$buffer.push(queuedSend());\n  }\n  var bufferedValue = chan.$buffer.shift();\n  if (bufferedValue !== undefined) {\n    return [bufferedValue, true];\n  }\n  if (chan.$closed) {\n    return [chan.constructor.elem.zero(), false];\n  }\n\n  var thisGoroutine = $curGoroutine;\n  var f = { $blk: function() { return this.value; } };\n  var queueEntry = function(v) {\n    f.value = v;\n    $schedule(thisGoroutine);\n  };\n  chan.$recvQueue.push(queueEntry);\n  $block();\n  return f;\n};\nvar $close = function(chan) {\n  if (chan.$closed) {\n    $throwRuntimeError(\"close of closed channel\");\n  }\n  chan.$closed = true;\n  while (true) {\n    var queuedSend = chan.$sendQueue.shift();\n    if (queuedSend === undefined) {\n      break;\n    }\n    queuedSend(); /* will panic because of closed channel */\n  }\n  while (true) {\n    var queuedRecv = chan.$recvQueue.shift();\n    if (queuedRecv === undefined) {\n      break;\n    }\n    queuedRecv([chan.constructor.elem.zero(), false]);\n  }\n};\nvar $select = function(comms) {\n  var ready = [];\n  var selection = -1;\n  for (var i = 0; i < comms.length; i++) {\n    var comm = comms[i];\n    var chan = comm[0];\n    switch (comm.length) {\n    case 0: /* default */\n      selection = i;\n      break;\n    case 1: /* recv */\n      if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {\n        ready.push(i);\n      }\n      break;\n    case 2: /* send */\n      if (chan.$closed) {\n        $throwRuntimeError(\"send on closed channel\");\n      }\n      if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {\n        ready.push(i);\n      }\n      break;\n    }\n  }\n\n  if (ready.length !== 0) {\n    selection = ready[Math.floor(Math.random() * ready.length)];\n  }\n  if (selection !== -1) {\n    var comm = comms[selection];\n    switch (comm.length) {\n    case 0: /* default */\n      return [selection];\n    case 1: /* recv */\n      return [selection, $recv(comm[0])];\n    case 2: /* send */\n      $send(comm[0], comm[1]);\n      return [selection];\n    }\n  }\n\n  var entries = [];\n  var thisGoroutine = $curGoroutine;\n  var f = { $blk: function() { return this.selection; } };\n  var removeFromQueues = function() {\n    for (var i = 0; i < entries.length; i++) {\n      var entry = entries[i];\n      var queue = entry[0];\n      var index = queue.indexOf(entry[1]);\n      if (index !== -1) {\n        queue.splice(index, 1);\n      }\n    }\n  };\n  for (var i = 0; i < comms.length; i++) {\n    (function(i) {\n      var comm = comms[i];\n      switch (comm.length) {\n      case 1: /* recv */\n        var queueEntry = function(value) {\n          f.selection = [i, value];\n          removeFromQueues();\n          $schedule(thisGoroutine);\n        };\n        entries.push([comm[0].$recvQueue, queueEntry]);\n        comm[0].$recvQueue.push(queueEntry);\n        break;\n      case 2: /* send */\n        var queueEntry = function() {\n          if (comm[0].$closed) {\n            $throwRuntimeError(\"send on closed channel\");\n          }\n          f.selection = [i];\n          removeFromQueues();\n          $schedule(thisGoroutine);\n          return comm[1];\n        };\n        entries.push([comm[0].$sendQueue, queueEntry]);\n        comm[0].$sendQueue.push(queueEntry);\n        break;\n      }\n    })(i);\n  }\n  $block();\n  return f;\n};\n\nvar $jsObjectPtr, $jsErrorPtr;\n\nvar $needsExternalization = function(t) {\n  switch (t.kind) {\n    case $kindBool:\n    case $kindInt:\n    case $kindInt8:\n    case $kindInt16:\n    case $kindInt32:\n    case $kindUint:\n    case $kindUint8:\n    case $kindUint16:\n    case $kindUint32:\n    case $kindUintptr:\n    case $kindFloat32:\n    case $kindFloat64:\n      return false;\n    default:\n      return t !== $jsObjectPtr;\n  }\n};\n\nvar $externalize = function(v, t) {\n  if (t === $jsObjectPtr) {\n    return v;\n  }\n  switch (t.kind) {\n  case $kindBool:\n  case $kindInt:\n  case $kindInt8:\n  case $kindInt16:\n  case $kindInt32:\n  case $kindUint:\n  case $kindUint8:\n  case $kindUint16:\n  case $kindUint32:\n  case $kindUintptr:\n  case $kindFloat32:\n  case $kindFloat64:\n    return v;\n  case $kindInt64:\n  case $kindUint64:\n    return $flatten64(v);\n  case $kindArray:\n    if ($needsExternalization(t.elem)) {\n      return $mapArray(v, function(e) { return $externalize(e, t.elem); });\n    }\n    return v;\n  case $kindFunc:\n    return $externalizeFunction(v, t, false);\n  case $kindInterface:\n    if (v === $ifaceNil) {\n      return null;\n    }\n    if (v.constructor === $jsObjectPtr) {\n      return v.$val.object;\n    }\n    return $externalize(v.$val, v.constructor);\n  case $kindMap:\n    var m = {};\n    var keys = $keys(v);\n    for (var i = 0; i < keys.length; i++) {\n      var entry = v[keys[i]];\n      m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);\n    }\n    return m;\n  case $kindPtr:\n    if (v === t.nil) {\n      return null;\n    }\n    return $externalize(v.$get(), t.elem);\n  case $kindSlice:\n    if ($needsExternalization(t.elem)) {\n      return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });\n    }\n    return $sliceToArray(v);\n  case $kindString:\n    if (v.search(/^[\\x00-\\x7F]*$/) !== -1) {\n      return v;\n    }\n    var s = \"\", r;\n    for (var i = 0; i < v.length; i += r[1]) {\n      r = $decodeRune(v, i);\n      s += String.fromCharCode(r[0]);\n    }\n    return s;\n  case $kindStruct:\n    var timePkg = $packages[\"time\"];\n    if (timePkg && v.constructor === timePkg.Time.ptr) {\n      var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));\n      return new Date($flatten64(milli));\n    }\n\n    var noJsObject = {};\n    var searchJsObject = function(v, t) {\n      if (t === $jsObjectPtr) {\n        return v;\n      }\n      switch (t.kind) {\n      case $kindPtr:\n        if (v === t.nil) {\n          return noJsObject;\n        }\n        return searchJsObject(v.$get(), t.elem);\n      case $kindStruct:\n        var f = t.fields[0];\n        return searchJsObject(v[f.prop], f.typ);\n      case $kindInterface:\n        return searchJsObject(v.$val, v.constructor);\n      default:\n        return noJsObject;\n      }\n    };\n    var o = searchJsObject(v, t);\n    if (o !== noJsObject) {\n      return o;\n    }\n\n    o = {};\n    for (var i = 0; i < t.fields.length; i++) {\n      var f = t.fields[i];\n      if (f.pkg !== \"\") { /* not exported */\n        continue;\n      }\n      o[f.name] = $externalize(v[f.prop], f.typ);\n    }\n    return o;\n  }\n  $panic(new $String(\"cannot externalize \" + t.string));\n};\n\nvar $externalizeFunction = function(v, t, passThis) {\n  if (v === $throwNilPointerError) {\n    return null;\n  }\n  if (v.$externalizeWrapper === undefined) {\n    $checkForDeadlock = false;\n    v.$externalizeWrapper = function() {\n      var args = [];\n      for (var i = 0; i < t.params.length; i++) {\n        if (t.variadic && i === t.params.length - 1) {\n          var vt = t.params[i].elem, varargs = [];\n          for (var j = i; j < arguments.length; j++) {\n            varargs.push($internalize(arguments[j], vt));\n          }\n          args.push(new (t.params[i])(varargs));\n          break;\n        }\n        args.push($internalize(arguments[i], t.params[i]));\n      }\n      var canBlock = $curGoroutine.canBlock;\n      $curGoroutine.canBlock = false;\n      try {\n        var result = v.apply(passThis ? this : undefined, args);\n      } finally {\n        $curGoroutine.canBlock = canBlock;\n      }\n      switch (t.results.length) {\n      case 0:\n        return;\n      case 1:\n        return $externalize(result, t.results[0]);\n      default:\n        for (var i = 0; i < t.results.length; i++) {\n          result[i] = $externalize(result[i], t.results[i]);\n        }\n        return result;\n      }\n    };\n  }\n  return v.$externalizeWrapper;\n};\n\nvar $internalize = function(v, t, recv) {\n  if (t === $jsObjectPtr) {\n    return v;\n  }\n  if (t === $jsObjectPtr.elem) {\n    $panic(new $String(\"cannot internalize js.Object, use *js.Object instead\"));\n  }\n  switch (t.kind) {\n  case $kindBool:\n    return !!v;\n  case $kindInt:\n    return parseInt(v);\n  case $kindInt8:\n    return parseInt(v) << 24 >> 24;\n  case $kindInt16:\n    return parseInt(v) << 16 >> 16;\n  case $kindInt32:\n    return parseInt(v) >> 0;\n  case $kindUint:\n    return parseInt(v);\n  case $kindUint8:\n    return parseInt(v) << 24 >>> 24;\n  case $kindUint16:\n    return parseInt(v) << 16 >>> 16;\n  case $kindUint32:\n  case $kindUintptr:\n    return parseInt(v) >>> 0;\n  case $kindInt64:\n  case $kindUint64:\n    return new t(0, v);\n  case $kindFloat32:\n  case $kindFloat64:\n    return parseFloat(v);\n  case $kindArray:\n    if (v.length !== t.len) {\n      $throwRuntimeError(\"got array with wrong size from JavaScript native\");\n    }\n    return $mapArray(v, function(e) { return $internalize(e, t.elem); });\n  case $kindFunc:\n    return function() {\n      var args = [];\n      for (var i = 0; i < t.params.length; i++) {\n        if (t.variadic && i === t.params.length - 1) {\n          var vt = t.params[i].elem, varargs = arguments[i];\n          for (var j = 0; j < varargs.$length; j++) {\n            args.push($externalize(varargs.$array[varargs.$offset + j], vt));\n          }\n          break;\n        }\n        args.push($externalize(arguments[i], t.params[i]));\n      }\n      var result = v.apply(recv, args);\n      switch (t.results.length) {\n      case 0:\n        return;\n      case 1:\n        return $internalize(result, t.results[0]);\n      default:\n        for (var i = 0; i < t.results.length; i++) {\n          result[i] = $internalize(result[i], t.results[i]);\n        }\n        return result;\n      }\n    };\n  case $kindInterface:\n    if (t.methods.length !== 0) {\n      $panic(new $String(\"cannot internalize \" + t.string));\n    }\n    if (v === null) {\n      return $ifaceNil;\n    }\n    switch (v.constructor) {\n    case Int8Array:\n      return new ($sliceType($Int8))(v);\n    case Int16Array:\n      return new ($sliceType($Int16))(v);\n    case Int32Array:\n      return new ($sliceType($Int))(v);\n    case Uint8Array:\n      return new ($sliceType($Uint8))(v);\n    case Uint16Array:\n      return new ($sliceType($Uint16))(v);\n    case Uint32Array:\n      return new ($sliceType($Uint))(v);\n    case Float32Array:\n      return new ($sliceType($Float32))(v);\n    case Float64Array:\n      return new ($sliceType($Float64))(v);\n    case Array:\n      return $internalize(v, $sliceType($emptyInterface));\n    case Boolean:\n      return new $Bool(!!v);\n    case Date:\n      var timePkg = $packages[\"time\"];\n      if (timePkg) {\n        return new timePkg.Time(timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000)));\n      }\n    case Function:\n      var funcType = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], true);\n      return new funcType($internalize(v, funcType));\n    case Number:\n      return new $Float64(parseFloat(v));\n    case String:\n      return new $String($internalize(v, $String));\n    default:\n      if ($global.Node && v instanceof $global.Node) {\n        return new $jsObjectPtr(v);\n      }\n      var mapType = $mapType($String, $emptyInterface);\n      return new mapType($internalize(v, mapType));\n    }\n  case $kindMap:\n    var m = new $Map();\n    var keys = $keys(v);\n    for (var i = 0; i < keys.length; i++) {\n      var key = $internalize(keys[i], t.key);\n      m[key.$key ? key.$key() : key] = { k: key, v: $internalize(v[keys[i]], t.elem) };\n    }\n    return m;\n  case $kindPtr:\n    if (t.elem.kind === $kindStruct) {\n      return $internalize(v, t.elem);\n    }\n  case $kindSlice:\n    return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));\n  case $kindString:\n    v = String(v);\n    if (v.search(/^[\\x00-\\x7F]*$/) !== -1) {\n      return v;\n    }\n    var s = \"\";\n    for (var i = 0; i < v.length; i++) {\n      s += $encodeRune(v.charCodeAt(i));\n    }\n    return s;\n  case $kindStruct:\n    var noJsObject = {};\n    var searchJsObject = function(t) {\n      if (t === $jsObjectPtr) {\n        return v;\n      }\n      if (t === $jsObjectPtr.elem) {\n        $panic(new $String(\"cannot internalize js.Object, use *js.Object instead\"));\n      }\n      switch (t.kind) {\n      case $kindPtr:\n        return searchJsObject(t.elem);\n      case $kindStruct:\n        var f = t.fields[0];\n        var o = searchJsObject(f.typ);\n        if (o !== noJsObject) {\n          var n = new t.ptr();\n          n[f.prop] = o;\n          return n;\n        }\n        return noJsObject;\n      default:\n        return noJsObject;\n      }\n    };\n    var o = searchJsObject(t);\n    if (o !== noJsObject) {\n      return o;\n    }\n  }\n  $panic(new $String(\"cannot internalize \" + t.string));\n};\n\n$packages[\"github.com/gopherjs/gopherjs/js\"] = (function() {\n\tvar $pkg = {}, $init, Object, Error, sliceType, ptrType, ptrType$1, init;\n\tObject = $pkg.Object = $newType(0, $kindStruct, \"js.Object\", \"Object\", \"github.com/gopherjs/gopherjs/js\", function(object_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.object = null;\n\t\t\treturn;\n\t\t}\n\t\tthis.object = object_;\n\t});\n\tError = $pkg.Error = $newType(0, $kindStruct, \"js.Error\", \"Error\", \"github.com/gopherjs/gopherjs/js\", function(Object_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Object = null;\n\t\t\treturn;\n\t\t}\n\t\tthis.Object = Object_;\n\t});\n\tsliceType = $sliceType($emptyInterface);\n\tptrType = $ptrType(Object);\n\tptrType$1 = $ptrType(Error);\n\tObject.ptr.prototype.Get = function(key) {\n\t\tvar $ptr, key, o;\n\t\to = this;\n\t\treturn o.object[$externalize(key, $String)];\n\t};\n\tObject.prototype.Get = function(key) { return this.$val.Get(key); };\n\tObject.ptr.prototype.Set = function(key, value) {\n\t\tvar $ptr, key, o, value;\n\t\to = this;\n\t\to.object[$externalize(key, $String)] = $externalize(value, $emptyInterface);\n\t};\n\tObject.prototype.Set = function(key, value) { return this.$val.Set(key, value); };\n\tObject.ptr.prototype.Delete = function(key) {\n\t\tvar $ptr, key, o;\n\t\to = this;\n\t\tdelete o.object[$externalize(key, $String)];\n\t};\n\tObject.prototype.Delete = function(key) { return this.$val.Delete(key); };\n\tObject.ptr.prototype.Length = function() {\n\t\tvar $ptr, o;\n\t\to = this;\n\t\treturn $parseInt(o.object.length);\n\t};\n\tObject.prototype.Length = function() { return this.$val.Length(); };\n\tObject.ptr.prototype.Index = function(i) {\n\t\tvar $ptr, i, o;\n\t\to = this;\n\t\treturn o.object[i];\n\t};\n\tObject.prototype.Index = function(i) { return this.$val.Index(i); };\n\tObject.ptr.prototype.SetIndex = function(i, value) {\n\t\tvar $ptr, i, o, value;\n\t\to = this;\n\t\to.object[i] = $externalize(value, $emptyInterface);\n\t};\n\tObject.prototype.SetIndex = function(i, value) { return this.$val.SetIndex(i, value); };\n\tObject.ptr.prototype.Call = function(name, args) {\n\t\tvar $ptr, args, name, o, obj;\n\t\to = this;\n\t\treturn (obj = o.object, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType)));\n\t};\n\tObject.prototype.Call = function(name, args) { return this.$val.Call(name, args); };\n\tObject.ptr.prototype.Invoke = function(args) {\n\t\tvar $ptr, args, o;\n\t\to = this;\n\t\treturn o.object.apply(undefined, $externalize(args, sliceType));\n\t};\n\tObject.prototype.Invoke = function(args) { return this.$val.Invoke(args); };\n\tObject.ptr.prototype.New = function(args) {\n\t\tvar $ptr, args, o;\n\t\to = this;\n\t\treturn new ($global.Function.prototype.bind.apply(o.object, [undefined].concat($externalize(args, sliceType))));\n\t};\n\tObject.prototype.New = function(args) { return this.$val.New(args); };\n\tObject.ptr.prototype.Bool = function() {\n\t\tvar $ptr, o;\n\t\to = this;\n\t\treturn !!(o.object);\n\t};\n\tObject.prototype.Bool = function() { return this.$val.Bool(); };\n\tObject.ptr.prototype.String = function() {\n\t\tvar $ptr, o;\n\t\to = this;\n\t\treturn $internalize(o.object, $String);\n\t};\n\tObject.prototype.String = function() { return this.$val.String(); };\n\tObject.ptr.prototype.Int = function() {\n\t\tvar $ptr, o;\n\t\to = this;\n\t\treturn $parseInt(o.object) >> 0;\n\t};\n\tObject.prototype.Int = function() { return this.$val.Int(); };\n\tObject.ptr.prototype.Int64 = function() {\n\t\tvar $ptr, o;\n\t\to = this;\n\t\treturn $internalize(o.object, $Int64);\n\t};\n\tObject.prototype.Int64 = function() { return this.$val.Int64(); };\n\tObject.ptr.prototype.Uint64 = function() {\n\t\tvar $ptr, o;\n\t\to = this;\n\t\treturn $internalize(o.object, $Uint64);\n\t};\n\tObject.prototype.Uint64 = function() { return this.$val.Uint64(); };\n\tObject.ptr.prototype.Float = function() {\n\t\tvar $ptr, o;\n\t\to = this;\n\t\treturn $parseFloat(o.object);\n\t};\n\tObject.prototype.Float = function() { return this.$val.Float(); };\n\tObject.ptr.prototype.Interface = function() {\n\t\tvar $ptr, o;\n\t\to = this;\n\t\treturn $internalize(o.object, $emptyInterface);\n\t};\n\tObject.prototype.Interface = function() { return this.$val.Interface(); };\n\tObject.ptr.prototype.Unsafe = function() {\n\t\tvar $ptr, o;\n\t\to = this;\n\t\treturn o.object;\n\t};\n\tObject.prototype.Unsafe = function() { return this.$val.Unsafe(); };\n\tError.ptr.prototype.Error = function() {\n\t\tvar $ptr, err;\n\t\terr = this;\n\t\treturn \"JavaScript error: \" + $internalize(err.Object.message, $String);\n\t};\n\tError.prototype.Error = function() { return this.$val.Error(); };\n\tError.ptr.prototype.Stack = function() {\n\t\tvar $ptr, err;\n\t\terr = this;\n\t\treturn $internalize(err.Object.stack, $String);\n\t};\n\tError.prototype.Stack = function() { return this.$val.Stack(); };\n\tinit = function() {\n\t\tvar $ptr, e;\n\t\te = new Error.ptr(null);\n\t};\n\tptrType.methods = [{prop: \"Get\", name: \"Get\", pkg: \"\", typ: $funcType([$String], [ptrType], false)}, {prop: \"Set\", name: \"Set\", pkg: \"\", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: \"Delete\", name: \"Delete\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"Length\", name: \"Length\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Index\", name: \"Index\", pkg: \"\", typ: $funcType([$Int], [ptrType], false)}, {prop: \"SetIndex\", name: \"SetIndex\", pkg: \"\", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: \"Call\", name: \"Call\", pkg: \"\", typ: $funcType([$String, sliceType], [ptrType], true)}, {prop: \"Invoke\", name: \"Invoke\", pkg: \"\", typ: $funcType([sliceType], [ptrType], true)}, {prop: \"New\", name: \"New\", pkg: \"\", typ: $funcType([sliceType], [ptrType], true)}, {prop: \"Bool\", name: \"Bool\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Int\", name: \"Int\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Int64\", name: \"Int64\", pkg: \"\", typ: $funcType([], [$Int64], false)}, {prop: \"Uint64\", name: \"Uint64\", pkg: \"\", typ: $funcType([], [$Uint64], false)}, {prop: \"Float\", name: \"Float\", pkg: \"\", typ: $funcType([], [$Float64], false)}, {prop: \"Interface\", name: \"Interface\", pkg: \"\", typ: $funcType([], [$emptyInterface], false)}, {prop: \"Unsafe\", name: \"Unsafe\", pkg: \"\", typ: $funcType([], [$Uintptr], false)}];\n\tptrType$1.methods = [{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Stack\", name: \"Stack\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tObject.init([{prop: \"object\", name: \"object\", pkg: \"github.com/gopherjs/gopherjs/js\", typ: ptrType, tag: \"\"}]);\n\tError.init([{prop: \"Object\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tinit();\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"runtime\"] = (function() {\n\tvar $pkg = {}, $init, js, Error, TypeAssertionError, errorString, ptrType$5, init, GOROOT, Caller, GOMAXPROCS, SetFinalizer;\n\tjs = $packages[\"github.com/gopherjs/gopherjs/js\"];\n\tError = $pkg.Error = $newType(8, $kindInterface, \"runtime.Error\", \"Error\", \"runtime\", null);\n\tTypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, \"runtime.TypeAssertionError\", \"TypeAssertionError\", \"runtime\", function(interfaceString_, concreteString_, assertedString_, missingMethod_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.interfaceString = \"\";\n\t\t\tthis.concreteString = \"\";\n\t\t\tthis.assertedString = \"\";\n\t\t\tthis.missingMethod = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.interfaceString = interfaceString_;\n\t\tthis.concreteString = concreteString_;\n\t\tthis.assertedString = assertedString_;\n\t\tthis.missingMethod = missingMethod_;\n\t});\n\terrorString = $pkg.errorString = $newType(8, $kindString, \"runtime.errorString\", \"errorString\", \"runtime\", null);\n\tptrType$5 = $ptrType(TypeAssertionError);\n\tinit = function() {\n\t\tvar $ptr, e, jsPkg;\n\t\tjsPkg = $packages[$externalize(\"github.com/gopherjs/gopherjs/js\", $String)];\n\t\t$jsObjectPtr = jsPkg.Object.ptr;\n\t\t$jsErrorPtr = jsPkg.Error.ptr;\n\t\t$throwRuntimeError = (function(msg) {\n\t\t\tvar $ptr, msg;\n\t\t\t$panic(new errorString(msg));\n\t\t});\n\t\te = $ifaceNil;\n\t\te = new TypeAssertionError.ptr(\"\", \"\", \"\", \"\");\n\t};\n\tGOROOT = function() {\n\t\tvar $ptr, goroot, process;\n\t\tprocess = $global.process;\n\t\tif (process === undefined) {\n\t\t\treturn \"/\";\n\t\t}\n\t\tgoroot = process.env.GOROOT;\n\t\tif (!(goroot === undefined)) {\n\t\t\treturn $internalize(goroot, $String);\n\t\t}\n\t\treturn \"/home/ben/.golang-bootstrap/go-1.4\";\n\t};\n\t$pkg.GOROOT = GOROOT;\n\tCaller = function(skip) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, file, info, line, ok, parts, pc, skip;\n\t\tpc = 0;\n\t\tfile = \"\";\n\t\tline = 0;\n\t\tok = false;\n\t\tinfo = new ($global.Error)().stack.split($externalize(\"\\n\", $String))[(skip + 2 >> 0)];\n\t\tif (info === undefined) {\n\t\t\t_tmp = 0; _tmp$1 = \"\"; _tmp$2 = 0; _tmp$3 = false; pc = _tmp; file = _tmp$1; line = _tmp$2; ok = _tmp$3;\n\t\t\treturn [pc, file, line, ok];\n\t\t}\n\t\tparts = info.substring(($parseInt(info.indexOf($externalize(\"(\", $String))) >> 0) + 1 >> 0, $parseInt(info.indexOf($externalize(\")\", $String))) >> 0).split($externalize(\":\", $String));\n\t\t_tmp$4 = 0; _tmp$5 = $internalize(parts[0], $String); _tmp$6 = $parseInt(parts[1]) >> 0; _tmp$7 = true; pc = _tmp$4; file = _tmp$5; line = _tmp$6; ok = _tmp$7;\n\t\treturn [pc, file, line, ok];\n\t};\n\t$pkg.Caller = Caller;\n\tGOMAXPROCS = function(n) {\n\t\tvar $ptr, n;\n\t\treturn 1;\n\t};\n\t$pkg.GOMAXPROCS = GOMAXPROCS;\n\tSetFinalizer = function(x, f) {\n\t\tvar $ptr, f, x;\n\t};\n\t$pkg.SetFinalizer = SetFinalizer;\n\tTypeAssertionError.ptr.prototype.RuntimeError = function() {\n\t\tvar $ptr;\n\t};\n\tTypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };\n\tTypeAssertionError.ptr.prototype.Error = function() {\n\t\tvar $ptr, e, inter;\n\t\te = this;\n\t\tinter = e.interfaceString;\n\t\tif (inter === \"\") {\n\t\t\tinter = \"interface\";\n\t\t}\n\t\tif (e.concreteString === \"\") {\n\t\t\treturn \"interface conversion: \" + inter + \" is nil, not \" + e.assertedString;\n\t\t}\n\t\tif (e.missingMethod === \"\") {\n\t\t\treturn \"interface conversion: \" + inter + \" is \" + e.concreteString + \", not \" + e.assertedString;\n\t\t}\n\t\treturn \"interface conversion: \" + e.concreteString + \" is not \" + e.assertedString + \": missing method \" + e.missingMethod;\n\t};\n\tTypeAssertionError.prototype.Error = function() { return this.$val.Error(); };\n\terrorString.prototype.RuntimeError = function() {\n\t\tvar $ptr, e;\n\t\te = this.$val;\n\t};\n\t$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };\n\terrorString.prototype.Error = function() {\n\t\tvar $ptr, e;\n\t\te = this.$val;\n\t\treturn \"runtime error: \" + e;\n\t};\n\t$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };\n\tptrType$5.methods = [{prop: \"RuntimeError\", name: \"RuntimeError\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\terrorString.methods = [{prop: \"RuntimeError\", name: \"RuntimeError\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tError.init([{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"RuntimeError\", name: \"RuntimeError\", pkg: \"\", typ: $funcType([], [], false)}]);\n\tTypeAssertionError.init([{prop: \"interfaceString\", name: \"interfaceString\", pkg: \"runtime\", typ: $String, tag: \"\"}, {prop: \"concreteString\", name: \"concreteString\", pkg: \"runtime\", typ: $String, tag: \"\"}, {prop: \"assertedString\", name: \"assertedString\", pkg: \"runtime\", typ: $String, tag: \"\"}, {prop: \"missingMethod\", name: \"missingMethod\", pkg: \"runtime\", typ: $String, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tinit();\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"errors\"] = (function() {\n\tvar $pkg = {}, $init, errorString, ptrType, New;\n\terrorString = $pkg.errorString = $newType(0, $kindStruct, \"errors.errorString\", \"errorString\", \"errors\", function(s_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.s = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.s = s_;\n\t});\n\tptrType = $ptrType(errorString);\n\tNew = function(text) {\n\t\tvar $ptr, text;\n\t\treturn new errorString.ptr(text);\n\t};\n\t$pkg.New = New;\n\terrorString.ptr.prototype.Error = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn e.s;\n\t};\n\terrorString.prototype.Error = function() { return this.$val.Error(); };\n\tptrType.methods = [{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\terrorString.init([{prop: \"s\", name: \"s\", pkg: \"errors\", typ: $String, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"sync/atomic\"] = (function() {\n\tvar $pkg = {}, $init, js, CompareAndSwapInt32, AddInt32, LoadUint32, StoreInt32, StoreUint32;\n\tjs = $packages[\"github.com/gopherjs/gopherjs/js\"];\n\tCompareAndSwapInt32 = function(addr, old, new$1) {\n\t\tvar $ptr, addr, new$1, old;\n\t\tif (addr.$get() === old) {\n\t\t\taddr.$set(new$1);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t};\n\t$pkg.CompareAndSwapInt32 = CompareAndSwapInt32;\n\tAddInt32 = function(addr, delta) {\n\t\tvar $ptr, addr, delta, new$1;\n\t\tnew$1 = addr.$get() + delta >> 0;\n\t\taddr.$set(new$1);\n\t\treturn new$1;\n\t};\n\t$pkg.AddInt32 = AddInt32;\n\tLoadUint32 = function(addr) {\n\t\tvar $ptr, addr;\n\t\treturn addr.$get();\n\t};\n\t$pkg.LoadUint32 = LoadUint32;\n\tStoreInt32 = function(addr, val) {\n\t\tvar $ptr, addr, val;\n\t\taddr.$set(val);\n\t};\n\t$pkg.StoreInt32 = StoreInt32;\n\tStoreUint32 = function(addr, val) {\n\t\tvar $ptr, addr, val;\n\t\taddr.$set(val);\n\t};\n\t$pkg.StoreUint32 = StoreUint32;\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"sync\"] = (function() {\n\tvar $pkg = {}, $init, runtime, atomic, Pool, Mutex, Locker, Once, poolLocal, syncSema, RWMutex, rlocker, ptrType, sliceType, chanType, sliceType$1, ptrType$2, ptrType$4, ptrType$6, sliceType$3, ptrType$7, ptrType$8, funcType, ptrType$10, funcType$1, ptrType$11, arrayType, semWaiters, allPools, runtime_Syncsemcheck, runtime_registerPoolCleanup, runtime_Semacquire, runtime_Semrelease, poolCleanup, init, indexLocal, raceEnable, init$1;\n\truntime = $packages[\"runtime\"];\n\tatomic = $packages[\"sync/atomic\"];\n\tPool = $pkg.Pool = $newType(0, $kindStruct, \"sync.Pool\", \"Pool\", \"sync\", function(local_, localSize_, store_, New_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.local = 0;\n\t\t\tthis.localSize = 0;\n\t\t\tthis.store = sliceType$3.nil;\n\t\t\tthis.New = $throwNilPointerError;\n\t\t\treturn;\n\t\t}\n\t\tthis.local = local_;\n\t\tthis.localSize = localSize_;\n\t\tthis.store = store_;\n\t\tthis.New = New_;\n\t});\n\tMutex = $pkg.Mutex = $newType(0, $kindStruct, \"sync.Mutex\", \"Mutex\", \"sync\", function(state_, sema_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.state = 0;\n\t\t\tthis.sema = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.state = state_;\n\t\tthis.sema = sema_;\n\t});\n\tLocker = $pkg.Locker = $newType(8, $kindInterface, \"sync.Locker\", \"Locker\", \"sync\", null);\n\tOnce = $pkg.Once = $newType(0, $kindStruct, \"sync.Once\", \"Once\", \"sync\", function(m_, done_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.m = new Mutex.ptr();\n\t\t\tthis.done = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.m = m_;\n\t\tthis.done = done_;\n\t});\n\tpoolLocal = $pkg.poolLocal = $newType(0, $kindStruct, \"sync.poolLocal\", \"poolLocal\", \"sync\", function(private$0_, shared_, Mutex_, pad_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.private$0 = $ifaceNil;\n\t\t\tthis.shared = sliceType$3.nil;\n\t\t\tthis.Mutex = new Mutex.ptr();\n\t\t\tthis.pad = arrayType.zero();\n\t\t\treturn;\n\t\t}\n\t\tthis.private$0 = private$0_;\n\t\tthis.shared = shared_;\n\t\tthis.Mutex = Mutex_;\n\t\tthis.pad = pad_;\n\t});\n\tsyncSema = $pkg.syncSema = $newType(0, $kindStruct, \"sync.syncSema\", \"syncSema\", \"sync\", function(lock_, head_, tail_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.lock = 0;\n\t\t\tthis.head = 0;\n\t\t\tthis.tail = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.lock = lock_;\n\t\tthis.head = head_;\n\t\tthis.tail = tail_;\n\t});\n\tRWMutex = $pkg.RWMutex = $newType(0, $kindStruct, \"sync.RWMutex\", \"RWMutex\", \"sync\", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.w = new Mutex.ptr();\n\t\t\tthis.writerSem = 0;\n\t\t\tthis.readerSem = 0;\n\t\t\tthis.readerCount = 0;\n\t\t\tthis.readerWait = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.w = w_;\n\t\tthis.writerSem = writerSem_;\n\t\tthis.readerSem = readerSem_;\n\t\tthis.readerCount = readerCount_;\n\t\tthis.readerWait = readerWait_;\n\t});\n\trlocker = $pkg.rlocker = $newType(0, $kindStruct, \"sync.rlocker\", \"rlocker\", \"sync\", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.w = new Mutex.ptr();\n\t\t\tthis.writerSem = 0;\n\t\t\tthis.readerSem = 0;\n\t\t\tthis.readerCount = 0;\n\t\t\tthis.readerWait = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.w = w_;\n\t\tthis.writerSem = writerSem_;\n\t\tthis.readerSem = readerSem_;\n\t\tthis.readerCount = readerCount_;\n\t\tthis.readerWait = readerWait_;\n\t});\n\tptrType = $ptrType(Pool);\n\tsliceType = $sliceType(ptrType);\n\tchanType = $chanType($Bool, false, false);\n\tsliceType$1 = $sliceType(chanType);\n\tptrType$2 = $ptrType($Uint32);\n\tptrType$4 = $ptrType($Int32);\n\tptrType$6 = $ptrType(poolLocal);\n\tsliceType$3 = $sliceType($emptyInterface);\n\tptrType$7 = $ptrType(rlocker);\n\tptrType$8 = $ptrType(RWMutex);\n\tfuncType = $funcType([], [$emptyInterface], false);\n\tptrType$10 = $ptrType(Mutex);\n\tfuncType$1 = $funcType([], [], false);\n\tptrType$11 = $ptrType(Once);\n\tarrayType = $arrayType($Uint8, 128);\n\truntime_Syncsemcheck = function(size) {\n\t\tvar $ptr, size;\n\t};\n\tPool.ptr.prototype.Get = function() {\n\t\tvar $ptr, _r, p, x, x$1, x$2, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\t/* */ if (p.store.$length === 0) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (p.store.$length === 0) { */ case 1:\n\t\t\t/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (!(p.New === $throwNilPointerError)) { */ case 3:\n\t\t\t\t_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t\treturn _r;\n\t\t\t/* } */ case 4:\n\t\t\treturn $ifaceNil;\n\t\t/* } */ case 2:\n\t\tx$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + x$1]));\n\t\tp.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));\n\t\treturn x$2;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Pool.ptr.prototype.Get }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tPool.prototype.Get = function() { return this.$val.Get(); };\n\tPool.ptr.prototype.Put = function(x) {\n\t\tvar $ptr, p, x;\n\t\tp = this;\n\t\tif ($interfaceIsEqual(x, $ifaceNil)) {\n\t\t\treturn;\n\t\t}\n\t\tp.store = $append(p.store, x);\n\t};\n\tPool.prototype.Put = function(x) { return this.$val.Put(x); };\n\truntime_registerPoolCleanup = function(cleanup) {\n\t\tvar $ptr, cleanup;\n\t};\n\truntime_Semacquire = function(s) {\n\t\tvar $ptr, _entry, _key, _r, ch, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; ch = $f.ch; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t/* */ if (s.$get() === 0) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (s.$get() === 0) { */ case 1:\n\t\t\tch = new chanType(0);\n\t\t\t_key = s; (semWaiters || $throwRuntimeError(\"assignment to entry in nil map\"))[_key.$key()] = { k: _key, v: $append((_entry = semWaiters[s.$key()], _entry !== undefined ? _entry.v : sliceType$1.nil), ch) };\n\t\t\t_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t_r[0];\n\t\t/* } */ case 2:\n\t\ts.$set(s.$get() - (1) >>> 0);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: runtime_Semacquire }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f.ch = ch; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\truntime_Semrelease = function(s) {\n\t\tvar $ptr, _entry, _key, ch, s, w, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; ch = $f.ch; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ts.$set(s.$get() + (1) >>> 0);\n\t\tw = (_entry = semWaiters[s.$key()], _entry !== undefined ? _entry.v : sliceType$1.nil);\n\t\tif (w.$length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tch = (0 >= w.$length ? $throwRuntimeError(\"index out of range\") : w.$array[w.$offset + 0]);\n\t\tw = $subslice(w, 1);\n\t\t_key = s; (semWaiters || $throwRuntimeError(\"assignment to entry in nil map\"))[_key.$key()] = { k: _key, v: w };\n\t\tif (w.$length === 0) {\n\t\t\tdelete semWaiters[s.$key()];\n\t\t}\n\t\t$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f.ch = ch; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tMutex.ptr.prototype.Lock = function() {\n\t\tvar $ptr, awoke, m, new$1, old, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; awoke = $f.awoke; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\tif (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), 0, 1)) {\n\t\t\treturn;\n\t\t}\n\t\tawoke = false;\n\t\t/* while (true) { */ case 1:\n\t\t\told = m.state;\n\t\t\tnew$1 = old | 1;\n\t\t\tif (!(((old & 1) === 0))) {\n\t\t\t\tnew$1 = old + 4 >> 0;\n\t\t\t}\n\t\t\tif (awoke) {\n\t\t\t\tnew$1 = (new$1 & ~(2)) >> 0;\n\t\t\t}\n\t\t\t/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 3:\n\t\t\t\tif ((old & 1) === 0) {\n\t\t\t\t\t/* break; */ $s = 2; continue;\n\t\t\t\t}\n\t\t\t\t$r = runtime_Semacquire((m.$ptr_sema || (m.$ptr_sema = new ptrType$2(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\tawoke = true;\n\t\t\t/* } */ case 4:\n\t\t/* } */ $s = 1; continue; case 2:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.awoke = awoke; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tMutex.prototype.Lock = function() { return this.$val.Lock(); };\n\tMutex.ptr.prototype.Unlock = function() {\n\t\tvar $ptr, m, new$1, old, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\tnew$1 = atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), -1);\n\t\tif ((((new$1 + 1 >> 0)) & 1) === 0) {\n\t\t\t$panic(new $String(\"sync: unlock of unlocked mutex\"));\n\t\t}\n\t\told = new$1;\n\t\t/* while (true) { */ case 1:\n\t\t\tif (((old >> 2 >> 0) === 0) || !(((old & 3) === 0))) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tnew$1 = ((old - 4 >> 0)) | 2;\n\t\t\t/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 3:\n\t\t\t\t$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$2(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\treturn;\n\t\t\t/* } */ case 4:\n\t\t\told = m.state;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tMutex.prototype.Unlock = function() { return this.$val.Unlock(); };\n\tOnce.ptr.prototype.Do = function(f) {\n\t\tvar $ptr, f, o, $s, $deferred, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\to = this;\n\t\tif (atomic.LoadUint32((o.$ptr_done || (o.$ptr_done = new ptrType$2(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o)))) === 1) {\n\t\t\treturn;\n\t\t}\n\t\t$r = o.m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$deferred.push([$methodVal(o.m, \"Unlock\"), []]);\n\t\t/* */ if (o.done === 0) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (o.done === 0) { */ case 2:\n\t\t\t$deferred.push([atomic.StoreUint32, [(o.$ptr_done || (o.$ptr_done = new ptrType$2(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o))), 1]]);\n\t\t\t$r = f(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 3:\n\t\t/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.$ptr = $ptr; $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }\n\t};\n\tOnce.prototype.Do = function(f) { return this.$val.Do(f); };\n\tpoolCleanup = function() {\n\t\tvar $ptr, _i, _i$1, _ref, _ref$1, i, i$1, j, l, p, x;\n\t\t_ref = allPools;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\tp = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\t((i < 0 || i >= allPools.$length) ? $throwRuntimeError(\"index out of range\") : allPools.$array[allPools.$offset + i] = ptrType.nil);\n\t\t\ti$1 = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(i$1 < (p.localSize >> 0))) { break; }\n\t\t\t\tl = indexLocal(p.local, i$1);\n\t\t\t\tl.private$0 = $ifaceNil;\n\t\t\t\t_ref$1 = l.shared;\n\t\t\t\t_i$1 = 0;\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!(_i$1 < _ref$1.$length)) { break; }\n\t\t\t\t\tj = _i$1;\n\t\t\t\t\t(x = l.shared, ((j < 0 || j >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + j] = $ifaceNil));\n\t\t\t\t\t_i$1++;\n\t\t\t\t}\n\t\t\t\tl.shared = sliceType$3.nil;\n\t\t\t\ti$1 = i$1 + (1) >> 0;\n\t\t\t}\n\t\t\tp.local = 0;\n\t\t\tp.localSize = 0;\n\t\t\t_i++;\n\t\t}\n\t\tallPools = new sliceType([]);\n\t};\n\tinit = function() {\n\t\tvar $ptr;\n\t\truntime_registerPoolCleanup(poolCleanup);\n\t};\n\tindexLocal = function(l, i) {\n\t\tvar $ptr, i, l, x;\n\t\treturn (x = l, (x.nilCheck, ((i < 0 || i >= x.length) ? $throwRuntimeError(\"index out of range\") : x[i])));\n\t};\n\traceEnable = function() {\n\t\tvar $ptr;\n\t};\n\tinit$1 = function() {\n\t\tvar $ptr, s;\n\t\ts = $clone(new syncSema.ptr(), syncSema);\n\t\truntime_Syncsemcheck(12);\n\t};\n\tRWMutex.ptr.prototype.RLock = function() {\n\t\tvar $ptr, rw, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\trw = this;\n\t\t/* */ if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { */ case 1:\n\t\t\t$r = runtime_Semacquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$2(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 2:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RLock }; } $f.$ptr = $ptr; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tRWMutex.prototype.RLock = function() { return this.$val.RLock(); };\n\tRWMutex.ptr.prototype.RUnlock = function() {\n\t\tvar $ptr, r, rw, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\trw = this;\n\t\tr = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1);\n\t\t/* */ if (r < 0) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (r < 0) { */ case 1:\n\t\t\tif (((r + 1 >> 0) === 0) || ((r + 1 >> 0) === -1073741824)) {\n\t\t\t\traceEnable();\n\t\t\t\t$panic(new $String(\"sync: RUnlock of unlocked RWMutex\"));\n\t\t\t}\n\t\t\t/* */ if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { */ case 3:\n\t\t\t\t$r = runtime_Semrelease((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$2(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 4:\n\t\t/* } */ case 2:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RUnlock }; } $f.$ptr = $ptr; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tRWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };\n\tRWMutex.ptr.prototype.Lock = function() {\n\t\tvar $ptr, r, rw, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\trw = this;\n\t\t$r = rw.w.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tr = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1073741824) + 1073741824 >> 0;\n\t\t/* */ if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { */ case 2:\n\t\t\t$r = runtime_Semacquire((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$2(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 3:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tRWMutex.prototype.Lock = function() { return this.$val.Lock(); };\n\tRWMutex.ptr.prototype.Unlock = function() {\n\t\tvar $ptr, i, r, rw, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; i = $f.i; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\trw = this;\n\t\tr = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1073741824);\n\t\tif (r >= 1073741824) {\n\t\t\traceEnable();\n\t\t\t$panic(new $String(\"sync: Unlock of unlocked RWMutex\"));\n\t\t}\n\t\ti = 0;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(i < (r >> 0))) { break; } */ if(!(i < (r >> 0))) { $s = 2; continue; }\n\t\t\t$r = runtime_Semrelease((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$2(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\t$r = rw.w.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.i = i; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tRWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };\n\tRWMutex.ptr.prototype.RLocker = function() {\n\t\tvar $ptr, rw;\n\t\trw = this;\n\t\treturn $pointerOfStructConversion(rw, ptrType$7);\n\t};\n\tRWMutex.prototype.RLocker = function() { return this.$val.RLocker(); };\n\trlocker.ptr.prototype.Lock = function() {\n\t\tvar $ptr, r, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tr = this;\n\t\t$r = $pointerOfStructConversion(r, ptrType$8).RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\trlocker.prototype.Lock = function() { return this.$val.Lock(); };\n\trlocker.ptr.prototype.Unlock = function() {\n\t\tvar $ptr, r, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tr = this;\n\t\t$r = $pointerOfStructConversion(r, ptrType$8).RUnlock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\trlocker.prototype.Unlock = function() { return this.$val.Unlock(); };\n\tptrType.methods = [{prop: \"Get\", name: \"Get\", pkg: \"\", typ: $funcType([], [$emptyInterface], false)}, {prop: \"Put\", name: \"Put\", pkg: \"\", typ: $funcType([$emptyInterface], [], false)}, {prop: \"getSlow\", name: \"getSlow\", pkg: \"sync\", typ: $funcType([], [$emptyInterface], false)}, {prop: \"pin\", name: \"pin\", pkg: \"sync\", typ: $funcType([], [ptrType$6], false)}, {prop: \"pinSlow\", name: \"pinSlow\", pkg: \"sync\", typ: $funcType([], [ptrType$6], false)}];\n\tptrType$10.methods = [{prop: \"Lock\", name: \"Lock\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Unlock\", name: \"Unlock\", pkg: \"\", typ: $funcType([], [], false)}];\n\tptrType$11.methods = [{prop: \"Do\", name: \"Do\", pkg: \"\", typ: $funcType([funcType$1], [], false)}];\n\tptrType$8.methods = [{prop: \"RLock\", name: \"RLock\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"RUnlock\", name: \"RUnlock\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Lock\", name: \"Lock\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Unlock\", name: \"Unlock\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"RLocker\", name: \"RLocker\", pkg: \"\", typ: $funcType([], [Locker], false)}];\n\tptrType$7.methods = [{prop: \"Lock\", name: \"Lock\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Unlock\", name: \"Unlock\", pkg: \"\", typ: $funcType([], [], false)}];\n\tPool.init([{prop: \"local\", name: \"local\", pkg: \"sync\", typ: $UnsafePointer, tag: \"\"}, {prop: \"localSize\", name: \"localSize\", pkg: \"sync\", typ: $Uintptr, tag: \"\"}, {prop: \"store\", name: \"store\", pkg: \"sync\", typ: sliceType$3, tag: \"\"}, {prop: \"New\", name: \"New\", pkg: \"\", typ: funcType, tag: \"\"}]);\n\tMutex.init([{prop: \"state\", name: \"state\", pkg: \"sync\", typ: $Int32, tag: \"\"}, {prop: \"sema\", name: \"sema\", pkg: \"sync\", typ: $Uint32, tag: \"\"}]);\n\tLocker.init([{prop: \"Lock\", name: \"Lock\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Unlock\", name: \"Unlock\", pkg: \"\", typ: $funcType([], [], false)}]);\n\tOnce.init([{prop: \"m\", name: \"m\", pkg: \"sync\", typ: Mutex, tag: \"\"}, {prop: \"done\", name: \"done\", pkg: \"sync\", typ: $Uint32, tag: \"\"}]);\n\tpoolLocal.init([{prop: \"private$0\", name: \"private\", pkg: \"sync\", typ: $emptyInterface, tag: \"\"}, {prop: \"shared\", name: \"shared\", pkg: \"sync\", typ: sliceType$3, tag: \"\"}, {prop: \"Mutex\", name: \"\", pkg: \"\", typ: Mutex, tag: \"\"}, {prop: \"pad\", name: \"pad\", pkg: \"sync\", typ: arrayType, tag: \"\"}]);\n\tsyncSema.init([{prop: \"lock\", name: \"lock\", pkg: \"sync\", typ: $Uintptr, tag: \"\"}, {prop: \"head\", name: \"head\", pkg: \"sync\", typ: $UnsafePointer, tag: \"\"}, {prop: \"tail\", name: \"tail\", pkg: \"sync\", typ: $UnsafePointer, tag: \"\"}]);\n\tRWMutex.init([{prop: \"w\", name: \"w\", pkg: \"sync\", typ: Mutex, tag: \"\"}, {prop: \"writerSem\", name: \"writerSem\", pkg: \"sync\", typ: $Uint32, tag: \"\"}, {prop: \"readerSem\", name: \"readerSem\", pkg: \"sync\", typ: $Uint32, tag: \"\"}, {prop: \"readerCount\", name: \"readerCount\", pkg: \"sync\", typ: $Int32, tag: \"\"}, {prop: \"readerWait\", name: \"readerWait\", pkg: \"sync\", typ: $Int32, tag: \"\"}]);\n\trlocker.init([{prop: \"w\", name: \"w\", pkg: \"sync\", typ: Mutex, tag: \"\"}, {prop: \"writerSem\", name: \"writerSem\", pkg: \"sync\", typ: $Uint32, tag: \"\"}, {prop: \"readerSem\", name: \"readerSem\", pkg: \"sync\", typ: $Uint32, tag: \"\"}, {prop: \"readerCount\", name: \"readerCount\", pkg: \"sync\", typ: $Int32, tag: \"\"}, {prop: \"readerWait\", name: \"readerWait\", pkg: \"sync\", typ: $Int32, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = runtime.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = atomic.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tallPools = sliceType.nil;\n\t\tsemWaiters = new $Map();\n\t\tinit();\n\t\tinit$1();\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"io\"] = (function() {\n\tvar $pkg = {}, $init, errors, sync, Reader, Writer, ReadWriteCloser, ReaderFrom, RuneReader, stringWriter, sliceType, errWhence, errOffset, WriteString, ReadAtLeast, ReadFull;\n\terrors = $packages[\"errors\"];\n\tsync = $packages[\"sync\"];\n\tReader = $pkg.Reader = $newType(8, $kindInterface, \"io.Reader\", \"Reader\", \"io\", null);\n\tWriter = $pkg.Writer = $newType(8, $kindInterface, \"io.Writer\", \"Writer\", \"io\", null);\n\tReadWriteCloser = $pkg.ReadWriteCloser = $newType(8, $kindInterface, \"io.ReadWriteCloser\", \"ReadWriteCloser\", \"io\", null);\n\tReaderFrom = $pkg.ReaderFrom = $newType(8, $kindInterface, \"io.ReaderFrom\", \"ReaderFrom\", \"io\", null);\n\tRuneReader = $pkg.RuneReader = $newType(8, $kindInterface, \"io.RuneReader\", \"RuneReader\", \"io\", null);\n\tstringWriter = $pkg.stringWriter = $newType(8, $kindInterface, \"io.stringWriter\", \"stringWriter\", \"io\", null);\n\tsliceType = $sliceType($Uint8);\n\tWriteString = function(w, s) {\n\t\tvar $ptr, _r, _r$1, _tuple, _tuple$1, _tuple$2, err, n, ok, s, sw, w, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; n = $f.n; ok = $f.ok; s = $f.s; sw = $f.sw; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\t_tuple = $assertType(w, stringWriter, true); sw = _tuple[0]; ok = _tuple[1];\n\t\t/* */ if (ok) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (ok) { */ case 1:\n\t\t\t_r = sw.WriteString(s); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t_tuple$1 = _r; n = _tuple$1[0]; err = _tuple$1[1];\n\t\t\treturn [n, err];\n\t\t/* } */ case 2:\n\t\t_r$1 = w.Write(new sliceType($stringToBytes(s))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_tuple$2 = _r$1; n = _tuple$2[0]; err = _tuple$2[1];\n\t\treturn [n, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.n = n; $f.ok = ok; $f.s = s; $f.sw = sw; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.WriteString = WriteString;\n\tReadAtLeast = function(r, buf, min) {\n\t\tvar $ptr, _r, _tmp, _tmp$1, _tuple, buf, err, min, n, nn, r, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; buf = $f.buf; err = $f.err; min = $f.min; n = $f.n; nn = $f.nn; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tif (buf.$length < min) {\n\t\t\t_tmp = 0; _tmp$1 = $pkg.ErrShortBuffer; n = _tmp; err = _tmp$1;\n\t\t\treturn [n, err];\n\t\t}\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(n < min && $interfaceIsEqual(err, $ifaceNil))) { break; } */ if(!(n < min && $interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }\n\t\t\tnn = 0;\n\t\t\t_r = r.Read($subslice(buf, n)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t_tuple = _r; nn = _tuple[0]; err = _tuple[1];\n\t\t\tn = n + (nn) >> 0;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\tif (n >= min) {\n\t\t\terr = $ifaceNil;\n\t\t} else if (n > 0 && $interfaceIsEqual(err, $pkg.EOF)) {\n\t\t\terr = $pkg.ErrUnexpectedEOF;\n\t\t}\n\t\treturn [n, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ReadAtLeast }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.min = min; $f.n = n; $f.nn = nn; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.ReadAtLeast = ReadAtLeast;\n\tReadFull = function(r, buf) {\n\t\tvar $ptr, _r, _tuple, buf, err, n, r, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; err = $f.err; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\t_r = ReadAtLeast(r, buf, buf.$length); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; n = _tuple[0]; err = _tuple[1];\n\t\treturn [n, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ReadFull }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.ReadFull = ReadFull;\n\tReader.init([{prop: \"Read\", name: \"Read\", pkg: \"\", typ: $funcType([sliceType], [$Int, $error], false)}]);\n\tWriter.init([{prop: \"Write\", name: \"Write\", pkg: \"\", typ: $funcType([sliceType], [$Int, $error], false)}]);\n\tReadWriteCloser.init([{prop: \"Close\", name: \"Close\", pkg: \"\", typ: $funcType([], [$error], false)}, {prop: \"Read\", name: \"Read\", pkg: \"\", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: \"Write\", name: \"Write\", pkg: \"\", typ: $funcType([sliceType], [$Int, $error], false)}]);\n\tReaderFrom.init([{prop: \"ReadFrom\", name: \"ReadFrom\", pkg: \"\", typ: $funcType([Reader], [$Int64, $error], false)}]);\n\tRuneReader.init([{prop: \"ReadRune\", name: \"ReadRune\", pkg: \"\", typ: $funcType([], [$Int32, $Int, $error], false)}]);\n\tstringWriter.init([{prop: \"WriteString\", name: \"WriteString\", pkg: \"\", typ: $funcType([$String], [$Int, $error], false)}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$pkg.ErrShortWrite = errors.New(\"short write\");\n\t\t$pkg.ErrShortBuffer = errors.New(\"short buffer\");\n\t\t$pkg.EOF = errors.New(\"EOF\");\n\t\t$pkg.ErrUnexpectedEOF = errors.New(\"unexpected EOF\");\n\t\t$pkg.ErrNoProgress = errors.New(\"multiple Read calls return no data or error\");\n\t\terrWhence = errors.New(\"Seek: invalid whence\");\n\t\terrOffset = errors.New(\"Seek: invalid offset\");\n\t\t$pkg.ErrClosedPipe = errors.New(\"io: read/write on closed pipe\");\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"math\"] = (function() {\n\tvar $pkg = {}, $init, js, arrayType, arrayType$1, arrayType$2, structType, arrayType$3, math, zero, posInf, negInf, nan, buf, pow10tab, Exp, Inf, IsInf, IsNaN, Log, NaN, init, Float32bits, Float32frombits, Float64bits, Float64frombits, init$1;\n\tjs = $packages[\"github.com/gopherjs/gopherjs/js\"];\n\tarrayType = $arrayType($Uint32, 2);\n\tarrayType$1 = $arrayType($Float32, 2);\n\tarrayType$2 = $arrayType($Float64, 1);\n\tstructType = $structType([{prop: \"uint32array\", name: \"uint32array\", pkg: \"math\", typ: arrayType, tag: \"\"}, {prop: \"float32array\", name: \"float32array\", pkg: \"math\", typ: arrayType$1, tag: \"\"}, {prop: \"float64array\", name: \"float64array\", pkg: \"math\", typ: arrayType$2, tag: \"\"}]);\n\tarrayType$3 = $arrayType($Float64, 70);\n\tExp = function(x) {\n\t\tvar $ptr, x;\n\t\treturn $parseFloat(math.exp(x));\n\t};\n\t$pkg.Exp = Exp;\n\tInf = function(sign) {\n\t\tvar $ptr, sign;\n\t\tif (sign >= 0) {\n\t\t\treturn posInf;\n\t\t} else {\n\t\t\treturn negInf;\n\t\t}\n\t};\n\t$pkg.Inf = Inf;\n\tIsInf = function(f, sign) {\n\t\tvar $ptr, f, sign;\n\t\tif (f === posInf) {\n\t\t\treturn sign >= 0;\n\t\t}\n\t\tif (f === negInf) {\n\t\t\treturn sign <= 0;\n\t\t}\n\t\treturn false;\n\t};\n\t$pkg.IsInf = IsInf;\n\tIsNaN = function(f) {\n\t\tvar $ptr, f, is;\n\t\tis = false;\n\t\tis = !((f === f));\n\t\treturn is;\n\t};\n\t$pkg.IsNaN = IsNaN;\n\tLog = function(x) {\n\t\tvar $ptr, x;\n\t\tif (!((x === x))) {\n\t\t\treturn nan;\n\t\t}\n\t\treturn $parseFloat(math.log(x));\n\t};\n\t$pkg.Log = Log;\n\tNaN = function() {\n\t\tvar $ptr;\n\t\treturn nan;\n\t};\n\t$pkg.NaN = NaN;\n\tinit = function() {\n\t\tvar $ptr, ab;\n\t\tab = new ($global.ArrayBuffer)(8);\n\t\tbuf.uint32array = new ($global.Uint32Array)(ab);\n\t\tbuf.float32array = new ($global.Float32Array)(ab);\n\t\tbuf.float64array = new ($global.Float64Array)(ab);\n\t};\n\tFloat32bits = function(f) {\n\t\tvar $ptr, f;\n\t\tbuf.float32array[0] = f;\n\t\treturn buf.uint32array[0];\n\t};\n\t$pkg.Float32bits = Float32bits;\n\tFloat32frombits = function(b) {\n\t\tvar $ptr, b;\n\t\tbuf.uint32array[0] = b;\n\t\treturn buf.float32array[0];\n\t};\n\t$pkg.Float32frombits = Float32frombits;\n\tFloat64bits = function(f) {\n\t\tvar $ptr, f, x, x$1;\n\t\tbuf.float64array[0] = f;\n\t\treturn (x = $shiftLeft64(new $Uint64(0, buf.uint32array[1]), 32), x$1 = new $Uint64(0, buf.uint32array[0]), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));\n\t};\n\t$pkg.Float64bits = Float64bits;\n\tFloat64frombits = function(b) {\n\t\tvar $ptr, b;\n\t\tbuf.uint32array[0] = (b.$low >>> 0);\n\t\tbuf.uint32array[1] = ($shiftRightUint64(b, 32).$low >>> 0);\n\t\treturn buf.float64array[0];\n\t};\n\t$pkg.Float64frombits = Float64frombits;\n\tinit$1 = function() {\n\t\tvar $ptr, _q, i, m, x;\n\t\tpow10tab[0] = 1;\n\t\tpow10tab[1] = 10;\n\t\ti = 2;\n\t\twhile (true) {\n\t\t\tif (!(i < 70)) { break; }\n\t\t\tm = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t\t((i < 0 || i >= pow10tab.length) ? $throwRuntimeError(\"index out of range\") : pow10tab[i] = ((m < 0 || m >= pow10tab.length) ? $throwRuntimeError(\"index out of range\") : pow10tab[m]) * (x = i - m >> 0, ((x < 0 || x >= pow10tab.length) ? $throwRuntimeError(\"index out of range\") : pow10tab[x])));\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t};\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tbuf = new structType.ptr();\n\t\tpow10tab = arrayType$3.zero();\n\t\tmath = $global.Math;\n\t\tzero = 0;\n\t\tposInf = 1 / zero;\n\t\tnegInf = -1 / zero;\n\t\tnan = 0 / zero;\n\t\tinit();\n\t\tinit$1();\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"unicode\"] = (function() {\n\tvar $pkg = {}, $init, RangeTable, Range16, Range32, CaseRange, d, foldPair, sliceType, sliceType$1, sliceType$3, sliceType$4, _L, _Nd, _CaseRanges, properties, caseOrbit, to, IsDigit, IsLetter, is16, is32, isExcludingLatin, To, ToUpper, ToLower, SimpleFold;\n\tRangeTable = $pkg.RangeTable = $newType(0, $kindStruct, \"unicode.RangeTable\", \"RangeTable\", \"unicode\", function(R16_, R32_, LatinOffset_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.R16 = sliceType.nil;\n\t\t\tthis.R32 = sliceType$1.nil;\n\t\t\tthis.LatinOffset = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.R16 = R16_;\n\t\tthis.R32 = R32_;\n\t\tthis.LatinOffset = LatinOffset_;\n\t});\n\tRange16 = $pkg.Range16 = $newType(0, $kindStruct, \"unicode.Range16\", \"Range16\", \"unicode\", function(Lo_, Hi_, Stride_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Lo = 0;\n\t\t\tthis.Hi = 0;\n\t\t\tthis.Stride = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.Lo = Lo_;\n\t\tthis.Hi = Hi_;\n\t\tthis.Stride = Stride_;\n\t});\n\tRange32 = $pkg.Range32 = $newType(0, $kindStruct, \"unicode.Range32\", \"Range32\", \"unicode\", function(Lo_, Hi_, Stride_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Lo = 0;\n\t\t\tthis.Hi = 0;\n\t\t\tthis.Stride = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.Lo = Lo_;\n\t\tthis.Hi = Hi_;\n\t\tthis.Stride = Stride_;\n\t});\n\tCaseRange = $pkg.CaseRange = $newType(0, $kindStruct, \"unicode.CaseRange\", \"CaseRange\", \"unicode\", function(Lo_, Hi_, Delta_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Lo = 0;\n\t\t\tthis.Hi = 0;\n\t\t\tthis.Delta = d.zero();\n\t\t\treturn;\n\t\t}\n\t\tthis.Lo = Lo_;\n\t\tthis.Hi = Hi_;\n\t\tthis.Delta = Delta_;\n\t});\n\td = $pkg.d = $newType(12, $kindArray, \"unicode.d\", \"d\", \"unicode\", null);\n\tfoldPair = $pkg.foldPair = $newType(0, $kindStruct, \"unicode.foldPair\", \"foldPair\", \"unicode\", function(From_, To_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.From = 0;\n\t\t\tthis.To = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.From = From_;\n\t\tthis.To = To_;\n\t});\n\tsliceType = $sliceType(Range16);\n\tsliceType$1 = $sliceType(Range32);\n\tsliceType$3 = $sliceType(CaseRange);\n\tsliceType$4 = $sliceType(foldPair);\n\tto = function(_case, r, caseRange) {\n\t\tvar $ptr, _case, _q, caseRange, cr, delta, hi, lo, m, r, x;\n\t\tif (_case < 0 || 3 <= _case) {\n\t\t\treturn 65533;\n\t\t}\n\t\tlo = 0;\n\t\thi = caseRange.$length;\n\t\twhile (true) {\n\t\t\tif (!(lo < hi)) { break; }\n\t\t\tm = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\")) >> 0;\n\t\t\tcr = ((m < 0 || m >= caseRange.$length) ? $throwRuntimeError(\"index out of range\") : caseRange.$array[caseRange.$offset + m]);\n\t\t\tif ((cr.Lo >> 0) <= r && r <= (cr.Hi >> 0)) {\n\t\t\t\tdelta = (x = cr.Delta, ((_case < 0 || _case >= x.length) ? $throwRuntimeError(\"index out of range\") : x[_case]));\n\t\t\t\tif (delta > 1114111) {\n\t\t\t\t\treturn (cr.Lo >> 0) + ((((((r - (cr.Lo >> 0) >> 0)) & ~1) >> 0) | ((_case & 1) >> 0))) >> 0;\n\t\t\t\t}\n\t\t\t\treturn r + delta >> 0;\n\t\t\t}\n\t\t\tif (r < (cr.Lo >> 0)) {\n\t\t\t\thi = m;\n\t\t\t} else {\n\t\t\t\tlo = m + 1 >> 0;\n\t\t\t}\n\t\t}\n\t\treturn r;\n\t};\n\tIsDigit = function(r) {\n\t\tvar $ptr, r;\n\t\tif (r <= 255) {\n\t\t\treturn 48 <= r && r <= 57;\n\t\t}\n\t\treturn isExcludingLatin($pkg.Digit, r);\n\t};\n\t$pkg.IsDigit = IsDigit;\n\tIsLetter = function(r) {\n\t\tvar $ptr, r, x;\n\t\tif ((r >>> 0) <= 255) {\n\t\t\treturn !(((((x = (r << 24 >>> 24), ((x < 0 || x >= properties.length) ? $throwRuntimeError(\"index out of range\") : properties[x])) & 96) >>> 0) === 0));\n\t\t}\n\t\treturn isExcludingLatin($pkg.Letter, r);\n\t};\n\t$pkg.IsLetter = IsLetter;\n\tis16 = function(ranges, r) {\n\t\tvar $ptr, _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;\n\t\tif (ranges.$length <= 18 || r <= 255) {\n\t\t\t_ref = ranges;\n\t\t\t_i = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\t\ti = _i;\n\t\t\t\trange_ = ((i < 0 || i >= ranges.$length) ? $throwRuntimeError(\"index out of range\") : ranges.$array[ranges.$offset + i]);\n\t\t\t\tif (r < range_.Lo) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (r <= range_.Hi) {\n\t\t\t\t\treturn (_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : $throwRuntimeError(\"integer divide by zero\")) === 0;\n\t\t\t\t}\n\t\t\t\t_i++;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tlo = 0;\n\t\thi = ranges.$length;\n\t\twhile (true) {\n\t\t\tif (!(lo < hi)) { break; }\n\t\t\tm = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\")) >> 0;\n\t\t\trange_$1 = ((m < 0 || m >= ranges.$length) ? $throwRuntimeError(\"index out of range\") : ranges.$array[ranges.$offset + m]);\n\t\t\tif (range_$1.Lo <= r && r <= range_$1.Hi) {\n\t\t\t\treturn (_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError(\"integer divide by zero\")) === 0;\n\t\t\t}\n\t\t\tif (r < range_$1.Lo) {\n\t\t\t\thi = m;\n\t\t\t} else {\n\t\t\t\tlo = m + 1 >> 0;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\tis32 = function(ranges, r) {\n\t\tvar $ptr, _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;\n\t\tif (ranges.$length <= 18) {\n\t\t\t_ref = ranges;\n\t\t\t_i = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\t\ti = _i;\n\t\t\t\trange_ = ((i < 0 || i >= ranges.$length) ? $throwRuntimeError(\"index out of range\") : ranges.$array[ranges.$offset + i]);\n\t\t\t\tif (r < range_.Lo) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (r <= range_.Hi) {\n\t\t\t\t\treturn (_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : $throwRuntimeError(\"integer divide by zero\")) === 0;\n\t\t\t\t}\n\t\t\t\t_i++;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tlo = 0;\n\t\thi = ranges.$length;\n\t\twhile (true) {\n\t\t\tif (!(lo < hi)) { break; }\n\t\t\tm = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\")) >> 0;\n\t\t\trange_$1 = $clone(((m < 0 || m >= ranges.$length) ? $throwRuntimeError(\"index out of range\") : ranges.$array[ranges.$offset + m]), Range32);\n\t\t\tif (range_$1.Lo <= r && r <= range_$1.Hi) {\n\t\t\t\treturn (_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError(\"integer divide by zero\")) === 0;\n\t\t\t}\n\t\t\tif (r < range_$1.Lo) {\n\t\t\t\thi = m;\n\t\t\t} else {\n\t\t\t\tlo = m + 1 >> 0;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\tisExcludingLatin = function(rangeTab, r) {\n\t\tvar $ptr, off, r, r16, r32, rangeTab, x;\n\t\tr16 = rangeTab.R16;\n\t\toff = rangeTab.LatinOffset;\n\t\tif (r16.$length > off && r <= ((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? $throwRuntimeError(\"index out of range\") : r16.$array[r16.$offset + x])).Hi >> 0)) {\n\t\t\treturn is16($subslice(r16, off), (r << 16 >>> 16));\n\t\t}\n\t\tr32 = rangeTab.R32;\n\t\tif (r32.$length > 0 && r >= ((0 >= r32.$length ? $throwRuntimeError(\"index out of range\") : r32.$array[r32.$offset + 0]).Lo >> 0)) {\n\t\t\treturn is32(r32, (r >>> 0));\n\t\t}\n\t\treturn false;\n\t};\n\tTo = function(_case, r) {\n\t\tvar $ptr, _case, r;\n\t\treturn to(_case, r, $pkg.CaseRanges);\n\t};\n\t$pkg.To = To;\n\tToUpper = function(r) {\n\t\tvar $ptr, r;\n\t\tif (r <= 127) {\n\t\t\tif (97 <= r && r <= 122) {\n\t\t\t\tr = r - (32) >> 0;\n\t\t\t}\n\t\t\treturn r;\n\t\t}\n\t\treturn To(0, r);\n\t};\n\t$pkg.ToUpper = ToUpper;\n\tToLower = function(r) {\n\t\tvar $ptr, r;\n\t\tif (r <= 127) {\n\t\t\tif (65 <= r && r <= 90) {\n\t\t\t\tr = r + (32) >> 0;\n\t\t\t}\n\t\t\treturn r;\n\t\t}\n\t\treturn To(1, r);\n\t};\n\t$pkg.ToLower = ToLower;\n\tSimpleFold = function(r) {\n\t\tvar $ptr, _q, hi, l, lo, m, r;\n\t\tlo = 0;\n\t\thi = caseOrbit.$length;\n\t\twhile (true) {\n\t\t\tif (!(lo < hi)) { break; }\n\t\t\tm = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\")) >> 0;\n\t\t\tif ((((m < 0 || m >= caseOrbit.$length) ? $throwRuntimeError(\"index out of range\") : caseOrbit.$array[caseOrbit.$offset + m]).From >> 0) < r) {\n\t\t\t\tlo = m + 1 >> 0;\n\t\t\t} else {\n\t\t\t\thi = m;\n\t\t\t}\n\t\t}\n\t\tif (lo < caseOrbit.$length && ((((lo < 0 || lo >= caseOrbit.$length) ? $throwRuntimeError(\"index out of range\") : caseOrbit.$array[caseOrbit.$offset + lo]).From >> 0) === r)) {\n\t\t\treturn (((lo < 0 || lo >= caseOrbit.$length) ? $throwRuntimeError(\"index out of range\") : caseOrbit.$array[caseOrbit.$offset + lo]).To >> 0);\n\t\t}\n\t\tl = ToLower(r);\n\t\tif (!((l === r))) {\n\t\t\treturn l;\n\t\t}\n\t\treturn ToUpper(r);\n\t};\n\t$pkg.SimpleFold = SimpleFold;\n\tRangeTable.init([{prop: \"R16\", name: \"R16\", pkg: \"\", typ: sliceType, tag: \"\"}, {prop: \"R32\", name: \"R32\", pkg: \"\", typ: sliceType$1, tag: \"\"}, {prop: \"LatinOffset\", name: \"LatinOffset\", pkg: \"\", typ: $Int, tag: \"\"}]);\n\tRange16.init([{prop: \"Lo\", name: \"Lo\", pkg: \"\", typ: $Uint16, tag: \"\"}, {prop: \"Hi\", name: \"Hi\", pkg: \"\", typ: $Uint16, tag: \"\"}, {prop: \"Stride\", name: \"Stride\", pkg: \"\", typ: $Uint16, tag: \"\"}]);\n\tRange32.init([{prop: \"Lo\", name: \"Lo\", pkg: \"\", typ: $Uint32, tag: \"\"}, {prop: \"Hi\", name: \"Hi\", pkg: \"\", typ: $Uint32, tag: \"\"}, {prop: \"Stride\", name: \"Stride\", pkg: \"\", typ: $Uint32, tag: \"\"}]);\n\tCaseRange.init([{prop: \"Lo\", name: \"Lo\", pkg: \"\", typ: $Uint32, tag: \"\"}, {prop: \"Hi\", name: \"Hi\", pkg: \"\", typ: $Uint32, tag: \"\"}, {prop: \"Delta\", name: \"Delta\", pkg: \"\", typ: d, tag: \"\"}]);\n\td.init($Int32, 3);\n\tfoldPair.init([{prop: \"From\", name: \"From\", pkg: \"\", typ: $Uint16, tag: \"\"}, {prop: \"To\", name: \"To\", pkg: \"\", typ: $Uint16, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_L = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(97, 122, 1), new Range16.ptr(170, 181, 11), new Range16.ptr(186, 192, 6), new Range16.ptr(193, 214, 1), new Range16.ptr(216, 246, 1), new Range16.ptr(248, 705, 1), new Range16.ptr(710, 721, 1), new Range16.ptr(736, 740, 1), new Range16.ptr(748, 750, 2), new Range16.ptr(880, 884, 1), new Range16.ptr(886, 887, 1), new Range16.ptr(890, 893, 1), new Range16.ptr(895, 902, 7), new Range16.ptr(904, 906, 1), new Range16.ptr(908, 910, 2), new Range16.ptr(911, 929, 1), new Range16.ptr(931, 1013, 1), new Range16.ptr(1015, 1153, 1), new Range16.ptr(1162, 1327, 1), new Range16.ptr(1329, 1366, 1), new Range16.ptr(1369, 1377, 8), new Range16.ptr(1378, 1415, 1), new Range16.ptr(1488, 1514, 1), new Range16.ptr(1520, 1522, 1), new Range16.ptr(1568, 1610, 1), new Range16.ptr(1646, 1647, 1), new Range16.ptr(1649, 1747, 1), new Range16.ptr(1749, 1765, 16), new Range16.ptr(1766, 1774, 8), new Range16.ptr(1775, 1786, 11), new Range16.ptr(1787, 1788, 1), new Range16.ptr(1791, 1808, 17), new Range16.ptr(1810, 1839, 1), new Range16.ptr(1869, 1957, 1), new Range16.ptr(1969, 1994, 25), new Range16.ptr(1995, 2026, 1), new Range16.ptr(2036, 2037, 1), new Range16.ptr(2042, 2048, 6), new Range16.ptr(2049, 2069, 1), new Range16.ptr(2074, 2084, 10), new Range16.ptr(2088, 2112, 24), new Range16.ptr(2113, 2136, 1), new Range16.ptr(2208, 2226, 1), new Range16.ptr(2308, 2361, 1), new Range16.ptr(2365, 2384, 19), new Range16.ptr(2392, 2401, 1), new Range16.ptr(2417, 2432, 1), new Range16.ptr(2437, 2444, 1), new Range16.ptr(2447, 2448, 1), new Range16.ptr(2451, 2472, 1), new Range16.ptr(2474, 2480, 1), new Range16.ptr(2482, 2486, 4), new Range16.ptr(2487, 2489, 1), new Range16.ptr(2493, 2510, 17), new Range16.ptr(2524, 2525, 1), new Range16.ptr(2527, 2529, 1), new Range16.ptr(2544, 2545, 1), new Range16.ptr(2565, 2570, 1), new Range16.ptr(2575, 2576, 1), new Range16.ptr(2579, 2600, 1), new Range16.ptr(2602, 2608, 1), new Range16.ptr(2610, 2611, 1), new Range16.ptr(2613, 2614, 1), new Range16.ptr(2616, 2617, 1), new Range16.ptr(2649, 2652, 1), new Range16.ptr(2654, 2674, 20), new Range16.ptr(2675, 2676, 1), new Range16.ptr(2693, 2701, 1), new Range16.ptr(2703, 2705, 1), new Range16.ptr(2707, 2728, 1), new Range16.ptr(2730, 2736, 1), new Range16.ptr(2738, 2739, 1), new Range16.ptr(2741, 2745, 1), new Range16.ptr(2749, 2768, 19), new Range16.ptr(2784, 2785, 1), new Range16.ptr(2821, 2828, 1), new Range16.ptr(2831, 2832, 1), new Range16.ptr(2835, 2856, 1), new Range16.ptr(2858, 2864, 1), new Range16.ptr(2866, 2867, 1), new Range16.ptr(2869, 2873, 1), new Range16.ptr(2877, 2908, 31), new Range16.ptr(2909, 2911, 2), new Range16.ptr(2912, 2913, 1), new Range16.ptr(2929, 2947, 18), new Range16.ptr(2949, 2954, 1), new Range16.ptr(2958, 2960, 1), new Range16.ptr(2962, 2965, 1), new Range16.ptr(2969, 2970, 1), new Range16.ptr(2972, 2974, 2), new Range16.ptr(2975, 2979, 4), new Range16.ptr(2980, 2984, 4), new Range16.ptr(2985, 2986, 1), new Range16.ptr(2990, 3001, 1), new Range16.ptr(3024, 3077, 53), new Range16.ptr(3078, 3084, 1), new Range16.ptr(3086, 3088, 1), new Range16.ptr(3090, 3112, 1), new Range16.ptr(3114, 3129, 1), new Range16.ptr(3133, 3160, 27), new Range16.ptr(3161, 3168, 7), new Range16.ptr(3169, 3205, 36), new Range16.ptr(3206, 3212, 1), new Range16.ptr(3214, 3216, 1), new Range16.ptr(3218, 3240, 1), new Range16.ptr(3242, 3251, 1), new Range16.ptr(3253, 3257, 1), new Range16.ptr(3261, 3294, 33), new Range16.ptr(3296, 3297, 1), new Range16.ptr(3313, 3314, 1), new Range16.ptr(3333, 3340, 1), new Range16.ptr(3342, 3344, 1), new Range16.ptr(3346, 3386, 1), new Range16.ptr(3389, 3406, 17), new Range16.ptr(3424, 3425, 1), new Range16.ptr(3450, 3455, 1), new Range16.ptr(3461, 3478, 1), new Range16.ptr(3482, 3505, 1), new Range16.ptr(3507, 3515, 1), new Range16.ptr(3517, 3520, 3), new Range16.ptr(3521, 3526, 1), new Range16.ptr(3585, 3632, 1), new Range16.ptr(3634, 3635, 1), new Range16.ptr(3648, 3654, 1), new Range16.ptr(3713, 3714, 1), new Range16.ptr(3716, 3719, 3), new Range16.ptr(3720, 3722, 2), new Range16.ptr(3725, 3732, 7), new Range16.ptr(3733, 3735, 1), new Range16.ptr(3737, 3743, 1), new Range16.ptr(3745, 3747, 1), new Range16.ptr(3749, 3751, 2), new Range16.ptr(3754, 3755, 1), new Range16.ptr(3757, 3760, 1), new Range16.ptr(3762, 3763, 1), new Range16.ptr(3773, 3776, 3), new Range16.ptr(3777, 3780, 1), new Range16.ptr(3782, 3804, 22), new Range16.ptr(3805, 3807, 1), new Range16.ptr(3840, 3904, 64), new Range16.ptr(3905, 3911, 1), new Range16.ptr(3913, 3948, 1), new Range16.ptr(3976, 3980, 1), new Range16.ptr(4096, 4138, 1), new Range16.ptr(4159, 4176, 17), new Range16.ptr(4177, 4181, 1), new Range16.ptr(4186, 4189, 1), new Range16.ptr(4193, 4197, 4), new Range16.ptr(4198, 4206, 8), new Range16.ptr(4207, 4208, 1), new Range16.ptr(4213, 4225, 1), new Range16.ptr(4238, 4256, 18), new Range16.ptr(4257, 4293, 1), new Range16.ptr(4295, 4301, 6), new Range16.ptr(4304, 4346, 1), new Range16.ptr(4348, 4680, 1), new Range16.ptr(4682, 4685, 1), new Range16.ptr(4688, 4694, 1), new Range16.ptr(4696, 4698, 2), new Range16.ptr(4699, 4701, 1), new Range16.ptr(4704, 4744, 1), new Range16.ptr(4746, 4749, 1), new Range16.ptr(4752, 4784, 1), new Range16.ptr(4786, 4789, 1), new Range16.ptr(4792, 4798, 1), new Range16.ptr(4800, 4802, 2), new Range16.ptr(4803, 4805, 1), new Range16.ptr(4808, 4822, 1), new Range16.ptr(4824, 4880, 1), new Range16.ptr(4882, 4885, 1), new Range16.ptr(4888, 4954, 1), new Range16.ptr(4992, 5007, 1), new Range16.ptr(5024, 5108, 1), new Range16.ptr(5121, 5740, 1), new Range16.ptr(5743, 5759, 1), new Range16.ptr(5761, 5786, 1), new Range16.ptr(5792, 5866, 1), new Range16.ptr(5873, 5880, 1), new Range16.ptr(5888, 5900, 1), new Range16.ptr(5902, 5905, 1), new Range16.ptr(5920, 5937, 1), new Range16.ptr(5952, 5969, 1), new Range16.ptr(5984, 5996, 1), new Range16.ptr(5998, 6000, 1), new Range16.ptr(6016, 6067, 1), new Range16.ptr(6103, 6108, 5), new Range16.ptr(6176, 6263, 1), new Range16.ptr(6272, 6312, 1), new Range16.ptr(6314, 6320, 6), new Range16.ptr(6321, 6389, 1), new Range16.ptr(6400, 6430, 1), new Range16.ptr(6480, 6509, 1), new Range16.ptr(6512, 6516, 1), new Range16.ptr(6528, 6571, 1), new Range16.ptr(6593, 6599, 1), new Range16.ptr(6656, 6678, 1), new Range16.ptr(6688, 6740, 1), new Range16.ptr(6823, 6917, 94), new Range16.ptr(6918, 6963, 1), new Range16.ptr(6981, 6987, 1), new Range16.ptr(7043, 7072, 1), new Range16.ptr(7086, 7087, 1), new Range16.ptr(7098, 7141, 1), new Range16.ptr(7168, 7203, 1), new Range16.ptr(7245, 7247, 1), new Range16.ptr(7258, 7293, 1), new Range16.ptr(7401, 7404, 1), new Range16.ptr(7406, 7409, 1), new Range16.ptr(7413, 7414, 1), new Range16.ptr(7424, 7615, 1), new Range16.ptr(7680, 7957, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7968, 8005, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8016, 8023, 1), new Range16.ptr(8025, 8031, 2), new Range16.ptr(8032, 8061, 1), new Range16.ptr(8064, 8116, 1), new Range16.ptr(8118, 8124, 1), new Range16.ptr(8126, 8130, 4), new Range16.ptr(8131, 8132, 1), new Range16.ptr(8134, 8140, 1), new Range16.ptr(8144, 8147, 1), new Range16.ptr(8150, 8155, 1), new Range16.ptr(8160, 8172, 1), new Range16.ptr(8178, 8180, 1), new Range16.ptr(8182, 8188, 1), new Range16.ptr(8305, 8319, 14), new Range16.ptr(8336, 8348, 1), new Range16.ptr(8450, 8455, 5), new Range16.ptr(8458, 8467, 1), new Range16.ptr(8469, 8473, 4), new Range16.ptr(8474, 8477, 1), new Range16.ptr(8484, 8490, 2), new Range16.ptr(8491, 8493, 1), new Range16.ptr(8495, 8505, 1), new Range16.ptr(8508, 8511, 1), new Range16.ptr(8517, 8521, 1), new Range16.ptr(8526, 8579, 53), new Range16.ptr(8580, 11264, 2684), new Range16.ptr(11265, 11310, 1), new Range16.ptr(11312, 11358, 1), new Range16.ptr(11360, 11492, 1), new Range16.ptr(11499, 11502, 1), new Range16.ptr(11506, 11507, 1), new Range16.ptr(11520, 11557, 1), new Range16.ptr(11559, 11565, 6), new Range16.ptr(11568, 11623, 1), new Range16.ptr(11631, 11648, 17), new Range16.ptr(11649, 11670, 1), new Range16.ptr(11680, 11686, 1), new Range16.ptr(11688, 11694, 1), new Range16.ptr(11696, 11702, 1), new Range16.ptr(11704, 11710, 1), new Range16.ptr(11712, 11718, 1), new Range16.ptr(11720, 11726, 1), new Range16.ptr(11728, 11734, 1), new Range16.ptr(11736, 11742, 1), new Range16.ptr(11823, 12293, 470), new Range16.ptr(12294, 12337, 43), new Range16.ptr(12338, 12341, 1), new Range16.ptr(12347, 12348, 1), new Range16.ptr(12353, 12438, 1), new Range16.ptr(12445, 12447, 1), new Range16.ptr(12449, 12538, 1), new Range16.ptr(12540, 12543, 1), new Range16.ptr(12549, 12589, 1), new Range16.ptr(12593, 12686, 1), new Range16.ptr(12704, 12730, 1), new Range16.ptr(12784, 12799, 1), new Range16.ptr(13312, 19893, 1), new Range16.ptr(19968, 40908, 1), new Range16.ptr(40960, 42124, 1), new Range16.ptr(42192, 42237, 1), new Range16.ptr(42240, 42508, 1), new Range16.ptr(42512, 42527, 1), new Range16.ptr(42538, 42539, 1), new Range16.ptr(42560, 42606, 1), new Range16.ptr(42623, 42653, 1), new Range16.ptr(42656, 42725, 1), new Range16.ptr(42775, 42783, 1), new Range16.ptr(42786, 42888, 1), new Range16.ptr(42891, 42894, 1), new Range16.ptr(42896, 42925, 1), new Range16.ptr(42928, 42929, 1), new Range16.ptr(42999, 43009, 1), new Range16.ptr(43011, 43013, 1), new Range16.ptr(43015, 43018, 1), new Range16.ptr(43020, 43042, 1), new Range16.ptr(43072, 43123, 1), new Range16.ptr(43138, 43187, 1), new Range16.ptr(43250, 43255, 1), new Range16.ptr(43259, 43274, 15), new Range16.ptr(43275, 43301, 1), new Range16.ptr(43312, 43334, 1), new Range16.ptr(43360, 43388, 1), new Range16.ptr(43396, 43442, 1), new Range16.ptr(43471, 43488, 17), new Range16.ptr(43489, 43492, 1), new Range16.ptr(43494, 43503, 1), new Range16.ptr(43514, 43518, 1), new Range16.ptr(43520, 43560, 1), new Range16.ptr(43584, 43586, 1), new Range16.ptr(43588, 43595, 1), new Range16.ptr(43616, 43638, 1), new Range16.ptr(43642, 43646, 4), new Range16.ptr(43647, 43695, 1), new Range16.ptr(43697, 43701, 4), new Range16.ptr(43702, 43705, 3), new Range16.ptr(43706, 43709, 1), new Range16.ptr(43712, 43714, 2), new Range16.ptr(43739, 43741, 1), new Range16.ptr(43744, 43754, 1), new Range16.ptr(43762, 43764, 1), new Range16.ptr(43777, 43782, 1), new Range16.ptr(43785, 43790, 1), new Range16.ptr(43793, 43798, 1), new Range16.ptr(43808, 43814, 1), new Range16.ptr(43816, 43822, 1), new Range16.ptr(43824, 43866, 1), new Range16.ptr(43868, 43871, 1), new Range16.ptr(43876, 43877, 1), new Range16.ptr(43968, 44002, 1), new Range16.ptr(44032, 55203, 1), new Range16.ptr(55216, 55238, 1), new Range16.ptr(55243, 55291, 1), new Range16.ptr(63744, 64109, 1), new Range16.ptr(64112, 64217, 1), new Range16.ptr(64256, 64262, 1), new Range16.ptr(64275, 64279, 1), new Range16.ptr(64285, 64287, 2), new Range16.ptr(64288, 64296, 1), new Range16.ptr(64298, 64310, 1), new Range16.ptr(64312, 64316, 1), new Range16.ptr(64318, 64320, 2), new Range16.ptr(64321, 64323, 2), new Range16.ptr(64324, 64326, 2), new Range16.ptr(64327, 64433, 1), new Range16.ptr(64467, 64829, 1), new Range16.ptr(64848, 64911, 1), new Range16.ptr(64914, 64967, 1), new Range16.ptr(65008, 65019, 1), new Range16.ptr(65136, 65140, 1), new Range16.ptr(65142, 65276, 1), new Range16.ptr(65313, 65338, 1), new Range16.ptr(65345, 65370, 1), new Range16.ptr(65382, 65470, 1), new Range16.ptr(65474, 65479, 1), new Range16.ptr(65482, 65487, 1), new Range16.ptr(65490, 65495, 1), new Range16.ptr(65498, 65500, 1)]), new sliceType$1([new Range32.ptr(65536, 65547, 1), new Range32.ptr(65549, 65574, 1), new Range32.ptr(65576, 65594, 1), new Range32.ptr(65596, 65597, 1), new Range32.ptr(65599, 65613, 1), new Range32.ptr(65616, 65629, 1), new Range32.ptr(65664, 65786, 1), new Range32.ptr(66176, 66204, 1), new Range32.ptr(66208, 66256, 1), new Range32.ptr(66304, 66335, 1), new Range32.ptr(66352, 66368, 1), new Range32.ptr(66370, 66377, 1), new Range32.ptr(66384, 66421, 1), new Range32.ptr(66432, 66461, 1), new Range32.ptr(66464, 66499, 1), new Range32.ptr(66504, 66511, 1), new Range32.ptr(66560, 66717, 1), new Range32.ptr(66816, 66855, 1), new Range32.ptr(66864, 66915, 1), new Range32.ptr(67072, 67382, 1), new Range32.ptr(67392, 67413, 1), new Range32.ptr(67424, 67431, 1), new Range32.ptr(67584, 67589, 1), new Range32.ptr(67592, 67594, 2), new Range32.ptr(67595, 67637, 1), new Range32.ptr(67639, 67640, 1), new Range32.ptr(67644, 67647, 3), new Range32.ptr(67648, 67669, 1), new Range32.ptr(67680, 67702, 1), new Range32.ptr(67712, 67742, 1), new Range32.ptr(67840, 67861, 1), new Range32.ptr(67872, 67897, 1), new Range32.ptr(67968, 68023, 1), new Range32.ptr(68030, 68031, 1), new Range32.ptr(68096, 68112, 16), new Range32.ptr(68113, 68115, 1), new Range32.ptr(68117, 68119, 1), new Range32.ptr(68121, 68147, 1), new Range32.ptr(68192, 68220, 1), new Range32.ptr(68224, 68252, 1), new Range32.ptr(68288, 68295, 1), new Range32.ptr(68297, 68324, 1), new Range32.ptr(68352, 68405, 1), new Range32.ptr(68416, 68437, 1), new Range32.ptr(68448, 68466, 1), new Range32.ptr(68480, 68497, 1), new Range32.ptr(68608, 68680, 1), new Range32.ptr(69635, 69687, 1), new Range32.ptr(69763, 69807, 1), new Range32.ptr(69840, 69864, 1), new Range32.ptr(69891, 69926, 1), new Range32.ptr(69968, 70002, 1), new Range32.ptr(70006, 70019, 13), new Range32.ptr(70020, 70066, 1), new Range32.ptr(70081, 70084, 1), new Range32.ptr(70106, 70144, 38), new Range32.ptr(70145, 70161, 1), new Range32.ptr(70163, 70187, 1), new Range32.ptr(70320, 70366, 1), new Range32.ptr(70405, 70412, 1), new Range32.ptr(70415, 70416, 1), new Range32.ptr(70419, 70440, 1), new Range32.ptr(70442, 70448, 1), new Range32.ptr(70450, 70451, 1), new Range32.ptr(70453, 70457, 1), new Range32.ptr(70461, 70493, 32), new Range32.ptr(70494, 70497, 1), new Range32.ptr(70784, 70831, 1), new Range32.ptr(70852, 70853, 1), new Range32.ptr(70855, 71040, 185), new Range32.ptr(71041, 71086, 1), new Range32.ptr(71168, 71215, 1), new Range32.ptr(71236, 71296, 60), new Range32.ptr(71297, 71338, 1), new Range32.ptr(71840, 71903, 1), new Range32.ptr(71935, 72384, 449), new Range32.ptr(72385, 72440, 1), new Range32.ptr(73728, 74648, 1), new Range32.ptr(77824, 78894, 1), new Range32.ptr(92160, 92728, 1), new Range32.ptr(92736, 92766, 1), new Range32.ptr(92880, 92909, 1), new Range32.ptr(92928, 92975, 1), new Range32.ptr(92992, 92995, 1), new Range32.ptr(93027, 93047, 1), new Range32.ptr(93053, 93071, 1), new Range32.ptr(93952, 94020, 1), new Range32.ptr(94032, 94099, 67), new Range32.ptr(94100, 94111, 1), new Range32.ptr(110592, 110593, 1), new Range32.ptr(113664, 113770, 1), new Range32.ptr(113776, 113788, 1), new Range32.ptr(113792, 113800, 1), new Range32.ptr(113808, 113817, 1), new Range32.ptr(119808, 119892, 1), new Range32.ptr(119894, 119964, 1), new Range32.ptr(119966, 119967, 1), new Range32.ptr(119970, 119973, 3), new Range32.ptr(119974, 119977, 3), new Range32.ptr(119978, 119980, 1), new Range32.ptr(119982, 119993, 1), new Range32.ptr(119995, 119997, 2), new Range32.ptr(119998, 120003, 1), new Range32.ptr(120005, 120069, 1), new Range32.ptr(120071, 120074, 1), new Range32.ptr(120077, 120084, 1), new Range32.ptr(120086, 120092, 1), new Range32.ptr(120094, 120121, 1), new Range32.ptr(120123, 120126, 1), new Range32.ptr(120128, 120132, 1), new Range32.ptr(120134, 120138, 4), new Range32.ptr(120139, 120144, 1), new Range32.ptr(120146, 120485, 1), new Range32.ptr(120488, 120512, 1), new Range32.ptr(120514, 120538, 1), new Range32.ptr(120540, 120570, 1), new Range32.ptr(120572, 120596, 1), new Range32.ptr(120598, 120628, 1), new Range32.ptr(120630, 120654, 1), new Range32.ptr(120656, 120686, 1), new Range32.ptr(120688, 120712, 1), new Range32.ptr(120714, 120744, 1), new Range32.ptr(120746, 120770, 1), new Range32.ptr(120772, 120779, 1), new Range32.ptr(124928, 125124, 1), new Range32.ptr(126464, 126467, 1), new Range32.ptr(126469, 126495, 1), new Range32.ptr(126497, 126498, 1), new Range32.ptr(126500, 126503, 3), new Range32.ptr(126505, 126514, 1), new Range32.ptr(126516, 126519, 1), new Range32.ptr(126521, 126523, 2), new Range32.ptr(126530, 126535, 5), new Range32.ptr(126537, 126541, 2), new Range32.ptr(126542, 126543, 1), new Range32.ptr(126545, 126546, 1), new Range32.ptr(126548, 126551, 3), new Range32.ptr(126553, 126561, 2), new Range32.ptr(126562, 126564, 2), new Range32.ptr(126567, 126570, 1), new Range32.ptr(126572, 126578, 1), new Range32.ptr(126580, 126583, 1), new Range32.ptr(126585, 126588, 1), new Range32.ptr(126590, 126592, 2), new Range32.ptr(126593, 126601, 1), new Range32.ptr(126603, 126619, 1), new Range32.ptr(126625, 126627, 1), new Range32.ptr(126629, 126633, 1), new Range32.ptr(126635, 126651, 1), new Range32.ptr(131072, 173782, 1), new Range32.ptr(173824, 177972, 1), new Range32.ptr(177984, 178205, 1), new Range32.ptr(194560, 195101, 1)]), 6);\n\t\t_Nd = new RangeTable.ptr(new sliceType([new Range16.ptr(48, 57, 1), new Range16.ptr(1632, 1641, 1), new Range16.ptr(1776, 1785, 1), new Range16.ptr(1984, 1993, 1), new Range16.ptr(2406, 2415, 1), new Range16.ptr(2534, 2543, 1), new Range16.ptr(2662, 2671, 1), new Range16.ptr(2790, 2799, 1), new Range16.ptr(2918, 2927, 1), new Range16.ptr(3046, 3055, 1), new Range16.ptr(3174, 3183, 1), new Range16.ptr(3302, 3311, 1), new Range16.ptr(3430, 3439, 1), new Range16.ptr(3558, 3567, 1), new Range16.ptr(3664, 3673, 1), new Range16.ptr(3792, 3801, 1), new Range16.ptr(3872, 3881, 1), new Range16.ptr(4160, 4169, 1), new Range16.ptr(4240, 4249, 1), new Range16.ptr(6112, 6121, 1), new Range16.ptr(6160, 6169, 1), new Range16.ptr(6470, 6479, 1), new Range16.ptr(6608, 6617, 1), new Range16.ptr(6784, 6793, 1), new Range16.ptr(6800, 6809, 1), new Range16.ptr(6992, 7001, 1), new Range16.ptr(7088, 7097, 1), new Range16.ptr(7232, 7241, 1), new Range16.ptr(7248, 7257, 1), new Range16.ptr(42528, 42537, 1), new Range16.ptr(43216, 43225, 1), new Range16.ptr(43264, 43273, 1), new Range16.ptr(43472, 43481, 1), new Range16.ptr(43504, 43513, 1), new Range16.ptr(43600, 43609, 1), new Range16.ptr(44016, 44025, 1), new Range16.ptr(65296, 65305, 1)]), new sliceType$1([new Range32.ptr(66720, 66729, 1), new Range32.ptr(69734, 69743, 1), new Range32.ptr(69872, 69881, 1), new Range32.ptr(69942, 69951, 1), new Range32.ptr(70096, 70105, 1), new Range32.ptr(70384, 70393, 1), new Range32.ptr(70864, 70873, 1), new Range32.ptr(71248, 71257, 1), new Range32.ptr(71360, 71369, 1), new Range32.ptr(71904, 71913, 1), new Range32.ptr(92768, 92777, 1), new Range32.ptr(93008, 93017, 1), new Range32.ptr(120782, 120831, 1)]), 1);\n\t\t$pkg.Digit = _Nd;\n\t\t$pkg.Letter = _L;\n\t\t_CaseRanges = new sliceType$3([new CaseRange.ptr(65, 90, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(97, 122, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(181, 181, $toNativeArray($kindInt32, [743, 0, 743])), new CaseRange.ptr(192, 214, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(216, 222, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(224, 246, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(248, 254, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(255, 255, $toNativeArray($kindInt32, [121, 0, 121])), new CaseRange.ptr(256, 303, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(304, 304, $toNativeArray($kindInt32, [0, -199, 0])), new CaseRange.ptr(305, 305, $toNativeArray($kindInt32, [-232, 0, -232])), new CaseRange.ptr(306, 311, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(313, 328, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(330, 375, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(376, 376, $toNativeArray($kindInt32, [0, -121, 0])), new CaseRange.ptr(377, 382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(383, 383, $toNativeArray($kindInt32, [-300, 0, -300])), new CaseRange.ptr(384, 384, $toNativeArray($kindInt32, [195, 0, 195])), new CaseRange.ptr(385, 385, $toNativeArray($kindInt32, [0, 210, 0])), new CaseRange.ptr(386, 389, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(390, 390, $toNativeArray($kindInt32, [0, 206, 0])), new CaseRange.ptr(391, 392, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(393, 394, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(395, 396, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(398, 398, $toNativeArray($kindInt32, [0, 79, 0])), new CaseRange.ptr(399, 399, $toNativeArray($kindInt32, [0, 202, 0])), new CaseRange.ptr(400, 400, $toNativeArray($kindInt32, [0, 203, 0])), new CaseRange.ptr(401, 402, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(403, 403, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(404, 404, $toNativeArray($kindInt32, [0, 207, 0])), new CaseRange.ptr(405, 405, $toNativeArray($kindInt32, [97, 0, 97])), new CaseRange.ptr(406, 406, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(407, 407, $toNativeArray($kindInt32, [0, 209, 0])), new CaseRange.ptr(408, 409, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(410, 410, $toNativeArray($kindInt32, [163, 0, 163])), new CaseRange.ptr(412, 412, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(413, 413, $toNativeArray($kindInt32, [0, 213, 0])), new CaseRange.ptr(414, 414, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(415, 415, $toNativeArray($kindInt32, [0, 214, 0])), new CaseRange.ptr(416, 421, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(422, 422, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(423, 424, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(425, 425, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(428, 429, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(430, 430, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(431, 432, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(433, 434, $toNativeArray($kindInt32, [0, 217, 0])), new CaseRange.ptr(435, 438, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(439, 439, $toNativeArray($kindInt32, [0, 219, 0])), new CaseRange.ptr(440, 441, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(444, 445, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(447, 447, $toNativeArray($kindInt32, [56, 0, 56])), new CaseRange.ptr(452, 452, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(453, 453, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(454, 454, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(455, 455, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(456, 456, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(457, 457, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(458, 458, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(459, 459, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(460, 460, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(461, 476, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(477, 477, $toNativeArray($kindInt32, [-79, 0, -79])), new CaseRange.ptr(478, 495, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(497, 497, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(498, 498, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(499, 499, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(500, 501, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(502, 502, $toNativeArray($kindInt32, [0, -97, 0])), new CaseRange.ptr(503, 503, $toNativeArray($kindInt32, [0, -56, 0])), new CaseRange.ptr(504, 543, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(544, 544, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(546, 563, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(570, 570, $toNativeArray($kindInt32, [0, 10795, 0])), new CaseRange.ptr(571, 572, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(573, 573, $toNativeArray($kindInt32, [0, -163, 0])), new CaseRange.ptr(574, 574, $toNativeArray($kindInt32, [0, 10792, 0])), new CaseRange.ptr(575, 576, $toNativeArray($kindInt32, [10815, 0, 10815])), new CaseRange.ptr(577, 578, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(579, 579, $toNativeArray($kindInt32, [0, -195, 0])), new CaseRange.ptr(580, 580, $toNativeArray($kindInt32, [0, 69, 0])), new CaseRange.ptr(581, 581, $toNativeArray($kindInt32, [0, 71, 0])), new CaseRange.ptr(582, 591, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(592, 592, $toNativeArray($kindInt32, [10783, 0, 10783])), new CaseRange.ptr(593, 593, $toNativeArray($kindInt32, [10780, 0, 10780])), new CaseRange.ptr(594, 594, $toNativeArray($kindInt32, [10782, 0, 10782])), new CaseRange.ptr(595, 595, $toNativeArray($kindInt32, [-210, 0, -210])), new CaseRange.ptr(596, 596, $toNativeArray($kindInt32, [-206, 0, -206])), new CaseRange.ptr(598, 599, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(601, 601, $toNativeArray($kindInt32, [-202, 0, -202])), new CaseRange.ptr(603, 603, $toNativeArray($kindInt32, [-203, 0, -203])), new CaseRange.ptr(604, 604, $toNativeArray($kindInt32, [42319, 0, 42319])), new CaseRange.ptr(608, 608, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(609, 609, $toNativeArray($kindInt32, [42315, 0, 42315])), new CaseRange.ptr(611, 611, $toNativeArray($kindInt32, [-207, 0, -207])), new CaseRange.ptr(613, 613, $toNativeArray($kindInt32, [42280, 0, 42280])), new CaseRange.ptr(614, 614, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(616, 616, $toNativeArray($kindInt32, [-209, 0, -209])), new CaseRange.ptr(617, 617, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(619, 619, $toNativeArray($kindInt32, [10743, 0, 10743])), new CaseRange.ptr(620, 620, $toNativeArray($kindInt32, [42305, 0, 42305])), new CaseRange.ptr(623, 623, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(625, 625, $toNativeArray($kindInt32, [10749, 0, 10749])), new CaseRange.ptr(626, 626, $toNativeArray($kindInt32, [-213, 0, -213])), new CaseRange.ptr(629, 629, $toNativeArray($kindInt32, [-214, 0, -214])), new CaseRange.ptr(637, 637, $toNativeArray($kindInt32, [10727, 0, 10727])), new CaseRange.ptr(640, 640, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(643, 643, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(647, 647, $toNativeArray($kindInt32, [42282, 0, 42282])), new CaseRange.ptr(648, 648, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(649, 649, $toNativeArray($kindInt32, [-69, 0, -69])), new CaseRange.ptr(650, 651, $toNativeArray($kindInt32, [-217, 0, -217])), new CaseRange.ptr(652, 652, $toNativeArray($kindInt32, [-71, 0, -71])), new CaseRange.ptr(658, 658, $toNativeArray($kindInt32, [-219, 0, -219])), new CaseRange.ptr(670, 670, $toNativeArray($kindInt32, [42258, 0, 42258])), new CaseRange.ptr(837, 837, $toNativeArray($kindInt32, [84, 0, 84])), new CaseRange.ptr(880, 883, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(886, 887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(891, 893, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(895, 895, $toNativeArray($kindInt32, [0, 116, 0])), new CaseRange.ptr(902, 902, $toNativeArray($kindInt32, [0, 38, 0])), new CaseRange.ptr(904, 906, $toNativeArray($kindInt32, [0, 37, 0])), new CaseRange.ptr(908, 908, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(910, 911, $toNativeArray($kindInt32, [0, 63, 0])), new CaseRange.ptr(913, 929, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(931, 939, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(940, 940, $toNativeArray($kindInt32, [-38, 0, -38])), new CaseRange.ptr(941, 943, $toNativeArray($kindInt32, [-37, 0, -37])), new CaseRange.ptr(945, 961, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(962, 962, $toNativeArray($kindInt32, [-31, 0, -31])), new CaseRange.ptr(963, 971, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(972, 972, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(973, 974, $toNativeArray($kindInt32, [-63, 0, -63])), new CaseRange.ptr(975, 975, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(976, 976, $toNativeArray($kindInt32, [-62, 0, -62])), new CaseRange.ptr(977, 977, $toNativeArray($kindInt32, [-57, 0, -57])), new CaseRange.ptr(981, 981, $toNativeArray($kindInt32, [-47, 0, -47])), new CaseRange.ptr(982, 982, $toNativeArray($kindInt32, [-54, 0, -54])), new CaseRange.ptr(983, 983, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(984, 1007, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1008, 1008, $toNativeArray($kindInt32, [-86, 0, -86])), new CaseRange.ptr(1009, 1009, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1010, 1010, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(1011, 1011, $toNativeArray($kindInt32, [-116, 0, -116])), new CaseRange.ptr(1012, 1012, $toNativeArray($kindInt32, [0, -60, 0])), new CaseRange.ptr(1013, 1013, $toNativeArray($kindInt32, [-96, 0, -96])), new CaseRange.ptr(1015, 1016, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1017, 1017, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(1018, 1019, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1021, 1023, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(1024, 1039, $toNativeArray($kindInt32, [0, 80, 0])), new CaseRange.ptr(1040, 1071, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(1072, 1103, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(1104, 1119, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1120, 1153, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1162, 1215, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1216, 1216, $toNativeArray($kindInt32, [0, 15, 0])), new CaseRange.ptr(1217, 1230, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1231, 1231, $toNativeArray($kindInt32, [-15, 0, -15])), new CaseRange.ptr(1232, 1327, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1329, 1366, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(1377, 1414, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(4256, 4293, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4295, 4295, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4301, 4301, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(7545, 7545, $toNativeArray($kindInt32, [35332, 0, 35332])), new CaseRange.ptr(7549, 7549, $toNativeArray($kindInt32, [3814, 0, 3814])), new CaseRange.ptr(7680, 7829, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7835, 7835, $toNativeArray($kindInt32, [-59, 0, -59])), new CaseRange.ptr(7838, 7838, $toNativeArray($kindInt32, [0, -7615, 0])), new CaseRange.ptr(7840, 7935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7936, 7943, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7944, 7951, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7952, 7957, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7960, 7965, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7968, 7975, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7976, 7983, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7984, 7991, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7992, 7999, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8000, 8005, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8008, 8013, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8017, 8017, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8019, 8019, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8021, 8021, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8023, 8023, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8025, 8025, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8027, 8027, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8029, 8029, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8031, 8031, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8032, 8039, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8040, 8047, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8048, 8049, $toNativeArray($kindInt32, [74, 0, 74])), new CaseRange.ptr(8050, 8053, $toNativeArray($kindInt32, [86, 0, 86])), new CaseRange.ptr(8054, 8055, $toNativeArray($kindInt32, [100, 0, 100])), new CaseRange.ptr(8056, 8057, $toNativeArray($kindInt32, [128, 0, 128])), new CaseRange.ptr(8058, 8059, $toNativeArray($kindInt32, [112, 0, 112])), new CaseRange.ptr(8060, 8061, $toNativeArray($kindInt32, [126, 0, 126])), new CaseRange.ptr(8064, 8071, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8072, 8079, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8080, 8087, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8088, 8095, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8096, 8103, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8104, 8111, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8112, 8113, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8115, 8115, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8120, 8121, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8122, 8123, $toNativeArray($kindInt32, [0, -74, 0])), new CaseRange.ptr(8124, 8124, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8126, 8126, $toNativeArray($kindInt32, [-7205, 0, -7205])), new CaseRange.ptr(8131, 8131, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8136, 8139, $toNativeArray($kindInt32, [0, -86, 0])), new CaseRange.ptr(8140, 8140, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8144, 8145, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8152, 8153, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8154, 8155, $toNativeArray($kindInt32, [0, -100, 0])), new CaseRange.ptr(8160, 8161, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8165, 8165, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(8168, 8169, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8170, 8171, $toNativeArray($kindInt32, [0, -112, 0])), new CaseRange.ptr(8172, 8172, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(8179, 8179, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8184, 8185, $toNativeArray($kindInt32, [0, -128, 0])), new CaseRange.ptr(8186, 8187, $toNativeArray($kindInt32, [0, -126, 0])), new CaseRange.ptr(8188, 8188, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8486, 8486, $toNativeArray($kindInt32, [0, -7517, 0])), new CaseRange.ptr(8490, 8490, $toNativeArray($kindInt32, [0, -8383, 0])), new CaseRange.ptr(8491, 8491, $toNativeArray($kindInt32, [0, -8262, 0])), new CaseRange.ptr(8498, 8498, $toNativeArray($kindInt32, [0, 28, 0])), new CaseRange.ptr(8526, 8526, $toNativeArray($kindInt32, [-28, 0, -28])), new CaseRange.ptr(8544, 8559, $toNativeArray($kindInt32, [0, 16, 0])), new CaseRange.ptr(8560, 8575, $toNativeArray($kindInt32, [-16, 0, -16])), new CaseRange.ptr(8579, 8580, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(9398, 9423, $toNativeArray($kindInt32, [0, 26, 0])), new CaseRange.ptr(9424, 9449, $toNativeArray($kindInt32, [-26, 0, -26])), new CaseRange.ptr(11264, 11310, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(11312, 11358, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(11360, 11361, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11362, 11362, $toNativeArray($kindInt32, [0, -10743, 0])), new CaseRange.ptr(11363, 11363, $toNativeArray($kindInt32, [0, -3814, 0])), new CaseRange.ptr(11364, 11364, $toNativeArray($kindInt32, [0, -10727, 0])), new CaseRange.ptr(11365, 11365, $toNativeArray($kindInt32, [-10795, 0, -10795])), new CaseRange.ptr(11366, 11366, $toNativeArray($kindInt32, [-10792, 0, -10792])), new CaseRange.ptr(11367, 11372, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11373, 11373, $toNativeArray($kindInt32, [0, -10780, 0])), new CaseRange.ptr(11374, 11374, $toNativeArray($kindInt32, [0, -10749, 0])), new CaseRange.ptr(11375, 11375, $toNativeArray($kindInt32, [0, -10783, 0])), new CaseRange.ptr(11376, 11376, $toNativeArray($kindInt32, [0, -10782, 0])), new CaseRange.ptr(11378, 11379, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11381, 11382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11390, 11391, $toNativeArray($kindInt32, [0, -10815, 0])), new CaseRange.ptr(11392, 11491, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11499, 11502, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11506, 11507, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11520, 11557, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11559, 11559, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11565, 11565, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(42560, 42605, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42624, 42651, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42786, 42799, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42802, 42863, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42873, 42876, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42877, 42877, $toNativeArray($kindInt32, [0, -35332, 0])), new CaseRange.ptr(42878, 42887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42891, 42892, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42893, 42893, $toNativeArray($kindInt32, [0, -42280, 0])), new CaseRange.ptr(42896, 42899, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42902, 42921, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42922, 42922, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42923, 42923, $toNativeArray($kindInt32, [0, -42319, 0])), new CaseRange.ptr(42924, 42924, $toNativeArray($kindInt32, [0, -42315, 0])), new CaseRange.ptr(42925, 42925, $toNativeArray($kindInt32, [0, -42305, 0])), new CaseRange.ptr(42928, 42928, $toNativeArray($kindInt32, [0, -42258, 0])), new CaseRange.ptr(42929, 42929, $toNativeArray($kindInt32, [0, -42282, 0])), new CaseRange.ptr(65313, 65338, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(65345, 65370, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(66560, 66599, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66600, 66639, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(71840, 71871, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(71872, 71903, $toNativeArray($kindInt32, [-32, 0, -32]))]);\n\t\t$pkg.CaseRanges = _CaseRanges;\n\t\tproperties = $toNativeArray($kindUint8, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 144, 130, 130, 130, 136, 130, 130, 130, 130, 130, 130, 136, 130, 130, 130, 130, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 130, 130, 136, 136, 136, 130, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 130, 130, 130, 136, 130, 136, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 130, 136, 130, 136, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 130, 136, 136, 136, 136, 136, 130, 136, 136, 224, 130, 136, 0, 136, 136, 136, 136, 132, 132, 136, 192, 130, 130, 136, 132, 224, 130, 132, 132, 132, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 136, 160, 160, 160, 160, 160, 160, 160, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 136, 192, 192, 192, 192, 192, 192, 192, 192]);\n\t\tcaseOrbit = new sliceType$4([new foldPair.ptr(75, 107), new foldPair.ptr(83, 115), new foldPair.ptr(107, 8490), new foldPair.ptr(115, 383), new foldPair.ptr(181, 924), new foldPair.ptr(197, 229), new foldPair.ptr(223, 7838), new foldPair.ptr(229, 8491), new foldPair.ptr(304, 304), new foldPair.ptr(305, 305), new foldPair.ptr(383, 83), new foldPair.ptr(452, 453), new foldPair.ptr(453, 454), new foldPair.ptr(454, 452), new foldPair.ptr(455, 456), new foldPair.ptr(456, 457), new foldPair.ptr(457, 455), new foldPair.ptr(458, 459), new foldPair.ptr(459, 460), new foldPair.ptr(460, 458), new foldPair.ptr(497, 498), new foldPair.ptr(498, 499), new foldPair.ptr(499, 497), new foldPair.ptr(837, 921), new foldPair.ptr(914, 946), new foldPair.ptr(917, 949), new foldPair.ptr(920, 952), new foldPair.ptr(921, 953), new foldPair.ptr(922, 954), new foldPair.ptr(924, 956), new foldPair.ptr(928, 960), new foldPair.ptr(929, 961), new foldPair.ptr(931, 962), new foldPair.ptr(934, 966), new foldPair.ptr(937, 969), new foldPair.ptr(946, 976), new foldPair.ptr(949, 1013), new foldPair.ptr(952, 977), new foldPair.ptr(953, 8126), new foldPair.ptr(954, 1008), new foldPair.ptr(956, 181), new foldPair.ptr(960, 982), new foldPair.ptr(961, 1009), new foldPair.ptr(962, 963), new foldPair.ptr(963, 931), new foldPair.ptr(966, 981), new foldPair.ptr(969, 8486), new foldPair.ptr(976, 914), new foldPair.ptr(977, 1012), new foldPair.ptr(981, 934), new foldPair.ptr(982, 928), new foldPair.ptr(1008, 922), new foldPair.ptr(1009, 929), new foldPair.ptr(1012, 920), new foldPair.ptr(1013, 917), new foldPair.ptr(7776, 7777), new foldPair.ptr(7777, 7835), new foldPair.ptr(7835, 7776), new foldPair.ptr(7838, 223), new foldPair.ptr(8126, 837), new foldPair.ptr(8486, 937), new foldPair.ptr(8490, 75), new foldPair.ptr(8491, 197)]);\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"unicode/utf8\"] = (function() {\n\tvar $pkg = {}, $init, decodeRuneInternal, decodeRuneInStringInternal, DecodeRune, DecodeRuneInString, DecodeLastRune, RuneLen, EncodeRune, RuneCount, RuneCountInString, RuneStart;\n\tdecodeRuneInternal = function(p) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c0, c1, c2, c3, n, p, r, short$1, size;\n\t\tr = 0;\n\t\tsize = 0;\n\t\tshort$1 = false;\n\t\tn = p.$length;\n\t\tif (n < 1) {\n\t\t\t_tmp = 65533; _tmp$1 = 0; _tmp$2 = true; r = _tmp; size = _tmp$1; short$1 = _tmp$2;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tc0 = (0 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 0]);\n\t\tif (c0 < 128) {\n\t\t\t_tmp$3 = (c0 >> 0); _tmp$4 = 1; _tmp$5 = false; r = _tmp$3; size = _tmp$4; short$1 = _tmp$5;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tif (c0 < 192) {\n\t\t\t_tmp$6 = 65533; _tmp$7 = 1; _tmp$8 = false; r = _tmp$6; size = _tmp$7; short$1 = _tmp$8;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tif (n < 2) {\n\t\t\t_tmp$9 = 65533; _tmp$10 = 1; _tmp$11 = true; r = _tmp$9; size = _tmp$10; short$1 = _tmp$11;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tc1 = (1 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 1]);\n\t\tif (c1 < 128 || 192 <= c1) {\n\t\t\t_tmp$12 = 65533; _tmp$13 = 1; _tmp$14 = false; r = _tmp$12; size = _tmp$13; short$1 = _tmp$14;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tif (c0 < 224) {\n\t\t\tr = ((((c0 & 31) >>> 0) >> 0) << 6 >> 0) | (((c1 & 63) >>> 0) >> 0);\n\t\t\tif (r <= 127) {\n\t\t\t\t_tmp$15 = 65533; _tmp$16 = 1; _tmp$17 = false; r = _tmp$15; size = _tmp$16; short$1 = _tmp$17;\n\t\t\t\treturn [r, size, short$1];\n\t\t\t}\n\t\t\t_tmp$18 = r; _tmp$19 = 2; _tmp$20 = false; r = _tmp$18; size = _tmp$19; short$1 = _tmp$20;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tif (n < 3) {\n\t\t\t_tmp$21 = 65533; _tmp$22 = 1; _tmp$23 = true; r = _tmp$21; size = _tmp$22; short$1 = _tmp$23;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tc2 = (2 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 2]);\n\t\tif (c2 < 128 || 192 <= c2) {\n\t\t\t_tmp$24 = 65533; _tmp$25 = 1; _tmp$26 = false; r = _tmp$24; size = _tmp$25; short$1 = _tmp$26;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tif (c0 < 240) {\n\t\t\tr = (((((c0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c2 & 63) >>> 0) >> 0);\n\t\t\tif (r <= 2047) {\n\t\t\t\t_tmp$27 = 65533; _tmp$28 = 1; _tmp$29 = false; r = _tmp$27; size = _tmp$28; short$1 = _tmp$29;\n\t\t\t\treturn [r, size, short$1];\n\t\t\t}\n\t\t\tif (55296 <= r && r <= 57343) {\n\t\t\t\t_tmp$30 = 65533; _tmp$31 = 1; _tmp$32 = false; r = _tmp$30; size = _tmp$31; short$1 = _tmp$32;\n\t\t\t\treturn [r, size, short$1];\n\t\t\t}\n\t\t\t_tmp$33 = r; _tmp$34 = 3; _tmp$35 = false; r = _tmp$33; size = _tmp$34; short$1 = _tmp$35;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tif (n < 4) {\n\t\t\t_tmp$36 = 65533; _tmp$37 = 1; _tmp$38 = true; r = _tmp$36; size = _tmp$37; short$1 = _tmp$38;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tc3 = (3 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 3]);\n\t\tif (c3 < 128 || 192 <= c3) {\n\t\t\t_tmp$39 = 65533; _tmp$40 = 1; _tmp$41 = false; r = _tmp$39; size = _tmp$40; short$1 = _tmp$41;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tif (c0 < 248) {\n\t\t\tr = ((((((c0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((c2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c3 & 63) >>> 0) >> 0);\n\t\t\tif (r <= 65535 || 1114111 < r) {\n\t\t\t\t_tmp$42 = 65533; _tmp$43 = 1; _tmp$44 = false; r = _tmp$42; size = _tmp$43; short$1 = _tmp$44;\n\t\t\t\treturn [r, size, short$1];\n\t\t\t}\n\t\t\t_tmp$45 = r; _tmp$46 = 4; _tmp$47 = false; r = _tmp$45; size = _tmp$46; short$1 = _tmp$47;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\t_tmp$48 = 65533; _tmp$49 = 1; _tmp$50 = false; r = _tmp$48; size = _tmp$49; short$1 = _tmp$50;\n\t\treturn [r, size, short$1];\n\t};\n\tdecodeRuneInStringInternal = function(s) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c0, c1, c2, c3, n, r, s, short$1, size;\n\t\tr = 0;\n\t\tsize = 0;\n\t\tshort$1 = false;\n\t\tn = s.length;\n\t\tif (n < 1) {\n\t\t\t_tmp = 65533; _tmp$1 = 0; _tmp$2 = true; r = _tmp; size = _tmp$1; short$1 = _tmp$2;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tc0 = s.charCodeAt(0);\n\t\tif (c0 < 128) {\n\t\t\t_tmp$3 = (c0 >> 0); _tmp$4 = 1; _tmp$5 = false; r = _tmp$3; size = _tmp$4; short$1 = _tmp$5;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tif (c0 < 192) {\n\t\t\t_tmp$6 = 65533; _tmp$7 = 1; _tmp$8 = false; r = _tmp$6; size = _tmp$7; short$1 = _tmp$8;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tif (n < 2) {\n\t\t\t_tmp$9 = 65533; _tmp$10 = 1; _tmp$11 = true; r = _tmp$9; size = _tmp$10; short$1 = _tmp$11;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tc1 = s.charCodeAt(1);\n\t\tif (c1 < 128 || 192 <= c1) {\n\t\t\t_tmp$12 = 65533; _tmp$13 = 1; _tmp$14 = false; r = _tmp$12; size = _tmp$13; short$1 = _tmp$14;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tif (c0 < 224) {\n\t\t\tr = ((((c0 & 31) >>> 0) >> 0) << 6 >> 0) | (((c1 & 63) >>> 0) >> 0);\n\t\t\tif (r <= 127) {\n\t\t\t\t_tmp$15 = 65533; _tmp$16 = 1; _tmp$17 = false; r = _tmp$15; size = _tmp$16; short$1 = _tmp$17;\n\t\t\t\treturn [r, size, short$1];\n\t\t\t}\n\t\t\t_tmp$18 = r; _tmp$19 = 2; _tmp$20 = false; r = _tmp$18; size = _tmp$19; short$1 = _tmp$20;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tif (n < 3) {\n\t\t\t_tmp$21 = 65533; _tmp$22 = 1; _tmp$23 = true; r = _tmp$21; size = _tmp$22; short$1 = _tmp$23;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tc2 = s.charCodeAt(2);\n\t\tif (c2 < 128 || 192 <= c2) {\n\t\t\t_tmp$24 = 65533; _tmp$25 = 1; _tmp$26 = false; r = _tmp$24; size = _tmp$25; short$1 = _tmp$26;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tif (c0 < 240) {\n\t\t\tr = (((((c0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c2 & 63) >>> 0) >> 0);\n\t\t\tif (r <= 2047) {\n\t\t\t\t_tmp$27 = 65533; _tmp$28 = 1; _tmp$29 = false; r = _tmp$27; size = _tmp$28; short$1 = _tmp$29;\n\t\t\t\treturn [r, size, short$1];\n\t\t\t}\n\t\t\tif (55296 <= r && r <= 57343) {\n\t\t\t\t_tmp$30 = 65533; _tmp$31 = 1; _tmp$32 = false; r = _tmp$30; size = _tmp$31; short$1 = _tmp$32;\n\t\t\t\treturn [r, size, short$1];\n\t\t\t}\n\t\t\t_tmp$33 = r; _tmp$34 = 3; _tmp$35 = false; r = _tmp$33; size = _tmp$34; short$1 = _tmp$35;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tif (n < 4) {\n\t\t\t_tmp$36 = 65533; _tmp$37 = 1; _tmp$38 = true; r = _tmp$36; size = _tmp$37; short$1 = _tmp$38;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tc3 = s.charCodeAt(3);\n\t\tif (c3 < 128 || 192 <= c3) {\n\t\t\t_tmp$39 = 65533; _tmp$40 = 1; _tmp$41 = false; r = _tmp$39; size = _tmp$40; short$1 = _tmp$41;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\tif (c0 < 248) {\n\t\t\tr = ((((((c0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((c2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c3 & 63) >>> 0) >> 0);\n\t\t\tif (r <= 65535 || 1114111 < r) {\n\t\t\t\t_tmp$42 = 65533; _tmp$43 = 1; _tmp$44 = false; r = _tmp$42; size = _tmp$43; short$1 = _tmp$44;\n\t\t\t\treturn [r, size, short$1];\n\t\t\t}\n\t\t\t_tmp$45 = r; _tmp$46 = 4; _tmp$47 = false; r = _tmp$45; size = _tmp$46; short$1 = _tmp$47;\n\t\t\treturn [r, size, short$1];\n\t\t}\n\t\t_tmp$48 = 65533; _tmp$49 = 1; _tmp$50 = false; r = _tmp$48; size = _tmp$49; short$1 = _tmp$50;\n\t\treturn [r, size, short$1];\n\t};\n\tDecodeRune = function(p) {\n\t\tvar $ptr, _tuple, p, r, size;\n\t\tr = 0;\n\t\tsize = 0;\n\t\t_tuple = decodeRuneInternal(p); r = _tuple[0]; size = _tuple[1];\n\t\treturn [r, size];\n\t};\n\t$pkg.DecodeRune = DecodeRune;\n\tDecodeRuneInString = function(s) {\n\t\tvar $ptr, _tuple, r, s, size;\n\t\tr = 0;\n\t\tsize = 0;\n\t\t_tuple = decodeRuneInStringInternal(s); r = _tuple[0]; size = _tuple[1];\n\t\treturn [r, size];\n\t};\n\t$pkg.DecodeRuneInString = DecodeRuneInString;\n\tDecodeLastRune = function(p) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, p, r, size, start;\n\t\tr = 0;\n\t\tsize = 0;\n\t\tend = p.$length;\n\t\tif (end === 0) {\n\t\t\t_tmp = 65533; _tmp$1 = 0; r = _tmp; size = _tmp$1;\n\t\t\treturn [r, size];\n\t\t}\n\t\tstart = end - 1 >> 0;\n\t\tr = (((start < 0 || start >= p.$length) ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + start]) >> 0);\n\t\tif (r < 128) {\n\t\t\t_tmp$2 = r; _tmp$3 = 1; r = _tmp$2; size = _tmp$3;\n\t\t\treturn [r, size];\n\t\t}\n\t\tlim = end - 4 >> 0;\n\t\tif (lim < 0) {\n\t\t\tlim = 0;\n\t\t}\n\t\tstart = start - (1) >> 0;\n\t\twhile (true) {\n\t\t\tif (!(start >= lim)) { break; }\n\t\t\tif (RuneStart(((start < 0 || start >= p.$length) ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + start]))) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tstart = start - (1) >> 0;\n\t\t}\n\t\tif (start < 0) {\n\t\t\tstart = 0;\n\t\t}\n\t\t_tuple = DecodeRune($subslice(p, start, end)); r = _tuple[0]; size = _tuple[1];\n\t\tif (!(((start + size >> 0) === end))) {\n\t\t\t_tmp$4 = 65533; _tmp$5 = 1; r = _tmp$4; size = _tmp$5;\n\t\t\treturn [r, size];\n\t\t}\n\t\t_tmp$6 = r; _tmp$7 = size; r = _tmp$6; size = _tmp$7;\n\t\treturn [r, size];\n\t};\n\t$pkg.DecodeLastRune = DecodeLastRune;\n\tRuneLen = function(r) {\n\t\tvar $ptr, r;\n\t\tif (r < 0) {\n\t\t\treturn -1;\n\t\t} else if (r <= 127) {\n\t\t\treturn 1;\n\t\t} else if (r <= 2047) {\n\t\t\treturn 2;\n\t\t} else if (55296 <= r && r <= 57343) {\n\t\t\treturn -1;\n\t\t} else if (r <= 65535) {\n\t\t\treturn 3;\n\t\t} else if (r <= 1114111) {\n\t\t\treturn 4;\n\t\t}\n\t\treturn -1;\n\t};\n\t$pkg.RuneLen = RuneLen;\n\tEncodeRune = function(p, r) {\n\t\tvar $ptr, i, p, r;\n\t\ti = (r >>> 0);\n\t\tif (i <= 127) {\n\t\t\t(0 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 0] = (r << 24 >>> 24));\n\t\t\treturn 1;\n\t\t} else if (i <= 2047) {\n\t\t\t(0 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 0] = (192 | ((r >> 6 >> 0) << 24 >>> 24)) >>> 0);\n\t\t\t(1 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 1] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0);\n\t\t\treturn 2;\n\t\t} else if (i > 1114111 || 55296 <= i && i <= 57343) {\n\t\t\tr = 65533;\n\t\t\t(0 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 0] = (224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0);\n\t\t\t(1 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 1] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0);\n\t\t\t(2 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 2] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0);\n\t\t\treturn 3;\n\t\t} else if (i <= 65535) {\n\t\t\t(0 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 0] = (224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0);\n\t\t\t(1 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 1] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0);\n\t\t\t(2 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 2] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0);\n\t\t\treturn 3;\n\t\t} else {\n\t\t\t(0 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 0] = (240 | ((r >> 18 >> 0) << 24 >>> 24)) >>> 0);\n\t\t\t(1 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 1] = (128 | ((((r >> 12 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0);\n\t\t\t(2 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 2] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0);\n\t\t\t(3 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 3] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0);\n\t\t\treturn 4;\n\t\t}\n\t};\n\t$pkg.EncodeRune = EncodeRune;\n\tRuneCount = function(p) {\n\t\tvar $ptr, _tuple, i, n, p, size;\n\t\ti = 0;\n\t\tn = 0;\n\t\tn = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < p.$length)) { break; }\n\t\t\tif (((i < 0 || i >= p.$length) ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + i]) < 128) {\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t} else {\n\t\t\t\t_tuple = DecodeRune($subslice(p, i)); size = _tuple[1];\n\t\t\t\ti = i + (size) >> 0;\n\t\t\t}\n\t\t\tn = n + (1) >> 0;\n\t\t}\n\t\treturn n;\n\t};\n\t$pkg.RuneCount = RuneCount;\n\tRuneCountInString = function(s) {\n\t\tvar $ptr, _i, _ref, _rune, n, s;\n\t\tn = 0;\n\t\t_ref = s;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.length)) { break; }\n\t\t\t_rune = $decodeRune(_ref, _i);\n\t\t\tn = n + (1) >> 0;\n\t\t\t_i += _rune[1];\n\t\t}\n\t\treturn n;\n\t};\n\t$pkg.RuneCountInString = RuneCountInString;\n\tRuneStart = function(b) {\n\t\tvar $ptr, b;\n\t\treturn !((((b & 192) >>> 0) === 128));\n\t};\n\t$pkg.RuneStart = RuneStart;\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"bytes\"] = (function() {\n\tvar $pkg = {}, $init, errors, io, unicode, utf8, Buffer, readOp, Reader, ptrType, sliceType, arrayType, arrayType$1, sliceType$1, ptrType$1, IndexByte, Equal, makeSlice, explode, Count, genSplit, SplitN, Map, EqualFold, NewReader;\n\terrors = $packages[\"errors\"];\n\tio = $packages[\"io\"];\n\tunicode = $packages[\"unicode\"];\n\tutf8 = $packages[\"unicode/utf8\"];\n\tBuffer = $pkg.Buffer = $newType(0, $kindStruct, \"bytes.Buffer\", \"Buffer\", \"bytes\", function(buf_, off_, runeBytes_, bootstrap_, lastRead_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.buf = sliceType.nil;\n\t\t\tthis.off = 0;\n\t\t\tthis.runeBytes = arrayType.zero();\n\t\t\tthis.bootstrap = arrayType$1.zero();\n\t\t\tthis.lastRead = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.buf = buf_;\n\t\tthis.off = off_;\n\t\tthis.runeBytes = runeBytes_;\n\t\tthis.bootstrap = bootstrap_;\n\t\tthis.lastRead = lastRead_;\n\t});\n\treadOp = $pkg.readOp = $newType(4, $kindInt, \"bytes.readOp\", \"readOp\", \"bytes\", null);\n\tReader = $pkg.Reader = $newType(0, $kindStruct, \"bytes.Reader\", \"Reader\", \"bytes\", function(s_, i_, prevRune_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.s = sliceType.nil;\n\t\t\tthis.i = new $Int64(0, 0);\n\t\t\tthis.prevRune = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.s = s_;\n\t\tthis.i = i_;\n\t\tthis.prevRune = prevRune_;\n\t});\n\tptrType = $ptrType(Buffer);\n\tsliceType = $sliceType($Uint8);\n\tarrayType = $arrayType($Uint8, 4);\n\tarrayType$1 = $arrayType($Uint8, 64);\n\tsliceType$1 = $sliceType(sliceType);\n\tptrType$1 = $ptrType(Reader);\n\tIndexByte = function(s, c) {\n\t\tvar $ptr, _i, _ref, b, c, i, s;\n\t\t_ref = s;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\tb = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tif (b === c) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t\t_i++;\n\t\t}\n\t\treturn -1;\n\t};\n\t$pkg.IndexByte = IndexByte;\n\tEqual = function(a, b) {\n\t\tvar $ptr, _i, _ref, a, b, c, i;\n\t\tif (!((a.$length === b.$length))) {\n\t\t\treturn false;\n\t\t}\n\t\t_ref = a;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\tc = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tif (!((c === ((i < 0 || i >= b.$length) ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + i])))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t_i++;\n\t\t}\n\t\treturn true;\n\t};\n\t$pkg.Equal = Equal;\n\tBuffer.ptr.prototype.Bytes = function() {\n\t\tvar $ptr, b;\n\t\tb = this;\n\t\treturn $subslice(b.buf, b.off);\n\t};\n\tBuffer.prototype.Bytes = function() { return this.$val.Bytes(); };\n\tBuffer.ptr.prototype.String = function() {\n\t\tvar $ptr, b;\n\t\tb = this;\n\t\tif (b === ptrType.nil) {\n\t\t\treturn \"<nil>\";\n\t\t}\n\t\treturn $bytesToString($subslice(b.buf, b.off));\n\t};\n\tBuffer.prototype.String = function() { return this.$val.String(); };\n\tBuffer.ptr.prototype.Len = function() {\n\t\tvar $ptr, b;\n\t\tb = this;\n\t\treturn b.buf.$length - b.off >> 0;\n\t};\n\tBuffer.prototype.Len = function() { return this.$val.Len(); };\n\tBuffer.ptr.prototype.Truncate = function(n) {\n\t\tvar $ptr, b, n;\n\t\tb = this;\n\t\tb.lastRead = 0;\n\t\tif (n < 0 || n > b.Len()) {\n\t\t\t$panic(new $String(\"bytes.Buffer: truncation out of range\"));\n\t\t} else if (n === 0) {\n\t\t\tb.off = 0;\n\t\t}\n\t\tb.buf = $subslice(b.buf, 0, (b.off + n >> 0));\n\t};\n\tBuffer.prototype.Truncate = function(n) { return this.$val.Truncate(n); };\n\tBuffer.ptr.prototype.Reset = function() {\n\t\tvar $ptr, b;\n\t\tb = this;\n\t\tb.Truncate(0);\n\t};\n\tBuffer.prototype.Reset = function() { return this.$val.Reset(); };\n\tBuffer.ptr.prototype.grow = function(n) {\n\t\tvar $ptr, _q, b, buf, m, n;\n\t\tb = this;\n\t\tm = b.Len();\n\t\tif ((m === 0) && !((b.off === 0))) {\n\t\t\tb.Truncate(0);\n\t\t}\n\t\tif ((b.buf.$length + n >> 0) > b.buf.$capacity) {\n\t\t\tbuf = sliceType.nil;\n\t\t\tif (b.buf === sliceType.nil && n <= 64) {\n\t\t\t\tbuf = $subslice(new sliceType(b.bootstrap), 0);\n\t\t\t} else if ((m + n >> 0) <= (_q = b.buf.$capacity / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\"))) {\n\t\t\t\t$copySlice(b.buf, $subslice(b.buf, b.off));\n\t\t\t\tbuf = $subslice(b.buf, 0, m);\n\t\t\t} else {\n\t\t\t\tbuf = makeSlice((2 * b.buf.$capacity >> 0) + n >> 0);\n\t\t\t\t$copySlice(buf, $subslice(b.buf, b.off));\n\t\t\t}\n\t\t\tb.buf = buf;\n\t\t\tb.off = 0;\n\t\t}\n\t\tb.buf = $subslice(b.buf, 0, ((b.off + m >> 0) + n >> 0));\n\t\treturn b.off + m >> 0;\n\t};\n\tBuffer.prototype.grow = function(n) { return this.$val.grow(n); };\n\tBuffer.ptr.prototype.Grow = function(n) {\n\t\tvar $ptr, b, m, n;\n\t\tb = this;\n\t\tif (n < 0) {\n\t\t\t$panic(new $String(\"bytes.Buffer.Grow: negative count\"));\n\t\t}\n\t\tm = b.grow(n);\n\t\tb.buf = $subslice(b.buf, 0, m);\n\t};\n\tBuffer.prototype.Grow = function(n) { return this.$val.Grow(n); };\n\tBuffer.ptr.prototype.Write = function(p) {\n\t\tvar $ptr, _tmp, _tmp$1, b, err, m, n, p;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tb = this;\n\t\tb.lastRead = 0;\n\t\tm = b.grow(p.$length);\n\t\t_tmp = $copySlice($subslice(b.buf, m), p); _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;\n\t\treturn [n, err];\n\t};\n\tBuffer.prototype.Write = function(p) { return this.$val.Write(p); };\n\tBuffer.ptr.prototype.WriteString = function(s) {\n\t\tvar $ptr, _tmp, _tmp$1, b, err, m, n, s;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tb = this;\n\t\tb.lastRead = 0;\n\t\tm = b.grow(s.length);\n\t\t_tmp = $copyString($subslice(b.buf, m), s); _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;\n\t\treturn [n, err];\n\t};\n\tBuffer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };\n\tBuffer.ptr.prototype.ReadFrom = function(r) {\n\t\tvar $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, free, m, n, newBuf, r, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; free = $f.free; m = $f.m; n = $f.n; newBuf = $f.newBuf; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = new $Int64(0, 0);\n\t\terr = $ifaceNil;\n\t\tb = this;\n\t\tb.lastRead = 0;\n\t\tif (b.off >= b.buf.$length) {\n\t\t\tb.Truncate(0);\n\t\t}\n\t\t/* while (true) { */ case 1:\n\t\t\tfree = b.buf.$capacity - b.buf.$length >> 0;\n\t\t\tif (free < 512) {\n\t\t\t\tnewBuf = b.buf;\n\t\t\t\tif ((b.off + free >> 0) < 512) {\n\t\t\t\t\tnewBuf = makeSlice((2 * b.buf.$capacity >> 0) + 512 >> 0);\n\t\t\t\t}\n\t\t\t\t$copySlice(newBuf, $subslice(b.buf, b.off));\n\t\t\t\tb.buf = $subslice(newBuf, 0, (b.buf.$length - b.off >> 0));\n\t\t\t\tb.off = 0;\n\t\t\t}\n\t\t\t_r = r.Read($subslice(b.buf, b.buf.$length, b.buf.$capacity)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t_tuple = _r; m = _tuple[0]; e = _tuple[1];\n\t\t\tb.buf = $subslice(b.buf, 0, (b.buf.$length + m >> 0));\n\t\t\tn = (x = new $Int64(0, m), new $Int64(n.$high + x.$high, n.$low + x.$low));\n\t\t\tif ($interfaceIsEqual(e, io.EOF)) {\n\t\t\t\t/* break; */ $s = 2; continue;\n\t\t\t}\n\t\t\tif (!($interfaceIsEqual(e, $ifaceNil))) {\n\t\t\t\t_tmp = n; _tmp$1 = e; n = _tmp; err = _tmp$1;\n\t\t\t\treturn [n, err];\n\t\t\t}\n\t\t/* } */ $s = 1; continue; case 2:\n\t\t_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;\n\t\treturn [n, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.ReadFrom }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.free = free; $f.m = m; $f.n = n; $f.newBuf = newBuf; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };\n\tmakeSlice = function(n) {\n\t\tvar $ptr, n, $deferred;\n\t\t/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\t$deferred.push([(function() {\n\t\t\tvar $ptr;\n\t\t\tif (!($interfaceIsEqual($recover(), $ifaceNil))) {\n\t\t\t\t$panic($pkg.ErrTooLarge);\n\t\t\t}\n\t\t}), []]);\n\t\treturn $makeSlice(sliceType, n);\n\t\t/* */ } catch(err) { $err = err; return sliceType.nil; } finally { $callDeferred($deferred, $err); }\n\t};\n\tBuffer.ptr.prototype.WriteTo = function(w) {\n\t\tvar $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, m, n, nBytes, w, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; n = $f.n; nBytes = $f.nBytes; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = new $Int64(0, 0);\n\t\terr = $ifaceNil;\n\t\tb = this;\n\t\tb.lastRead = 0;\n\t\t/* */ if (b.off < b.buf.$length) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (b.off < b.buf.$length) { */ case 1:\n\t\t\tnBytes = b.Len();\n\t\t\t_r = w.Write($subslice(b.buf, b.off)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t_tuple = _r; m = _tuple[0]; e = _tuple[1];\n\t\t\tif (m > nBytes) {\n\t\t\t\t$panic(new $String(\"bytes.Buffer.WriteTo: invalid Write count\"));\n\t\t\t}\n\t\t\tb.off = b.off + (m) >> 0;\n\t\t\tn = new $Int64(0, m);\n\t\t\tif (!($interfaceIsEqual(e, $ifaceNil))) {\n\t\t\t\t_tmp = n; _tmp$1 = e; n = _tmp; err = _tmp$1;\n\t\t\t\treturn [n, err];\n\t\t\t}\n\t\t\tif (!((m === nBytes))) {\n\t\t\t\t_tmp$2 = n; _tmp$3 = io.ErrShortWrite; n = _tmp$2; err = _tmp$3;\n\t\t\t\treturn [n, err];\n\t\t\t}\n\t\t/* } */ case 2:\n\t\tb.Truncate(0);\n\t\treturn [n, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.n = n; $f.nBytes = nBytes; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };\n\tBuffer.ptr.prototype.WriteByte = function(c) {\n\t\tvar $ptr, b, c, m, x;\n\t\tb = this;\n\t\tb.lastRead = 0;\n\t\tm = b.grow(1);\n\t\t(x = b.buf, ((m < 0 || m >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + m] = c));\n\t\treturn $ifaceNil;\n\t};\n\tBuffer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };\n\tBuffer.ptr.prototype.WriteRune = function(r) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, r;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tb = this;\n\t\tif (r < 128) {\n\t\t\tb.WriteByte((r << 24 >>> 24));\n\t\t\t_tmp = 1; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;\n\t\t\treturn [n, err];\n\t\t}\n\t\tn = utf8.EncodeRune($subslice(new sliceType(b.runeBytes), 0), r);\n\t\tb.Write($subslice(new sliceType(b.runeBytes), 0, n));\n\t\t_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;\n\t\treturn [n, err];\n\t};\n\tBuffer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };\n\tBuffer.ptr.prototype.Read = function(p) {\n\t\tvar $ptr, _tmp, _tmp$1, b, err, n, p;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tb = this;\n\t\tb.lastRead = 0;\n\t\tif (b.off >= b.buf.$length) {\n\t\t\tb.Truncate(0);\n\t\t\tif (p.$length === 0) {\n\t\t\t\treturn [n, err];\n\t\t\t}\n\t\t\t_tmp = 0; _tmp$1 = io.EOF; n = _tmp; err = _tmp$1;\n\t\t\treturn [n, err];\n\t\t}\n\t\tn = $copySlice(p, $subslice(b.buf, b.off));\n\t\tb.off = b.off + (n) >> 0;\n\t\tif (n > 0) {\n\t\t\tb.lastRead = 2;\n\t\t}\n\t\treturn [n, err];\n\t};\n\tBuffer.prototype.Read = function(p) { return this.$val.Read(p); };\n\tBuffer.ptr.prototype.Next = function(n) {\n\t\tvar $ptr, b, data, m, n;\n\t\tb = this;\n\t\tb.lastRead = 0;\n\t\tm = b.Len();\n\t\tif (n > m) {\n\t\t\tn = m;\n\t\t}\n\t\tdata = $subslice(b.buf, b.off, (b.off + n >> 0));\n\t\tb.off = b.off + (n) >> 0;\n\t\tif (n > 0) {\n\t\t\tb.lastRead = 2;\n\t\t}\n\t\treturn data;\n\t};\n\tBuffer.prototype.Next = function(n) { return this.$val.Next(n); };\n\tBuffer.ptr.prototype.ReadByte = function() {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, c, err, x, x$1;\n\t\tc = 0;\n\t\terr = $ifaceNil;\n\t\tb = this;\n\t\tb.lastRead = 0;\n\t\tif (b.off >= b.buf.$length) {\n\t\t\tb.Truncate(0);\n\t\t\t_tmp = 0; _tmp$1 = io.EOF; c = _tmp; err = _tmp$1;\n\t\t\treturn [c, err];\n\t\t}\n\t\tc = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + x$1]));\n\t\tb.off = b.off + (1) >> 0;\n\t\tb.lastRead = 2;\n\t\t_tmp$2 = c; _tmp$3 = $ifaceNil; c = _tmp$2; err = _tmp$3;\n\t\treturn [c, err];\n\t};\n\tBuffer.prototype.ReadByte = function() { return this.$val.ReadByte(); };\n\tBuffer.ptr.prototype.ReadRune = function() {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, b, c, err, n, r, size, x, x$1;\n\t\tr = 0;\n\t\tsize = 0;\n\t\terr = $ifaceNil;\n\t\tb = this;\n\t\tb.lastRead = 0;\n\t\tif (b.off >= b.buf.$length) {\n\t\t\tb.Truncate(0);\n\t\t\t_tmp = 0; _tmp$1 = 0; _tmp$2 = io.EOF; r = _tmp; size = _tmp$1; err = _tmp$2;\n\t\t\treturn [r, size, err];\n\t\t}\n\t\tb.lastRead = 1;\n\t\tc = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + x$1]));\n\t\tif (c < 128) {\n\t\t\tb.off = b.off + (1) >> 0;\n\t\t\t_tmp$3 = (c >> 0); _tmp$4 = 1; _tmp$5 = $ifaceNil; r = _tmp$3; size = _tmp$4; err = _tmp$5;\n\t\t\treturn [r, size, err];\n\t\t}\n\t\t_tuple = utf8.DecodeRune($subslice(b.buf, b.off)); r = _tuple[0]; n = _tuple[1];\n\t\tb.off = b.off + (n) >> 0;\n\t\t_tmp$6 = r; _tmp$7 = n; _tmp$8 = $ifaceNil; r = _tmp$6; size = _tmp$7; err = _tmp$8;\n\t\treturn [r, size, err];\n\t};\n\tBuffer.prototype.ReadRune = function() { return this.$val.ReadRune(); };\n\tBuffer.ptr.prototype.UnreadRune = function() {\n\t\tvar $ptr, _tuple, b, n;\n\t\tb = this;\n\t\tif (!((b.lastRead === 1))) {\n\t\t\treturn errors.New(\"bytes.Buffer: UnreadRune: previous operation was not ReadRune\");\n\t\t}\n\t\tb.lastRead = 0;\n\t\tif (b.off > 0) {\n\t\t\t_tuple = utf8.DecodeLastRune($subslice(b.buf, 0, b.off)); n = _tuple[1];\n\t\t\tb.off = b.off - (n) >> 0;\n\t\t}\n\t\treturn $ifaceNil;\n\t};\n\tBuffer.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };\n\tBuffer.ptr.prototype.UnreadByte = function() {\n\t\tvar $ptr, b;\n\t\tb = this;\n\t\tif (!((b.lastRead === 1)) && !((b.lastRead === 2))) {\n\t\t\treturn errors.New(\"bytes.Buffer: UnreadByte: previous operation was not a read\");\n\t\t}\n\t\tb.lastRead = 0;\n\t\tif (b.off > 0) {\n\t\t\tb.off = b.off - (1) >> 0;\n\t\t}\n\t\treturn $ifaceNil;\n\t};\n\tBuffer.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };\n\tBuffer.ptr.prototype.ReadBytes = function(delim) {\n\t\tvar $ptr, _tuple, b, delim, err, line, slice;\n\t\tline = sliceType.nil;\n\t\terr = $ifaceNil;\n\t\tb = this;\n\t\t_tuple = b.readSlice(delim); slice = _tuple[0]; err = _tuple[1];\n\t\tline = $appendSlice(line, slice);\n\t\treturn [line, err];\n\t};\n\tBuffer.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };\n\tBuffer.ptr.prototype.readSlice = function(delim) {\n\t\tvar $ptr, _tmp, _tmp$1, b, delim, end, err, i, line;\n\t\tline = sliceType.nil;\n\t\terr = $ifaceNil;\n\t\tb = this;\n\t\ti = IndexByte($subslice(b.buf, b.off), delim);\n\t\tend = (b.off + i >> 0) + 1 >> 0;\n\t\tif (i < 0) {\n\t\t\tend = b.buf.$length;\n\t\t\terr = io.EOF;\n\t\t}\n\t\tline = $subslice(b.buf, b.off, end);\n\t\tb.off = end;\n\t\tb.lastRead = 2;\n\t\t_tmp = line; _tmp$1 = err; line = _tmp; err = _tmp$1;\n\t\treturn [line, err];\n\t};\n\tBuffer.prototype.readSlice = function(delim) { return this.$val.readSlice(delim); };\n\tBuffer.ptr.prototype.ReadString = function(delim) {\n\t\tvar $ptr, _tmp, _tmp$1, _tuple, b, delim, err, line, slice;\n\t\tline = \"\";\n\t\terr = $ifaceNil;\n\t\tb = this;\n\t\t_tuple = b.readSlice(delim); slice = _tuple[0]; err = _tuple[1];\n\t\t_tmp = $bytesToString(slice); _tmp$1 = err; line = _tmp; err = _tmp$1;\n\t\treturn [line, err];\n\t};\n\tBuffer.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };\n\texplode = function(s, n) {\n\t\tvar $ptr, _tuple, a, n, na, s, size;\n\t\tif (n <= 0) {\n\t\t\tn = s.$length;\n\t\t}\n\t\ta = $makeSlice(sliceType$1, n);\n\t\tsize = 0;\n\t\tna = 0;\n\t\twhile (true) {\n\t\t\tif (!(s.$length > 0)) { break; }\n\t\t\tif ((na + 1 >> 0) >= n) {\n\t\t\t\t((na < 0 || na >= a.$length) ? $throwRuntimeError(\"index out of range\") : a.$array[a.$offset + na] = s);\n\t\t\t\tna = na + (1) >> 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t_tuple = utf8.DecodeRune(s); size = _tuple[1];\n\t\t\t((na < 0 || na >= a.$length) ? $throwRuntimeError(\"index out of range\") : a.$array[a.$offset + na] = $subslice(s, 0, size));\n\t\t\ts = $subslice(s, size);\n\t\t\tna = na + (1) >> 0;\n\t\t}\n\t\treturn $subslice(a, 0, na);\n\t};\n\tCount = function(s, sep) {\n\t\tvar $ptr, c, count, i, n, o, s, sep, t;\n\t\tn = sep.$length;\n\t\tif (n === 0) {\n\t\t\treturn utf8.RuneCount(s) + 1 >> 0;\n\t\t}\n\t\tif (n > s.$length) {\n\t\t\treturn 0;\n\t\t}\n\t\tcount = 0;\n\t\tc = (0 >= sep.$length ? $throwRuntimeError(\"index out of range\") : sep.$array[sep.$offset + 0]);\n\t\ti = 0;\n\t\tt = $subslice(s, 0, ((s.$length - n >> 0) + 1 >> 0));\n\t\twhile (true) {\n\t\t\tif (!(i < t.$length)) { break; }\n\t\t\tif (!((((i < 0 || i >= t.$length) ? $throwRuntimeError(\"index out of range\") : t.$array[t.$offset + i]) === c))) {\n\t\t\t\to = IndexByte($subslice(t, i), c);\n\t\t\t\tif (o < 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti = i + (o) >> 0;\n\t\t\t}\n\t\t\tif ((n === 1) || Equal($subslice(s, i, (i + n >> 0)), sep)) {\n\t\t\t\tcount = count + (1) >> 0;\n\t\t\t\ti = i + (n) >> 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn count;\n\t};\n\t$pkg.Count = Count;\n\tgenSplit = function(s, sep, sepSave, n) {\n\t\tvar $ptr, a, c, i, n, na, s, sep, sepSave, start;\n\t\tif (n === 0) {\n\t\t\treturn sliceType$1.nil;\n\t\t}\n\t\tif (sep.$length === 0) {\n\t\t\treturn explode(s, n);\n\t\t}\n\t\tif (n < 0) {\n\t\t\tn = Count(s, sep) + 1 >> 0;\n\t\t}\n\t\tc = (0 >= sep.$length ? $throwRuntimeError(\"index out of range\") : sep.$array[sep.$offset + 0]);\n\t\tstart = 0;\n\t\ta = $makeSlice(sliceType$1, n);\n\t\tna = 0;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!((i + sep.$length >> 0) <= s.$length && (na + 1 >> 0) < n)) { break; }\n\t\t\tif ((((i < 0 || i >= s.$length) ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + i]) === c) && ((sep.$length === 1) || Equal($subslice(s, i, (i + sep.$length >> 0)), sep))) {\n\t\t\t\t((na < 0 || na >= a.$length) ? $throwRuntimeError(\"index out of range\") : a.$array[a.$offset + na] = $subslice(s, start, (i + sepSave >> 0)));\n\t\t\t\tna = na + (1) >> 0;\n\t\t\t\tstart = i + sep.$length >> 0;\n\t\t\t\ti = i + ((sep.$length - 1 >> 0)) >> 0;\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\t((na < 0 || na >= a.$length) ? $throwRuntimeError(\"index out of range\") : a.$array[a.$offset + na] = $subslice(s, start));\n\t\treturn $subslice(a, 0, (na + 1 >> 0));\n\t};\n\tSplitN = function(s, sep, n) {\n\t\tvar $ptr, n, s, sep;\n\t\treturn genSplit(s, sep, 0, n);\n\t};\n\t$pkg.SplitN = SplitN;\n\tMap = function(mapping, s) {\n\t\tvar $ptr, _r, _tuple, b, i, mapping, maxbytes, nb, nbytes, r, rl, s, wid, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; i = $f.i; mapping = $f.mapping; maxbytes = $f.maxbytes; nb = $f.nb; nbytes = $f.nbytes; r = $f.r; rl = $f.rl; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tmaxbytes = s.$length;\n\t\tnbytes = 0;\n\t\tb = $makeSlice(sliceType, maxbytes);\n\t\ti = 0;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(i < s.$length)) { break; } */ if(!(i < s.$length)) { $s = 2; continue; }\n\t\t\twid = 1;\n\t\t\tr = (((i < 0 || i >= s.$length) ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + i]) >> 0);\n\t\t\tif (r >= 128) {\n\t\t\t\t_tuple = utf8.DecodeRune($subslice(s, i)); r = _tuple[0]; wid = _tuple[1];\n\t\t\t}\n\t\t\t_r = mapping(r); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\tr = _r;\n\t\t\tif (r >= 0) {\n\t\t\t\trl = utf8.RuneLen(r);\n\t\t\t\tif (rl < 0) {\n\t\t\t\t\trl = 3;\n\t\t\t\t}\n\t\t\t\tif ((nbytes + rl >> 0) > maxbytes) {\n\t\t\t\t\tmaxbytes = (maxbytes * 2 >> 0) + 4 >> 0;\n\t\t\t\t\tnb = $makeSlice(sliceType, maxbytes);\n\t\t\t\t\t$copySlice(nb, $subslice(b, 0, nbytes));\n\t\t\t\t\tb = nb;\n\t\t\t\t}\n\t\t\t\tnbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes, maxbytes), r)) >> 0;\n\t\t\t}\n\t\t\ti = i + (wid) >> 0;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\treturn $subslice(b, 0, nbytes);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Map }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.i = i; $f.mapping = mapping; $f.maxbytes = maxbytes; $f.nb = nb; $f.nbytes = nbytes; $f.r = r; $f.rl = rl; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Map = Map;\n\tEqualFold = function(s, t) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, r, r$1, r$2, s, size, size$1, sr, t, tr;\n\t\twhile (true) {\n\t\t\tif (!(!((s.$length === 0)) && !((t.$length === 0)))) { break; }\n\t\t\t_tmp = 0; _tmp$1 = 0; sr = _tmp; tr = _tmp$1;\n\t\t\tif ((0 >= s.$length ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + 0]) < 128) {\n\t\t\t\t_tmp$2 = ((0 >= s.$length ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + 0]) >> 0); _tmp$3 = $subslice(s, 1); sr = _tmp$2; s = _tmp$3;\n\t\t\t} else {\n\t\t\t\t_tuple = utf8.DecodeRune(s); r = _tuple[0]; size = _tuple[1];\n\t\t\t\t_tmp$4 = r; _tmp$5 = $subslice(s, size); sr = _tmp$4; s = _tmp$5;\n\t\t\t}\n\t\t\tif ((0 >= t.$length ? $throwRuntimeError(\"index out of range\") : t.$array[t.$offset + 0]) < 128) {\n\t\t\t\t_tmp$6 = ((0 >= t.$length ? $throwRuntimeError(\"index out of range\") : t.$array[t.$offset + 0]) >> 0); _tmp$7 = $subslice(t, 1); tr = _tmp$6; t = _tmp$7;\n\t\t\t} else {\n\t\t\t\t_tuple$1 = utf8.DecodeRune(t); r$1 = _tuple$1[0]; size$1 = _tuple$1[1];\n\t\t\t\t_tmp$8 = r$1; _tmp$9 = $subslice(t, size$1); tr = _tmp$8; t = _tmp$9;\n\t\t\t}\n\t\t\tif (tr === sr) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (tr < sr) {\n\t\t\t\t_tmp$10 = sr; _tmp$11 = tr; tr = _tmp$10; sr = _tmp$11;\n\t\t\t}\n\t\t\tif (tr < 128 && 65 <= sr && sr <= 90) {\n\t\t\t\tif (tr === ((sr + 97 >> 0) - 65 >> 0)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tr$2 = unicode.SimpleFold(sr);\n\t\t\twhile (true) {\n\t\t\t\tif (!(!((r$2 === sr)) && r$2 < tr)) { break; }\n\t\t\t\tr$2 = unicode.SimpleFold(r$2);\n\t\t\t}\n\t\t\tif (r$2 === tr) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn s.$length === t.$length;\n\t};\n\t$pkg.EqualFold = EqualFold;\n\tReader.ptr.prototype.Len = function() {\n\t\tvar $ptr, r, x, x$1, x$2, x$3, x$4;\n\t\tr = this;\n\t\tif ((x = r.i, x$1 = new $Int64(0, r.s.$length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn ((x$2 = (x$3 = new $Int64(0, r.s.$length), x$4 = r.i, new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low)), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0);\n\t};\n\tReader.prototype.Len = function() { return this.$val.Len(); };\n\tReader.ptr.prototype.Read = function(b) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, r, x, x$1, x$2, x$3;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tr = this;\n\t\tif (b.$length === 0) {\n\t\t\t_tmp = 0; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;\n\t\t\treturn [n, err];\n\t\t}\n\t\tif ((x = r.i, x$1 = new $Int64(0, r.s.$length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {\n\t\t\t_tmp$2 = 0; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;\n\t\t\treturn [n, err];\n\t\t}\n\t\tr.prevRune = -1;\n\t\tn = $copySlice(b, $subslice(r.s, $flatten64(r.i)));\n\t\tr.i = (x$2 = r.i, x$3 = new $Int64(0, n), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));\n\t\treturn [n, err];\n\t};\n\tReader.prototype.Read = function(b) { return this.$val.Read(b); };\n\tReader.ptr.prototype.ReadAt = function(b, off) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, off, r, x;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tr = this;\n\t\tif ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {\n\t\t\t_tmp = 0; _tmp$1 = errors.New(\"bytes.Reader.ReadAt: negative offset\"); n = _tmp; err = _tmp$1;\n\t\t\treturn [n, err];\n\t\t}\n\t\tif ((x = new $Int64(0, r.s.$length), (off.$high > x.$high || (off.$high === x.$high && off.$low >= x.$low)))) {\n\t\t\t_tmp$2 = 0; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;\n\t\t\treturn [n, err];\n\t\t}\n\t\tn = $copySlice(b, $subslice(r.s, $flatten64(off)));\n\t\tif (n < b.$length) {\n\t\t\terr = io.EOF;\n\t\t}\n\t\treturn [n, err];\n\t};\n\tReader.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };\n\tReader.ptr.prototype.ReadByte = function() {\n\t\tvar $ptr, _tmp, _tmp$1, b, err, r, x, x$1, x$2, x$3, x$4, x$5;\n\t\tb = 0;\n\t\terr = $ifaceNil;\n\t\tr = this;\n\t\tr.prevRune = -1;\n\t\tif ((x = r.i, x$1 = new $Int64(0, r.s.$length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {\n\t\t\t_tmp = 0; _tmp$1 = io.EOF; b = _tmp; err = _tmp$1;\n\t\t\treturn [b, err];\n\t\t}\n\t\tb = (x$2 = r.s, x$3 = r.i, (($flatten64(x$3) < 0 || $flatten64(x$3) >= x$2.$length) ? $throwRuntimeError(\"index out of range\") : x$2.$array[x$2.$offset + $flatten64(x$3)]));\n\t\tr.i = (x$4 = r.i, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));\n\t\treturn [b, err];\n\t};\n\tReader.prototype.ReadByte = function() { return this.$val.ReadByte(); };\n\tReader.ptr.prototype.UnreadByte = function() {\n\t\tvar $ptr, r, x, x$1, x$2;\n\t\tr = this;\n\t\tr.prevRune = -1;\n\t\tif ((x = r.i, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {\n\t\t\treturn errors.New(\"bytes.Reader.UnreadByte: at beginning of slice\");\n\t\t}\n\t\tr.i = (x$1 = r.i, x$2 = new $Int64(0, 1), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));\n\t\treturn $ifaceNil;\n\t};\n\tReader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };\n\tReader.ptr.prototype.ReadRune = function() {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, c, ch, err, r, size, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;\n\t\tch = 0;\n\t\tsize = 0;\n\t\terr = $ifaceNil;\n\t\tr = this;\n\t\tif ((x = r.i, x$1 = new $Int64(0, r.s.$length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {\n\t\t\tr.prevRune = -1;\n\t\t\t_tmp = 0; _tmp$1 = 0; _tmp$2 = io.EOF; ch = _tmp; size = _tmp$1; err = _tmp$2;\n\t\t\treturn [ch, size, err];\n\t\t}\n\t\tr.prevRune = ((x$2 = r.i, x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0);\n\t\tc = (x$3 = r.s, x$4 = r.i, (($flatten64(x$4) < 0 || $flatten64(x$4) >= x$3.$length) ? $throwRuntimeError(\"index out of range\") : x$3.$array[x$3.$offset + $flatten64(x$4)]));\n\t\tif (c < 128) {\n\t\t\tr.i = (x$5 = r.i, x$6 = new $Int64(0, 1), new $Int64(x$5.$high + x$6.$high, x$5.$low + x$6.$low));\n\t\t\t_tmp$3 = (c >> 0); _tmp$4 = 1; _tmp$5 = $ifaceNil; ch = _tmp$3; size = _tmp$4; err = _tmp$5;\n\t\t\treturn [ch, size, err];\n\t\t}\n\t\t_tuple = utf8.DecodeRune($subslice(r.s, $flatten64(r.i))); ch = _tuple[0]; size = _tuple[1];\n\t\tr.i = (x$7 = r.i, x$8 = new $Int64(0, size), new $Int64(x$7.$high + x$8.$high, x$7.$low + x$8.$low));\n\t\treturn [ch, size, err];\n\t};\n\tReader.prototype.ReadRune = function() { return this.$val.ReadRune(); };\n\tReader.ptr.prototype.UnreadRune = function() {\n\t\tvar $ptr, r;\n\t\tr = this;\n\t\tif (r.prevRune < 0) {\n\t\t\treturn errors.New(\"bytes.Reader.UnreadRune: previous operation was not ReadRune\");\n\t\t}\n\t\tr.i = new $Int64(0, r.prevRune);\n\t\tr.prevRune = -1;\n\t\treturn $ifaceNil;\n\t};\n\tReader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };\n\tReader.ptr.prototype.Seek = function(offset, whence) {\n\t\tvar $ptr, _ref, abs, offset, r, whence, x, x$1;\n\t\tr = this;\n\t\tr.prevRune = -1;\n\t\tabs = new $Int64(0, 0);\n\t\t_ref = whence;\n\t\tif (_ref === 0) {\n\t\t\tabs = offset;\n\t\t} else if (_ref === 1) {\n\t\t\tabs = (x = r.i, new $Int64(x.$high + offset.$high, x.$low + offset.$low));\n\t\t} else if (_ref === 2) {\n\t\t\tabs = (x$1 = new $Int64(0, r.s.$length), new $Int64(x$1.$high + offset.$high, x$1.$low + offset.$low));\n\t\t} else {\n\t\t\treturn [new $Int64(0, 0), errors.New(\"bytes.Reader.Seek: invalid whence\")];\n\t\t}\n\t\tif ((abs.$high < 0 || (abs.$high === 0 && abs.$low < 0))) {\n\t\t\treturn [new $Int64(0, 0), errors.New(\"bytes.Reader.Seek: negative position\")];\n\t\t}\n\t\tr.i = abs;\n\t\treturn [abs, $ifaceNil];\n\t};\n\tReader.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };\n\tReader.ptr.prototype.WriteTo = function(w) {\n\t\tvar $ptr, _r, _tmp, _tmp$1, _tuple, b, err, m, n, r, w, x, x$1, x$2, x$3, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; m = $f.m; n = $f.n; r = $f.r; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = new $Int64(0, 0);\n\t\terr = $ifaceNil;\n\t\tr = this;\n\t\tr.prevRune = -1;\n\t\tif ((x = r.i, x$1 = new $Int64(0, r.s.$length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {\n\t\t\t_tmp = new $Int64(0, 0); _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;\n\t\t\treturn [n, err];\n\t\t}\n\t\tb = $subslice(r.s, $flatten64(r.i));\n\t\t_r = w.Write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; m = _tuple[0]; err = _tuple[1];\n\t\tif (m > b.$length) {\n\t\t\t$panic(new $String(\"bytes.Reader.WriteTo: invalid Write count\"));\n\t\t}\n\t\tr.i = (x$2 = r.i, x$3 = new $Int64(0, m), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));\n\t\tn = new $Int64(0, m);\n\t\tif (!((m === b.$length)) && $interfaceIsEqual(err, $ifaceNil)) {\n\t\t\terr = io.ErrShortWrite;\n\t\t}\n\t\treturn [n, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.m = m; $f.n = n; $f.r = r; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tReader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };\n\tNewReader = function(b) {\n\t\tvar $ptr, b;\n\t\treturn new Reader.ptr(b, new $Int64(0, 0), -1);\n\t};\n\t$pkg.NewReader = NewReader;\n\tptrType.methods = [{prop: \"Bytes\", name: \"Bytes\", pkg: \"\", typ: $funcType([], [sliceType], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Len\", name: \"Len\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Truncate\", name: \"Truncate\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"grow\", name: \"grow\", pkg: \"bytes\", typ: $funcType([$Int], [$Int], false)}, {prop: \"Grow\", name: \"Grow\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"Write\", name: \"Write\", pkg: \"\", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: \"WriteString\", name: \"WriteString\", pkg: \"\", typ: $funcType([$String], [$Int, $error], false)}, {prop: \"ReadFrom\", name: \"ReadFrom\", pkg: \"\", typ: $funcType([io.Reader], [$Int64, $error], false)}, {prop: \"WriteTo\", name: \"WriteTo\", pkg: \"\", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: \"WriteByte\", name: \"WriteByte\", pkg: \"\", typ: $funcType([$Uint8], [$error], false)}, {prop: \"WriteRune\", name: \"WriteRune\", pkg: \"\", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: \"Read\", name: \"Read\", pkg: \"\", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: \"Next\", name: \"Next\", pkg: \"\", typ: $funcType([$Int], [sliceType], false)}, {prop: \"ReadByte\", name: \"ReadByte\", pkg: \"\", typ: $funcType([], [$Uint8, $error], false)}, {prop: \"ReadRune\", name: \"ReadRune\", pkg: \"\", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: \"UnreadRune\", name: \"UnreadRune\", pkg: \"\", typ: $funcType([], [$error], false)}, {prop: \"UnreadByte\", name: \"UnreadByte\", pkg: \"\", typ: $funcType([], [$error], false)}, {prop: \"ReadBytes\", name: \"ReadBytes\", pkg: \"\", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: \"readSlice\", name: \"readSlice\", pkg: \"bytes\", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: \"ReadString\", name: \"ReadString\", pkg: \"\", typ: $funcType([$Uint8], [$String, $error], false)}];\n\tptrType$1.methods = [{prop: \"Len\", name: \"Len\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Read\", name: \"Read\", pkg: \"\", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: \"ReadAt\", name: \"ReadAt\", pkg: \"\", typ: $funcType([sliceType, $Int64], [$Int, $error], false)}, {prop: \"ReadByte\", name: \"ReadByte\", pkg: \"\", typ: $funcType([], [$Uint8, $error], false)}, {prop: \"UnreadByte\", name: \"UnreadByte\", pkg: \"\", typ: $funcType([], [$error], false)}, {prop: \"ReadRune\", name: \"ReadRune\", pkg: \"\", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: \"UnreadRune\", name: \"UnreadRune\", pkg: \"\", typ: $funcType([], [$error], false)}, {prop: \"Seek\", name: \"Seek\", pkg: \"\", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: \"WriteTo\", name: \"WriteTo\", pkg: \"\", typ: $funcType([io.Writer], [$Int64, $error], false)}];\n\tBuffer.init([{prop: \"buf\", name: \"buf\", pkg: \"bytes\", typ: sliceType, tag: \"\"}, {prop: \"off\", name: \"off\", pkg: \"bytes\", typ: $Int, tag: \"\"}, {prop: \"runeBytes\", name: \"runeBytes\", pkg: \"bytes\", typ: arrayType, tag: \"\"}, {prop: \"bootstrap\", name: \"bootstrap\", pkg: \"bytes\", typ: arrayType$1, tag: \"\"}, {prop: \"lastRead\", name: \"lastRead\", pkg: \"bytes\", typ: readOp, tag: \"\"}]);\n\tReader.init([{prop: \"s\", name: \"s\", pkg: \"bytes\", typ: sliceType, tag: \"\"}, {prop: \"i\", name: \"i\", pkg: \"bytes\", typ: $Int64, tag: \"\"}, {prop: \"prevRune\", name: \"prevRune\", pkg: \"bytes\", typ: $Int, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = unicode.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$pkg.ErrTooLarge = errors.New(\"bytes.Buffer: too large\");\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"syscall\"] = (function() {\n\tvar $pkg = {}, $init, bytes, js, runtime, sync, mmapper, Errno, Timespec, Stat_t, Dirent, sliceType, sliceType$1, ptrType, arrayType$1, structType, ptrType$22, mapType, funcType, funcType$1, ptrType$26, arrayType$10, arrayType$12, arrayType$13, warningPrinted, lineBuffer, syscallModule, alreadyTriedToLoad, minusOne, envOnce, envLock, env, envs, mapper, errors, init, printWarning, printToConsole, use, runtime_envs, syscall, Syscall, Syscall6, BytePtrFromString, copyenv, Getenv, itoa, uitoa, clen, ReadDirent, ParseDirent, Read, Write, Close, Exit, Fchdir, Fchmod, Fsync, Getdents, read, write, munmap, Fchown, Fstat, Ftruncate, Lstat, Pread, Pwrite, Seek, mmap;\n\tbytes = $packages[\"bytes\"];\n\tjs = $packages[\"github.com/gopherjs/gopherjs/js\"];\n\truntime = $packages[\"runtime\"];\n\tsync = $packages[\"sync\"];\n\tmmapper = $pkg.mmapper = $newType(0, $kindStruct, \"syscall.mmapper\", \"mmapper\", \"syscall\", function(Mutex_, active_, mmap_, munmap_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Mutex = new sync.Mutex.ptr();\n\t\t\tthis.active = false;\n\t\t\tthis.mmap = $throwNilPointerError;\n\t\t\tthis.munmap = $throwNilPointerError;\n\t\t\treturn;\n\t\t}\n\t\tthis.Mutex = Mutex_;\n\t\tthis.active = active_;\n\t\tthis.mmap = mmap_;\n\t\tthis.munmap = munmap_;\n\t});\n\tErrno = $pkg.Errno = $newType(4, $kindUintptr, \"syscall.Errno\", \"Errno\", \"syscall\", null);\n\tTimespec = $pkg.Timespec = $newType(0, $kindStruct, \"syscall.Timespec\", \"Timespec\", \"syscall\", function(Sec_, Nsec_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Sec = new $Int64(0, 0);\n\t\t\tthis.Nsec = new $Int64(0, 0);\n\t\t\treturn;\n\t\t}\n\t\tthis.Sec = Sec_;\n\t\tthis.Nsec = Nsec_;\n\t});\n\tStat_t = $pkg.Stat_t = $newType(0, $kindStruct, \"syscall.Stat_t\", \"Stat_t\", \"syscall\", function(Dev_, Ino_, Nlink_, Mode_, Uid_, Gid_, X__pad0_, Rdev_, Size_, Blksize_, Blocks_, Atim_, Mtim_, Ctim_, X__unused_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Dev = new $Uint64(0, 0);\n\t\t\tthis.Ino = new $Uint64(0, 0);\n\t\t\tthis.Nlink = new $Uint64(0, 0);\n\t\t\tthis.Mode = 0;\n\t\t\tthis.Uid = 0;\n\t\t\tthis.Gid = 0;\n\t\t\tthis.X__pad0 = 0;\n\t\t\tthis.Rdev = new $Uint64(0, 0);\n\t\t\tthis.Size = new $Int64(0, 0);\n\t\t\tthis.Blksize = new $Int64(0, 0);\n\t\t\tthis.Blocks = new $Int64(0, 0);\n\t\t\tthis.Atim = new Timespec.ptr();\n\t\t\tthis.Mtim = new Timespec.ptr();\n\t\t\tthis.Ctim = new Timespec.ptr();\n\t\t\tthis.X__unused = arrayType$10.zero();\n\t\t\treturn;\n\t\t}\n\t\tthis.Dev = Dev_;\n\t\tthis.Ino = Ino_;\n\t\tthis.Nlink = Nlink_;\n\t\tthis.Mode = Mode_;\n\t\tthis.Uid = Uid_;\n\t\tthis.Gid = Gid_;\n\t\tthis.X__pad0 = X__pad0_;\n\t\tthis.Rdev = Rdev_;\n\t\tthis.Size = Size_;\n\t\tthis.Blksize = Blksize_;\n\t\tthis.Blocks = Blocks_;\n\t\tthis.Atim = Atim_;\n\t\tthis.Mtim = Mtim_;\n\t\tthis.Ctim = Ctim_;\n\t\tthis.X__unused = X__unused_;\n\t});\n\tDirent = $pkg.Dirent = $newType(0, $kindStruct, \"syscall.Dirent\", \"Dirent\", \"syscall\", function(Ino_, Off_, Reclen_, Type_, Name_, Pad_cgo_0_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Ino = new $Uint64(0, 0);\n\t\t\tthis.Off = new $Int64(0, 0);\n\t\t\tthis.Reclen = 0;\n\t\t\tthis.Type = 0;\n\t\t\tthis.Name = arrayType$12.zero();\n\t\t\tthis.Pad_cgo_0 = arrayType$13.zero();\n\t\t\treturn;\n\t\t}\n\t\tthis.Ino = Ino_;\n\t\tthis.Off = Off_;\n\t\tthis.Reclen = Reclen_;\n\t\tthis.Type = Type_;\n\t\tthis.Name = Name_;\n\t\tthis.Pad_cgo_0 = Pad_cgo_0_;\n\t});\n\tsliceType = $sliceType($Uint8);\n\tsliceType$1 = $sliceType($String);\n\tptrType = $ptrType($Uint8);\n\tarrayType$1 = $arrayType($Uint8, 32);\n\tstructType = $structType([{prop: \"addr\", name: \"addr\", pkg: \"syscall\", typ: $Uintptr, tag: \"\"}, {prop: \"len\", name: \"len\", pkg: \"syscall\", typ: $Int, tag: \"\"}, {prop: \"cap\", name: \"cap\", pkg: \"syscall\", typ: $Int, tag: \"\"}]);\n\tptrType$22 = $ptrType(mmapper);\n\tmapType = $mapType(ptrType, sliceType);\n\tfuncType = $funcType([$Uintptr, $Uintptr, $Int, $Int, $Int, $Int64], [$Uintptr, $error], false);\n\tfuncType$1 = $funcType([$Uintptr, $Uintptr], [$error], false);\n\tptrType$26 = $ptrType(Timespec);\n\tarrayType$10 = $arrayType($Int64, 3);\n\tarrayType$12 = $arrayType($Int8, 256);\n\tarrayType$13 = $arrayType($Uint8, 5);\n\tinit = function() {\n\t\tvar $ptr;\n\t\t$flushConsole = (function() {\n\t\t\tvar $ptr;\n\t\t\tif (!((lineBuffer.$length === 0))) {\n\t\t\t\t$global.console.log($externalize($bytesToString(lineBuffer), $String));\n\t\t\t\tlineBuffer = sliceType.nil;\n\t\t\t}\n\t\t});\n\t};\n\tprintWarning = function() {\n\t\tvar $ptr;\n\t\tif (!warningPrinted) {\n\t\t\tconsole.log(\"warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md\");\n\t\t}\n\t\twarningPrinted = true;\n\t};\n\tprintToConsole = function(b) {\n\t\tvar $ptr, b, goPrintToConsole, i;\n\t\tgoPrintToConsole = $global.goPrintToConsole;\n\t\tif (!(goPrintToConsole === undefined)) {\n\t\t\tgoPrintToConsole(b);\n\t\t\treturn;\n\t\t}\n\t\tlineBuffer = $appendSlice(lineBuffer, b);\n\t\twhile (true) {\n\t\t\ti = bytes.IndexByte(lineBuffer, 10);\n\t\t\tif (i === -1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$global.console.log($externalize($bytesToString($subslice(lineBuffer, 0, i)), $String));\n\t\t\tlineBuffer = $subslice(lineBuffer, (i + 1 >> 0));\n\t\t}\n\t};\n\tuse = function(p) {\n\t\tvar $ptr, p;\n\t};\n\truntime_envs = function() {\n\t\tvar $ptr, envkeys, envs$1, i, jsEnv, key, process;\n\t\tprocess = $global.process;\n\t\tif (process === undefined) {\n\t\t\treturn sliceType$1.nil;\n\t\t}\n\t\tjsEnv = process.env;\n\t\tenvkeys = $global.Object.keys(jsEnv);\n\t\tenvs$1 = $makeSlice(sliceType$1, $parseInt(envkeys.length));\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < $parseInt(envkeys.length))) { break; }\n\t\t\tkey = $internalize(envkeys[i], $String);\n\t\t\t((i < 0 || i >= envs$1.$length) ? $throwRuntimeError(\"index out of range\") : envs$1.$array[envs$1.$offset + i] = key + \"=\" + $internalize(jsEnv[$externalize(key, $String)], $String));\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn envs$1;\n\t};\n\tsyscall = function(name) {\n\t\tvar $ptr, name, require, $deferred;\n\t\t/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\t$deferred.push([(function() {\n\t\t\tvar $ptr;\n\t\t\t$recover();\n\t\t}), []]);\n\t\tif (syscallModule === null) {\n\t\t\tif (alreadyTriedToLoad) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\talreadyTriedToLoad = true;\n\t\t\trequire = $global.require;\n\t\t\tif (require === undefined) {\n\t\t\t\t$panic(new $String(\"\"));\n\t\t\t}\n\t\t\tsyscallModule = require($externalize(\"syscall\", $String));\n\t\t}\n\t\treturn syscallModule[$externalize(name, $String)];\n\t\t/* */ } catch(err) { $err = err; return null; } finally { $callDeferred($deferred, $err); }\n\t};\n\tSyscall = function(trap, a1, a2, a3) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, a1, a2, a3, array, err, f, r, r1, r2, slice, trap;\n\t\tr1 = 0;\n\t\tr2 = 0;\n\t\terr = 0;\n\t\tf = syscall(\"Syscall\");\n\t\tif (!(f === null)) {\n\t\t\tr = f(trap, a1, a2, a3);\n\t\t\t_tmp = (($parseInt(r[0]) >> 0) >>> 0); _tmp$1 = (($parseInt(r[1]) >> 0) >>> 0); _tmp$2 = (($parseInt(r[2]) >> 0) >>> 0); r1 = _tmp; r2 = _tmp$1; err = _tmp$2;\n\t\t\treturn [r1, r2, err];\n\t\t}\n\t\tif ((trap === 1) && ((a1 === 1) || (a1 === 2))) {\n\t\t\tarray = a2;\n\t\t\tslice = $makeSlice(sliceType, $parseInt(array.length));\n\t\t\tslice.$array = array;\n\t\t\tprintToConsole(slice);\n\t\t\t_tmp$3 = ($parseInt(array.length) >>> 0); _tmp$4 = 0; _tmp$5 = 0; r1 = _tmp$3; r2 = _tmp$4; err = _tmp$5;\n\t\t\treturn [r1, r2, err];\n\t\t}\n\t\tprintWarning();\n\t\t_tmp$6 = (minusOne >>> 0); _tmp$7 = 0; _tmp$8 = 13; r1 = _tmp$6; r2 = _tmp$7; err = _tmp$8;\n\t\treturn [r1, r2, err];\n\t};\n\t$pkg.Syscall = Syscall;\n\tSyscall6 = function(trap, a1, a2, a3, a4, a5, a6) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a1, a2, a3, a4, a5, a6, err, f, r, r1, r2, trap;\n\t\tr1 = 0;\n\t\tr2 = 0;\n\t\terr = 0;\n\t\tf = syscall(\"Syscall6\");\n\t\tif (!(f === null)) {\n\t\t\tr = f(trap, a1, a2, a3, a4, a5, a6);\n\t\t\t_tmp = (($parseInt(r[0]) >> 0) >>> 0); _tmp$1 = (($parseInt(r[1]) >> 0) >>> 0); _tmp$2 = (($parseInt(r[2]) >> 0) >>> 0); r1 = _tmp; r2 = _tmp$1; err = _tmp$2;\n\t\t\treturn [r1, r2, err];\n\t\t}\n\t\tif (!((trap === 202))) {\n\t\t\tprintWarning();\n\t\t}\n\t\t_tmp$3 = (minusOne >>> 0); _tmp$4 = 0; _tmp$5 = 13; r1 = _tmp$3; r2 = _tmp$4; err = _tmp$5;\n\t\treturn [r1, r2, err];\n\t};\n\t$pkg.Syscall6 = Syscall6;\n\tBytePtrFromString = function(s) {\n\t\tvar $ptr, _i, _ref, array, b, i, s;\n\t\tarray = new ($global.Uint8Array)(s.length + 1 >> 0);\n\t\t_ref = new sliceType($stringToBytes(s));\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\tb = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tif (b === 0) {\n\t\t\t\treturn [ptrType.nil, new Errno(22)];\n\t\t\t}\n\t\t\tarray[i] = b;\n\t\t\t_i++;\n\t\t}\n\t\tarray[s.length] = 0;\n\t\treturn [array, $ifaceNil];\n\t};\n\t$pkg.BytePtrFromString = BytePtrFromString;\n\tcopyenv = function() {\n\t\tvar $ptr, _entry, _i, _key, _ref, _tuple, i, j, key, ok, s;\n\t\tenv = new $Map();\n\t\t_ref = envs;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\ts = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tj = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(j < s.length)) { break; }\n\t\t\t\tif (s.charCodeAt(j) === 61) {\n\t\t\t\t\tkey = s.substring(0, j);\n\t\t\t\t\t_tuple = (_entry = env[key], _entry !== undefined ? [_entry.v, true] : [0, false]); ok = _tuple[1];\n\t\t\t\t\tif (!ok) {\n\t\t\t\t\t\t_key = key; (env || $throwRuntimeError(\"assignment to entry in nil map\"))[_key] = { k: _key, v: i };\n\t\t\t\t\t} else {\n\t\t\t\t\t\t((i < 0 || i >= envs.$length) ? $throwRuntimeError(\"index out of range\") : envs.$array[envs.$offset + i] = \"\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tj = j + (1) >> 0;\n\t\t\t}\n\t\t\t_i++;\n\t\t}\n\t};\n\tGetenv = function(key) {\n\t\tvar $ptr, _entry, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, found, i, i$1, key, ok, s, value, $s, $deferred, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; found = $f.found; i = $f.i; i$1 = $f.i$1; key = $f.key; ok = $f.ok; s = $f.s; value = $f.value; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\tvalue = \"\";\n\t\tfound = false;\n\t\t$r = envOnce.Do(copyenv); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tif (key.length === 0) {\n\t\t\t_tmp = \"\"; _tmp$1 = false; value = _tmp; found = _tmp$1;\n\t\t\treturn [value, found];\n\t\t}\n\t\t$r = envLock.RLock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$deferred.push([$methodVal(envLock, \"RUnlock\"), []]);\n\t\t_tuple = (_entry = env[key], _entry !== undefined ? [_entry.v, true] : [0, false]); i = _tuple[0]; ok = _tuple[1];\n\t\tif (!ok) {\n\t\t\t_tmp$2 = \"\"; _tmp$3 = false; value = _tmp$2; found = _tmp$3;\n\t\t\treturn [value, found];\n\t\t}\n\t\ts = ((i < 0 || i >= envs.$length) ? $throwRuntimeError(\"index out of range\") : envs.$array[envs.$offset + i]);\n\t\ti$1 = 0;\n\t\twhile (true) {\n\t\t\tif (!(i$1 < s.length)) { break; }\n\t\t\tif (s.charCodeAt(i$1) === 61) {\n\t\t\t\t_tmp$4 = s.substring((i$1 + 1 >> 0)); _tmp$5 = true; value = _tmp$4; found = _tmp$5;\n\t\t\t\treturn [value, found];\n\t\t\t}\n\t\t\ti$1 = i$1 + (1) >> 0;\n\t\t}\n\t\t_tmp$6 = \"\"; _tmp$7 = false; value = _tmp$6; found = _tmp$7;\n\t\treturn [value, found];\n\t\t/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [value, found]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Getenv }; } $f.$ptr = $ptr; $f._entry = _entry; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.found = found; $f.i = i; $f.i$1 = i$1; $f.key = key; $f.ok = ok; $f.s = s; $f.value = value; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }\n\t};\n\t$pkg.Getenv = Getenv;\n\titoa = function(val) {\n\t\tvar $ptr, val;\n\t\tif (val < 0) {\n\t\t\treturn \"-\" + uitoa((-val >>> 0));\n\t\t}\n\t\treturn uitoa((val >>> 0));\n\t};\n\tuitoa = function(val) {\n\t\tvar $ptr, _q, _r, buf, i, val;\n\t\tbuf = $clone(arrayType$1.zero(), arrayType$1);\n\t\ti = 31;\n\t\twhile (true) {\n\t\t\tif (!(val >= 10)) { break; }\n\t\t\t((i < 0 || i >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[i] = (((_r = val % 10, _r === _r ? _r : $throwRuntimeError(\"integer divide by zero\")) + 48 >>> 0) << 24 >>> 24));\n\t\t\ti = i - (1) >> 0;\n\t\t\tval = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t}\n\t\t((i < 0 || i >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[i] = ((val + 48 >>> 0) << 24 >>> 24));\n\t\treturn $bytesToString($subslice(new sliceType(buf), i));\n\t};\n\tTimespec.ptr.prototype.Unix = function() {\n\t\tvar $ptr, _tmp, _tmp$1, nsec, sec, ts;\n\t\tsec = new $Int64(0, 0);\n\t\tnsec = new $Int64(0, 0);\n\t\tts = this;\n\t\t_tmp = ts.Sec; _tmp$1 = ts.Nsec; sec = _tmp; nsec = _tmp$1;\n\t\treturn [sec, nsec];\n\t};\n\tTimespec.prototype.Unix = function() { return this.$val.Unix(); };\n\tTimespec.ptr.prototype.Nano = function() {\n\t\tvar $ptr, ts, x, x$1;\n\t\tts = this;\n\t\treturn (x = $mul64(ts.Sec, new $Int64(0, 1000000000)), x$1 = ts.Nsec, new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));\n\t};\n\tTimespec.prototype.Nano = function() { return this.$val.Nano(); };\n\tclen = function(n) {\n\t\tvar $ptr, i, n;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < n.$length)) { break; }\n\t\t\tif (((i < 0 || i >= n.$length) ? $throwRuntimeError(\"index out of range\") : n.$array[n.$offset + i]) === 0) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn n.$length;\n\t};\n\tReadDirent = function(fd, buf) {\n\t\tvar $ptr, _tuple, buf, err, fd, n;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\t_tuple = Getdents(fd, buf); n = _tuple[0]; err = _tuple[1];\n\t\treturn [n, err];\n\t};\n\t$pkg.ReadDirent = ReadDirent;\n\tParseDirent = function(buf, max, names) {\n\t\tvar $ptr, _array, _struct, _tmp, _tmp$1, _tmp$2, _view, buf, bytes$1, consumed, count, dirent, max, name, names, newnames, origlen, x;\n\t\tconsumed = 0;\n\t\tcount = 0;\n\t\tnewnames = sliceType$1.nil;\n\t\toriglen = buf.$length;\n\t\tcount = 0;\n\t\twhile (true) {\n\t\t\tif (!(!((max === 0)) && buf.$length > 0)) { break; }\n\t\t\tdirent = (_array = $sliceToArray(buf), _struct = new Dirent.ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Ino = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Off = new $Int64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Reclen = _view.getUint16(16, true), _struct.Type = _view.getUint8(18, true), _struct.Name = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 19, _array.buffer.byteLength)), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 275, _array.buffer.byteLength)), _struct);\n\t\t\tbuf = $subslice(buf, dirent.Reclen);\n\t\t\tif ((x = dirent.Ino, (x.$high === 0 && x.$low === 0))) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbytes$1 = $sliceToArray(new sliceType(dirent.Name));\n\t\t\tname = $bytesToString($subslice(new sliceType(bytes$1), 0, clen(new sliceType(bytes$1))));\n\t\t\tif (name === \".\" || name === \"..\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmax = max - (1) >> 0;\n\t\t\tcount = count + (1) >> 0;\n\t\t\tnames = $append(names, name);\n\t\t}\n\t\t_tmp = origlen - buf.$length >> 0; _tmp$1 = count; _tmp$2 = names; consumed = _tmp; count = _tmp$1; newnames = _tmp$2;\n\t\treturn [consumed, count, newnames];\n\t};\n\t$pkg.ParseDirent = ParseDirent;\n\tmmapper.ptr.prototype.Mmap = function(fd, offset, length, prot, flags) {\n\t\tvar $ptr, _key, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, addr, b, data, err, errno, fd, flags, length, m, offset, p, prot, sl, $s, $deferred, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; addr = $f.addr; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; fd = $f.fd; flags = $f.flags; length = $f.length; m = $f.m; offset = $f.offset; p = $f.p; prot = $f.prot; sl = $f.sl; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\tsl = [sl];\n\t\tdata = sliceType.nil;\n\t\terr = $ifaceNil;\n\t\tm = this;\n\t\tif (length <= 0) {\n\t\t\t_tmp = sliceType.nil; _tmp$1 = new Errno(22); data = _tmp; err = _tmp$1;\n\t\t\treturn [data, err];\n\t\t}\n\t\t_r = m.mmap(0, (length >>> 0), prot, flags, fd, offset); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; addr = _tuple[0]; errno = _tuple[1];\n\t\tif (!($interfaceIsEqual(errno, $ifaceNil))) {\n\t\t\t_tmp$2 = sliceType.nil; _tmp$3 = errno; data = _tmp$2; err = _tmp$3;\n\t\t\treturn [data, err];\n\t\t}\n\t\tsl[0] = new structType.ptr(addr, length, length);\n\t\tb = sl[0];\n\t\tp = $indexPtr(b.$array, b.$offset + (b.$capacity - 1 >> 0), ptrType);\n\t\t$r = m.Mutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$deferred.push([$methodVal(m.Mutex, \"Unlock\"), []]);\n\t\t_key = p; (m.active || $throwRuntimeError(\"assignment to entry in nil map\"))[_key.$key()] = { k: _key, v: b };\n\t\t_tmp$4 = b; _tmp$5 = $ifaceNil; data = _tmp$4; err = _tmp$5;\n\t\treturn [data, err];\n\t\t/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [data, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Mmap }; } $f.$ptr = $ptr; $f._key = _key; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.addr = addr; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.fd = fd; $f.flags = flags; $f.length = length; $f.m = m; $f.offset = offset; $f.p = p; $f.prot = prot; $f.sl = sl; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }\n\t};\n\tmmapper.prototype.Mmap = function(fd, offset, length, prot, flags) { return this.$val.Mmap(fd, offset, length, prot, flags); };\n\tmmapper.ptr.prototype.Munmap = function(data) {\n\t\tvar $ptr, _entry, _r, b, data, err, errno, m, p, $s, $deferred, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; m = $f.m; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\terr = $ifaceNil;\n\t\tm = this;\n\t\tif ((data.$length === 0) || !((data.$length === data.$capacity))) {\n\t\t\terr = new Errno(22);\n\t\t\treturn err;\n\t\t}\n\t\tp = $indexPtr(data.$array, data.$offset + (data.$capacity - 1 >> 0), ptrType);\n\t\t$r = m.Mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$deferred.push([$methodVal(m.Mutex, \"Unlock\"), []]);\n\t\tb = (_entry = m.active[p.$key()], _entry !== undefined ? _entry.v : sliceType.nil);\n\t\tif (b === sliceType.nil || !($indexPtr(b.$array, b.$offset + 0, ptrType) === $indexPtr(data.$array, data.$offset + 0, ptrType))) {\n\t\t\terr = new Errno(22);\n\t\t\treturn err;\n\t\t}\n\t\t_r = m.munmap($sliceToArray(b), (b.$length >>> 0)); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\terrno = _r;\n\t\t/* */ if (!($interfaceIsEqual(errno, $ifaceNil))) { $s = 3; continue; }\n\t\t/* */ $s = 4; continue;\n\t\t/* if (!($interfaceIsEqual(errno, $ifaceNil))) { */ case 3:\n\t\t\terr = errno;\n\t\t\treturn err;\n\t\t/* } */ case 4:\n\t\tdelete m.active[p.$key()];\n\t\terr = $ifaceNil;\n\t\treturn err;\n\t\t/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Munmap }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.m = m; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }\n\t};\n\tmmapper.prototype.Munmap = function(data) { return this.$val.Munmap(data); };\n\tErrno.prototype.Error = function() {\n\t\tvar $ptr, e, s;\n\t\te = this.$val;\n\t\tif (0 <= (e >> 0) && (e >> 0) < 133) {\n\t\t\ts = ((e < 0 || e >= errors.length) ? $throwRuntimeError(\"index out of range\") : errors[e]);\n\t\t\tif (!(s === \"\")) {\n\t\t\t\treturn s;\n\t\t\t}\n\t\t}\n\t\treturn \"errno \" + itoa((e >> 0));\n\t};\n\t$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };\n\tErrno.prototype.Temporary = function() {\n\t\tvar $ptr, e;\n\t\te = this.$val;\n\t\treturn (e === 4) || (e === 24) || (e === 104) || (e === 103) || new Errno(e).Timeout();\n\t};\n\t$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };\n\tErrno.prototype.Timeout = function() {\n\t\tvar $ptr, e;\n\t\te = this.$val;\n\t\treturn (e === 11) || (e === 11) || (e === 110);\n\t};\n\t$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };\n\tRead = function(fd, p) {\n\t\tvar $ptr, _tuple, err, fd, n, p;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\t_tuple = read(fd, p); n = _tuple[0]; err = _tuple[1];\n\t\treturn [n, err];\n\t};\n\t$pkg.Read = Read;\n\tWrite = function(fd, p) {\n\t\tvar $ptr, _tuple, err, fd, n, p;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\t_tuple = write(fd, p); n = _tuple[0]; err = _tuple[1];\n\t\treturn [n, err];\n\t};\n\t$pkg.Write = Write;\n\tClose = function(fd) {\n\t\tvar $ptr, _tuple, e1, err, fd;\n\t\terr = $ifaceNil;\n\t\t_tuple = Syscall(3, (fd >>> 0), 0, 0); e1 = _tuple[2];\n\t\tif (!((e1 === 0))) {\n\t\t\terr = new Errno(e1);\n\t\t}\n\t\treturn err;\n\t};\n\t$pkg.Close = Close;\n\tExit = function(code) {\n\t\tvar $ptr, code;\n\t\tSyscall(231, (code >>> 0), 0, 0);\n\t\treturn;\n\t};\n\t$pkg.Exit = Exit;\n\tFchdir = function(fd) {\n\t\tvar $ptr, _tuple, e1, err, fd;\n\t\terr = $ifaceNil;\n\t\t_tuple = Syscall(81, (fd >>> 0), 0, 0); e1 = _tuple[2];\n\t\tif (!((e1 === 0))) {\n\t\t\terr = new Errno(e1);\n\t\t}\n\t\treturn err;\n\t};\n\t$pkg.Fchdir = Fchdir;\n\tFchmod = function(fd, mode) {\n\t\tvar $ptr, _tuple, e1, err, fd, mode;\n\t\terr = $ifaceNil;\n\t\t_tuple = Syscall(91, (fd >>> 0), (mode >>> 0), 0); e1 = _tuple[2];\n\t\tif (!((e1 === 0))) {\n\t\t\terr = new Errno(e1);\n\t\t}\n\t\treturn err;\n\t};\n\t$pkg.Fchmod = Fchmod;\n\tFsync = function(fd) {\n\t\tvar $ptr, _tuple, e1, err, fd;\n\t\terr = $ifaceNil;\n\t\t_tuple = Syscall(74, (fd >>> 0), 0, 0); e1 = _tuple[2];\n\t\tif (!((e1 === 0))) {\n\t\t\terr = new Errno(e1);\n\t\t}\n\t\treturn err;\n\t};\n\t$pkg.Fsync = Fsync;\n\tGetdents = function(fd, buf) {\n\t\tvar $ptr, _p0, _tuple, buf, e1, err, fd, n, r0;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\t_p0 = 0;\n\t\tif (buf.$length > 0) {\n\t\t\t_p0 = $sliceToArray(buf);\n\t\t} else {\n\t\t\t_p0 = new Uint8Array(0);\n\t\t}\n\t\t_tuple = Syscall(217, (fd >>> 0), _p0, (buf.$length >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];\n\t\tn = (r0 >> 0);\n\t\tif (!((e1 === 0))) {\n\t\t\terr = new Errno(e1);\n\t\t}\n\t\treturn [n, err];\n\t};\n\t$pkg.Getdents = Getdents;\n\tread = function(fd, p) {\n\t\tvar $ptr, _p0, _tuple, e1, err, fd, n, p, r0;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\t_p0 = 0;\n\t\tif (p.$length > 0) {\n\t\t\t_p0 = $sliceToArray(p);\n\t\t} else {\n\t\t\t_p0 = new Uint8Array(0);\n\t\t}\n\t\t_tuple = Syscall(0, (fd >>> 0), _p0, (p.$length >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];\n\t\tn = (r0 >> 0);\n\t\tif (!((e1 === 0))) {\n\t\t\terr = new Errno(e1);\n\t\t}\n\t\treturn [n, err];\n\t};\n\twrite = function(fd, p) {\n\t\tvar $ptr, _p0, _tuple, e1, err, fd, n, p, r0;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\t_p0 = 0;\n\t\tif (p.$length > 0) {\n\t\t\t_p0 = $sliceToArray(p);\n\t\t} else {\n\t\t\t_p0 = new Uint8Array(0);\n\t\t}\n\t\t_tuple = Syscall(1, (fd >>> 0), _p0, (p.$length >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];\n\t\tn = (r0 >> 0);\n\t\tif (!((e1 === 0))) {\n\t\t\terr = new Errno(e1);\n\t\t}\n\t\treturn [n, err];\n\t};\n\tmunmap = function(addr, length) {\n\t\tvar $ptr, _tuple, addr, e1, err, length;\n\t\terr = $ifaceNil;\n\t\t_tuple = Syscall(11, addr, length, 0); e1 = _tuple[2];\n\t\tif (!((e1 === 0))) {\n\t\t\terr = new Errno(e1);\n\t\t}\n\t\treturn err;\n\t};\n\tFchown = function(fd, uid, gid) {\n\t\tvar $ptr, _tuple, e1, err, fd, gid, uid;\n\t\terr = $ifaceNil;\n\t\t_tuple = Syscall(93, (fd >>> 0), (uid >>> 0), (gid >>> 0)); e1 = _tuple[2];\n\t\tif (!((e1 === 0))) {\n\t\t\terr = new Errno(e1);\n\t\t}\n\t\treturn err;\n\t};\n\t$pkg.Fchown = Fchown;\n\tFstat = function(fd, stat) {\n\t\tvar $ptr, _array, _struct, _tuple, _view, e1, err, fd, stat;\n\t\terr = $ifaceNil;\n\t\t_array = new Uint8Array(144);\n\t\t_tuple = Syscall(5, (fd >>> 0), _array, 0); e1 = _tuple[2];\n\t\t_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Nlink = new $Uint64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Mode = _view.getUint32(24, true), _struct.Uid = _view.getUint32(28, true), _struct.Gid = _view.getUint32(32, true), _struct.X__pad0 = _view.getInt32(36, true), _struct.Rdev = new $Uint64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Size = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Blksize = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Blocks = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Atim.Sec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Atim.Nsec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Mtim.Sec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Mtim.Nsec = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Ctim.Sec = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Ctim.Nsec = new $Int64(_view.getUint32(116, true), _view.getUint32(112, true)), _struct.X__unused = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 120, _array.buffer.byteLength));\n\t\tif (!((e1 === 0))) {\n\t\t\terr = new Errno(e1);\n\t\t}\n\t\treturn err;\n\t};\n\t$pkg.Fstat = Fstat;\n\tFtruncate = function(fd, length) {\n\t\tvar $ptr, _tuple, e1, err, fd, length;\n\t\terr = $ifaceNil;\n\t\t_tuple = Syscall(77, (fd >>> 0), (length.$low >>> 0), 0); e1 = _tuple[2];\n\t\tif (!((e1 === 0))) {\n\t\t\terr = new Errno(e1);\n\t\t}\n\t\treturn err;\n\t};\n\t$pkg.Ftruncate = Ftruncate;\n\tLstat = function(path, stat) {\n\t\tvar $ptr, _array, _p0, _struct, _tuple, _tuple$1, _view, e1, err, path, stat;\n\t\terr = $ifaceNil;\n\t\t_p0 = ptrType.nil;\n\t\t_tuple = BytePtrFromString(path); _p0 = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\t_array = new Uint8Array(144);\n\t\t_tuple$1 = Syscall(6, _p0, _array, 0); e1 = _tuple$1[2];\n\t\t_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Nlink = new $Uint64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Mode = _view.getUint32(24, true), _struct.Uid = _view.getUint32(28, true), _struct.Gid = _view.getUint32(32, true), _struct.X__pad0 = _view.getInt32(36, true), _struct.Rdev = new $Uint64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Size = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Blksize = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Blocks = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Atim.Sec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Atim.Nsec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Mtim.Sec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Mtim.Nsec = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Ctim.Sec = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Ctim.Nsec = new $Int64(_view.getUint32(116, true), _view.getUint32(112, true)), _struct.X__unused = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 120, _array.buffer.byteLength));\n\t\tuse(_p0);\n\t\tif (!((e1 === 0))) {\n\t\t\terr = new Errno(e1);\n\t\t}\n\t\treturn err;\n\t};\n\t$pkg.Lstat = Lstat;\n\tPread = function(fd, p, offset) {\n\t\tvar $ptr, _p0, _tuple, e1, err, fd, n, offset, p, r0;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\t_p0 = 0;\n\t\tif (p.$length > 0) {\n\t\t\t_p0 = $sliceToArray(p);\n\t\t} else {\n\t\t\t_p0 = new Uint8Array(0);\n\t\t}\n\t\t_tuple = Syscall6(17, (fd >>> 0), _p0, (p.$length >>> 0), (offset.$low >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];\n\t\tn = (r0 >> 0);\n\t\tif (!((e1 === 0))) {\n\t\t\terr = new Errno(e1);\n\t\t}\n\t\treturn [n, err];\n\t};\n\t$pkg.Pread = Pread;\n\tPwrite = function(fd, p, offset) {\n\t\tvar $ptr, _p0, _tuple, e1, err, fd, n, offset, p, r0;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\t_p0 = 0;\n\t\tif (p.$length > 0) {\n\t\t\t_p0 = $sliceToArray(p);\n\t\t} else {\n\t\t\t_p0 = new Uint8Array(0);\n\t\t}\n\t\t_tuple = Syscall6(18, (fd >>> 0), _p0, (p.$length >>> 0), (offset.$low >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];\n\t\tn = (r0 >> 0);\n\t\tif (!((e1 === 0))) {\n\t\t\terr = new Errno(e1);\n\t\t}\n\t\treturn [n, err];\n\t};\n\t$pkg.Pwrite = Pwrite;\n\tSeek = function(fd, offset, whence) {\n\t\tvar $ptr, _tuple, e1, err, fd, off, offset, r0, whence;\n\t\toff = new $Int64(0, 0);\n\t\terr = $ifaceNil;\n\t\t_tuple = Syscall(8, (fd >>> 0), (offset.$low >>> 0), (whence >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];\n\t\toff = new $Int64(0, r0.constructor === Number ? r0 : 1);\n\t\tif (!((e1 === 0))) {\n\t\t\terr = new Errno(e1);\n\t\t}\n\t\treturn [off, err];\n\t};\n\t$pkg.Seek = Seek;\n\tmmap = function(addr, length, prot, flags, fd, offset) {\n\t\tvar $ptr, _tuple, addr, e1, err, fd, flags, length, offset, prot, r0, xaddr;\n\t\txaddr = 0;\n\t\terr = $ifaceNil;\n\t\t_tuple = Syscall6(9, addr, length, (prot >>> 0), (flags >>> 0), (fd >>> 0), (offset.$low >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];\n\t\txaddr = r0;\n\t\tif (!((e1 === 0))) {\n\t\t\terr = new Errno(e1);\n\t\t}\n\t\treturn [xaddr, err];\n\t};\n\tptrType$22.methods = [{prop: \"Mmap\", name: \"Mmap\", pkg: \"\", typ: $funcType([$Int, $Int64, $Int, $Int, $Int], [sliceType, $error], false)}, {prop: \"Munmap\", name: \"Munmap\", pkg: \"\", typ: $funcType([sliceType], [$error], false)}];\n\tErrno.methods = [{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Temporary\", name: \"Temporary\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Timeout\", name: \"Timeout\", pkg: \"\", typ: $funcType([], [$Bool], false)}];\n\tptrType$26.methods = [{prop: \"Unix\", name: \"Unix\", pkg: \"\", typ: $funcType([], [$Int64, $Int64], false)}, {prop: \"Nano\", name: \"Nano\", pkg: \"\", typ: $funcType([], [$Int64], false)}];\n\tmmapper.init([{prop: \"Mutex\", name: \"\", pkg: \"\", typ: sync.Mutex, tag: \"\"}, {prop: \"active\", name: \"active\", pkg: \"syscall\", typ: mapType, tag: \"\"}, {prop: \"mmap\", name: \"mmap\", pkg: \"syscall\", typ: funcType, tag: \"\"}, {prop: \"munmap\", name: \"munmap\", pkg: \"syscall\", typ: funcType$1, tag: \"\"}]);\n\tTimespec.init([{prop: \"Sec\", name: \"Sec\", pkg: \"\", typ: $Int64, tag: \"\"}, {prop: \"Nsec\", name: \"Nsec\", pkg: \"\", typ: $Int64, tag: \"\"}]);\n\tStat_t.init([{prop: \"Dev\", name: \"Dev\", pkg: \"\", typ: $Uint64, tag: \"\"}, {prop: \"Ino\", name: \"Ino\", pkg: \"\", typ: $Uint64, tag: \"\"}, {prop: \"Nlink\", name: \"Nlink\", pkg: \"\", typ: $Uint64, tag: \"\"}, {prop: \"Mode\", name: \"Mode\", pkg: \"\", typ: $Uint32, tag: \"\"}, {prop: \"Uid\", name: \"Uid\", pkg: \"\", typ: $Uint32, tag: \"\"}, {prop: \"Gid\", name: \"Gid\", pkg: \"\", typ: $Uint32, tag: \"\"}, {prop: \"X__pad0\", name: \"X__pad0\", pkg: \"\", typ: $Int32, tag: \"\"}, {prop: \"Rdev\", name: \"Rdev\", pkg: \"\", typ: $Uint64, tag: \"\"}, {prop: \"Size\", name: \"Size\", pkg: \"\", typ: $Int64, tag: \"\"}, {prop: \"Blksize\", name: \"Blksize\", pkg: \"\", typ: $Int64, tag: \"\"}, {prop: \"Blocks\", name: \"Blocks\", pkg: \"\", typ: $Int64, tag: \"\"}, {prop: \"Atim\", name: \"Atim\", pkg: \"\", typ: Timespec, tag: \"\"}, {prop: \"Mtim\", name: \"Mtim\", pkg: \"\", typ: Timespec, tag: \"\"}, {prop: \"Ctim\", name: \"Ctim\", pkg: \"\", typ: Timespec, tag: \"\"}, {prop: \"X__unused\", name: \"X__unused\", pkg: \"\", typ: arrayType$10, tag: \"\"}]);\n\tDirent.init([{prop: \"Ino\", name: \"Ino\", pkg: \"\", typ: $Uint64, tag: \"\"}, {prop: \"Off\", name: \"Off\", pkg: \"\", typ: $Int64, tag: \"\"}, {prop: \"Reclen\", name: \"Reclen\", pkg: \"\", typ: $Uint16, tag: \"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: $Uint8, tag: \"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: arrayType$12, tag: \"\"}, {prop: \"Pad_cgo_0\", name: \"Pad_cgo_0\", pkg: \"\", typ: arrayType$13, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = sync.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tlineBuffer = sliceType.nil;\n\t\tsyscallModule = null;\n\t\tenvOnce = new sync.Once.ptr();\n\t\tenvLock = new sync.RWMutex.ptr();\n\t\tenv = false;\n\t\twarningPrinted = false;\n\t\talreadyTriedToLoad = false;\n\t\tminusOne = -1;\n\t\tenvs = runtime_envs();\n\t\t$pkg.Stdin = 0;\n\t\t$pkg.Stdout = 1;\n\t\t$pkg.Stderr = 2;\n\t\terrors = $toNativeArray($kindString, [\"\", \"operation not permitted\", \"no such file or directory\", \"no such process\", \"interrupted system call\", \"input/output error\", \"no such device or address\", \"argument list too long\", \"exec format error\", \"bad file descriptor\", \"no child processes\", \"resource temporarily unavailable\", \"cannot allocate memory\", \"permission denied\", \"bad address\", \"block device required\", \"device or resource busy\", \"file exists\", \"invalid cross-device link\", \"no such device\", \"not a directory\", \"is a directory\", \"invalid argument\", \"too many open files in system\", \"too many open files\", \"inappropriate ioctl for device\", \"text file busy\", \"file too large\", \"no space left on device\", \"illegal seek\", \"read-only file system\", \"too many links\", \"broken pipe\", \"numerical argument out of domain\", \"numerical result out of range\", \"resource deadlock avoided\", \"file name too long\", \"no locks available\", \"function not implemented\", \"directory not empty\", \"too many levels of symbolic links\", \"\", \"no message of desired type\", \"identifier removed\", \"channel number out of range\", \"level 2 not synchronized\", \"level 3 halted\", \"level 3 reset\", \"link number out of range\", \"protocol driver not attached\", \"no CSI structure available\", \"level 2 halted\", \"invalid exchange\", \"invalid request descriptor\", \"exchange full\", \"no anode\", \"invalid request code\", \"invalid slot\", \"\", \"bad font file format\", \"device not a stream\", \"no data available\", \"timer expired\", \"out of streams resources\", \"machine is not on the network\", \"package not installed\", \"object is remote\", \"link has been severed\", \"advertise error\", \"srmount error\", \"communication error on send\", \"protocol error\", \"multihop attempted\", \"RFS specific error\", \"bad message\", \"value too large for defined data type\", \"name not unique on network\", \"file descriptor in bad state\", \"remote address changed\", \"can not access a needed shared library\", \"accessing a corrupted shared library\", \".lib section in a.out corrupted\", \"attempting to link in too many shared libraries\", \"cannot exec a shared library directly\", \"invalid or incomplete multibyte or wide character\", \"interrupted system call should be restarted\", \"streams pipe error\", \"too many users\", \"socket operation on non-socket\", \"destination address required\", \"message too long\", \"protocol wrong type for socket\", \"protocol not available\", \"protocol not supported\", \"socket type not supported\", \"operation not supported\", \"protocol family not supported\", \"address family not supported by protocol\", \"address already in use\", \"cannot assign requested address\", \"network is down\", \"network is unreachable\", \"network dropped connection on reset\", \"software caused connection abort\", \"connection reset by peer\", \"no buffer space available\", \"transport endpoint is already connected\", \"transport endpoint is not connected\", \"cannot send after transport endpoint shutdown\", \"too many references: cannot splice\", \"connection timed out\", \"connection refused\", \"host is down\", \"no route to host\", \"operation already in progress\", \"operation now in progress\", \"stale NFS file handle\", \"structure needs cleaning\", \"not a XENIX named type file\", \"no XENIX semaphores available\", \"is a named type file\", \"remote I/O error\", \"disk quota exceeded\", \"no medium found\", \"wrong medium type\", \"operation canceled\", \"required key not available\", \"key has expired\", \"key has been revoked\", \"key was rejected by service\", \"owner died\", \"state not recoverable\", \"operation not possible due to RF-kill\"]);\n\t\tmapper = new mmapper.ptr(new sync.Mutex.ptr(), new $Map(), mmap, munmap);\n\t\tinit();\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"github.com/gopherjs/gopherjs/nosync\"] = (function() {\n\tvar $pkg = {}, $init, Mutex, RWMutex, Once, ptrType, ptrType$1, funcType, ptrType$3;\n\tMutex = $pkg.Mutex = $newType(0, $kindStruct, \"nosync.Mutex\", \"Mutex\", \"github.com/gopherjs/gopherjs/nosync\", function(locked_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.locked = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.locked = locked_;\n\t});\n\tRWMutex = $pkg.RWMutex = $newType(0, $kindStruct, \"nosync.RWMutex\", \"RWMutex\", \"github.com/gopherjs/gopherjs/nosync\", function(writeLocked_, readLockCounter_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.writeLocked = false;\n\t\t\tthis.readLockCounter = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.writeLocked = writeLocked_;\n\t\tthis.readLockCounter = readLockCounter_;\n\t});\n\tOnce = $pkg.Once = $newType(0, $kindStruct, \"nosync.Once\", \"Once\", \"github.com/gopherjs/gopherjs/nosync\", function(doing_, done_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.doing = false;\n\t\t\tthis.done = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.doing = doing_;\n\t\tthis.done = done_;\n\t});\n\tptrType = $ptrType(Mutex);\n\tptrType$1 = $ptrType(RWMutex);\n\tfuncType = $funcType([], [], false);\n\tptrType$3 = $ptrType(Once);\n\tMutex.ptr.prototype.Lock = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (m.locked) {\n\t\t\t$panic(new $String(\"nosync: mutex is already locked\"));\n\t\t}\n\t\tm.locked = true;\n\t};\n\tMutex.prototype.Lock = function() { return this.$val.Lock(); };\n\tMutex.ptr.prototype.Unlock = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!m.locked) {\n\t\t\t$panic(new $String(\"nosync: unlock of unlocked mutex\"));\n\t\t}\n\t\tm.locked = false;\n\t};\n\tMutex.prototype.Unlock = function() { return this.$val.Unlock(); };\n\tRWMutex.ptr.prototype.Lock = function() {\n\t\tvar $ptr, rw;\n\t\trw = this;\n\t\tif (!((rw.readLockCounter === 0)) || rw.writeLocked) {\n\t\t\t$panic(new $String(\"nosync: mutex is already locked\"));\n\t\t}\n\t\trw.writeLocked = true;\n\t};\n\tRWMutex.prototype.Lock = function() { return this.$val.Lock(); };\n\tRWMutex.ptr.prototype.Unlock = function() {\n\t\tvar $ptr, rw;\n\t\trw = this;\n\t\tif (!rw.writeLocked) {\n\t\t\t$panic(new $String(\"nosync: unlock of unlocked mutex\"));\n\t\t}\n\t\trw.writeLocked = false;\n\t};\n\tRWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };\n\tRWMutex.ptr.prototype.RLock = function() {\n\t\tvar $ptr, rw;\n\t\trw = this;\n\t\tif (rw.writeLocked) {\n\t\t\t$panic(new $String(\"nosync: mutex is already locked\"));\n\t\t}\n\t\trw.readLockCounter = rw.readLockCounter + (1) >> 0;\n\t};\n\tRWMutex.prototype.RLock = function() { return this.$val.RLock(); };\n\tRWMutex.ptr.prototype.RUnlock = function() {\n\t\tvar $ptr, rw;\n\t\trw = this;\n\t\tif (rw.readLockCounter === 0) {\n\t\t\t$panic(new $String(\"nosync: unlock of unlocked mutex\"));\n\t\t}\n\t\trw.readLockCounter = rw.readLockCounter - (1) >> 0;\n\t};\n\tRWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };\n\tOnce.ptr.prototype.Do = function(f) {\n\t\tvar $ptr, f, o, $s, $deferred, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\to = [o];\n\t\to[0] = this;\n\t\tif (o[0].done) {\n\t\t\treturn;\n\t\t}\n\t\tif (o[0].doing) {\n\t\t\t$panic(new $String(\"nosync: Do called within f\"));\n\t\t}\n\t\to[0].doing = true;\n\t\t$deferred.push([(function(o) { return function() {\n\t\t\tvar $ptr;\n\t\t\to[0].doing = false;\n\t\t\to[0].done = true;\n\t\t}; })(o), []]);\n\t\t$r = f(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.$ptr = $ptr; $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }\n\t};\n\tOnce.prototype.Do = function(f) { return this.$val.Do(f); };\n\tptrType.methods = [{prop: \"Lock\", name: \"Lock\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Unlock\", name: \"Unlock\", pkg: \"\", typ: $funcType([], [], false)}];\n\tptrType$1.methods = [{prop: \"Lock\", name: \"Lock\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Unlock\", name: \"Unlock\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"RLock\", name: \"RLock\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"RUnlock\", name: \"RUnlock\", pkg: \"\", typ: $funcType([], [], false)}];\n\tptrType$3.methods = [{prop: \"Do\", name: \"Do\", pkg: \"\", typ: $funcType([funcType], [], false)}];\n\tMutex.init([{prop: \"locked\", name: \"locked\", pkg: \"github.com/gopherjs/gopherjs/nosync\", typ: $Bool, tag: \"\"}]);\n\tRWMutex.init([{prop: \"writeLocked\", name: \"writeLocked\", pkg: \"github.com/gopherjs/gopherjs/nosync\", typ: $Bool, tag: \"\"}, {prop: \"readLockCounter\", name: \"readLockCounter\", pkg: \"github.com/gopherjs/gopherjs/nosync\", typ: $Int, tag: \"\"}]);\n\tOnce.init([{prop: \"doing\", name: \"doing\", pkg: \"github.com/gopherjs/gopherjs/nosync\", typ: $Bool, tag: \"\"}, {prop: \"done\", name: \"done\", pkg: \"github.com/gopherjs/gopherjs/nosync\", typ: $Bool, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"strings\"] = (function() {\n\tvar $pkg = {}, $init, errors, js, io, unicode, utf8, sliceType, sliceType$3, IndexByte, explode, hashStr, hashStrRev, Count, Contains, ContainsRune, Index, LastIndex, IndexRune, IndexAny, genSplit, Split, Join, HasPrefix, Map, ToLower, TrimLeftFunc, indexFunc, makeCutsetFunc, TrimLeft;\n\terrors = $packages[\"errors\"];\n\tjs = $packages[\"github.com/gopherjs/gopherjs/js\"];\n\tio = $packages[\"io\"];\n\tunicode = $packages[\"unicode\"];\n\tutf8 = $packages[\"unicode/utf8\"];\n\tsliceType = $sliceType($Uint8);\n\tsliceType$3 = $sliceType($String);\n\tIndexByte = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\treturn $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;\n\t};\n\t$pkg.IndexByte = IndexByte;\n\texplode = function(s, n) {\n\t\tvar $ptr, _tmp, _tmp$1, _tuple, a, ch, cur, i, l, n, s, size;\n\t\tif (n === 0) {\n\t\t\treturn sliceType$3.nil;\n\t\t}\n\t\tl = utf8.RuneCountInString(s);\n\t\tif (n <= 0 || n > l) {\n\t\t\tn = l;\n\t\t}\n\t\ta = $makeSlice(sliceType$3, n);\n\t\tsize = 0;\n\t\tch = 0;\n\t\t_tmp = 0; _tmp$1 = 0; i = _tmp; cur = _tmp$1;\n\t\twhile (true) {\n\t\t\tif (!((i + 1 >> 0) < n)) { break; }\n\t\t\t_tuple = utf8.DecodeRuneInString(s.substring(cur)); ch = _tuple[0]; size = _tuple[1];\n\t\t\tif (ch === 65533) {\n\t\t\t\t((i < 0 || i >= a.$length) ? $throwRuntimeError(\"index out of range\") : a.$array[a.$offset + i] = \"\\xEF\\xBF\\xBD\");\n\t\t\t} else {\n\t\t\t\t((i < 0 || i >= a.$length) ? $throwRuntimeError(\"index out of range\") : a.$array[a.$offset + i] = s.substring(cur, (cur + size >> 0)));\n\t\t\t}\n\t\t\tcur = cur + (size) >> 0;\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\tif (cur < s.length) {\n\t\t\t((i < 0 || i >= a.$length) ? $throwRuntimeError(\"index out of range\") : a.$array[a.$offset + i] = s.substring(cur));\n\t\t}\n\t\treturn a;\n\t};\n\thashStr = function(sep) {\n\t\tvar $ptr, _tmp, _tmp$1, hash, i, i$1, pow, sep, sq, x, x$1;\n\t\thash = 0;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < sep.length)) { break; }\n\t\t\thash = ((((hash >>> 16 << 16) * 16777619 >>> 0) + (hash << 16 >>> 16) * 16777619) >>> 0) + (sep.charCodeAt(i) >>> 0) >>> 0;\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\t_tmp = 1; _tmp$1 = 16777619; pow = _tmp; sq = _tmp$1;\n\t\ti$1 = sep.length;\n\t\twhile (true) {\n\t\t\tif (!(i$1 > 0)) { break; }\n\t\t\tif (!(((i$1 & 1) === 0))) {\n\t\t\t\tpow = (x = sq, (((pow >>> 16 << 16) * x >>> 0) + (pow << 16 >>> 16) * x) >>> 0);\n\t\t\t}\n\t\t\tsq = (x$1 = sq, (((sq >>> 16 << 16) * x$1 >>> 0) + (sq << 16 >>> 16) * x$1) >>> 0);\n\t\t\ti$1 = (i$1 >> $min((1), 31)) >> 0;\n\t\t}\n\t\treturn [hash, pow];\n\t};\n\thashStrRev = function(sep) {\n\t\tvar $ptr, _tmp, _tmp$1, hash, i, i$1, pow, sep, sq, x, x$1;\n\t\thash = 0;\n\t\ti = sep.length - 1 >> 0;\n\t\twhile (true) {\n\t\t\tif (!(i >= 0)) { break; }\n\t\t\thash = ((((hash >>> 16 << 16) * 16777619 >>> 0) + (hash << 16 >>> 16) * 16777619) >>> 0) + (sep.charCodeAt(i) >>> 0) >>> 0;\n\t\t\ti = i - (1) >> 0;\n\t\t}\n\t\t_tmp = 1; _tmp$1 = 16777619; pow = _tmp; sq = _tmp$1;\n\t\ti$1 = sep.length;\n\t\twhile (true) {\n\t\t\tif (!(i$1 > 0)) { break; }\n\t\t\tif (!(((i$1 & 1) === 0))) {\n\t\t\t\tpow = (x = sq, (((pow >>> 16 << 16) * x >>> 0) + (pow << 16 >>> 16) * x) >>> 0);\n\t\t\t}\n\t\t\tsq = (x$1 = sq, (((sq >>> 16 << 16) * x$1 >>> 0) + (sq << 16 >>> 16) * x$1) >>> 0);\n\t\t\ti$1 = (i$1 >> $min((1), 31)) >> 0;\n\t\t}\n\t\treturn [hash, pow];\n\t};\n\tCount = function(s, sep) {\n\t\tvar $ptr, _tuple, c, h, hashsep, i, i$1, i$2, lastmatch, n, pow, s, sep, x, x$1;\n\t\tn = 0;\n\t\tif (sep.length === 0) {\n\t\t\treturn utf8.RuneCountInString(s) + 1 >> 0;\n\t\t} else if (sep.length === 1) {\n\t\t\tc = sep.charCodeAt(0);\n\t\t\ti = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(i < s.length)) { break; }\n\t\t\t\tif (s.charCodeAt(i) === c) {\n\t\t\t\t\tn = n + (1) >> 0;\n\t\t\t\t}\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t\treturn n;\n\t\t} else if (sep.length > s.length) {\n\t\t\treturn 0;\n\t\t} else if (sep.length === s.length) {\n\t\t\tif (sep === s) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t\t_tuple = hashStr(sep); hashsep = _tuple[0]; pow = _tuple[1];\n\t\th = 0;\n\t\ti$1 = 0;\n\t\twhile (true) {\n\t\t\tif (!(i$1 < sep.length)) { break; }\n\t\t\th = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i$1) >>> 0) >>> 0;\n\t\t\ti$1 = i$1 + (1) >> 0;\n\t\t}\n\t\tlastmatch = 0;\n\t\tif ((h === hashsep) && s.substring(0, sep.length) === sep) {\n\t\t\tn = n + (1) >> 0;\n\t\t\tlastmatch = sep.length;\n\t\t}\n\t\ti$2 = sep.length;\n\t\twhile (true) {\n\t\t\tif (!(i$2 < s.length)) { break; }\n\t\t\th = (x = 16777619, (((h >>> 16 << 16) * x >>> 0) + (h << 16 >>> 16) * x) >>> 0);\n\t\t\th = h + ((s.charCodeAt(i$2) >>> 0)) >>> 0;\n\t\t\th = h - ((x$1 = (s.charCodeAt((i$2 - sep.length >> 0)) >>> 0), (((pow >>> 16 << 16) * x$1 >>> 0) + (pow << 16 >>> 16) * x$1) >>> 0)) >>> 0;\n\t\t\ti$2 = i$2 + (1) >> 0;\n\t\t\tif ((h === hashsep) && lastmatch <= (i$2 - sep.length >> 0) && s.substring((i$2 - sep.length >> 0), i$2) === sep) {\n\t\t\t\tn = n + (1) >> 0;\n\t\t\t\tlastmatch = i$2;\n\t\t\t}\n\t\t}\n\t\treturn n;\n\t};\n\t$pkg.Count = Count;\n\tContains = function(s, substr) {\n\t\tvar $ptr, s, substr;\n\t\treturn Index(s, substr) >= 0;\n\t};\n\t$pkg.Contains = Contains;\n\tContainsRune = function(s, r) {\n\t\tvar $ptr, r, s;\n\t\treturn IndexRune(s, r) >= 0;\n\t};\n\t$pkg.ContainsRune = ContainsRune;\n\tIndex = function(s, sep) {\n\t\tvar $ptr, _tuple, h, hashsep, i, i$1, n, pow, s, sep, x, x$1;\n\t\tn = sep.length;\n\t\tif (n === 0) {\n\t\t\treturn 0;\n\t\t} else if (n === 1) {\n\t\t\treturn IndexByte(s, sep.charCodeAt(0));\n\t\t} else if (n === s.length) {\n\t\t\tif (sep === s) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn -1;\n\t\t} else if (n > s.length) {\n\t\t\treturn -1;\n\t\t}\n\t\t_tuple = hashStr(sep); hashsep = _tuple[0]; pow = _tuple[1];\n\t\th = 0;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < n)) { break; }\n\t\t\th = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i) >>> 0) >>> 0;\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\tif ((h === hashsep) && s.substring(0, n) === sep) {\n\t\t\treturn 0;\n\t\t}\n\t\ti$1 = n;\n\t\twhile (true) {\n\t\t\tif (!(i$1 < s.length)) { break; }\n\t\t\th = (x = 16777619, (((h >>> 16 << 16) * x >>> 0) + (h << 16 >>> 16) * x) >>> 0);\n\t\t\th = h + ((s.charCodeAt(i$1) >>> 0)) >>> 0;\n\t\t\th = h - ((x$1 = (s.charCodeAt((i$1 - n >> 0)) >>> 0), (((pow >>> 16 << 16) * x$1 >>> 0) + (pow << 16 >>> 16) * x$1) >>> 0)) >>> 0;\n\t\t\ti$1 = i$1 + (1) >> 0;\n\t\t\tif ((h === hashsep) && s.substring((i$1 - n >> 0), i$1) === sep) {\n\t\t\t\treturn i$1 - n >> 0;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t};\n\t$pkg.Index = Index;\n\tLastIndex = function(s, sep) {\n\t\tvar $ptr, _tuple, c, h, hashsep, i, i$1, i$2, last, n, pow, s, sep, x, x$1;\n\t\tn = sep.length;\n\t\tif (n === 0) {\n\t\t\treturn s.length;\n\t\t} else if (n === 1) {\n\t\t\tc = sep.charCodeAt(0);\n\t\t\ti = s.length - 1 >> 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(i >= 0)) { break; }\n\t\t\t\tif (s.charCodeAt(i) === c) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t\ti = i - (1) >> 0;\n\t\t\t}\n\t\t\treturn -1;\n\t\t} else if (n === s.length) {\n\t\t\tif (sep === s) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn -1;\n\t\t} else if (n > s.length) {\n\t\t\treturn -1;\n\t\t}\n\t\t_tuple = hashStrRev(sep); hashsep = _tuple[0]; pow = _tuple[1];\n\t\tlast = s.length - n >> 0;\n\t\th = 0;\n\t\ti$1 = s.length - 1 >> 0;\n\t\twhile (true) {\n\t\t\tif (!(i$1 >= last)) { break; }\n\t\t\th = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i$1) >>> 0) >>> 0;\n\t\t\ti$1 = i$1 - (1) >> 0;\n\t\t}\n\t\tif ((h === hashsep) && s.substring(last) === sep) {\n\t\t\treturn last;\n\t\t}\n\t\ti$2 = last - 1 >> 0;\n\t\twhile (true) {\n\t\t\tif (!(i$2 >= 0)) { break; }\n\t\t\th = (x = 16777619, (((h >>> 16 << 16) * x >>> 0) + (h << 16 >>> 16) * x) >>> 0);\n\t\t\th = h + ((s.charCodeAt(i$2) >>> 0)) >>> 0;\n\t\t\th = h - ((x$1 = (s.charCodeAt((i$2 + n >> 0)) >>> 0), (((pow >>> 16 << 16) * x$1 >>> 0) + (pow << 16 >>> 16) * x$1) >>> 0)) >>> 0;\n\t\t\tif ((h === hashsep) && s.substring(i$2, (i$2 + n >> 0)) === sep) {\n\t\t\t\treturn i$2;\n\t\t\t}\n\t\t\ti$2 = i$2 - (1) >> 0;\n\t\t}\n\t\treturn -1;\n\t};\n\t$pkg.LastIndex = LastIndex;\n\tIndexRune = function(s, r) {\n\t\tvar $ptr, _i, _ref, _rune, c, i, r, s;\n\t\tif (r < 128) {\n\t\t\treturn IndexByte(s, (r << 24 >>> 24));\n\t\t} else {\n\t\t\t_ref = s;\n\t\t\t_i = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(_i < _ref.length)) { break; }\n\t\t\t\t_rune = $decodeRune(_ref, _i);\n\t\t\t\ti = _i;\n\t\t\t\tc = _rune[0];\n\t\t\t\tif (c === r) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t\t_i += _rune[1];\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t};\n\t$pkg.IndexRune = IndexRune;\n\tIndexAny = function(s, chars) {\n\t\tvar $ptr, _i, _i$1, _ref, _ref$1, _rune, _rune$1, c, chars, i, m, s;\n\t\tif (chars.length > 0) {\n\t\t\t_ref = s;\n\t\t\t_i = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(_i < _ref.length)) { break; }\n\t\t\t\t_rune = $decodeRune(_ref, _i);\n\t\t\t\ti = _i;\n\t\t\t\tc = _rune[0];\n\t\t\t\t_ref$1 = chars;\n\t\t\t\t_i$1 = 0;\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!(_i$1 < _ref$1.length)) { break; }\n\t\t\t\t\t_rune$1 = $decodeRune(_ref$1, _i$1);\n\t\t\t\t\tm = _rune$1[0];\n\t\t\t\t\tif (c === m) {\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t\t_i$1 += _rune$1[1];\n\t\t\t\t}\n\t\t\t\t_i += _rune[1];\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t};\n\t$pkg.IndexAny = IndexAny;\n\tgenSplit = function(s, sep, sepSave, n) {\n\t\tvar $ptr, a, c, i, n, na, s, sep, sepSave, start;\n\t\tif (n === 0) {\n\t\t\treturn sliceType$3.nil;\n\t\t}\n\t\tif (sep === \"\") {\n\t\t\treturn explode(s, n);\n\t\t}\n\t\tif (n < 0) {\n\t\t\tn = Count(s, sep) + 1 >> 0;\n\t\t}\n\t\tc = sep.charCodeAt(0);\n\t\tstart = 0;\n\t\ta = $makeSlice(sliceType$3, n);\n\t\tna = 0;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!((i + sep.length >> 0) <= s.length && (na + 1 >> 0) < n)) { break; }\n\t\t\tif ((s.charCodeAt(i) === c) && ((sep.length === 1) || s.substring(i, (i + sep.length >> 0)) === sep)) {\n\t\t\t\t((na < 0 || na >= a.$length) ? $throwRuntimeError(\"index out of range\") : a.$array[a.$offset + na] = s.substring(start, (i + sepSave >> 0)));\n\t\t\t\tna = na + (1) >> 0;\n\t\t\t\tstart = i + sep.length >> 0;\n\t\t\t\ti = i + ((sep.length - 1 >> 0)) >> 0;\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\t((na < 0 || na >= a.$length) ? $throwRuntimeError(\"index out of range\") : a.$array[a.$offset + na] = s.substring(start));\n\t\treturn $subslice(a, 0, (na + 1 >> 0));\n\t};\n\tSplit = function(s, sep) {\n\t\tvar $ptr, s, sep;\n\t\treturn genSplit(s, sep, 0, -1);\n\t};\n\t$pkg.Split = Split;\n\tJoin = function(a, sep) {\n\t\tvar $ptr, _i, _ref, a, b, bp, i, n, s, sep;\n\t\tif (a.$length === 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\tif (a.$length === 1) {\n\t\t\treturn (0 >= a.$length ? $throwRuntimeError(\"index out of range\") : a.$array[a.$offset + 0]);\n\t\t}\n\t\tn = sep.length * ((a.$length - 1 >> 0)) >> 0;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < a.$length)) { break; }\n\t\t\tn = n + (((i < 0 || i >= a.$length) ? $throwRuntimeError(\"index out of range\") : a.$array[a.$offset + i]).length) >> 0;\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\tb = $makeSlice(sliceType, n);\n\t\tbp = $copyString(b, (0 >= a.$length ? $throwRuntimeError(\"index out of range\") : a.$array[a.$offset + 0]));\n\t\t_ref = $subslice(a, 1);\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ts = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tbp = bp + ($copyString($subslice(b, bp), sep)) >> 0;\n\t\t\tbp = bp + ($copyString($subslice(b, bp), s)) >> 0;\n\t\t\t_i++;\n\t\t}\n\t\treturn $bytesToString(b);\n\t};\n\t$pkg.Join = Join;\n\tHasPrefix = function(s, prefix) {\n\t\tvar $ptr, prefix, s;\n\t\treturn s.length >= prefix.length && s.substring(0, prefix.length) === prefix;\n\t};\n\t$pkg.HasPrefix = HasPrefix;\n\tMap = function(mapping, s) {\n\t\tvar $ptr, _i, _r, _ref, _rune, b, c, i, mapping, maxbytes, nb, nbytes, r, s, wid, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _rune = $f._rune; b = $f.b; c = $f.c; i = $f.i; mapping = $f.mapping; maxbytes = $f.maxbytes; nb = $f.nb; nbytes = $f.nbytes; r = $f.r; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tmaxbytes = s.length;\n\t\tnbytes = 0;\n\t\tb = sliceType.nil;\n\t\t_ref = s;\n\t\t_i = 0;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }\n\t\t\t_rune = $decodeRune(_ref, _i);\n\t\t\ti = _i;\n\t\t\tc = _rune[0];\n\t\t\t_r = mapping(c); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\tr = _r;\n\t\t\tif (b === sliceType.nil) {\n\t\t\t\tif (r === c) {\n\t\t\t\t\t_i += _rune[1];\n\t\t\t\t\t/* continue; */ $s = 1; continue;\n\t\t\t\t}\n\t\t\t\tb = $makeSlice(sliceType, maxbytes);\n\t\t\t\tnbytes = $copyString(b, s.substring(0, i));\n\t\t\t}\n\t\t\tif (r >= 0) {\n\t\t\t\twid = 1;\n\t\t\t\tif (r >= 128) {\n\t\t\t\t\twid = utf8.RuneLen(r);\n\t\t\t\t}\n\t\t\t\tif ((nbytes + wid >> 0) > maxbytes) {\n\t\t\t\t\tmaxbytes = (maxbytes * 2 >> 0) + 4 >> 0;\n\t\t\t\t\tnb = $makeSlice(sliceType, maxbytes);\n\t\t\t\t\t$copySlice(nb, $subslice(b, 0, nbytes));\n\t\t\t\t\tb = nb;\n\t\t\t\t}\n\t\t\t\tnbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes, maxbytes), r)) >> 0;\n\t\t\t}\n\t\t\t_i += _rune[1];\n\t\t/* } */ $s = 1; continue; case 2:\n\t\tif (b === sliceType.nil) {\n\t\t\treturn s;\n\t\t}\n\t\treturn $bytesToString($subslice(b, 0, nbytes));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Map }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._rune = _rune; $f.b = b; $f.c = c; $f.i = i; $f.mapping = mapping; $f.maxbytes = maxbytes; $f.nb = nb; $f.nbytes = nbytes; $f.r = r; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Map = Map;\n\tToLower = function(s) {\n\t\tvar $ptr, _r, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = Map(unicode.ToLower, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ToLower }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.ToLower = ToLower;\n\tTrimLeftFunc = function(s, f) {\n\t\tvar $ptr, _r, f, i, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; i = $f.i; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = indexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\ti = _r;\n\t\tif (i === -1) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn s.substring(i);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TrimLeftFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.i = i; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.TrimLeftFunc = TrimLeftFunc;\n\tindexFunc = function(s, f, truth) {\n\t\tvar $ptr, _r, _tuple, f, r, s, start, truth, wid, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; r = $f.r; s = $f.s; start = $f.start; truth = $f.truth; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tstart = 0;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(start < s.length)) { break; } */ if(!(start < s.length)) { $s = 2; continue; }\n\t\t\twid = 1;\n\t\t\tr = (s.charCodeAt(start) >> 0);\n\t\t\tif (r >= 128) {\n\t\t\t\t_tuple = utf8.DecodeRuneInString(s.substring(start)); r = _tuple[0]; wid = _tuple[1];\n\t\t\t}\n\t\t\t_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t/* */ if (_r === truth) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (_r === truth) { */ case 3:\n\t\t\t\treturn start;\n\t\t\t/* } */ case 4:\n\t\t\tstart = start + (wid) >> 0;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\treturn -1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: indexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.r = r; $f.s = s; $f.start = start; $f.truth = truth; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tmakeCutsetFunc = function(cutset) {\n\t\tvar $ptr, cutset;\n\t\treturn (function(r) {\n\t\t\tvar $ptr, r;\n\t\t\treturn IndexRune(cutset, r) >= 0;\n\t\t});\n\t};\n\tTrimLeft = function(s, cutset) {\n\t\tvar $ptr, _r, cutset, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; cutset = $f.cutset; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tif (s === \"\" || cutset === \"\") {\n\t\t\treturn s;\n\t\t}\n\t\t_r = TrimLeftFunc(s, makeCutsetFunc(cutset)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TrimLeft }; } $f.$ptr = $ptr; $f._r = _r; $f.cutset = cutset; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.TrimLeft = TrimLeft;\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = unicode.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"time\"] = (function() {\n\tvar $pkg = {}, $init, errors, js, nosync, runtime, strings, syscall, runtimeTimer, ParseError, Timer, Time, Month, Weekday, Duration, Location, zone, zoneTrans, sliceType, sliceType$1, sliceType$2, ptrType, funcType, arrayType, sliceType$3, arrayType$1, arrayType$2, ptrType$1, chanType$1, chanType$2, funcType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$6, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, unitMap, months, days, daysBefore, utcLoc, utcLoc_ptr, localLoc, localLoc_ptr, localOnce, zoneinfo, badData, zoneDirs, _map, _key, _tuple, _r, initLocal, runtimeNano, now, startTimer, stopTimer, startsWithLowerCase, nextStdChunk, match, lookup, appendUint, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, ParseDuration, when, NewTimer, sendTime, absWeekday, absClock, fmtFrac, fmtInt, absDate, Now, Unix, isLeap, norm, Date, div, FixedZone;\n\terrors = $packages[\"errors\"];\n\tjs = $packages[\"github.com/gopherjs/gopherjs/js\"];\n\tnosync = $packages[\"github.com/gopherjs/gopherjs/nosync\"];\n\truntime = $packages[\"runtime\"];\n\tstrings = $packages[\"strings\"];\n\tsyscall = $packages[\"syscall\"];\n\truntimeTimer = $pkg.runtimeTimer = $newType(0, $kindStruct, \"time.runtimeTimer\", \"runtimeTimer\", \"time\", function(i_, when_, period_, f_, arg_, timeout_, active_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.i = 0;\n\t\t\tthis.when = new $Int64(0, 0);\n\t\t\tthis.period = new $Int64(0, 0);\n\t\t\tthis.f = $throwNilPointerError;\n\t\t\tthis.arg = $ifaceNil;\n\t\t\tthis.timeout = null;\n\t\t\tthis.active = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.i = i_;\n\t\tthis.when = when_;\n\t\tthis.period = period_;\n\t\tthis.f = f_;\n\t\tthis.arg = arg_;\n\t\tthis.timeout = timeout_;\n\t\tthis.active = active_;\n\t});\n\tParseError = $pkg.ParseError = $newType(0, $kindStruct, \"time.ParseError\", \"ParseError\", \"time\", function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Layout = \"\";\n\t\t\tthis.Value = \"\";\n\t\t\tthis.LayoutElem = \"\";\n\t\t\tthis.ValueElem = \"\";\n\t\t\tthis.Message = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.Layout = Layout_;\n\t\tthis.Value = Value_;\n\t\tthis.LayoutElem = LayoutElem_;\n\t\tthis.ValueElem = ValueElem_;\n\t\tthis.Message = Message_;\n\t});\n\tTimer = $pkg.Timer = $newType(0, $kindStruct, \"time.Timer\", \"Timer\", \"time\", function(C_, r_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.C = chanType$2.nil;\n\t\t\tthis.r = new runtimeTimer.ptr();\n\t\t\treturn;\n\t\t}\n\t\tthis.C = C_;\n\t\tthis.r = r_;\n\t});\n\tTime = $pkg.Time = $newType(0, $kindStruct, \"time.Time\", \"Time\", \"time\", function(sec_, nsec_, loc_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.sec = new $Int64(0, 0);\n\t\t\tthis.nsec = 0;\n\t\t\tthis.loc = ptrType$1.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.sec = sec_;\n\t\tthis.nsec = nsec_;\n\t\tthis.loc = loc_;\n\t});\n\tMonth = $pkg.Month = $newType(4, $kindInt, \"time.Month\", \"Month\", \"time\", null);\n\tWeekday = $pkg.Weekday = $newType(4, $kindInt, \"time.Weekday\", \"Weekday\", \"time\", null);\n\tDuration = $pkg.Duration = $newType(8, $kindInt64, \"time.Duration\", \"Duration\", \"time\", null);\n\tLocation = $pkg.Location = $newType(0, $kindStruct, \"time.Location\", \"Location\", \"time\", function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.name = \"\";\n\t\t\tthis.zone = sliceType$1.nil;\n\t\t\tthis.tx = sliceType$2.nil;\n\t\t\tthis.cacheStart = new $Int64(0, 0);\n\t\t\tthis.cacheEnd = new $Int64(0, 0);\n\t\t\tthis.cacheZone = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.name = name_;\n\t\tthis.zone = zone_;\n\t\tthis.tx = tx_;\n\t\tthis.cacheStart = cacheStart_;\n\t\tthis.cacheEnd = cacheEnd_;\n\t\tthis.cacheZone = cacheZone_;\n\t});\n\tzone = $pkg.zone = $newType(0, $kindStruct, \"time.zone\", \"zone\", \"time\", function(name_, offset_, isDST_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.name = \"\";\n\t\t\tthis.offset = 0;\n\t\t\tthis.isDST = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.name = name_;\n\t\tthis.offset = offset_;\n\t\tthis.isDST = isDST_;\n\t});\n\tzoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, \"time.zoneTrans\", \"zoneTrans\", \"time\", function(when_, index_, isstd_, isutc_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.when = new $Int64(0, 0);\n\t\t\tthis.index = 0;\n\t\t\tthis.isstd = false;\n\t\t\tthis.isutc = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.when = when_;\n\t\tthis.index = index_;\n\t\tthis.isstd = isstd_;\n\t\tthis.isutc = isutc_;\n\t});\n\tsliceType = $sliceType($String);\n\tsliceType$1 = $sliceType(zone);\n\tsliceType$2 = $sliceType(zoneTrans);\n\tptrType = $ptrType(zone);\n\tfuncType = $funcType([], [], false);\n\tarrayType = $arrayType($Uint8, 32);\n\tsliceType$3 = $sliceType($Uint8);\n\tarrayType$1 = $arrayType($Uint8, 9);\n\tarrayType$2 = $arrayType($Uint8, 64);\n\tptrType$1 = $ptrType(Location);\n\tchanType$1 = $chanType(Time, false, false);\n\tchanType$2 = $chanType(Time, false, true);\n\tfuncType$1 = $funcType([$emptyInterface, $Uintptr], [], false);\n\tptrType$2 = $ptrType(js.Object);\n\tptrType$3 = $ptrType(ParseError);\n\tptrType$4 = $ptrType(Timer);\n\tptrType$6 = $ptrType(Time);\n\tinitLocal = function() {\n\t\tvar $ptr, d, i, j, s;\n\t\td = new ($global.Date)();\n\t\ts = $internalize(d, $String);\n\t\ti = strings.IndexByte(s, 40);\n\t\tj = strings.IndexByte(s, 41);\n\t\tif ((i === -1) || (j === -1)) {\n\t\t\tlocalLoc.name = \"UTC\";\n\t\t\treturn;\n\t\t}\n\t\tlocalLoc.name = s.substring((i + 1 >> 0), j);\n\t\tlocalLoc.zone = new sliceType$1([new zone.ptr(localLoc.name, ($parseInt(d.getTimezoneOffset()) >> 0) * -60 >> 0, false)]);\n\t};\n\truntimeNano = function() {\n\t\tvar $ptr;\n\t\treturn $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));\n\t};\n\tnow = function() {\n\t\tvar $ptr, _tmp, _tmp$1, n, nsec, sec, x;\n\t\tsec = new $Int64(0, 0);\n\t\tnsec = 0;\n\t\tn = runtimeNano();\n\t\t_tmp = $div64(n, new $Int64(0, 1000000000), false); _tmp$1 = ((x = $div64(n, new $Int64(0, 1000000000), true), x.$low + ((x.$high >> 31) * 4294967296)) >> 0); sec = _tmp; nsec = _tmp$1;\n\t\treturn [sec, nsec];\n\t};\n\tstartTimer = function(t) {\n\t\tvar $ptr, diff, t, x, x$1;\n\t\tt.active = true;\n\t\tdiff = $div64(((x = t.when, x$1 = runtimeNano(), new $Int64(x.$high - x$1.$high, x.$low - x$1.$low))), new $Int64(0, 1000000), false);\n\t\tif ((diff.$high > 0 || (diff.$high === 0 && diff.$low > 2147483647))) {\n\t\t\treturn;\n\t\t}\n\t\tif ((diff.$high < 0 || (diff.$high === 0 && diff.$low < 0))) {\n\t\t\tdiff = new $Int64(0, 0);\n\t\t}\n\t\tt.timeout = $global.setTimeout($externalize((function() {\n\t\t\tvar $ptr, x$2, x$3, x$4;\n\t\t\tt.active = false;\n\t\t\t$go(t.f, [t.arg, 0]);\n\t\t\tif (!((x$2 = t.period, (x$2.$high === 0 && x$2.$low === 0)))) {\n\t\t\t\tt.when = (x$3 = t.when, x$4 = t.period, new $Int64(x$3.$high + x$4.$high, x$3.$low + x$4.$low));\n\t\t\t\tstartTimer(t);\n\t\t\t}\n\t\t}), funcType), $externalize(new $Int64(diff.$high + 0, diff.$low + 1), $Int64));\n\t};\n\tstopTimer = function(t) {\n\t\tvar $ptr, t, wasActive;\n\t\t$global.clearTimeout(t.timeout);\n\t\twasActive = t.active;\n\t\tt.active = false;\n\t\treturn wasActive;\n\t};\n\tstartsWithLowerCase = function(str) {\n\t\tvar $ptr, c, str;\n\t\tif (str.length === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tc = str.charCodeAt(0);\n\t\treturn 97 <= c && c <= 122;\n\t};\n\tnextStdChunk = function(layout) {\n\t\tvar $ptr, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$9, c, ch, i, j, layout, prefix, std, std$1, suffix, x;\n\t\tprefix = \"\";\n\t\tstd = 0;\n\t\tsuffix = \"\";\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < layout.length)) { break; }\n\t\t\tc = (layout.charCodeAt(i) >> 0);\n\t\t\t_ref = c;\n\t\t\tif (_ref === 74) {\n\t\t\t\tif (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === \"Jan\") {\n\t\t\t\t\tif (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === \"January\") {\n\t\t\t\t\t\t_tmp = layout.substring(0, i); _tmp$1 = 257; _tmp$2 = layout.substring((i + 7 >> 0)); prefix = _tmp; std = _tmp$1; suffix = _tmp$2;\n\t\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t\t}\n\t\t\t\t\tif (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {\n\t\t\t\t\t\t_tmp$3 = layout.substring(0, i); _tmp$4 = 258; _tmp$5 = layout.substring((i + 3 >> 0)); prefix = _tmp$3; std = _tmp$4; suffix = _tmp$5;\n\t\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (_ref === 77) {\n\t\t\t\tif (layout.length >= (i + 3 >> 0)) {\n\t\t\t\t\tif (layout.substring(i, (i + 3 >> 0)) === \"Mon\") {\n\t\t\t\t\t\tif (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === \"Monday\") {\n\t\t\t\t\t\t\t_tmp$6 = layout.substring(0, i); _tmp$7 = 261; _tmp$8 = layout.substring((i + 6 >> 0)); prefix = _tmp$6; std = _tmp$7; suffix = _tmp$8;\n\t\t\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {\n\t\t\t\t\t\t\t_tmp$9 = layout.substring(0, i); _tmp$10 = 262; _tmp$11 = layout.substring((i + 3 >> 0)); prefix = _tmp$9; std = _tmp$10; suffix = _tmp$11;\n\t\t\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (layout.substring(i, (i + 3 >> 0)) === \"MST\") {\n\t\t\t\t\t\t_tmp$12 = layout.substring(0, i); _tmp$13 = 21; _tmp$14 = layout.substring((i + 3 >> 0)); prefix = _tmp$12; std = _tmp$13; suffix = _tmp$14;\n\t\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (_ref === 48) {\n\t\t\t\tif (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {\n\t\t\t\t\t_tmp$15 = layout.substring(0, i); _tmp$16 = (x = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x < 0 || x >= std0x.length) ? $throwRuntimeError(\"index out of range\") : std0x[x])); _tmp$17 = layout.substring((i + 2 >> 0)); prefix = _tmp$15; std = _tmp$16; suffix = _tmp$17;\n\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t}\n\t\t\t} else if (_ref === 49) {\n\t\t\t\tif (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {\n\t\t\t\t\t_tmp$18 = layout.substring(0, i); _tmp$19 = 522; _tmp$20 = layout.substring((i + 2 >> 0)); prefix = _tmp$18; std = _tmp$19; suffix = _tmp$20;\n\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t}\n\t\t\t\t_tmp$21 = layout.substring(0, i); _tmp$22 = 259; _tmp$23 = layout.substring((i + 1 >> 0)); prefix = _tmp$21; std = _tmp$22; suffix = _tmp$23;\n\t\t\t\treturn [prefix, std, suffix];\n\t\t\t} else if (_ref === 50) {\n\t\t\t\tif (layout.length >= (i + 4 >> 0) && layout.substring(i, (i + 4 >> 0)) === \"2006\") {\n\t\t\t\t\t_tmp$24 = layout.substring(0, i); _tmp$25 = 273; _tmp$26 = layout.substring((i + 4 >> 0)); prefix = _tmp$24; std = _tmp$25; suffix = _tmp$26;\n\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t}\n\t\t\t\t_tmp$27 = layout.substring(0, i); _tmp$28 = 263; _tmp$29 = layout.substring((i + 1 >> 0)); prefix = _tmp$27; std = _tmp$28; suffix = _tmp$29;\n\t\t\t\treturn [prefix, std, suffix];\n\t\t\t} else if (_ref === 95) {\n\t\t\t\tif (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {\n\t\t\t\t\t_tmp$30 = layout.substring(0, i); _tmp$31 = 264; _tmp$32 = layout.substring((i + 2 >> 0)); prefix = _tmp$30; std = _tmp$31; suffix = _tmp$32;\n\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t}\n\t\t\t} else if (_ref === 51) {\n\t\t\t\t_tmp$33 = layout.substring(0, i); _tmp$34 = 523; _tmp$35 = layout.substring((i + 1 >> 0)); prefix = _tmp$33; std = _tmp$34; suffix = _tmp$35;\n\t\t\t\treturn [prefix, std, suffix];\n\t\t\t} else if (_ref === 52) {\n\t\t\t\t_tmp$36 = layout.substring(0, i); _tmp$37 = 525; _tmp$38 = layout.substring((i + 1 >> 0)); prefix = _tmp$36; std = _tmp$37; suffix = _tmp$38;\n\t\t\t\treturn [prefix, std, suffix];\n\t\t\t} else if (_ref === 53) {\n\t\t\t\t_tmp$39 = layout.substring(0, i); _tmp$40 = 527; _tmp$41 = layout.substring((i + 1 >> 0)); prefix = _tmp$39; std = _tmp$40; suffix = _tmp$41;\n\t\t\t\treturn [prefix, std, suffix];\n\t\t\t} else if (_ref === 80) {\n\t\t\t\tif (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {\n\t\t\t\t\t_tmp$42 = layout.substring(0, i); _tmp$43 = 531; _tmp$44 = layout.substring((i + 2 >> 0)); prefix = _tmp$42; std = _tmp$43; suffix = _tmp$44;\n\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t}\n\t\t\t} else if (_ref === 112) {\n\t\t\t\tif (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {\n\t\t\t\t\t_tmp$45 = layout.substring(0, i); _tmp$46 = 532; _tmp$47 = layout.substring((i + 2 >> 0)); prefix = _tmp$45; std = _tmp$46; suffix = _tmp$47;\n\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t}\n\t\t\t} else if (_ref === 45) {\n\t\t\t\tif (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === \"-070000\") {\n\t\t\t\t\t_tmp$48 = layout.substring(0, i); _tmp$49 = 27; _tmp$50 = layout.substring((i + 7 >> 0)); prefix = _tmp$48; std = _tmp$49; suffix = _tmp$50;\n\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t}\n\t\t\t\tif (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === \"-07:00:00\") {\n\t\t\t\t\t_tmp$51 = layout.substring(0, i); _tmp$52 = 30; _tmp$53 = layout.substring((i + 9 >> 0)); prefix = _tmp$51; std = _tmp$52; suffix = _tmp$53;\n\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t}\n\t\t\t\tif (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === \"-0700\") {\n\t\t\t\t\t_tmp$54 = layout.substring(0, i); _tmp$55 = 26; _tmp$56 = layout.substring((i + 5 >> 0)); prefix = _tmp$54; std = _tmp$55; suffix = _tmp$56;\n\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t}\n\t\t\t\tif (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === \"-07:00\") {\n\t\t\t\t\t_tmp$57 = layout.substring(0, i); _tmp$58 = 29; _tmp$59 = layout.substring((i + 6 >> 0)); prefix = _tmp$57; std = _tmp$58; suffix = _tmp$59;\n\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t}\n\t\t\t\tif (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === \"-07\") {\n\t\t\t\t\t_tmp$60 = layout.substring(0, i); _tmp$61 = 28; _tmp$62 = layout.substring((i + 3 >> 0)); prefix = _tmp$60; std = _tmp$61; suffix = _tmp$62;\n\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t}\n\t\t\t} else if (_ref === 90) {\n\t\t\t\tif (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === \"Z070000\") {\n\t\t\t\t\t_tmp$63 = layout.substring(0, i); _tmp$64 = 23; _tmp$65 = layout.substring((i + 7 >> 0)); prefix = _tmp$63; std = _tmp$64; suffix = _tmp$65;\n\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t}\n\t\t\t\tif (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === \"Z07:00:00\") {\n\t\t\t\t\t_tmp$66 = layout.substring(0, i); _tmp$67 = 25; _tmp$68 = layout.substring((i + 9 >> 0)); prefix = _tmp$66; std = _tmp$67; suffix = _tmp$68;\n\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t}\n\t\t\t\tif (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === \"Z0700\") {\n\t\t\t\t\t_tmp$69 = layout.substring(0, i); _tmp$70 = 22; _tmp$71 = layout.substring((i + 5 >> 0)); prefix = _tmp$69; std = _tmp$70; suffix = _tmp$71;\n\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t}\n\t\t\t\tif (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === \"Z07:00\") {\n\t\t\t\t\t_tmp$72 = layout.substring(0, i); _tmp$73 = 24; _tmp$74 = layout.substring((i + 6 >> 0)); prefix = _tmp$72; std = _tmp$73; suffix = _tmp$74;\n\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t}\n\t\t\t} else if (_ref === 46) {\n\t\t\t\tif ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {\n\t\t\t\t\tch = layout.charCodeAt((i + 1 >> 0));\n\t\t\t\t\tj = i + 1 >> 0;\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tif (!(j < layout.length && (layout.charCodeAt(j) === ch))) { break; }\n\t\t\t\t\t\tj = j + (1) >> 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (!isDigit(layout, j)) {\n\t\t\t\t\t\tstd$1 = 31;\n\t\t\t\t\t\tif (layout.charCodeAt((i + 1 >> 0)) === 57) {\n\t\t\t\t\t\t\tstd$1 = 32;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstd$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));\n\t\t\t\t\t\t_tmp$75 = layout.substring(0, i); _tmp$76 = std$1; _tmp$77 = layout.substring(j); prefix = _tmp$75; std = _tmp$76; suffix = _tmp$77;\n\t\t\t\t\t\treturn [prefix, std, suffix];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\t_tmp$78 = layout; _tmp$79 = 0; _tmp$80 = \"\"; prefix = _tmp$78; std = _tmp$79; suffix = _tmp$80;\n\t\treturn [prefix, std, suffix];\n\t};\n\tmatch = function(s1, s2) {\n\t\tvar $ptr, c1, c2, i, s1, s2;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < s1.length)) { break; }\n\t\t\tc1 = s1.charCodeAt(i);\n\t\t\tc2 = s2.charCodeAt(i);\n\t\t\tif (!((c1 === c2))) {\n\t\t\t\tc1 = (c1 | (32)) >>> 0;\n\t\t\t\tc2 = (c2 | (32)) >>> 0;\n\t\t\t\tif (!((c1 === c2)) || c1 < 97 || c1 > 122) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn true;\n\t};\n\tlookup = function(tab, val) {\n\t\tvar $ptr, _i, _ref, i, tab, v, val;\n\t\t_ref = tab;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\tv = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tif (val.length >= v.length && match(val.substring(0, v.length), v)) {\n\t\t\t\treturn [i, val.substring(v.length), $ifaceNil];\n\t\t\t}\n\t\t\t_i++;\n\t\t}\n\t\treturn [-1, val, errBad];\n\t};\n\tappendUint = function(b, x, pad) {\n\t\tvar $ptr, _q, _q$1, _r$1, _r$2, b, buf, n, pad, x;\n\t\tif (x < 10) {\n\t\t\tif (!((pad === 0))) {\n\t\t\t\tb = $append(b, pad);\n\t\t\t}\n\t\t\treturn $append(b, ((48 + x >>> 0) << 24 >>> 24));\n\t\t}\n\t\tif (x < 100) {\n\t\t\tb = $append(b, ((48 + (_q = x / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError(\"integer divide by zero\")) >>> 0) << 24 >>> 24));\n\t\t\tb = $append(b, ((48 + (_r$1 = x % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError(\"integer divide by zero\")) >>> 0) << 24 >>> 24));\n\t\t\treturn b;\n\t\t}\n\t\tbuf = $clone(arrayType.zero(), arrayType);\n\t\tn = 32;\n\t\tif (x === 0) {\n\t\t\treturn $append(b, 48);\n\t\t}\n\t\twhile (true) {\n\t\t\tif (!(x >= 10)) { break; }\n\t\t\tn = n - (1) >> 0;\n\t\t\t((n < 0 || n >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[n] = (((_r$2 = x % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError(\"integer divide by zero\")) + 48 >>> 0) << 24 >>> 24));\n\t\t\tx = (_q$1 = x / (10), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t}\n\t\tn = n - (1) >> 0;\n\t\t((n < 0 || n >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[n] = ((x + 48 >>> 0) << 24 >>> 24));\n\t\treturn $appendSlice(b, $subslice(new sliceType$3(buf), n));\n\t};\n\tatoi = function(s) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple$1, err, neg, q, rem, s, x;\n\t\tx = 0;\n\t\terr = $ifaceNil;\n\t\tneg = false;\n\t\tif (!(s === \"\") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {\n\t\t\tneg = s.charCodeAt(0) === 45;\n\t\t\ts = s.substring(1);\n\t\t}\n\t\t_tuple$1 = leadingInt(s); q = _tuple$1[0]; rem = _tuple$1[1]; err = _tuple$1[2];\n\t\tx = ((q.$low + ((q.$high >> 31) * 4294967296)) >> 0);\n\t\tif (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === \"\")) {\n\t\t\t_tmp = 0; _tmp$1 = atoiError; x = _tmp; err = _tmp$1;\n\t\t\treturn [x, err];\n\t\t}\n\t\tif (neg) {\n\t\t\tx = -x;\n\t\t}\n\t\t_tmp$2 = x; _tmp$3 = $ifaceNil; x = _tmp$2; err = _tmp$3;\n\t\treturn [x, err];\n\t};\n\tformatNano = function(b, nanosec, n, trim) {\n\t\tvar $ptr, _q, _r$1, b, buf, n, nanosec, start, trim, u, x;\n\t\tu = nanosec;\n\t\tbuf = $clone(arrayType$1.zero(), arrayType$1);\n\t\tstart = 9;\n\t\twhile (true) {\n\t\t\tif (!(start > 0)) { break; }\n\t\t\tstart = start - (1) >> 0;\n\t\t\t((start < 0 || start >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[start] = (((_r$1 = u % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError(\"integer divide by zero\")) + 48 >>> 0) << 24 >>> 24));\n\t\t\tu = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t}\n\t\tif (n > 9) {\n\t\t\tn = 9;\n\t\t}\n\t\tif (trim) {\n\t\t\twhile (true) {\n\t\t\t\tif (!(n > 0 && ((x = n - 1 >> 0, ((x < 0 || x >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[x])) === 48))) { break; }\n\t\t\t\tn = n - (1) >> 0;\n\t\t\t}\n\t\t\tif (n === 0) {\n\t\t\t\treturn b;\n\t\t\t}\n\t\t}\n\t\tb = $append(b, 46);\n\t\treturn $appendSlice(b, $subslice(new sliceType$3(buf), 0, n));\n\t};\n\tTime.ptr.prototype.String = function() {\n\t\tvar $ptr, _r$1, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = $clone(this, Time);\n\t\t_r$1 = t.Format(\"2006-01-02 15:04:05.999999999 -0700 MST\"); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn _r$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.String = function() { return this.$val.String(); };\n\tTime.ptr.prototype.Format = function(layout) {\n\t\tvar $ptr, _q, _q$1, _q$2, _q$3, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _tuple$1, _tuple$2, _tuple$3, _tuple$4, abs, absoffset, b, buf, day, hour, hr, hr$1, layout, m, max, min, month, name, offset, prefix, s, sec, std, suffix, t, y, y$1, year, zone$1, zone$2, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; abs = $f.abs; absoffset = $f.absoffset; b = $f.b; buf = $f.buf; day = $f.day; hour = $f.hour; hr = $f.hr; hr$1 = $f.hr$1; layout = $f.layout; m = $f.m; max = $f.max; min = $f.min; month = $f.month; name = $f.name; offset = $f.offset; prefix = $f.prefix; s = $f.s; sec = $f.sec; std = $f.std; suffix = $f.suffix; t = $f.t; y = $f.y; y$1 = $f.y$1; year = $f.year; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = $clone(this, Time);\n\t\t_r$1 = t.locabs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r$1; name = _tuple$1[0]; offset = _tuple$1[1]; abs = _tuple$1[2];\n\t\tyear = -1;\n\t\tmonth = 0;\n\t\tday = 0;\n\t\thour = -1;\n\t\tmin = 0;\n\t\tsec = 0;\n\t\tb = sliceType$3.nil;\n\t\tbuf = $clone(arrayType$2.zero(), arrayType$2);\n\t\tmax = layout.length + 10 >> 0;\n\t\tif (max <= 64) {\n\t\t\tb = $subslice(new sliceType$3(buf), 0, 0);\n\t\t} else {\n\t\t\tb = $makeSlice(sliceType$3, 0, max);\n\t\t}\n\t\twhile (true) {\n\t\t\tif (!(!(layout === \"\"))) { break; }\n\t\t\t_tuple$2 = nextStdChunk(layout); prefix = _tuple$2[0]; std = _tuple$2[1]; suffix = _tuple$2[2];\n\t\t\tif (!(prefix === \"\")) {\n\t\t\t\tb = $appendSlice(b, new sliceType$3($stringToBytes(prefix)));\n\t\t\t}\n\t\t\tif (std === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlayout = suffix;\n\t\t\tif (year < 0 && !(((std & 256) === 0))) {\n\t\t\t\t_tuple$3 = absDate(abs, true); year = _tuple$3[0]; month = _tuple$3[1]; day = _tuple$3[2];\n\t\t\t}\n\t\t\tif (hour < 0 && !(((std & 512) === 0))) {\n\t\t\t\t_tuple$4 = absClock(abs); hour = _tuple$4[0]; min = _tuple$4[1]; sec = _tuple$4[2];\n\t\t\t}\n\t\t\t_ref = std & 65535;\n\t\t\tswitch (0) { default: if (_ref === 274) {\n\t\t\t\ty = year;\n\t\t\t\tif (y < 0) {\n\t\t\t\t\ty = -y;\n\t\t\t\t}\n\t\t\t\tb = appendUint(b, ((_r$2 = y % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError(\"integer divide by zero\")) >>> 0), 48);\n\t\t\t} else if (_ref === 273) {\n\t\t\t\ty$1 = year;\n\t\t\t\tif (year <= -1000) {\n\t\t\t\t\tb = $append(b, 45);\n\t\t\t\t\ty$1 = -y$1;\n\t\t\t\t} else if (year <= -100) {\n\t\t\t\t\tb = $appendSlice(b, new sliceType$3($stringToBytes(\"-0\")));\n\t\t\t\t\ty$1 = -y$1;\n\t\t\t\t} else if (year <= -10) {\n\t\t\t\t\tb = $appendSlice(b, new sliceType$3($stringToBytes(\"-00\")));\n\t\t\t\t\ty$1 = -y$1;\n\t\t\t\t} else if (year < 0) {\n\t\t\t\t\tb = $appendSlice(b, new sliceType$3($stringToBytes(\"-000\")));\n\t\t\t\t\ty$1 = -y$1;\n\t\t\t\t} else if (year < 10) {\n\t\t\t\t\tb = $appendSlice(b, new sliceType$3($stringToBytes(\"000\")));\n\t\t\t\t} else if (year < 100) {\n\t\t\t\t\tb = $appendSlice(b, new sliceType$3($stringToBytes(\"00\")));\n\t\t\t\t} else if (year < 1000) {\n\t\t\t\t\tb = $append(b, 48);\n\t\t\t\t}\n\t\t\t\tb = appendUint(b, (y$1 >>> 0), 0);\n\t\t\t} else if (_ref === 258) {\n\t\t\t\tb = $appendSlice(b, new sliceType$3($stringToBytes(new Month(month).String().substring(0, 3))));\n\t\t\t} else if (_ref === 257) {\n\t\t\t\tm = new Month(month).String();\n\t\t\t\tb = $appendSlice(b, new sliceType$3($stringToBytes(m)));\n\t\t\t} else if (_ref === 259) {\n\t\t\t\tb = appendUint(b, (month >>> 0), 0);\n\t\t\t} else if (_ref === 260) {\n\t\t\t\tb = appendUint(b, (month >>> 0), 48);\n\t\t\t} else if (_ref === 262) {\n\t\t\t\tb = $appendSlice(b, new sliceType$3($stringToBytes(new Weekday(absWeekday(abs)).String().substring(0, 3))));\n\t\t\t} else if (_ref === 261) {\n\t\t\t\ts = new Weekday(absWeekday(abs)).String();\n\t\t\t\tb = $appendSlice(b, new sliceType$3($stringToBytes(s)));\n\t\t\t} else if (_ref === 263) {\n\t\t\t\tb = appendUint(b, (day >>> 0), 0);\n\t\t\t} else if (_ref === 264) {\n\t\t\t\tb = appendUint(b, (day >>> 0), 32);\n\t\t\t} else if (_ref === 265) {\n\t\t\t\tb = appendUint(b, (day >>> 0), 48);\n\t\t\t} else if (_ref === 522) {\n\t\t\t\tb = appendUint(b, (hour >>> 0), 48);\n\t\t\t} else if (_ref === 523) {\n\t\t\t\thr = (_r$3 = hour % 12, _r$3 === _r$3 ? _r$3 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t\t\tif (hr === 0) {\n\t\t\t\t\thr = 12;\n\t\t\t\t}\n\t\t\t\tb = appendUint(b, (hr >>> 0), 0);\n\t\t\t} else if (_ref === 524) {\n\t\t\t\thr$1 = (_r$4 = hour % 12, _r$4 === _r$4 ? _r$4 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t\t\tif (hr$1 === 0) {\n\t\t\t\t\thr$1 = 12;\n\t\t\t\t}\n\t\t\t\tb = appendUint(b, (hr$1 >>> 0), 48);\n\t\t\t} else if (_ref === 525) {\n\t\t\t\tb = appendUint(b, (min >>> 0), 0);\n\t\t\t} else if (_ref === 526) {\n\t\t\t\tb = appendUint(b, (min >>> 0), 48);\n\t\t\t} else if (_ref === 527) {\n\t\t\t\tb = appendUint(b, (sec >>> 0), 0);\n\t\t\t} else if (_ref === 528) {\n\t\t\t\tb = appendUint(b, (sec >>> 0), 48);\n\t\t\t} else if (_ref === 531) {\n\t\t\t\tif (hour >= 12) {\n\t\t\t\t\tb = $appendSlice(b, new sliceType$3($stringToBytes(\"PM\")));\n\t\t\t\t} else {\n\t\t\t\t\tb = $appendSlice(b, new sliceType$3($stringToBytes(\"AM\")));\n\t\t\t\t}\n\t\t\t} else if (_ref === 532) {\n\t\t\t\tif (hour >= 12) {\n\t\t\t\t\tb = $appendSlice(b, new sliceType$3($stringToBytes(\"pm\")));\n\t\t\t\t} else {\n\t\t\t\t\tb = $appendSlice(b, new sliceType$3($stringToBytes(\"am\")));\n\t\t\t\t}\n\t\t\t} else if (_ref === 22 || _ref === 24 || _ref === 23 || _ref === 25 || _ref === 26 || _ref === 29 || _ref === 27 || _ref === 30) {\n\t\t\t\tif ((offset === 0) && ((std === 22) || (std === 24) || (std === 23) || (std === 25))) {\n\t\t\t\t\tb = $append(b, 90);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tzone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t\t\tabsoffset = offset;\n\t\t\t\tif (zone$1 < 0) {\n\t\t\t\t\tb = $append(b, 45);\n\t\t\t\t\tzone$1 = -zone$1;\n\t\t\t\t\tabsoffset = -absoffset;\n\t\t\t\t} else {\n\t\t\t\t\tb = $append(b, 43);\n\t\t\t\t}\n\t\t\t\tb = appendUint(b, ((_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError(\"integer divide by zero\")) >>> 0), 48);\n\t\t\t\tif ((std === 24) || (std === 29) || (std === 25) || (std === 30)) {\n\t\t\t\t\tb = $append(b, 58);\n\t\t\t\t}\n\t\t\t\tb = appendUint(b, ((_r$5 = zone$1 % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError(\"integer divide by zero\")) >>> 0), 48);\n\t\t\t\tif ((std === 23) || (std === 27) || (std === 30) || (std === 25)) {\n\t\t\t\t\tif ((std === 30) || (std === 25)) {\n\t\t\t\t\t\tb = $append(b, 58);\n\t\t\t\t\t}\n\t\t\t\t\tb = appendUint(b, ((_r$6 = absoffset % 60, _r$6 === _r$6 ? _r$6 : $throwRuntimeError(\"integer divide by zero\")) >>> 0), 48);\n\t\t\t\t}\n\t\t\t} else if (_ref === 21) {\n\t\t\t\tif (!(name === \"\")) {\n\t\t\t\t\tb = $appendSlice(b, new sliceType$3($stringToBytes(name)));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tzone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t\t\tif (zone$2 < 0) {\n\t\t\t\t\tb = $append(b, 45);\n\t\t\t\t\tzone$2 = -zone$2;\n\t\t\t\t} else {\n\t\t\t\t\tb = $append(b, 43);\n\t\t\t\t}\n\t\t\t\tb = appendUint(b, ((_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError(\"integer divide by zero\")) >>> 0), 48);\n\t\t\t\tb = appendUint(b, ((_r$7 = zone$2 % 60, _r$7 === _r$7 ? _r$7 : $throwRuntimeError(\"integer divide by zero\")) >>> 0), 48);\n\t\t\t} else if (_ref === 31 || _ref === 32) {\n\t\t\t\tb = formatNano(b, (t.Nanosecond() >>> 0), std >> 16 >> 0, (std & 65535) === 32);\n\t\t\t} }\n\t\t}\n\t\treturn $bytesToString(b);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Format }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.abs = abs; $f.absoffset = absoffset; $f.b = b; $f.buf = buf; $f.day = day; $f.hour = hour; $f.hr = hr; $f.hr$1 = hr$1; $f.layout = layout; $f.m = m; $f.max = max; $f.min = min; $f.month = month; $f.name = name; $f.offset = offset; $f.prefix = prefix; $f.s = s; $f.sec = sec; $f.std = std; $f.suffix = suffix; $f.t = t; $f.y = y; $f.y$1 = y$1; $f.year = year; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.Format = function(layout) { return this.$val.Format(layout); };\n\tquote = function(s) {\n\t\tvar $ptr, s;\n\t\treturn \"\\\"\" + s + \"\\\"\";\n\t};\n\tParseError.ptr.prototype.Error = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\tif (e.Message === \"\") {\n\t\t\treturn \"parsing time \" + quote(e.Value) + \" as \" + quote(e.Layout) + \": cannot parse \" + quote(e.ValueElem) + \" as \" + quote(e.LayoutElem);\n\t\t}\n\t\treturn \"parsing time \" + quote(e.Value) + e.Message;\n\t};\n\tParseError.prototype.Error = function() { return this.$val.Error(); };\n\tisDigit = function(s, i) {\n\t\tvar $ptr, c, i, s;\n\t\tif (s.length <= i) {\n\t\t\treturn false;\n\t\t}\n\t\tc = s.charCodeAt(i);\n\t\treturn 48 <= c && c <= 57;\n\t};\n\tgetnum = function(s, fixed) {\n\t\tvar $ptr, fixed, s;\n\t\tif (!isDigit(s, 0)) {\n\t\t\treturn [0, s, errBad];\n\t\t}\n\t\tif (!isDigit(s, 1)) {\n\t\t\tif (fixed) {\n\t\t\t\treturn [0, s, errBad];\n\t\t\t}\n\t\t\treturn [((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), s.substring(1), $ifaceNil];\n\t\t}\n\t\treturn [(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0) * 10 >> 0) + ((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0) >> 0, s.substring(2), $ifaceNil];\n\t};\n\tcutspace = function(s) {\n\t\tvar $ptr, s;\n\t\twhile (true) {\n\t\t\tif (!(s.length > 0 && (s.charCodeAt(0) === 32))) { break; }\n\t\t\ts = s.substring(1);\n\t\t}\n\t\treturn s;\n\t};\n\tskip = function(value, prefix) {\n\t\tvar $ptr, prefix, value;\n\t\twhile (true) {\n\t\t\tif (!(prefix.length > 0)) { break; }\n\t\t\tif (prefix.charCodeAt(0) === 32) {\n\t\t\t\tif (value.length > 0 && !((value.charCodeAt(0) === 32))) {\n\t\t\t\t\treturn [value, errBad];\n\t\t\t\t}\n\t\t\t\tprefix = cutspace(prefix);\n\t\t\t\tvalue = cutspace(value);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {\n\t\t\t\treturn [value, errBad];\n\t\t\t}\n\t\t\tprefix = prefix.substring(1);\n\t\t\tvalue = value.substring(1);\n\t\t}\n\t\treturn [value, $ifaceNil];\n\t};\n\tParse = function(layout, value) {\n\t\tvar $ptr, _r$1, layout, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; layout = $f.layout; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r$1 = parse(layout, value, $pkg.UTC, $pkg.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn _r$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.layout = layout; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Parse = Parse;\n\tparse = function(layout, value, defaultLocation, local) {\n\t\tvar $ptr, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$2, _ref$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, day, defaultLocation, err, hour, hour$1, hr, i, layout, local, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x, x$1, x$2, x$3, x$4, x$5, year, z, zoneName, zoneOffset, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$34 = $f._tmp$34; _tmp$35 = $f._tmp$35; _tmp$36 = $f._tmp$36; _tmp$37 = $f._tmp$37; _tmp$38 = $f._tmp$38; _tmp$39 = $f._tmp$39; _tmp$4 = $f._tmp$4; _tmp$40 = $f._tmp$40; _tmp$41 = $f._tmp$41; _tmp$42 = $f._tmp$42; _tmp$43 = $f._tmp$43; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$17 = $f._tuple$17; _tuple$18 = $f._tuple$18; _tuple$19 = $f._tuple$19; _tuple$2 = $f._tuple$2; _tuple$20 = $f._tuple$20; _tuple$21 = $f._tuple$21; _tuple$22 = $f._tuple$22; _tuple$23 = $f._tuple$23; _tuple$24 = $f._tuple$24; _tuple$25 = $f._tuple$25; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; alayout = $f.alayout; amSet = $f.amSet; avalue = $f.avalue; day = $f.day; defaultLocation = $f.defaultLocation; err = $f.err; hour = $f.hour; hour$1 = $f.hour$1; hr = $f.hr; i = $f.i; layout = $f.layout; local = $f.local; min = $f.min; min$1 = $f.min$1; mm = $f.mm; month = $f.month; n = $f.n; n$1 = $f.n$1; name = $f.name; ndigit = $f.ndigit; nsec = $f.nsec; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; pmSet = $f.pmSet; prefix = $f.prefix; rangeErrString = $f.rangeErrString; sec = $f.sec; seconds = $f.seconds; sign = $f.sign; ss = $f.ss; std = $f.std; stdstr = $f.stdstr; suffix = $f.suffix; t = $f.t; t$1 = $f.t$1; value = $f.value; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; year = $f.year; z = $f.z; zoneName = $f.zoneName; zoneOffset = $f.zoneOffset; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_tmp = layout; _tmp$1 = value; alayout = _tmp; avalue = _tmp$1;\n\t\trangeErrString = \"\";\n\t\tamSet = false;\n\t\tpmSet = false;\n\t\tyear = 0;\n\t\tmonth = 1;\n\t\tday = 1;\n\t\thour = 0;\n\t\tmin = 0;\n\t\tsec = 0;\n\t\tnsec = 0;\n\t\tz = ptrType$1.nil;\n\t\tzoneOffset = -1;\n\t\tzoneName = \"\";\n\t\twhile (true) {\n\t\t\terr = $ifaceNil;\n\t\t\t_tuple$1 = nextStdChunk(layout); prefix = _tuple$1[0]; std = _tuple$1[1]; suffix = _tuple$1[2];\n\t\t\tstdstr = layout.substring(prefix.length, (layout.length - suffix.length >> 0));\n\t\t\t_tuple$2 = skip(value, prefix); value = _tuple$2[0]; err = _tuple$2[1];\n\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\treturn [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, prefix, value, \"\")];\n\t\t\t}\n\t\t\tif (std === 0) {\n\t\t\t\tif (!((value.length === 0))) {\n\t\t\t\t\treturn [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, \"\", value, \": extra text: \" + value)];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlayout = suffix;\n\t\t\tp = \"\";\n\t\t\t_ref = std & 65535;\n\t\t\tswitch (0) { default: if (_ref === 274) {\n\t\t\t\tif (value.length < 2) {\n\t\t\t\t\terr = errBad;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t_tmp$2 = value.substring(0, 2); _tmp$3 = value.substring(2); p = _tmp$2; value = _tmp$3;\n\t\t\t\t_tuple$3 = atoi(p); year = _tuple$3[0]; err = _tuple$3[1];\n\t\t\t\tif (year >= 69) {\n\t\t\t\t\tyear = year + (1900) >> 0;\n\t\t\t\t} else {\n\t\t\t\t\tyear = year + (2000) >> 0;\n\t\t\t\t}\n\t\t\t} else if (_ref === 273) {\n\t\t\t\tif (value.length < 4 || !isDigit(value, 0)) {\n\t\t\t\t\terr = errBad;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t_tmp$4 = value.substring(0, 4); _tmp$5 = value.substring(4); p = _tmp$4; value = _tmp$5;\n\t\t\t\t_tuple$4 = atoi(p); year = _tuple$4[0]; err = _tuple$4[1];\n\t\t\t} else if (_ref === 258) {\n\t\t\t\t_tuple$5 = lookup(shortMonthNames, value); month = _tuple$5[0]; value = _tuple$5[1]; err = _tuple$5[2];\n\t\t\t} else if (_ref === 257) {\n\t\t\t\t_tuple$6 = lookup(longMonthNames, value); month = _tuple$6[0]; value = _tuple$6[1]; err = _tuple$6[2];\n\t\t\t} else if (_ref === 259 || _ref === 260) {\n\t\t\t\t_tuple$7 = getnum(value, std === 260); month = _tuple$7[0]; value = _tuple$7[1]; err = _tuple$7[2];\n\t\t\t\tif (month <= 0 || 12 < month) {\n\t\t\t\t\trangeErrString = \"month\";\n\t\t\t\t}\n\t\t\t} else if (_ref === 262) {\n\t\t\t\t_tuple$8 = lookup(shortDayNames, value); value = _tuple$8[1]; err = _tuple$8[2];\n\t\t\t} else if (_ref === 261) {\n\t\t\t\t_tuple$9 = lookup(longDayNames, value); value = _tuple$9[1]; err = _tuple$9[2];\n\t\t\t} else if (_ref === 263 || _ref === 264 || _ref === 265) {\n\t\t\t\tif ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {\n\t\t\t\t\tvalue = value.substring(1);\n\t\t\t\t}\n\t\t\t\t_tuple$10 = getnum(value, std === 265); day = _tuple$10[0]; value = _tuple$10[1]; err = _tuple$10[2];\n\t\t\t\tif (day < 0 || 31 < day) {\n\t\t\t\t\trangeErrString = \"day\";\n\t\t\t\t}\n\t\t\t} else if (_ref === 522) {\n\t\t\t\t_tuple$11 = getnum(value, false); hour = _tuple$11[0]; value = _tuple$11[1]; err = _tuple$11[2];\n\t\t\t\tif (hour < 0 || 24 <= hour) {\n\t\t\t\t\trangeErrString = \"hour\";\n\t\t\t\t}\n\t\t\t} else if (_ref === 523 || _ref === 524) {\n\t\t\t\t_tuple$12 = getnum(value, std === 524); hour = _tuple$12[0]; value = _tuple$12[1]; err = _tuple$12[2];\n\t\t\t\tif (hour < 0 || 12 < hour) {\n\t\t\t\t\trangeErrString = \"hour\";\n\t\t\t\t}\n\t\t\t} else if (_ref === 525 || _ref === 526) {\n\t\t\t\t_tuple$13 = getnum(value, std === 526); min = _tuple$13[0]; value = _tuple$13[1]; err = _tuple$13[2];\n\t\t\t\tif (min < 0 || 60 <= min) {\n\t\t\t\t\trangeErrString = \"minute\";\n\t\t\t\t}\n\t\t\t} else if (_ref === 527 || _ref === 528) {\n\t\t\t\t_tuple$14 = getnum(value, std === 528); sec = _tuple$14[0]; value = _tuple$14[1]; err = _tuple$14[2];\n\t\t\t\tif (sec < 0 || 60 <= sec) {\n\t\t\t\t\trangeErrString = \"second\";\n\t\t\t\t}\n\t\t\t\tif (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {\n\t\t\t\t\t_tuple$15 = nextStdChunk(layout); std = _tuple$15[1];\n\t\t\t\t\tstd = std & (65535);\n\t\t\t\t\tif ((std === 31) || (std === 32)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tn = 2;\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tif (!(n < value.length && isDigit(value, n))) { break; }\n\t\t\t\t\t\tn = n + (1) >> 0;\n\t\t\t\t\t}\n\t\t\t\t\t_tuple$16 = parseNanoseconds(value, n); nsec = _tuple$16[0]; rangeErrString = _tuple$16[1]; err = _tuple$16[2];\n\t\t\t\t\tvalue = value.substring(n);\n\t\t\t\t}\n\t\t\t} else if (_ref === 531) {\n\t\t\t\tif (value.length < 2) {\n\t\t\t\t\terr = errBad;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t_tmp$6 = value.substring(0, 2); _tmp$7 = value.substring(2); p = _tmp$6; value = _tmp$7;\n\t\t\t\t_ref$1 = p;\n\t\t\t\tif (_ref$1 === \"PM\") {\n\t\t\t\t\tpmSet = true;\n\t\t\t\t} else if (_ref$1 === \"AM\") {\n\t\t\t\t\tamSet = true;\n\t\t\t\t} else {\n\t\t\t\t\terr = errBad;\n\t\t\t\t}\n\t\t\t} else if (_ref === 532) {\n\t\t\t\tif (value.length < 2) {\n\t\t\t\t\terr = errBad;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t_tmp$8 = value.substring(0, 2); _tmp$9 = value.substring(2); p = _tmp$8; value = _tmp$9;\n\t\t\t\t_ref$2 = p;\n\t\t\t\tif (_ref$2 === \"pm\") {\n\t\t\t\t\tpmSet = true;\n\t\t\t\t} else if (_ref$2 === \"am\") {\n\t\t\t\t\tamSet = true;\n\t\t\t\t} else {\n\t\t\t\t\terr = errBad;\n\t\t\t\t}\n\t\t\t} else if (_ref === 22 || _ref === 24 || _ref === 23 || _ref === 25 || _ref === 26 || _ref === 28 || _ref === 29 || _ref === 27 || _ref === 30) {\n\t\t\t\tif (((std === 22) || (std === 24)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {\n\t\t\t\t\tvalue = value.substring(1);\n\t\t\t\t\tz = $pkg.UTC;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t_tmp$10 = \"\"; _tmp$11 = \"\"; _tmp$12 = \"\"; _tmp$13 = \"\"; sign = _tmp$10; hour$1 = _tmp$11; min$1 = _tmp$12; seconds = _tmp$13;\n\t\t\t\tif ((std === 24) || (std === 29)) {\n\t\t\t\t\tif (value.length < 6) {\n\t\t\t\t\t\terr = errBad;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (!((value.charCodeAt(3) === 58))) {\n\t\t\t\t\t\terr = errBad;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t_tmp$14 = value.substring(0, 1); _tmp$15 = value.substring(1, 3); _tmp$16 = value.substring(4, 6); _tmp$17 = \"00\"; _tmp$18 = value.substring(6); sign = _tmp$14; hour$1 = _tmp$15; min$1 = _tmp$16; seconds = _tmp$17; value = _tmp$18;\n\t\t\t\t} else if (std === 28) {\n\t\t\t\t\tif (value.length < 3) {\n\t\t\t\t\t\terr = errBad;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t_tmp$19 = value.substring(0, 1); _tmp$20 = value.substring(1, 3); _tmp$21 = \"00\"; _tmp$22 = \"00\"; _tmp$23 = value.substring(3); sign = _tmp$19; hour$1 = _tmp$20; min$1 = _tmp$21; seconds = _tmp$22; value = _tmp$23;\n\t\t\t\t} else if ((std === 25) || (std === 30)) {\n\t\t\t\t\tif (value.length < 9) {\n\t\t\t\t\t\terr = errBad;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {\n\t\t\t\t\t\terr = errBad;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t_tmp$24 = value.substring(0, 1); _tmp$25 = value.substring(1, 3); _tmp$26 = value.substring(4, 6); _tmp$27 = value.substring(7, 9); _tmp$28 = value.substring(9); sign = _tmp$24; hour$1 = _tmp$25; min$1 = _tmp$26; seconds = _tmp$27; value = _tmp$28;\n\t\t\t\t} else if ((std === 23) || (std === 27)) {\n\t\t\t\t\tif (value.length < 7) {\n\t\t\t\t\t\terr = errBad;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t_tmp$29 = value.substring(0, 1); _tmp$30 = value.substring(1, 3); _tmp$31 = value.substring(3, 5); _tmp$32 = value.substring(5, 7); _tmp$33 = value.substring(7); sign = _tmp$29; hour$1 = _tmp$30; min$1 = _tmp$31; seconds = _tmp$32; value = _tmp$33;\n\t\t\t\t} else {\n\t\t\t\t\tif (value.length < 5) {\n\t\t\t\t\t\terr = errBad;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t_tmp$34 = value.substring(0, 1); _tmp$35 = value.substring(1, 3); _tmp$36 = value.substring(3, 5); _tmp$37 = \"00\"; _tmp$38 = value.substring(5); sign = _tmp$34; hour$1 = _tmp$35; min$1 = _tmp$36; seconds = _tmp$37; value = _tmp$38;\n\t\t\t\t}\n\t\t\t\t_tmp$39 = 0; _tmp$40 = 0; _tmp$41 = 0; hr = _tmp$39; mm = _tmp$40; ss = _tmp$41;\n\t\t\t\t_tuple$17 = atoi(hour$1); hr = _tuple$17[0]; err = _tuple$17[1];\n\t\t\t\tif ($interfaceIsEqual(err, $ifaceNil)) {\n\t\t\t\t\t_tuple$18 = atoi(min$1); mm = _tuple$18[0]; err = _tuple$18[1];\n\t\t\t\t}\n\t\t\t\tif ($interfaceIsEqual(err, $ifaceNil)) {\n\t\t\t\t\t_tuple$19 = atoi(seconds); ss = _tuple$19[0]; err = _tuple$19[1];\n\t\t\t\t}\n\t\t\t\tzoneOffset = ((((hr * 60 >> 0) + mm >> 0)) * 60 >> 0) + ss >> 0;\n\t\t\t\t_ref$3 = sign.charCodeAt(0);\n\t\t\t\tif (_ref$3 === 43) {\n\t\t\t\t} else if (_ref$3 === 45) {\n\t\t\t\t\tzoneOffset = -zoneOffset;\n\t\t\t\t} else {\n\t\t\t\t\terr = errBad;\n\t\t\t\t}\n\t\t\t} else if (_ref === 21) {\n\t\t\t\tif (value.length >= 3 && value.substring(0, 3) === \"UTC\") {\n\t\t\t\t\tz = $pkg.UTC;\n\t\t\t\t\tvalue = value.substring(3);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t_tuple$20 = parseTimeZone(value); n$1 = _tuple$20[0]; ok = _tuple$20[1];\n\t\t\t\tif (!ok) {\n\t\t\t\t\terr = errBad;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t_tmp$42 = value.substring(0, n$1); _tmp$43 = value.substring(n$1); zoneName = _tmp$42; value = _tmp$43;\n\t\t\t} else if (_ref === 31) {\n\t\t\t\tndigit = 1 + ((std >> 16 >> 0)) >> 0;\n\t\t\t\tif (value.length < ndigit) {\n\t\t\t\t\terr = errBad;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t_tuple$21 = parseNanoseconds(value, ndigit); nsec = _tuple$21[0]; rangeErrString = _tuple$21[1]; err = _tuple$21[2];\n\t\t\t\tvalue = value.substring(ndigit);\n\t\t\t} else if (_ref === 32) {\n\t\t\t\tif (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti = 0;\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!(i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57)) { break; }\n\t\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t}\n\t\t\t\t_tuple$22 = parseNanoseconds(value, 1 + i >> 0); nsec = _tuple$22[0]; rangeErrString = _tuple$22[1]; err = _tuple$22[2];\n\t\t\t\tvalue = value.substring((1 + i >> 0));\n\t\t\t} }\n\t\t\tif (!(rangeErrString === \"\")) {\n\t\t\t\treturn [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, \": \" + rangeErrString + \" out of range\")];\n\t\t\t}\n\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\treturn [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, \"\")];\n\t\t\t}\n\t\t}\n\t\tif (pmSet && hour < 12) {\n\t\t\thour = hour + (12) >> 0;\n\t\t} else if (amSet && (hour === 12)) {\n\t\t\thour = 0;\n\t\t}\n\t\t/* */ if (!(z === ptrType$1.nil)) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!(z === ptrType$1.nil)) { */ case 1:\n\t\t\t_r$1 = Date(year, (month >> 0), day, hour, min, sec, nsec, z); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\treturn [_r$1, $ifaceNil];\n\t\t/* } */ case 2:\n\t\t/* */ if (!((zoneOffset === -1))) { $s = 4; continue; }\n\t\t/* */ $s = 5; continue;\n\t\t/* if (!((zoneOffset === -1))) { */ case 4:\n\t\t\t_r$2 = Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\tt = $clone(_r$2, Time);\n\t\t\tt.sec = (x = t.sec, x$1 = new $Int64(0, zoneOffset), new $Int64(x.$high - x$1.$high, x.$low - x$1.$low));\n\t\t\t_r$3 = local.lookup((x$2 = t.sec, new $Int64(x$2.$high + -15, x$2.$low + 2288912640))); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t_tuple$23 = _r$3; name = _tuple$23[0]; offset = _tuple$23[1];\n\t\t\tif ((offset === zoneOffset) && (zoneName === \"\" || name === zoneName)) {\n\t\t\t\tt.loc = local;\n\t\t\t\treturn [t, $ifaceNil];\n\t\t\t}\n\t\t\tt.loc = FixedZone(zoneName, zoneOffset);\n\t\t\treturn [t, $ifaceNil];\n\t\t/* } */ case 5:\n\t\t/* */ if (!(zoneName === \"\")) { $s = 8; continue; }\n\t\t/* */ $s = 9; continue;\n\t\t/* if (!(zoneName === \"\")) { */ case 8:\n\t\t\t_r$4 = Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\tt$1 = $clone(_r$4, Time);\n\t\t\t_r$5 = local.lookupName(zoneName, (x$3 = t$1.sec, new $Int64(x$3.$high + -15, x$3.$low + 2288912640))); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t_tuple$24 = _r$5; offset$1 = _tuple$24[0]; ok$1 = _tuple$24[2];\n\t\t\tif (ok$1) {\n\t\t\t\tt$1.sec = (x$4 = t$1.sec, x$5 = new $Int64(0, offset$1), new $Int64(x$4.$high - x$5.$high, x$4.$low - x$5.$low));\n\t\t\t\tt$1.loc = local;\n\t\t\t\treturn [t$1, $ifaceNil];\n\t\t\t}\n\t\t\tif (zoneName.length > 3 && zoneName.substring(0, 3) === \"GMT\") {\n\t\t\t\t_tuple$25 = atoi(zoneName.substring(3)); offset$1 = _tuple$25[0];\n\t\t\t\toffset$1 = offset$1 * (3600) >> 0;\n\t\t\t}\n\t\t\tt$1.loc = FixedZone(zoneName, offset$1);\n\t\t\treturn [t$1, $ifaceNil];\n\t\t/* } */ case 9:\n\t\t_r$6 = Date(year, (month >> 0), day, hour, min, sec, nsec, defaultLocation); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\treturn [_r$6, $ifaceNil];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parse }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$34 = _tmp$34; $f._tmp$35 = _tmp$35; $f._tmp$36 = _tmp$36; $f._tmp$37 = _tmp$37; $f._tmp$38 = _tmp$38; $f._tmp$39 = _tmp$39; $f._tmp$4 = _tmp$4; $f._tmp$40 = _tmp$40; $f._tmp$41 = _tmp$41; $f._tmp$42 = _tmp$42; $f._tmp$43 = _tmp$43; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$17 = _tuple$17; $f._tuple$18 = _tuple$18; $f._tuple$19 = _tuple$19; $f._tuple$2 = _tuple$2; $f._tuple$20 = _tuple$20; $f._tuple$21 = _tuple$21; $f._tuple$22 = _tuple$22; $f._tuple$23 = _tuple$23; $f._tuple$24 = _tuple$24; $f._tuple$25 = _tuple$25; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.alayout = alayout; $f.amSet = amSet; $f.avalue = avalue; $f.day = day; $f.defaultLocation = defaultLocation; $f.err = err; $f.hour = hour; $f.hour$1 = hour$1; $f.hr = hr; $f.i = i; $f.layout = layout; $f.local = local; $f.min = min; $f.min$1 = min$1; $f.mm = mm; $f.month = month; $f.n = n; $f.n$1 = n$1; $f.name = name; $f.ndigit = ndigit; $f.nsec = nsec; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.pmSet = pmSet; $f.prefix = prefix; $f.rangeErrString = rangeErrString; $f.sec = sec; $f.seconds = seconds; $f.sign = sign; $f.ss = ss; $f.std = std; $f.stdstr = stdstr; $f.suffix = suffix; $f.t = t; $f.t$1 = t$1; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.year = year; $f.z = z; $f.zoneName = zoneName; $f.zoneOffset = zoneOffset; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tparseTimeZone = function(value) {\n\t\tvar $ptr, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length, nUpper, ok, value;\n\t\tlength = 0;\n\t\tok = false;\n\t\tif (value.length < 3) {\n\t\t\t_tmp = 0; _tmp$1 = false; length = _tmp; ok = _tmp$1;\n\t\t\treturn [length, ok];\n\t\t}\n\t\tif (value.length >= 4 && (value.substring(0, 4) === \"ChST\" || value.substring(0, 4) === \"MeST\")) {\n\t\t\t_tmp$2 = 4; _tmp$3 = true; length = _tmp$2; ok = _tmp$3;\n\t\t\treturn [length, ok];\n\t\t}\n\t\tif (value.substring(0, 3) === \"GMT\") {\n\t\t\tlength = parseGMT(value);\n\t\t\t_tmp$4 = length; _tmp$5 = true; length = _tmp$4; ok = _tmp$5;\n\t\t\treturn [length, ok];\n\t\t}\n\t\tnUpper = 0;\n\t\tnUpper = 0;\n\t\twhile (true) {\n\t\t\tif (!(nUpper < 6)) { break; }\n\t\t\tif (nUpper >= value.length) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tc = value.charCodeAt(nUpper);\n\t\t\tif (c < 65 || 90 < c) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnUpper = nUpper + (1) >> 0;\n\t\t}\n\t\t_ref = nUpper;\n\t\tif (_ref === 0 || _ref === 1 || _ref === 2 || _ref === 6) {\n\t\t\t_tmp$6 = 0; _tmp$7 = false; length = _tmp$6; ok = _tmp$7;\n\t\t\treturn [length, ok];\n\t\t} else if (_ref === 5) {\n\t\t\tif (value.charCodeAt(4) === 84) {\n\t\t\t\t_tmp$8 = 5; _tmp$9 = true; length = _tmp$8; ok = _tmp$9;\n\t\t\t\treturn [length, ok];\n\t\t\t}\n\t\t} else if (_ref === 4) {\n\t\t\tif (value.charCodeAt(3) === 84) {\n\t\t\t\t_tmp$10 = 4; _tmp$11 = true; length = _tmp$10; ok = _tmp$11;\n\t\t\t\treturn [length, ok];\n\t\t\t}\n\t\t} else if (_ref === 3) {\n\t\t\t_tmp$12 = 3; _tmp$13 = true; length = _tmp$12; ok = _tmp$13;\n\t\t\treturn [length, ok];\n\t\t}\n\t\t_tmp$14 = 0; _tmp$15 = false; length = _tmp$14; ok = _tmp$15;\n\t\treturn [length, ok];\n\t};\n\tparseGMT = function(value) {\n\t\tvar $ptr, _tuple$1, err, rem, sign, value, x;\n\t\tvalue = value.substring(3);\n\t\tif (value.length === 0) {\n\t\t\treturn 3;\n\t\t}\n\t\tsign = value.charCodeAt(0);\n\t\tif (!((sign === 45)) && !((sign === 43))) {\n\t\t\treturn 3;\n\t\t}\n\t\t_tuple$1 = leadingInt(value.substring(1)); x = _tuple$1[0]; rem = _tuple$1[1]; err = _tuple$1[2];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn 3;\n\t\t}\n\t\tif (sign === 45) {\n\t\t\tx = new $Int64(-x.$high, -x.$low);\n\t\t}\n\t\tif ((x.$high === 0 && x.$low === 0) || (x.$high < -1 || (x.$high === -1 && x.$low < 4294967282)) || (0 < x.$high || (0 === x.$high && 12 < x.$low))) {\n\t\t\treturn 3;\n\t\t}\n\t\treturn (3 + value.length >> 0) - rem.length >> 0;\n\t};\n\tparseNanoseconds = function(value, nbytes) {\n\t\tvar $ptr, _tuple$1, err, i, nbytes, ns, rangeErrString, scaleDigits, value;\n\t\tns = 0;\n\t\trangeErrString = \"\";\n\t\terr = $ifaceNil;\n\t\tif (!((value.charCodeAt(0) === 46))) {\n\t\t\terr = errBad;\n\t\t\treturn [ns, rangeErrString, err];\n\t\t}\n\t\t_tuple$1 = atoi(value.substring(1, nbytes)); ns = _tuple$1[0]; err = _tuple$1[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn [ns, rangeErrString, err];\n\t\t}\n\t\tif (ns < 0 || 1000000000 <= ns) {\n\t\t\trangeErrString = \"fractional second\";\n\t\t\treturn [ns, rangeErrString, err];\n\t\t}\n\t\tscaleDigits = 10 - nbytes >> 0;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < scaleDigits)) { break; }\n\t\t\tns = ns * (10) >> 0;\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn [ns, rangeErrString, err];\n\t};\n\tleadingInt = function(s) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, c, err, i, rem, s, x, x$1, x$2, x$3;\n\t\tx = new $Int64(0, 0);\n\t\trem = \"\";\n\t\terr = $ifaceNil;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < s.length)) { break; }\n\t\t\tc = s.charCodeAt(i);\n\t\t\tif (c < 48 || c > 57) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ((x.$high > 214748364 || (x.$high === 214748364 && x.$low >= 3435973835))) {\n\t\t\t\t_tmp = new $Int64(0, 0); _tmp$1 = \"\"; _tmp$2 = errLeadingInt; x = _tmp; rem = _tmp$1; err = _tmp$2;\n\t\t\t\treturn [x, rem, err];\n\t\t\t}\n\t\t\tx = (x$1 = (x$2 = $mul64(x, new $Int64(0, 10)), x$3 = new $Int64(0, c), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), new $Int64(x$1.$high - 0, x$1.$low - 48));\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\t_tmp$3 = x; _tmp$4 = s.substring(i); _tmp$5 = $ifaceNil; x = _tmp$3; rem = _tmp$4; err = _tmp$5;\n\t\treturn [x, rem, err];\n\t};\n\tParseDuration = function(s) {\n\t\tvar $ptr, _entry, _tuple$1, _tuple$2, _tuple$3, c, c$1, err, f, g, i, n, neg, ok, orig, pl, pl$1, post, pre, s, scale, u, unit, x;\n\t\torig = s;\n\t\tf = 0;\n\t\tneg = false;\n\t\tif (!(s === \"\")) {\n\t\t\tc = s.charCodeAt(0);\n\t\t\tif ((c === 45) || (c === 43)) {\n\t\t\t\tneg = c === 45;\n\t\t\t\ts = s.substring(1);\n\t\t\t}\n\t\t}\n\t\tif (s === \"0\") {\n\t\t\treturn [new Duration(0, 0), $ifaceNil];\n\t\t}\n\t\tif (s === \"\") {\n\t\t\treturn [new Duration(0, 0), errors.New(\"time: invalid duration \" + orig)];\n\t\t}\n\t\twhile (true) {\n\t\t\tif (!(!(s === \"\"))) { break; }\n\t\t\tg = 0;\n\t\t\tx = new $Int64(0, 0);\n\t\t\terr = $ifaceNil;\n\t\t\tif (!((s.charCodeAt(0) === 46) || (48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57))) {\n\t\t\t\treturn [new Duration(0, 0), errors.New(\"time: invalid duration \" + orig)];\n\t\t\t}\n\t\t\tpl = s.length;\n\t\t\t_tuple$1 = leadingInt(s); x = _tuple$1[0]; s = _tuple$1[1]; err = _tuple$1[2];\n\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\treturn [new Duration(0, 0), errors.New(\"time: invalid duration \" + orig)];\n\t\t\t}\n\t\t\tg = $flatten64(x);\n\t\t\tpre = !((pl === s.length));\n\t\t\tpost = false;\n\t\t\tif (!(s === \"\") && (s.charCodeAt(0) === 46)) {\n\t\t\t\ts = s.substring(1);\n\t\t\t\tpl$1 = s.length;\n\t\t\t\t_tuple$2 = leadingInt(s); x = _tuple$2[0]; s = _tuple$2[1]; err = _tuple$2[2];\n\t\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\t\treturn [new Duration(0, 0), errors.New(\"time: invalid duration \" + orig)];\n\t\t\t\t}\n\t\t\t\tscale = 1;\n\t\t\t\tn = pl$1 - s.length >> 0;\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!(n > 0)) { break; }\n\t\t\t\t\tscale = scale * (10);\n\t\t\t\t\tn = n - (1) >> 0;\n\t\t\t\t}\n\t\t\t\tg = g + ($flatten64(x) / scale);\n\t\t\t\tpost = !((pl$1 === s.length));\n\t\t\t}\n\t\t\tif (!pre && !post) {\n\t\t\t\treturn [new Duration(0, 0), errors.New(\"time: invalid duration \" + orig)];\n\t\t\t}\n\t\t\ti = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(i < s.length)) { break; }\n\t\t\t\tc$1 = s.charCodeAt(i);\n\t\t\t\tif ((c$1 === 46) || (48 <= c$1 && c$1 <= 57)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t\tif (i === 0) {\n\t\t\t\treturn [new Duration(0, 0), errors.New(\"time: missing unit in duration \" + orig)];\n\t\t\t}\n\t\t\tu = s.substring(0, i);\n\t\t\ts = s.substring(i);\n\t\t\t_tuple$3 = (_entry = unitMap[u], _entry !== undefined ? [_entry.v, true] : [0, false]); unit = _tuple$3[0]; ok = _tuple$3[1];\n\t\t\tif (!ok) {\n\t\t\t\treturn [new Duration(0, 0), errors.New(\"time: unknown unit \" + u + \" in duration \" + orig)];\n\t\t\t}\n\t\t\tf = f + (g * unit);\n\t\t}\n\t\tif (neg) {\n\t\t\tf = -f;\n\t\t}\n\t\tif (f < -9.223372036854776e+18 || f > 9.223372036854776e+18) {\n\t\t\treturn [new Duration(0, 0), errors.New(\"time: overflow parsing duration\")];\n\t\t}\n\t\treturn [new Duration(0, f), $ifaceNil];\n\t};\n\t$pkg.ParseDuration = ParseDuration;\n\twhen = function(d) {\n\t\tvar $ptr, d, t, x, x$1;\n\t\tif ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {\n\t\t\treturn runtimeNano();\n\t\t}\n\t\tt = (x = runtimeNano(), x$1 = new $Int64(d.$high, d.$low), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));\n\t\tif ((t.$high < 0 || (t.$high === 0 && t.$low < 0))) {\n\t\t\tt = new $Int64(2147483647, 4294967295);\n\t\t}\n\t\treturn t;\n\t};\n\tTimer.ptr.prototype.Stop = function() {\n\t\tvar $ptr, t;\n\t\tt = this;\n\t\tif (t.r.f === $throwNilPointerError) {\n\t\t\t$panic(new $String(\"time: Stop called on uninitialized Timer\"));\n\t\t}\n\t\treturn stopTimer(t.r);\n\t};\n\tTimer.prototype.Stop = function() { return this.$val.Stop(); };\n\tNewTimer = function(d) {\n\t\tvar $ptr, c, d, t;\n\t\tc = new chanType$1(1);\n\t\tt = new Timer.ptr(c, new runtimeTimer.ptr(0, when(d), new $Int64(0, 0), sendTime, c, null, false));\n\t\tstartTimer(t.r);\n\t\treturn t;\n\t};\n\t$pkg.NewTimer = NewTimer;\n\tTimer.ptr.prototype.Reset = function(d) {\n\t\tvar $ptr, active, d, t, w;\n\t\tt = this;\n\t\tif (t.r.f === $throwNilPointerError) {\n\t\t\t$panic(new $String(\"time: Reset called on uninitialized Timer\"));\n\t\t}\n\t\tw = when(d);\n\t\tactive = stopTimer(t.r);\n\t\tt.r.when = w;\n\t\tstartTimer(t.r);\n\t\treturn active;\n\t};\n\tTimer.prototype.Reset = function(d) { return this.$val.Reset(d); };\n\tsendTime = function(c, seq) {\n\t\tvar $ptr, _selection, c, seq, $r;\n\t\t/* */ var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _selection = $f._selection; c = $f.c; seq = $f.seq; $r = $f.$r; }\n\t\t_selection = $select([[$assertType(c, chanType$1), Now()], []]);\n\t\t/* */ if ($f === undefined) { $f = { $blk: sendTime }; } $f.$ptr = $ptr; $f._selection = _selection; $f.c = c; $f.seq = seq; $f.$r = $r; return $f;\n\t};\n\tTime.ptr.prototype.After = function(u) {\n\t\tvar $ptr, t, u, x, x$1, x$2, x$3;\n\t\tt = $clone(this, Time);\n\t\tu = $clone(u, Time);\n\t\treturn (x = t.sec, x$1 = u.sec, (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low > x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec > u.nsec;\n\t};\n\tTime.prototype.After = function(u) { return this.$val.After(u); };\n\tTime.ptr.prototype.Before = function(u) {\n\t\tvar $ptr, t, u, x, x$1, x$2, x$3;\n\t\tt = $clone(this, Time);\n\t\tu = $clone(u, Time);\n\t\treturn (x = t.sec, x$1 = u.sec, (x.$high < x$1.$high || (x.$high === x$1.$high && x.$low < x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec < u.nsec;\n\t};\n\tTime.prototype.Before = function(u) { return this.$val.Before(u); };\n\tTime.ptr.prototype.Equal = function(u) {\n\t\tvar $ptr, t, u, x, x$1;\n\t\tt = $clone(this, Time);\n\t\tu = $clone(u, Time);\n\t\treturn (x = t.sec, x$1 = u.sec, (x.$high === x$1.$high && x.$low === x$1.$low)) && (t.nsec === u.nsec);\n\t};\n\tTime.prototype.Equal = function(u) { return this.$val.Equal(u); };\n\tMonth.prototype.String = function() {\n\t\tvar $ptr, m, x;\n\t\tm = this.$val;\n\t\treturn (x = m - 1 >> 0, ((x < 0 || x >= months.length) ? $throwRuntimeError(\"index out of range\") : months[x]));\n\t};\n\t$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };\n\tWeekday.prototype.String = function() {\n\t\tvar $ptr, d;\n\t\td = this.$val;\n\t\treturn ((d < 0 || d >= days.length) ? $throwRuntimeError(\"index out of range\") : days[d]);\n\t};\n\t$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };\n\tTime.ptr.prototype.IsZero = function() {\n\t\tvar $ptr, t, x;\n\t\tt = $clone(this, Time);\n\t\treturn (x = t.sec, (x.$high === 0 && x.$low === 0)) && (t.nsec === 0);\n\t};\n\tTime.prototype.IsZero = function() { return this.$val.IsZero(); };\n\tTime.ptr.prototype.abs = function() {\n\t\tvar $ptr, _r$1, _r$2, _tuple$1, l, offset, sec, t, x, x$1, x$2, x$3, x$4, x$5, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; l = $f.l; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = $clone(this, Time);\n\t\tl = t.loc;\n\t\t/* */ if (l === ptrType$1.nil || l === localLoc) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (l === ptrType$1.nil || l === localLoc) { */ case 1:\n\t\t\t_r$1 = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\tl = _r$1;\n\t\t/* } */ case 2:\n\t\tsec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));\n\t\t/* */ if (!(l === utcLoc)) { $s = 4; continue; }\n\t\t/* */ $s = 5; continue;\n\t\t/* if (!(l === utcLoc)) { */ case 4:\n\t\t\t/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 6; continue; }\n\t\t\t/* */ $s = 7; continue;\n\t\t\t/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 6:\n\t\t\t\tsec = (x$3 = new $Int64(0, l.cacheZone.offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));\n\t\t\t\t$s = 8; continue;\n\t\t\t/* } else { */ case 7:\n\t\t\t\t_r$2 = l.lookup(sec); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$1 = _r$2; offset = _tuple$1[1];\n\t\t\t\tsec = (x$4 = new $Int64(0, offset), new $Int64(sec.$high + x$4.$high, sec.$low + x$4.$low));\n\t\t\t/* } */ case 8:\n\t\t/* } */ case 5:\n\t\treturn (x$5 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$5.$high, x$5.$low));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.abs }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.l = l; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.abs = function() { return this.$val.abs(); };\n\tTime.ptr.prototype.locabs = function() {\n\t\tvar $ptr, _r$1, _r$2, _tuple$1, abs, l, name, offset, sec, t, x, x$1, x$2, x$3, x$4, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; abs = $f.abs; l = $f.l; name = $f.name; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tname = \"\";\n\t\toffset = 0;\n\t\tabs = new $Uint64(0, 0);\n\t\tt = $clone(this, Time);\n\t\tl = t.loc;\n\t\t/* */ if (l === ptrType$1.nil || l === localLoc) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (l === ptrType$1.nil || l === localLoc) { */ case 1:\n\t\t\t_r$1 = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\tl = _r$1;\n\t\t/* } */ case 2:\n\t\tsec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));\n\t\t/* */ if (!(l === utcLoc)) { $s = 4; continue; }\n\t\t/* */ $s = 5; continue;\n\t\t/* if (!(l === utcLoc)) { */ case 4:\n\t\t\t/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 7; continue; }\n\t\t\t/* */ $s = 8; continue;\n\t\t\t/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 7:\n\t\t\t\tname = l.cacheZone.name;\n\t\t\t\toffset = l.cacheZone.offset;\n\t\t\t\t$s = 9; continue;\n\t\t\t/* } else { */ case 8:\n\t\t\t\t_r$2 = l.lookup(sec); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$1 = _r$2; name = _tuple$1[0]; offset = _tuple$1[1];\n\t\t\t/* } */ case 9:\n\t\t\tsec = (x$3 = new $Int64(0, offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));\n\t\t\t$s = 6; continue;\n\t\t/* } else { */ case 5:\n\t\t\tname = \"UTC\";\n\t\t/* } */ case 6:\n\t\tabs = (x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low));\n\t\treturn [name, offset, abs];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.locabs }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.abs = abs; $f.l = l; $f.name = name; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.locabs = function() { return this.$val.locabs(); };\n\tTime.ptr.prototype.Date = function() {\n\t\tvar $ptr, _r$1, _tuple$1, day, month, t, year, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; day = $f.day; month = $f.month; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tyear = 0;\n\t\tmonth = 0;\n\t\tday = 0;\n\t\tt = $clone(this, Time);\n\t\t_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r$1; year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2];\n\t\treturn [year, month, day];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.day = day; $f.month = month; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.Date = function() { return this.$val.Date(); };\n\tTime.ptr.prototype.Year = function() {\n\t\tvar $ptr, _r$1, _tuple$1, t, year, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = $clone(this, Time);\n\t\t_r$1 = t.date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r$1; year = _tuple$1[0];\n\t\treturn year;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Year }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.Year = function() { return this.$val.Year(); };\n\tTime.ptr.prototype.Month = function() {\n\t\tvar $ptr, _r$1, _tuple$1, month, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; month = $f.month; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = $clone(this, Time);\n\t\t_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r$1; month = _tuple$1[1];\n\t\treturn month;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Month }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.month = month; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.Month = function() { return this.$val.Month(); };\n\tTime.ptr.prototype.Day = function() {\n\t\tvar $ptr, _r$1, _tuple$1, day, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; day = $f.day; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = $clone(this, Time);\n\t\t_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r$1; day = _tuple$1[2];\n\t\treturn day;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Day }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.day = day; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.Day = function() { return this.$val.Day(); };\n\tTime.ptr.prototype.Weekday = function() {\n\t\tvar $ptr, _r$1, _r$2, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = $clone(this, Time);\n\t\t_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_r$2 = absWeekday(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\treturn _r$2;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Weekday }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.Weekday = function() { return this.$val.Weekday(); };\n\tabsWeekday = function(abs) {\n\t\tvar $ptr, _q, abs, sec;\n\t\tsec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);\n\t\treturn ((_q = (sec.$low >> 0) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\")) >> 0);\n\t};\n\tTime.ptr.prototype.ISOWeek = function() {\n\t\tvar $ptr, _q, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple$1, day, dec31wday, jan1wday, month, t, wday, week, yday, year, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple$1 = $f._tuple$1; day = $f.day; dec31wday = $f.dec31wday; jan1wday = $f.jan1wday; month = $f.month; t = $f.t; wday = $f.wday; week = $f.week; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tyear = 0;\n\t\tweek = 0;\n\t\tt = $clone(this, Time);\n\t\t_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r$1; year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2]; yday = _tuple$1[3];\n\t\t_r$3 = t.Weekday(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\twday = (_r$2 = ((_r$3 + 6 >> 0) >> 0) % 7, _r$2 === _r$2 ? _r$2 : $throwRuntimeError(\"integer divide by zero\"));\n\t\tweek = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\tjan1wday = (_r$4 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$4 === _r$4 ? _r$4 : $throwRuntimeError(\"integer divide by zero\"));\n\t\tif (1 <= jan1wday && jan1wday <= 3) {\n\t\t\tweek = week + (1) >> 0;\n\t\t}\n\t\tif (week === 0) {\n\t\t\tyear = year - (1) >> 0;\n\t\t\tweek = 52;\n\t\t\tif ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {\n\t\t\t\tweek = week + (1) >> 0;\n\t\t\t}\n\t\t}\n\t\tif ((month === 12) && day >= 29 && wday < 3) {\n\t\t\tdec31wday = (_r$5 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$5 === _r$5 ? _r$5 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t\tif (0 <= dec31wday && dec31wday <= 2) {\n\t\t\t\tyear = year + (1) >> 0;\n\t\t\t\tweek = 1;\n\t\t\t}\n\t\t}\n\t\treturn [year, week];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.ISOWeek }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple$1 = _tuple$1; $f.day = day; $f.dec31wday = dec31wday; $f.jan1wday = jan1wday; $f.month = month; $f.t = t; $f.wday = wday; $f.week = week; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };\n\tTime.ptr.prototype.Clock = function() {\n\t\tvar $ptr, _r$1, _r$2, _tuple$1, hour, min, sec, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; hour = $f.hour; min = $f.min; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\thour = 0;\n\t\tmin = 0;\n\t\tsec = 0;\n\t\tt = $clone(this, Time);\n\t\t_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_r$2 = absClock(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r$2; hour = _tuple$1[0]; min = _tuple$1[1]; sec = _tuple$1[2];\n\t\treturn [hour, min, sec];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Clock }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.hour = hour; $f.min = min; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.Clock = function() { return this.$val.Clock(); };\n\tabsClock = function(abs) {\n\t\tvar $ptr, _q, _q$1, abs, hour, min, sec;\n\t\thour = 0;\n\t\tmin = 0;\n\t\tsec = 0;\n\t\tsec = ($div64(abs, new $Uint64(0, 86400), true).$low >> 0);\n\t\thour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\tsec = sec - ((hour * 3600 >> 0)) >> 0;\n\t\tmin = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\tsec = sec - ((min * 60 >> 0)) >> 0;\n\t\treturn [hour, min, sec];\n\t};\n\tTime.ptr.prototype.Hour = function() {\n\t\tvar $ptr, _q, _r$1, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = $clone(this, Time);\n\t\t_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn (_q = ($div64(_r$1, new $Uint64(0, 86400), true).$low >> 0) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Hour }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.Hour = function() { return this.$val.Hour(); };\n\tTime.ptr.prototype.Minute = function() {\n\t\tvar $ptr, _q, _r$1, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = $clone(this, Time);\n\t\t_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn (_q = ($div64(_r$1, new $Uint64(0, 3600), true).$low >> 0) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Minute }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.Minute = function() { return this.$val.Minute(); };\n\tTime.ptr.prototype.Second = function() {\n\t\tvar $ptr, _r$1, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = $clone(this, Time);\n\t\t_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn ($div64(_r$1, new $Uint64(0, 60), true).$low >> 0);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Second }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.Second = function() { return this.$val.Second(); };\n\tTime.ptr.prototype.Nanosecond = function() {\n\t\tvar $ptr, t;\n\t\tt = $clone(this, Time);\n\t\treturn (t.nsec >> 0);\n\t};\n\tTime.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };\n\tTime.ptr.prototype.YearDay = function() {\n\t\tvar $ptr, _r$1, _tuple$1, t, yday, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; t = $f.t; yday = $f.yday; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = $clone(this, Time);\n\t\t_r$1 = t.date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r$1; yday = _tuple$1[3];\n\t\treturn yday + 1 >> 0;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.YearDay }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.t = t; $f.yday = yday; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.YearDay = function() { return this.$val.YearDay(); };\n\tDuration.prototype.String = function() {\n\t\tvar $ptr, _tuple$1, _tuple$2, buf, d, neg, prec, u, w;\n\t\td = this;\n\t\tbuf = $clone(arrayType.zero(), arrayType);\n\t\tw = 32;\n\t\tu = new $Uint64(d.$high, d.$low);\n\t\tneg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));\n\t\tif (neg) {\n\t\t\tu = new $Uint64(-u.$high, -u.$low);\n\t\t}\n\t\tif ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {\n\t\t\tprec = 0;\n\t\t\tw = w - (1) >> 0;\n\t\t\t((w < 0 || w >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[w] = 115);\n\t\t\tw = w - (1) >> 0;\n\t\t\tif ((u.$high === 0 && u.$low === 0)) {\n\t\t\t\treturn \"0\";\n\t\t\t} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {\n\t\t\t\tprec = 0;\n\t\t\t\t((w < 0 || w >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[w] = 110);\n\t\t\t} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {\n\t\t\t\tprec = 3;\n\t\t\t\tw = w - (1) >> 0;\n\t\t\t\t$copyString($subslice(new sliceType$3(buf), w), \"\\xC2\\xB5\");\n\t\t\t} else {\n\t\t\t\tprec = 6;\n\t\t\t\t((w < 0 || w >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[w] = 109);\n\t\t\t}\n\t\t\t_tuple$1 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, prec); w = _tuple$1[0]; u = _tuple$1[1];\n\t\t\tw = fmtInt($subslice(new sliceType$3(buf), 0, w), u);\n\t\t} else {\n\t\t\tw = w - (1) >> 0;\n\t\t\t((w < 0 || w >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[w] = 115);\n\t\t\t_tuple$2 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, 9); w = _tuple$2[0]; u = _tuple$2[1];\n\t\t\tw = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));\n\t\t\tu = $div64(u, (new $Uint64(0, 60)), false);\n\t\t\tif ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {\n\t\t\t\tw = w - (1) >> 0;\n\t\t\t\t((w < 0 || w >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[w] = 109);\n\t\t\t\tw = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));\n\t\t\t\tu = $div64(u, (new $Uint64(0, 60)), false);\n\t\t\t\tif ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {\n\t\t\t\t\tw = w - (1) >> 0;\n\t\t\t\t\t((w < 0 || w >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[w] = 104);\n\t\t\t\t\tw = fmtInt($subslice(new sliceType$3(buf), 0, w), u);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (neg) {\n\t\t\tw = w - (1) >> 0;\n\t\t\t((w < 0 || w >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[w] = 45);\n\t\t}\n\t\treturn $bytesToString($subslice(new sliceType$3(buf), w));\n\t};\n\t$ptrType(Duration).prototype.String = function() { return this.$get().String(); };\n\tfmtFrac = function(buf, v, prec) {\n\t\tvar $ptr, _tmp, _tmp$1, buf, digit, i, nv, nw, prec, print, v, w;\n\t\tnw = 0;\n\t\tnv = new $Uint64(0, 0);\n\t\tw = buf.$length;\n\t\tprint = false;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < prec)) { break; }\n\t\t\tdigit = $div64(v, new $Uint64(0, 10), true);\n\t\t\tprint = print || !((digit.$high === 0 && digit.$low === 0));\n\t\t\tif (print) {\n\t\t\t\tw = w - (1) >> 0;\n\t\t\t\t((w < 0 || w >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + w] = (digit.$low << 24 >>> 24) + 48 << 24 >>> 24);\n\t\t\t}\n\t\t\tv = $div64(v, (new $Uint64(0, 10)), false);\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\tif (print) {\n\t\t\tw = w - (1) >> 0;\n\t\t\t((w < 0 || w >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + w] = 46);\n\t\t}\n\t\t_tmp = w; _tmp$1 = v; nw = _tmp; nv = _tmp$1;\n\t\treturn [nw, nv];\n\t};\n\tfmtInt = function(buf, v) {\n\t\tvar $ptr, buf, v, w;\n\t\tw = buf.$length;\n\t\tif ((v.$high === 0 && v.$low === 0)) {\n\t\t\tw = w - (1) >> 0;\n\t\t\t((w < 0 || w >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + w] = 48);\n\t\t} else {\n\t\t\twhile (true) {\n\t\t\t\tif (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }\n\t\t\t\tw = w - (1) >> 0;\n\t\t\t\t((w < 0 || w >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + w] = ($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24) + 48 << 24 >>> 24);\n\t\t\t\tv = $div64(v, (new $Uint64(0, 10)), false);\n\t\t\t}\n\t\t}\n\t\treturn w;\n\t};\n\tDuration.prototype.Nanoseconds = function() {\n\t\tvar $ptr, d;\n\t\td = this;\n\t\treturn new $Int64(d.$high, d.$low);\n\t};\n\t$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };\n\tDuration.prototype.Seconds = function() {\n\t\tvar $ptr, d, nsec, sec;\n\t\td = this;\n\t\tsec = $div64(d, new Duration(0, 1000000000), false);\n\t\tnsec = $div64(d, new Duration(0, 1000000000), true);\n\t\treturn $flatten64(sec) + $flatten64(nsec) * 1e-09;\n\t};\n\t$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };\n\tDuration.prototype.Minutes = function() {\n\t\tvar $ptr, d, min, nsec;\n\t\td = this;\n\t\tmin = $div64(d, new Duration(13, 4165425152), false);\n\t\tnsec = $div64(d, new Duration(13, 4165425152), true);\n\t\treturn $flatten64(min) + $flatten64(nsec) * 1.6666666666666667e-11;\n\t};\n\t$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };\n\tDuration.prototype.Hours = function() {\n\t\tvar $ptr, d, hour, nsec;\n\t\td = this;\n\t\thour = $div64(d, new Duration(838, 817405952), false);\n\t\tnsec = $div64(d, new Duration(838, 817405952), true);\n\t\treturn $flatten64(hour) + $flatten64(nsec) * 2.777777777777778e-13;\n\t};\n\t$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };\n\tTime.ptr.prototype.Add = function(d) {\n\t\tvar $ptr, d, nsec, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;\n\t\tt = $clone(this, Time);\n\t\tt.sec = (x = t.sec, x$1 = (x$2 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$2.$high, x$2.$low)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));\n\t\tnsec = t.nsec + ((x$3 = $div64(d, new Duration(0, 1000000000), true), x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0) >> 0;\n\t\tif (nsec >= 1000000000) {\n\t\t\tt.sec = (x$4 = t.sec, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));\n\t\t\tnsec = nsec - (1000000000) >> 0;\n\t\t} else if (nsec < 0) {\n\t\t\tt.sec = (x$6 = t.sec, x$7 = new $Int64(0, 1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low));\n\t\t\tnsec = nsec + (1000000000) >> 0;\n\t\t}\n\t\tt.nsec = nsec;\n\t\treturn t;\n\t};\n\tTime.prototype.Add = function(d) { return this.$val.Add(d); };\n\tTime.ptr.prototype.Sub = function(u) {\n\t\tvar $ptr, d, t, u, x, x$1, x$2, x$3, x$4;\n\t\tt = $clone(this, Time);\n\t\tu = $clone(u, Time);\n\t\td = (x = $mul64((x$1 = (x$2 = t.sec, x$3 = u.sec, new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low)), new Duration(x$1.$high, x$1.$low)), new Duration(0, 1000000000)), x$4 = new Duration(0, (t.nsec - u.nsec >> 0)), new Duration(x.$high + x$4.$high, x.$low + x$4.$low));\n\t\tif (u.Add(d).Equal(t)) {\n\t\t\treturn d;\n\t\t} else if (t.Before(u)) {\n\t\t\treturn new Duration(-2147483648, 0);\n\t\t} else {\n\t\t\treturn new Duration(2147483647, 4294967295);\n\t\t}\n\t};\n\tTime.prototype.Sub = function(u) { return this.$val.Sub(u); };\n\tTime.ptr.prototype.AddDate = function(years, months$1, days$1) {\n\t\tvar $ptr, _r$1, _r$2, _r$3, _tuple$1, _tuple$2, day, days$1, hour, min, month, months$1, sec, t, year, years, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; day = $f.day; days$1 = $f.days$1; hour = $f.hour; min = $f.min; month = $f.month; months$1 = $f.months$1; sec = $f.sec; t = $f.t; year = $f.year; years = $f.years; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = $clone(this, Time);\n\t\t_r$1 = t.Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r$1; year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2];\n\t\t_r$2 = t.Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_tuple$2 = _r$2; hour = _tuple$2[0]; min = _tuple$2[1]; sec = _tuple$2[2];\n\t\t_r$3 = Date(year + years >> 0, month + (months$1 >> 0) >> 0, day + days$1 >> 0, hour, min, sec, (t.nsec >> 0), t.loc); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\treturn _r$3;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AddDate }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.day = day; $f.days$1 = days$1; $f.hour = hour; $f.min = min; $f.month = month; $f.months$1 = months$1; $f.sec = sec; $f.t = t; $f.year = year; $f.years = years; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.AddDate = function(years, months$1, days$1) { return this.$val.AddDate(years, months$1, days$1); };\n\tTime.ptr.prototype.date = function(full) {\n\t\tvar $ptr, _r$1, _r$2, _tuple$1, day, full, month, t, yday, year, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; day = $f.day; full = $f.full; month = $f.month; t = $f.t; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tyear = 0;\n\t\tmonth = 0;\n\t\tday = 0;\n\t\tyday = 0;\n\t\tt = $clone(this, Time);\n\t\t_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_r$2 = absDate(_r$1, full); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r$2; year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2]; yday = _tuple$1[3];\n\t\treturn [year, month, day, yday];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.day = day; $f.full = full; $f.month = month; $f.t = t; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.date = function(full) { return this.$val.date(full); };\n\tabsDate = function(abs, full) {\n\t\tvar $ptr, _q, abs, begin, d, day, end, full, month, n, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday, year;\n\t\tyear = 0;\n\t\tmonth = 0;\n\t\tday = 0;\n\t\tyday = 0;\n\t\td = $div64(abs, new $Uint64(0, 86400), false);\n\t\tn = $div64(d, new $Uint64(0, 146097), false);\n\t\ty = $mul64(new $Uint64(0, 400), n);\n\t\td = (x = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x.$high, d.$low - x.$low));\n\t\tn = $div64(d, new $Uint64(0, 36524), false);\n\t\tn = (x$1 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$1.$high, n.$low - x$1.$low));\n\t\ty = (x$2 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$2.$high, y.$low + x$2.$low));\n\t\td = (x$3 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$3.$high, d.$low - x$3.$low));\n\t\tn = $div64(d, new $Uint64(0, 1461), false);\n\t\ty = (x$4 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$4.$high, y.$low + x$4.$low));\n\t\td = (x$5 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$5.$high, d.$low - x$5.$low));\n\t\tn = $div64(d, new $Uint64(0, 365), false);\n\t\tn = (x$6 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$6.$high, n.$low - x$6.$low));\n\t\ty = (x$7 = n, new $Uint64(y.$high + x$7.$high, y.$low + x$7.$low));\n\t\td = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$8.$high, d.$low - x$8.$low));\n\t\tyear = ((x$9 = (x$10 = new $Int64(y.$high, y.$low), new $Int64(x$10.$high + -69, x$10.$low + 4075721025)), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0);\n\t\tyday = (d.$low >> 0);\n\t\tif (!full) {\n\t\t\treturn [year, month, day, yday];\n\t\t}\n\t\tday = yday;\n\t\tif (isLeap(year)) {\n\t\t\tif (day > 59) {\n\t\t\t\tday = day - (1) >> 0;\n\t\t\t} else if (day === 59) {\n\t\t\t\tmonth = 2;\n\t\t\t\tday = 29;\n\t\t\t\treturn [year, month, day, yday];\n\t\t\t}\n\t\t}\n\t\tmonth = ((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\")) >> 0);\n\t\tend = ((x$11 = month + 1 >> 0, ((x$11 < 0 || x$11 >= daysBefore.length) ? $throwRuntimeError(\"index out of range\") : daysBefore[x$11])) >> 0);\n\t\tbegin = 0;\n\t\tif (day >= end) {\n\t\t\tmonth = month + (1) >> 0;\n\t\t\tbegin = end;\n\t\t} else {\n\t\t\tbegin = (((month < 0 || month >= daysBefore.length) ? $throwRuntimeError(\"index out of range\") : daysBefore[month]) >> 0);\n\t\t}\n\t\tmonth = month + (1) >> 0;\n\t\tday = (day - begin >> 0) + 1 >> 0;\n\t\treturn [year, month, day, yday];\n\t};\n\tNow = function() {\n\t\tvar $ptr, _tuple$1, nsec, sec;\n\t\t_tuple$1 = now(); sec = _tuple$1[0]; nsec = _tuple$1[1];\n\t\treturn new Time.ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), nsec, $pkg.Local);\n\t};\n\t$pkg.Now = Now;\n\tTime.ptr.prototype.UTC = function() {\n\t\tvar $ptr, t;\n\t\tt = $clone(this, Time);\n\t\tt.loc = $pkg.UTC;\n\t\treturn t;\n\t};\n\tTime.prototype.UTC = function() { return this.$val.UTC(); };\n\tTime.ptr.prototype.Local = function() {\n\t\tvar $ptr, t;\n\t\tt = $clone(this, Time);\n\t\tt.loc = $pkg.Local;\n\t\treturn t;\n\t};\n\tTime.prototype.Local = function() { return this.$val.Local(); };\n\tTime.ptr.prototype.In = function(loc) {\n\t\tvar $ptr, loc, t;\n\t\tt = $clone(this, Time);\n\t\tif (loc === ptrType$1.nil) {\n\t\t\t$panic(new $String(\"time: missing Location in call to Time.In\"));\n\t\t}\n\t\tt.loc = loc;\n\t\treturn t;\n\t};\n\tTime.prototype.In = function(loc) { return this.$val.In(loc); };\n\tTime.ptr.prototype.Location = function() {\n\t\tvar $ptr, l, t;\n\t\tt = $clone(this, Time);\n\t\tl = t.loc;\n\t\tif (l === ptrType$1.nil) {\n\t\t\tl = $pkg.UTC;\n\t\t}\n\t\treturn l;\n\t};\n\tTime.prototype.Location = function() { return this.$val.Location(); };\n\tTime.ptr.prototype.Zone = function() {\n\t\tvar $ptr, _r$1, _tuple$1, name, offset, t, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; name = $f.name; offset = $f.offset; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tname = \"\";\n\t\toffset = 0;\n\t\tt = $clone(this, Time);\n\t\t_r$1 = t.loc.lookup((x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640))); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r$1; name = _tuple$1[0]; offset = _tuple$1[1];\n\t\treturn [name, offset];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Zone }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.name = name; $f.offset = offset; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.Zone = function() { return this.$val.Zone(); };\n\tTime.ptr.prototype.Unix = function() {\n\t\tvar $ptr, t, x;\n\t\tt = $clone(this, Time);\n\t\treturn (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));\n\t};\n\tTime.prototype.Unix = function() { return this.$val.Unix(); };\n\tTime.ptr.prototype.UnixNano = function() {\n\t\tvar $ptr, t, x, x$1, x$2;\n\t\tt = $clone(this, Time);\n\t\treturn (x = $mul64(((x$1 = t.sec, new $Int64(x$1.$high + -15, x$1.$low + 2288912640))), new $Int64(0, 1000000000)), x$2 = new $Int64(0, t.nsec), new $Int64(x.$high + x$2.$high, x.$low + x$2.$low));\n\t};\n\tTime.prototype.UnixNano = function() { return this.$val.UnixNano(); };\n\tTime.ptr.prototype.MarshalBinary = function() {\n\t\tvar $ptr, _q, _r$1, _r$2, _tuple$1, enc, offset, offsetMin, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; enc = $f.enc; offset = $f.offset; offsetMin = $f.offsetMin; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = $clone(this, Time);\n\t\toffsetMin = 0;\n\t\t/* */ if (t.Location() === utcLoc) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (t.Location() === utcLoc) { */ case 1:\n\t\t\toffsetMin = -1;\n\t\t\t$s = 3; continue;\n\t\t/* } else { */ case 2:\n\t\t\t_r$1 = t.Zone(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t_tuple$1 = _r$1; offset = _tuple$1[1];\n\t\t\tif (!(((_r$2 = offset % 60, _r$2 === _r$2 ? _r$2 : $throwRuntimeError(\"integer divide by zero\")) === 0))) {\n\t\t\t\treturn [sliceType$3.nil, errors.New(\"Time.MarshalBinary: zone offset has fractional minute\")];\n\t\t\t}\n\t\t\toffset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t\tif (offset < -32768 || (offset === -1) || offset > 32767) {\n\t\t\t\treturn [sliceType$3.nil, errors.New(\"Time.MarshalBinary: unexpected zone offset\")];\n\t\t\t}\n\t\t\toffsetMin = (offset << 16 >> 16);\n\t\t/* } */ case 3:\n\t\tenc = new sliceType$3([1, ($shiftRightInt64(t.sec, 56).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 48).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 40).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 32).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 24).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 16).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 8).$low << 24 >>> 24), (t.sec.$low << 24 >>> 24), ((t.nsec >> 24 >> 0) << 24 >>> 24), ((t.nsec >> 16 >> 0) << 24 >>> 24), ((t.nsec >> 8 >> 0) << 24 >>> 24), (t.nsec << 24 >>> 24), ((offsetMin >> 8 << 16 >> 16) << 24 >>> 24), (offsetMin << 24 >>> 24)]);\n\t\treturn [enc, $ifaceNil];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalBinary }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.enc = enc; $f.offset = offset; $f.offsetMin = offsetMin; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };\n\tTime.ptr.prototype.UnmarshalBinary = function(data$1) {\n\t\tvar $ptr, _r$1, _tuple$1, buf, data$1, localoff, offset, t, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; buf = $f.buf; data$1 = $f.data$1; localoff = $f.localoff; offset = $f.offset; t = $f.t; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = this;\n\t\tbuf = data$1;\n\t\tif (buf.$length === 0) {\n\t\t\treturn errors.New(\"Time.UnmarshalBinary: no data\");\n\t\t}\n\t\tif (!(((0 >= buf.$length ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + 0]) === 1))) {\n\t\t\treturn errors.New(\"Time.UnmarshalBinary: unsupported version\");\n\t\t}\n\t\tif (!((buf.$length === 15))) {\n\t\t\treturn errors.New(\"Time.UnmarshalBinary: invalid length\");\n\t\t}\n\t\tbuf = $subslice(buf, 1);\n\t\tt.sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new $Int64(0, (7 >= buf.$length ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + 7])), x$7 = $shiftLeft64(new $Int64(0, (6 >= buf.$length ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + 6])), 8), new $Int64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64(new $Int64(0, (5 >= buf.$length ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + 5])), 16), new $Int64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64(new $Int64(0, (4 >= buf.$length ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + 4])), 24), new $Int64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64(new $Int64(0, (3 >= buf.$length ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + 3])), 32), new $Int64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64(new $Int64(0, (2 >= buf.$length ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + 2])), 40), new $Int64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64(new $Int64(0, (1 >= buf.$length ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + 1])), 48), new $Int64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64(new $Int64(0, (0 >= buf.$length ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + 0])), 56), new $Int64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));\n\t\tbuf = $subslice(buf, 8);\n\t\tt.nsec = ((((3 >= buf.$length ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + 3]) >> 0) | (((2 >= buf.$length ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + 2]) >> 0) << 8 >> 0)) | (((1 >= buf.$length ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + 1]) >> 0) << 16 >> 0)) | (((0 >= buf.$length ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + 0]) >> 0) << 24 >> 0);\n\t\tbuf = $subslice(buf, 4);\n\t\toffset = ((((1 >= buf.$length ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + 1]) << 16 >> 16) | (((0 >= buf.$length ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + 0]) << 16 >> 16) << 8 << 16 >> 16)) >> 0) * 60 >> 0;\n\t\t/* */ if (offset === -60) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (offset === -60) { */ case 1:\n\t\t\tt.loc = utcLoc;\n\t\t\t$s = 3; continue;\n\t\t/* } else { */ case 2:\n\t\t\t_r$1 = $pkg.Local.lookup((x$14 = t.sec, new $Int64(x$14.$high + -15, x$14.$low + 2288912640))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t_tuple$1 = _r$1; localoff = _tuple$1[1];\n\t\t\t/* */ if (offset === localoff) { $s = 5; continue; }\n\t\t\t/* */ $s = 6; continue;\n\t\t\t/* if (offset === localoff) { */ case 5:\n\t\t\t\tt.loc = $pkg.Local;\n\t\t\t\t$s = 7; continue;\n\t\t\t/* } else { */ case 6:\n\t\t\t\tt.loc = FixedZone(\"\", offset);\n\t\t\t/* } */ case 7:\n\t\t/* } */ case 3:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalBinary }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.data$1 = data$1; $f.localoff = localoff; $f.offset = offset; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.UnmarshalBinary = function(data$1) { return this.$val.UnmarshalBinary(data$1); };\n\tTime.ptr.prototype.GobEncode = function() {\n\t\tvar $ptr, _r$1, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = $clone(this, Time);\n\t\t_r$1 = t.MarshalBinary(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn _r$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobEncode }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.GobEncode = function() { return this.$val.GobEncode(); };\n\tTime.ptr.prototype.GobDecode = function(data$1) {\n\t\tvar $ptr, _r$1, data$1, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; data$1 = $f.data$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = this;\n\t\t_r$1 = t.UnmarshalBinary(data$1); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn _r$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobDecode }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.data$1 = data$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.GobDecode = function(data$1) { return this.$val.GobDecode(data$1); };\n\tTime.ptr.prototype.MarshalJSON = function() {\n\t\tvar $ptr, _r$1, _r$2, t, y, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = $clone(this, Time);\n\t\t_r$1 = t.Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\ty = _r$1;\n\t\t/* */ if (y < 0 || y >= 10000) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (y < 0 || y >= 10000) { */ case 2:\n\t\t\treturn [sliceType$3.nil, errors.New(\"Time.MarshalJSON: year outside of range [0,9999]\")];\n\t\t/* } */ case 3:\n\t\t_r$2 = t.Format(\"\\\"2006-01-02T15:04:05.999999999Z07:00\\\"\"); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\treturn [new sliceType$3($stringToBytes(_r$2)), $ifaceNil];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalJSON }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };\n\tTime.ptr.prototype.UnmarshalJSON = function(data$1) {\n\t\tvar $ptr, _r$1, _tuple$1, data$1, err, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\terr = $ifaceNil;\n\t\tt = this;\n\t\t_r$1 = Parse(\"\\\"2006-01-02T15:04:05Z07:00\\\"\", $bytesToString(data$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r$1; $copy(t, _tuple$1[0], Time); err = _tuple$1[1];\n\t\treturn err;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalJSON }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.UnmarshalJSON = function(data$1) { return this.$val.UnmarshalJSON(data$1); };\n\tTime.ptr.prototype.MarshalText = function() {\n\t\tvar $ptr, _r$1, _r$2, t, y, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = $clone(this, Time);\n\t\t_r$1 = t.Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\ty = _r$1;\n\t\t/* */ if (y < 0 || y >= 10000) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (y < 0 || y >= 10000) { */ case 2:\n\t\t\treturn [sliceType$3.nil, errors.New(\"Time.MarshalText: year outside of range [0,9999]\")];\n\t\t/* } */ case 3:\n\t\t_r$2 = t.Format(\"2006-01-02T15:04:05.999999999Z07:00\"); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\treturn [new sliceType$3($stringToBytes(_r$2)), $ifaceNil];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalText }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.MarshalText = function() { return this.$val.MarshalText(); };\n\tTime.ptr.prototype.UnmarshalText = function(data$1) {\n\t\tvar $ptr, _r$1, _tuple$1, data$1, err, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\terr = $ifaceNil;\n\t\tt = this;\n\t\t_r$1 = Parse(\"2006-01-02T15:04:05Z07:00\", $bytesToString(data$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r$1; $copy(t, _tuple$1[0], Time); err = _tuple$1[1];\n\t\treturn err;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalText }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTime.prototype.UnmarshalText = function(data$1) { return this.$val.UnmarshalText(data$1); };\n\tUnix = function(sec, nsec) {\n\t\tvar $ptr, n, nsec, sec, x, x$1, x$2, x$3;\n\t\tif ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {\n\t\t\tn = $div64(nsec, new $Int64(0, 1000000000), false);\n\t\t\tsec = (x = n, new $Int64(sec.$high + x.$high, sec.$low + x.$low));\n\t\t\tnsec = (x$1 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$1.$high, nsec.$low - x$1.$low));\n\t\t\tif ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {\n\t\t\t\tnsec = (x$2 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$2.$high, nsec.$low + x$2.$low));\n\t\t\t\tsec = (x$3 = new $Int64(0, 1), new $Int64(sec.$high - x$3.$high, sec.$low - x$3.$low));\n\t\t\t}\n\t\t}\n\t\treturn new Time.ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), ((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0), $pkg.Local);\n\t};\n\t$pkg.Unix = Unix;\n\tisLeap = function(year) {\n\t\tvar $ptr, _r$1, _r$2, _r$3, year;\n\t\treturn ((_r$1 = year % 4, _r$1 === _r$1 ? _r$1 : $throwRuntimeError(\"integer divide by zero\")) === 0) && (!(((_r$2 = year % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError(\"integer divide by zero\")) === 0)) || ((_r$3 = year % 400, _r$3 === _r$3 ? _r$3 : $throwRuntimeError(\"integer divide by zero\")) === 0));\n\t};\n\tnorm = function(hi, lo, base) {\n\t\tvar $ptr, _q, _q$1, _tmp, _tmp$1, base, hi, lo, n, n$1, nhi, nlo;\n\t\tnhi = 0;\n\t\tnlo = 0;\n\t\tif (lo < 0) {\n\t\t\tn = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\")) + 1 >> 0;\n\t\t\thi = hi - (n) >> 0;\n\t\t\tlo = lo + ((n * base >> 0)) >> 0;\n\t\t}\n\t\tif (lo >= base) {\n\t\t\tn$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t\thi = hi + (n$1) >> 0;\n\t\t\tlo = lo - ((n$1 * base >> 0)) >> 0;\n\t\t}\n\t\t_tmp = hi; _tmp$1 = lo; nhi = _tmp; nlo = _tmp$1;\n\t\treturn [nhi, nlo];\n\t};\n\tDate = function(year, month, day, hour, min, sec, nsec, loc) {\n\t\tvar $ptr, _r$1, _r$2, _r$3, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, abs, d, day, end, hour, loc, m, min, month, n, nsec, offset, sec, start, unix, utc, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, year, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; abs = $f.abs; d = $f.d; day = $f.day; end = $f.end; hour = $f.hour; loc = $f.loc; m = $f.m; min = $f.min; month = $f.month; n = $f.n; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; start = $f.start; unix = $f.unix; utc = $f.utc; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tif (loc === ptrType$1.nil) {\n\t\t\t$panic(new $String(\"time: missing Location in call to Date\"));\n\t\t}\n\t\tm = (month >> 0) - 1 >> 0;\n\t\t_tuple$1 = norm(year, m, 12); year = _tuple$1[0]; m = _tuple$1[1];\n\t\tmonth = (m >> 0) + 1 >> 0;\n\t\t_tuple$2 = norm(sec, nsec, 1000000000); sec = _tuple$2[0]; nsec = _tuple$2[1];\n\t\t_tuple$3 = norm(min, sec, 60); min = _tuple$3[0]; sec = _tuple$3[1];\n\t\t_tuple$4 = norm(hour, min, 60); hour = _tuple$4[0]; min = _tuple$4[1];\n\t\t_tuple$5 = norm(day, hour, 24); day = _tuple$5[0]; hour = _tuple$5[1];\n\t\ty = (x = (x$1 = new $Int64(0, year), new $Int64(x$1.$high - -69, x$1.$low - 4075721025)), new $Uint64(x.$high, x.$low));\n\t\tn = $div64(y, new $Uint64(0, 400), false);\n\t\ty = (x$2 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$2.$high, y.$low - x$2.$low));\n\t\td = $mul64(new $Uint64(0, 146097), n);\n\t\tn = $div64(y, new $Uint64(0, 100), false);\n\t\ty = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));\n\t\td = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));\n\t\tn = $div64(y, new $Uint64(0, 4), false);\n\t\ty = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$5.$high, y.$low - x$5.$low));\n\t\td = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$6.$high, d.$low + x$6.$low));\n\t\tn = y;\n\t\td = (x$7 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));\n\t\td = (x$8 = new $Uint64(0, (x$9 = month - 1 >> 0, ((x$9 < 0 || x$9 >= daysBefore.length) ? $throwRuntimeError(\"index out of range\") : daysBefore[x$9]))), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));\n\t\tif (isLeap(year) && month >= 3) {\n\t\t\td = (x$10 = new $Uint64(0, 1), new $Uint64(d.$high + x$10.$high, d.$low + x$10.$low));\n\t\t}\n\t\td = (x$11 = new $Uint64(0, (day - 1 >> 0)), new $Uint64(d.$high + x$11.$high, d.$low + x$11.$low));\n\t\tabs = $mul64(d, new $Uint64(0, 86400));\n\t\tabs = (x$12 = new $Uint64(0, (((hour * 3600 >> 0) + (min * 60 >> 0) >> 0) + sec >> 0)), new $Uint64(abs.$high + x$12.$high, abs.$low + x$12.$low));\n\t\tunix = (x$13 = new $Int64(abs.$high, abs.$low), new $Int64(x$13.$high + -2147483647, x$13.$low + 3844486912));\n\t\t_r$1 = loc.lookup(unix); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_tuple$6 = _r$1; offset = _tuple$6[1]; start = _tuple$6[3]; end = _tuple$6[4];\n\t\t/* */ if (!((offset === 0))) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (!((offset === 0))) { */ case 2:\n\t\t\tutc = (x$14 = new $Int64(0, offset), new $Int64(unix.$high - x$14.$high, unix.$low - x$14.$low));\n\t\t\t/* */ if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { $s = 4; continue; }\n\t\t\t/* */ if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { $s = 5; continue; }\n\t\t\t/* */ $s = 6; continue;\n\t\t\t/* if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { */ case 4:\n\t\t\t\t_r$2 = loc.lookup(new $Int64(start.$high - 0, start.$low - 1)); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$7 = _r$2; offset = _tuple$7[1];\n\t\t\t\t$s = 6; continue;\n\t\t\t/* } else if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { */ case 5:\n\t\t\t\t_r$3 = loc.lookup(end); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$8 = _r$3; offset = _tuple$8[1];\n\t\t\t/* } */ case 6:\n\t\t\tunix = (x$15 = new $Int64(0, offset), new $Int64(unix.$high - x$15.$high, unix.$low - x$15.$low));\n\t\t/* } */ case 3:\n\t\treturn new Time.ptr(new $Int64(unix.$high + 14, unix.$low + 2006054656), (nsec >> 0), loc);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f.abs = abs; $f.d = d; $f.day = day; $f.end = end; $f.hour = hour; $f.loc = loc; $f.m = m; $f.min = min; $f.month = month; $f.n = n; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.start = start; $f.unix = unix; $f.utc = utc; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Date = Date;\n\tTime.ptr.prototype.Truncate = function(d) {\n\t\tvar $ptr, _tuple$1, d, r, t;\n\t\tt = $clone(this, Time);\n\t\tif ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {\n\t\t\treturn t;\n\t\t}\n\t\t_tuple$1 = div(t, d); r = _tuple$1[1];\n\t\treturn t.Add(new Duration(-r.$high, -r.$low));\n\t};\n\tTime.prototype.Truncate = function(d) { return this.$val.Truncate(d); };\n\tTime.ptr.prototype.Round = function(d) {\n\t\tvar $ptr, _tuple$1, d, r, t, x;\n\t\tt = $clone(this, Time);\n\t\tif ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {\n\t\t\treturn t;\n\t\t}\n\t\t_tuple$1 = div(t, d); r = _tuple$1[1];\n\t\tif ((x = new Duration(r.$high + r.$high, r.$low + r.$low), (x.$high < d.$high || (x.$high === d.$high && x.$low < d.$low)))) {\n\t\t\treturn t.Add(new Duration(-r.$high, -r.$low));\n\t\t}\n\t\treturn t.Add(new Duration(d.$high - r.$high, d.$low - r.$low));\n\t};\n\tTime.prototype.Round = function(d) { return this.$val.Round(d); };\n\tdiv = function(t, d) {\n\t\tvar $ptr, _q, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, d0, d1, d1$1, neg, nsec, qmod2, r, sec, t, tmp, u0, u0x, u1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;\n\t\tqmod2 = 0;\n\t\tr = new Duration(0, 0);\n\t\tt = $clone(t, Time);\n\t\tneg = false;\n\t\tnsec = t.nsec;\n\t\tif ((x = t.sec, (x.$high < 0 || (x.$high === 0 && x.$low < 0)))) {\n\t\t\tneg = true;\n\t\t\tt.sec = (x$1 = t.sec, new $Int64(-x$1.$high, -x$1.$low));\n\t\t\tnsec = -nsec;\n\t\t\tif (nsec < 0) {\n\t\t\t\tnsec = nsec + (1000000000) >> 0;\n\t\t\t\tt.sec = (x$2 = t.sec, x$3 = new $Int64(0, 1), new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low));\n\t\t\t}\n\t\t}\n\t\tif ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$4 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$4.$high === 0 && x$4.$low === 0))) {\n\t\t\tqmod2 = ((_q = nsec / ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\")) >> 0) & 1;\n\t\t\tr = new Duration(0, (_r$1 = nsec % ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), _r$1 === _r$1 ? _r$1 : $throwRuntimeError(\"integer divide by zero\")));\n\t\t} else if ((x$5 = $div64(d, new Duration(0, 1000000000), true), (x$5.$high === 0 && x$5.$low === 0))) {\n\t\t\td1 = (x$6 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$6.$high, x$6.$low));\n\t\t\tqmod2 = ((x$7 = $div64(t.sec, d1, false), x$7.$low + ((x$7.$high >> 31) * 4294967296)) >> 0) & 1;\n\t\t\tr = (x$8 = $mul64((x$9 = $div64(t.sec, d1, true), new Duration(x$9.$high, x$9.$low)), new Duration(0, 1000000000)), x$10 = new Duration(0, nsec), new Duration(x$8.$high + x$10.$high, x$8.$low + x$10.$low));\n\t\t} else {\n\t\t\tsec = (x$11 = t.sec, new $Uint64(x$11.$high, x$11.$low));\n\t\t\ttmp = $mul64(($shiftRightUint64(sec, 32)), new $Uint64(0, 1000000000));\n\t\t\tu1 = $shiftRightUint64(tmp, 32);\n\t\t\tu0 = $shiftLeft64(tmp, 32);\n\t\t\ttmp = $mul64(new $Uint64(sec.$high & 0, (sec.$low & 4294967295) >>> 0), new $Uint64(0, 1000000000));\n\t\t\t_tmp = u0; _tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low); u0x = _tmp; u0 = _tmp$1;\n\t\t\tif ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {\n\t\t\t\tu1 = (x$12 = new $Uint64(0, 1), new $Uint64(u1.$high + x$12.$high, u1.$low + x$12.$low));\n\t\t\t}\n\t\t\t_tmp$2 = u0; _tmp$3 = (x$13 = new $Uint64(0, nsec), new $Uint64(u0.$high + x$13.$high, u0.$low + x$13.$low)); u0x = _tmp$2; u0 = _tmp$3;\n\t\t\tif ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {\n\t\t\t\tu1 = (x$14 = new $Uint64(0, 1), new $Uint64(u1.$high + x$14.$high, u1.$low + x$14.$low));\n\t\t\t}\n\t\t\td1$1 = new $Uint64(d.$high, d.$low);\n\t\t\twhile (true) {\n\t\t\t\tif (!(!((x$15 = $shiftRightUint64(d1$1, 63), (x$15.$high === 0 && x$15.$low === 1))))) { break; }\n\t\t\t\td1$1 = $shiftLeft64(d1$1, (1));\n\t\t\t}\n\t\t\td0 = new $Uint64(0, 0);\n\t\t\twhile (true) {\n\t\t\t\tqmod2 = 0;\n\t\t\t\tif ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {\n\t\t\t\t\tqmod2 = 1;\n\t\t\t\t\t_tmp$4 = u0; _tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low); u0x = _tmp$4; u0 = _tmp$5;\n\t\t\t\t\tif ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {\n\t\t\t\t\t\tu1 = (x$16 = new $Uint64(0, 1), new $Uint64(u1.$high - x$16.$high, u1.$low - x$16.$low));\n\t\t\t\t\t}\n\t\t\t\t\tu1 = (x$17 = d1$1, new $Uint64(u1.$high - x$17.$high, u1.$low - x$17.$low));\n\t\t\t\t}\n\t\t\t\tif ((d1$1.$high === 0 && d1$1.$low === 0) && (x$18 = new $Uint64(d.$high, d.$low), (d0.$high === x$18.$high && d0.$low === x$18.$low))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\td0 = $shiftRightUint64(d0, (1));\n\t\t\t\td0 = (x$19 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$19.$high, (d0.$low | x$19.$low) >>> 0));\n\t\t\t\td1$1 = $shiftRightUint64(d1$1, (1));\n\t\t\t}\n\t\t\tr = new Duration(u0.$high, u0.$low);\n\t\t}\n\t\tif (neg && !((r.$high === 0 && r.$low === 0))) {\n\t\t\tqmod2 = (qmod2 ^ (1)) >> 0;\n\t\t\tr = new Duration(d.$high - r.$high, d.$low - r.$low);\n\t\t}\n\t\treturn [qmod2, r];\n\t};\n\tLocation.ptr.prototype.get = function() {\n\t\tvar $ptr, l, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tl = this;\n\t\tif (l === ptrType$1.nil) {\n\t\t\treturn utcLoc;\n\t\t}\n\t\t/* */ if (l === localLoc) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (l === localLoc) { */ case 1:\n\t\t\t$r = localOnce.Do(initLocal); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 2:\n\t\treturn l;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.get }; } $f.$ptr = $ptr; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tLocation.prototype.get = function() { return this.$val.get(); };\n\tLocation.ptr.prototype.String = function() {\n\t\tvar $ptr, _r$1, l, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tl = this;\n\t\t_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn _r$1.name;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tLocation.prototype.String = function() { return this.$val.String(); };\n\tFixedZone = function(name, offset) {\n\t\tvar $ptr, l, name, offset, x;\n\t\tl = new Location.ptr(name, new sliceType$1([new zone.ptr(name, offset, false)]), new sliceType$2([new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);\n\t\tl.cacheZone = (x = l.zone, (0 >= x.$length ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + 0]));\n\t\treturn l;\n\t};\n\t$pkg.FixedZone = FixedZone;\n\tLocation.ptr.prototype.lookup = function(sec) {\n\t\tvar $ptr, _q, _r$1, end, hi, isDST, l, lim, lo, m, name, offset, sec, start, tx, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, zone$1, zone$2, zone$3, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; end = $f.end; hi = $f.hi; isDST = $f.isDST; l = $f.l; lim = $f.lim; lo = $f.lo; m = $f.m; name = $f.name; offset = $f.offset; sec = $f.sec; start = $f.start; tx = $f.tx; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; zone$1 = $f.zone$1; zone$2 = $f.zone$2; zone$3 = $f.zone$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tname = \"\";\n\t\toffset = 0;\n\t\tisDST = false;\n\t\tstart = new $Int64(0, 0);\n\t\tend = new $Int64(0, 0);\n\t\tl = this;\n\t\t_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\tl = _r$1;\n\t\tif (l.zone.$length === 0) {\n\t\t\tname = \"UTC\";\n\t\t\toffset = 0;\n\t\t\tisDST = false;\n\t\t\tstart = new $Int64(-2147483648, 0);\n\t\t\tend = new $Int64(2147483647, 4294967295);\n\t\t\treturn [name, offset, isDST, start, end];\n\t\t}\n\t\tzone$1 = l.cacheZone;\n\t\tif (!(zone$1 === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) {\n\t\t\tname = zone$1.name;\n\t\t\toffset = zone$1.offset;\n\t\t\tisDST = zone$1.isDST;\n\t\t\tstart = l.cacheStart;\n\t\t\tend = l.cacheEnd;\n\t\t\treturn [name, offset, isDST, start, end];\n\t\t}\n\t\tif ((l.tx.$length === 0) || (x$2 = (x$3 = l.tx, (0 >= x$3.$length ? $throwRuntimeError(\"index out of range\") : x$3.$array[x$3.$offset + 0])).when, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {\n\t\t\tzone$2 = (x$4 = l.zone, x$5 = l.lookupFirstZone(), ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError(\"index out of range\") : x$4.$array[x$4.$offset + x$5]));\n\t\t\tname = zone$2.name;\n\t\t\toffset = zone$2.offset;\n\t\t\tisDST = zone$2.isDST;\n\t\t\tstart = new $Int64(-2147483648, 0);\n\t\t\tif (l.tx.$length > 0) {\n\t\t\t\tend = (x$6 = l.tx, (0 >= x$6.$length ? $throwRuntimeError(\"index out of range\") : x$6.$array[x$6.$offset + 0])).when;\n\t\t\t} else {\n\t\t\t\tend = new $Int64(2147483647, 4294967295);\n\t\t\t}\n\t\t\treturn [name, offset, isDST, start, end];\n\t\t}\n\t\ttx = l.tx;\n\t\tend = new $Int64(2147483647, 4294967295);\n\t\tlo = 0;\n\t\thi = tx.$length;\n\t\twhile (true) {\n\t\t\tif (!((hi - lo >> 0) > 1)) { break; }\n\t\t\tm = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\")) >> 0;\n\t\t\tlim = ((m < 0 || m >= tx.$length) ? $throwRuntimeError(\"index out of range\") : tx.$array[tx.$offset + m]).when;\n\t\t\tif ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {\n\t\t\t\tend = lim;\n\t\t\t\thi = m;\n\t\t\t} else {\n\t\t\t\tlo = m;\n\t\t\t}\n\t\t}\n\t\tzone$3 = (x$7 = l.zone, x$8 = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError(\"index out of range\") : tx.$array[tx.$offset + lo]).index, ((x$8 < 0 || x$8 >= x$7.$length) ? $throwRuntimeError(\"index out of range\") : x$7.$array[x$7.$offset + x$8]));\n\t\tname = zone$3.name;\n\t\toffset = zone$3.offset;\n\t\tisDST = zone$3.isDST;\n\t\tstart = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError(\"index out of range\") : tx.$array[tx.$offset + lo]).when;\n\t\treturn [name, offset, isDST, start, end];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookup }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.end = end; $f.hi = hi; $f.isDST = isDST; $f.l = l; $f.lim = lim; $f.lo = lo; $f.m = m; $f.name = name; $f.offset = offset; $f.sec = sec; $f.start = start; $f.tx = tx; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.zone$3 = zone$3; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tLocation.prototype.lookup = function(sec) { return this.$val.lookup(sec); };\n\tLocation.ptr.prototype.lookupFirstZone = function() {\n\t\tvar $ptr, _i, _ref, l, x, x$1, x$2, x$3, x$4, x$5, zi, zi$1;\n\t\tl = this;\n\t\tif (!l.firstZoneUsed()) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (l.tx.$length > 0 && (x = l.zone, x$1 = (x$2 = l.tx, (0 >= x$2.$length ? $throwRuntimeError(\"index out of range\") : x$2.$array[x$2.$offset + 0])).index, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + x$1])).isDST) {\n\t\t\tzi = ((x$3 = l.tx, (0 >= x$3.$length ? $throwRuntimeError(\"index out of range\") : x$3.$array[x$3.$offset + 0])).index >> 0) - 1 >> 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(zi >= 0)) { break; }\n\t\t\t\tif (!(x$4 = l.zone, ((zi < 0 || zi >= x$4.$length) ? $throwRuntimeError(\"index out of range\") : x$4.$array[x$4.$offset + zi])).isDST) {\n\t\t\t\t\treturn zi;\n\t\t\t\t}\n\t\t\t\tzi = zi - (1) >> 0;\n\t\t\t}\n\t\t}\n\t\t_ref = l.zone;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\tzi$1 = _i;\n\t\t\tif (!(x$5 = l.zone, ((zi$1 < 0 || zi$1 >= x$5.$length) ? $throwRuntimeError(\"index out of range\") : x$5.$array[x$5.$offset + zi$1])).isDST) {\n\t\t\t\treturn zi$1;\n\t\t\t}\n\t\t\t_i++;\n\t\t}\n\t\treturn 0;\n\t};\n\tLocation.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };\n\tLocation.ptr.prototype.firstZoneUsed = function() {\n\t\tvar $ptr, _i, _ref, l, tx;\n\t\tl = this;\n\t\t_ref = l.tx;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ttx = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]), zoneTrans);\n\t\t\tif (tx.index === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t_i++;\n\t\t}\n\t\treturn false;\n\t};\n\tLocation.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };\n\tLocation.ptr.prototype.lookupName = function(name, unix) {\n\t\tvar $ptr, _i, _i$1, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple$1, i, i$1, isDST, isDST$1, l, nam, name, offset, offset$1, ok, unix, x, x$1, x$2, zone$1, zone$2, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple$1 = $f._tuple$1; i = $f.i; i$1 = $f.i$1; isDST = $f.isDST; isDST$1 = $f.isDST$1; l = $f.l; nam = $f.nam; name = $f.name; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; unix = $f.unix; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\toffset = 0;\n\t\tisDST = false;\n\t\tok = false;\n\t\tl = this;\n\t\t_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\tl = _r$1;\n\t\t_ref = l.zone;\n\t\t_i = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }\n\t\t\ti = _i;\n\t\t\tzone$1 = (x = l.zone, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]));\n\t\t\t/* */ if (zone$1.name === name) { $s = 4; continue; }\n\t\t\t/* */ $s = 5; continue;\n\t\t\t/* if (zone$1.name === name) { */ case 4:\n\t\t\t\t_r$2 = l.lookup((x$1 = new $Int64(0, zone$1.offset), new $Int64(unix.$high - x$1.$high, unix.$low - x$1.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$1 = _r$2; nam = _tuple$1[0]; offset$1 = _tuple$1[1]; isDST$1 = _tuple$1[2];\n\t\t\t\tif (nam === zone$1.name) {\n\t\t\t\t\t_tmp = offset$1; _tmp$1 = isDST$1; _tmp$2 = true; offset = _tmp; isDST = _tmp$1; ok = _tmp$2;\n\t\t\t\t\treturn [offset, isDST, ok];\n\t\t\t\t}\n\t\t\t/* } */ case 5:\n\t\t\t_i++;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\t_ref$1 = l.zone;\n\t\t_i$1 = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i$1 < _ref$1.$length)) { break; }\n\t\t\ti$1 = _i$1;\n\t\t\tzone$2 = (x$2 = l.zone, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError(\"index out of range\") : x$2.$array[x$2.$offset + i$1]));\n\t\t\tif (zone$2.name === name) {\n\t\t\t\t_tmp$3 = zone$2.offset; _tmp$4 = zone$2.isDST; _tmp$5 = true; offset = _tmp$3; isDST = _tmp$4; ok = _tmp$5;\n\t\t\t\treturn [offset, isDST, ok];\n\t\t\t}\n\t\t\t_i$1++;\n\t\t}\n\t\treturn [offset, isDST, ok];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookupName }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple$1 = _tuple$1; $f.i = i; $f.i$1 = i$1; $f.isDST = isDST; $f.isDST$1 = isDST$1; $f.l = l; $f.nam = nam; $f.name = name; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.unix = unix; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tLocation.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };\n\tptrType$3.methods = [{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$4.methods = [{prop: \"Stop\", name: \"Stop\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([Duration], [$Bool], false)}];\n\tTime.methods = [{prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Format\", name: \"Format\", pkg: \"\", typ: $funcType([$String], [$String], false)}, {prop: \"After\", name: \"After\", pkg: \"\", typ: $funcType([Time], [$Bool], false)}, {prop: \"Before\", name: \"Before\", pkg: \"\", typ: $funcType([Time], [$Bool], false)}, {prop: \"Equal\", name: \"Equal\", pkg: \"\", typ: $funcType([Time], [$Bool], false)}, {prop: \"IsZero\", name: \"IsZero\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"abs\", name: \"abs\", pkg: \"time\", typ: $funcType([], [$Uint64], false)}, {prop: \"locabs\", name: \"locabs\", pkg: \"time\", typ: $funcType([], [$String, $Int, $Uint64], false)}, {prop: \"Date\", name: \"Date\", pkg: \"\", typ: $funcType([], [$Int, Month, $Int], false)}, {prop: \"Year\", name: \"Year\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Month\", name: \"Month\", pkg: \"\", typ: $funcType([], [Month], false)}, {prop: \"Day\", name: \"Day\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Weekday\", name: \"Weekday\", pkg: \"\", typ: $funcType([], [Weekday], false)}, {prop: \"ISOWeek\", name: \"ISOWeek\", pkg: \"\", typ: $funcType([], [$Int, $Int], false)}, {prop: \"Clock\", name: \"Clock\", pkg: \"\", typ: $funcType([], [$Int, $Int, $Int], false)}, {prop: \"Hour\", name: \"Hour\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Minute\", name: \"Minute\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Second\", name: \"Second\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Nanosecond\", name: \"Nanosecond\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"YearDay\", name: \"YearDay\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Add\", name: \"Add\", pkg: \"\", typ: $funcType([Duration], [Time], false)}, {prop: \"Sub\", name: \"Sub\", pkg: \"\", typ: $funcType([Time], [Duration], false)}, {prop: \"AddDate\", name: \"AddDate\", pkg: \"\", typ: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: \"date\", name: \"date\", pkg: \"time\", typ: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: \"UTC\", name: \"UTC\", pkg: \"\", typ: $funcType([], [Time], false)}, {prop: \"Local\", name: \"Local\", pkg: \"\", typ: $funcType([], [Time], false)}, {prop: \"In\", name: \"In\", pkg: \"\", typ: $funcType([ptrType$1], [Time], false)}, {prop: \"Location\", name: \"Location\", pkg: \"\", typ: $funcType([], [ptrType$1], false)}, {prop: \"Zone\", name: \"Zone\", pkg: \"\", typ: $funcType([], [$String, $Int], false)}, {prop: \"Unix\", name: \"Unix\", pkg: \"\", typ: $funcType([], [$Int64], false)}, {prop: \"UnixNano\", name: \"UnixNano\", pkg: \"\", typ: $funcType([], [$Int64], false)}, {prop: \"MarshalBinary\", name: \"MarshalBinary\", pkg: \"\", typ: $funcType([], [sliceType$3, $error], false)}, {prop: \"GobEncode\", name: \"GobEncode\", pkg: \"\", typ: $funcType([], [sliceType$3, $error], false)}, {prop: \"MarshalJSON\", name: \"MarshalJSON\", pkg: \"\", typ: $funcType([], [sliceType$3, $error], false)}, {prop: \"MarshalText\", name: \"MarshalText\", pkg: \"\", typ: $funcType([], [sliceType$3, $error], false)}, {prop: \"Truncate\", name: \"Truncate\", pkg: \"\", typ: $funcType([Duration], [Time], false)}, {prop: \"Round\", name: \"Round\", pkg: \"\", typ: $funcType([Duration], [Time], false)}];\n\tptrType$6.methods = [{prop: \"UnmarshalBinary\", name: \"UnmarshalBinary\", pkg: \"\", typ: $funcType([sliceType$3], [$error], false)}, {prop: \"GobDecode\", name: \"GobDecode\", pkg: \"\", typ: $funcType([sliceType$3], [$error], false)}, {prop: \"UnmarshalJSON\", name: \"UnmarshalJSON\", pkg: \"\", typ: $funcType([sliceType$3], [$error], false)}, {prop: \"UnmarshalText\", name: \"UnmarshalText\", pkg: \"\", typ: $funcType([sliceType$3], [$error], false)}];\n\tMonth.methods = [{prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tWeekday.methods = [{prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tDuration.methods = [{prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Nanoseconds\", name: \"Nanoseconds\", pkg: \"\", typ: $funcType([], [$Int64], false)}, {prop: \"Seconds\", name: \"Seconds\", pkg: \"\", typ: $funcType([], [$Float64], false)}, {prop: \"Minutes\", name: \"Minutes\", pkg: \"\", typ: $funcType([], [$Float64], false)}, {prop: \"Hours\", name: \"Hours\", pkg: \"\", typ: $funcType([], [$Float64], false)}];\n\tptrType$1.methods = [{prop: \"get\", name: \"get\", pkg: \"time\", typ: $funcType([], [ptrType$1], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"lookup\", name: \"lookup\", pkg: \"time\", typ: $funcType([$Int64], [$String, $Int, $Bool, $Int64, $Int64], false)}, {prop: \"lookupFirstZone\", name: \"lookupFirstZone\", pkg: \"time\", typ: $funcType([], [$Int], false)}, {prop: \"firstZoneUsed\", name: \"firstZoneUsed\", pkg: \"time\", typ: $funcType([], [$Bool], false)}, {prop: \"lookupName\", name: \"lookupName\", pkg: \"time\", typ: $funcType([$String, $Int64], [$Int, $Bool, $Bool], false)}];\n\truntimeTimer.init([{prop: \"i\", name: \"i\", pkg: \"time\", typ: $Int32, tag: \"\"}, {prop: \"when\", name: \"when\", pkg: \"time\", typ: $Int64, tag: \"\"}, {prop: \"period\", name: \"period\", pkg: \"time\", typ: $Int64, tag: \"\"}, {prop: \"f\", name: \"f\", pkg: \"time\", typ: funcType$1, tag: \"\"}, {prop: \"arg\", name: \"arg\", pkg: \"time\", typ: $emptyInterface, tag: \"\"}, {prop: \"timeout\", name: \"timeout\", pkg: \"time\", typ: ptrType$2, tag: \"\"}, {prop: \"active\", name: \"active\", pkg: \"time\", typ: $Bool, tag: \"\"}]);\n\tParseError.init([{prop: \"Layout\", name: \"Layout\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Value\", name: \"Value\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"LayoutElem\", name: \"LayoutElem\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"ValueElem\", name: \"ValueElem\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Message\", name: \"Message\", pkg: \"\", typ: $String, tag: \"\"}]);\n\tTimer.init([{prop: \"C\", name: \"C\", pkg: \"\", typ: chanType$2, tag: \"\"}, {prop: \"r\", name: \"r\", pkg: \"time\", typ: runtimeTimer, tag: \"\"}]);\n\tTime.init([{prop: \"sec\", name: \"sec\", pkg: \"time\", typ: $Int64, tag: \"\"}, {prop: \"nsec\", name: \"nsec\", pkg: \"time\", typ: $Int32, tag: \"\"}, {prop: \"loc\", name: \"loc\", pkg: \"time\", typ: ptrType$1, tag: \"\"}]);\n\tLocation.init([{prop: \"name\", name: \"name\", pkg: \"time\", typ: $String, tag: \"\"}, {prop: \"zone\", name: \"zone\", pkg: \"time\", typ: sliceType$1, tag: \"\"}, {prop: \"tx\", name: \"tx\", pkg: \"time\", typ: sliceType$2, tag: \"\"}, {prop: \"cacheStart\", name: \"cacheStart\", pkg: \"time\", typ: $Int64, tag: \"\"}, {prop: \"cacheEnd\", name: \"cacheEnd\", pkg: \"time\", typ: $Int64, tag: \"\"}, {prop: \"cacheZone\", name: \"cacheZone\", pkg: \"time\", typ: ptrType, tag: \"\"}]);\n\tzone.init([{prop: \"name\", name: \"name\", pkg: \"time\", typ: $String, tag: \"\"}, {prop: \"offset\", name: \"offset\", pkg: \"time\", typ: $Int, tag: \"\"}, {prop: \"isDST\", name: \"isDST\", pkg: \"time\", typ: $Bool, tag: \"\"}]);\n\tzoneTrans.init([{prop: \"when\", name: \"when\", pkg: \"time\", typ: $Int64, tag: \"\"}, {prop: \"index\", name: \"index\", pkg: \"time\", typ: $Uint8, tag: \"\"}, {prop: \"isstd\", name: \"isstd\", pkg: \"time\", typ: $Bool, tag: \"\"}, {prop: \"isutc\", name: \"isutc\", pkg: \"time\", typ: $Bool, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = nosync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = syscall.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tlocalLoc = new Location.ptr();\n\t\tlocalOnce = new nosync.Once.ptr();\n\t\tstd0x = $toNativeArray($kindInt, [260, 265, 524, 526, 528, 274]);\n\t\tlongDayNames = new sliceType([\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]);\n\t\tshortDayNames = new sliceType([\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]);\n\t\tshortMonthNames = new sliceType([\"---\", \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]);\n\t\tlongMonthNames = new sliceType([\"---\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]);\n\t\tatoiError = errors.New(\"time: invalid number\");\n\t\terrBad = errors.New(\"bad value for field\");\n\t\terrLeadingInt = errors.New(\"time: bad [0-9]*\");\n\t\tmonths = $toNativeArray($kindString, [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]);\n\t\tdays = $toNativeArray($kindString, [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]);\n\t\tunitMap = (_map = new $Map(), _key = \"ns\", _map[_key] = { k: _key, v: 1 }, _key = \"us\", _map[_key] = { k: _key, v: 1000 }, _key = \"\\xC2\\xB5s\", _map[_key] = { k: _key, v: 1000 }, _key = \"\\xCE\\xBCs\", _map[_key] = { k: _key, v: 1000 }, _key = \"ms\", _map[_key] = { k: _key, v: 1e+06 }, _key = \"s\", _map[_key] = { k: _key, v: 1e+09 }, _key = \"m\", _map[_key] = { k: _key, v: 6e+10 }, _key = \"h\", _map[_key] = { k: _key, v: 3.6e+12 }, _map);\n\t\tdaysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);\n\t\tutcLoc = new Location.ptr(\"UTC\", sliceType$1.nil, sliceType$2.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);\n\t\t$pkg.UTC = utcLoc;\n\t\t$pkg.Local = localLoc;\n\t\t_r = syscall.Getenv(\"ZONEINFO\"); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; zoneinfo = _tuple[0];\n\t\tbadData = errors.New(\"malformed time zone information\");\n\t\tzoneDirs = new sliceType([\"/usr/share/zoneinfo/\", \"/usr/share/lib/zoneinfo/\", \"/usr/lib/locale/TZ/\", runtime.GOROOT() + \"/lib/time/zoneinfo.zip\"]);\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"os\"] = (function() {\n\tvar $pkg = {}, $init, errors, js, io, runtime, sync, atomic, syscall, time, PathError, SyscallError, LinkError, File, file, dirInfo, FileInfo, FileMode, fileStat, sliceType, ptrType, sliceType$1, sliceType$2, ptrType$2, ptrType$3, ptrType$4, arrayType, ptrType$11, funcType$1, ptrType$12, ptrType$14, ptrType$15, errFinished, lstat, runtime_args, init, NewSyscallError, IsNotExist, isNotExist, fixCount, sigpipe, syscallMode, NewFile, epipecheck, Lstat, basename, init$1, Exit, fileInfoFromStat, timespecToTime;\n\terrors = $packages[\"errors\"];\n\tjs = $packages[\"github.com/gopherjs/gopherjs/js\"];\n\tio = $packages[\"io\"];\n\truntime = $packages[\"runtime\"];\n\tsync = $packages[\"sync\"];\n\tatomic = $packages[\"sync/atomic\"];\n\tsyscall = $packages[\"syscall\"];\n\ttime = $packages[\"time\"];\n\tPathError = $pkg.PathError = $newType(0, $kindStruct, \"os.PathError\", \"PathError\", \"os\", function(Op_, Path_, Err_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Op = \"\";\n\t\t\tthis.Path = \"\";\n\t\t\tthis.Err = $ifaceNil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Op = Op_;\n\t\tthis.Path = Path_;\n\t\tthis.Err = Err_;\n\t});\n\tSyscallError = $pkg.SyscallError = $newType(0, $kindStruct, \"os.SyscallError\", \"SyscallError\", \"os\", function(Syscall_, Err_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Syscall = \"\";\n\t\t\tthis.Err = $ifaceNil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Syscall = Syscall_;\n\t\tthis.Err = Err_;\n\t});\n\tLinkError = $pkg.LinkError = $newType(0, $kindStruct, \"os.LinkError\", \"LinkError\", \"os\", function(Op_, Old_, New_, Err_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Op = \"\";\n\t\t\tthis.Old = \"\";\n\t\t\tthis.New = \"\";\n\t\t\tthis.Err = $ifaceNil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Op = Op_;\n\t\tthis.Old = Old_;\n\t\tthis.New = New_;\n\t\tthis.Err = Err_;\n\t});\n\tFile = $pkg.File = $newType(0, $kindStruct, \"os.File\", \"File\", \"os\", function(file_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.file = ptrType$11.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.file = file_;\n\t});\n\tfile = $pkg.file = $newType(0, $kindStruct, \"os.file\", \"file\", \"os\", function(fd_, name_, dirinfo_, nepipe_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.fd = 0;\n\t\t\tthis.name = \"\";\n\t\t\tthis.dirinfo = ptrType.nil;\n\t\t\tthis.nepipe = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.fd = fd_;\n\t\tthis.name = name_;\n\t\tthis.dirinfo = dirinfo_;\n\t\tthis.nepipe = nepipe_;\n\t});\n\tdirInfo = $pkg.dirInfo = $newType(0, $kindStruct, \"os.dirInfo\", \"dirInfo\", \"os\", function(buf_, nbuf_, bufp_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.buf = sliceType$1.nil;\n\t\t\tthis.nbuf = 0;\n\t\t\tthis.bufp = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.buf = buf_;\n\t\tthis.nbuf = nbuf_;\n\t\tthis.bufp = bufp_;\n\t});\n\tFileInfo = $pkg.FileInfo = $newType(8, $kindInterface, \"os.FileInfo\", \"FileInfo\", \"os\", null);\n\tFileMode = $pkg.FileMode = $newType(4, $kindUint32, \"os.FileMode\", \"FileMode\", \"os\", null);\n\tfileStat = $pkg.fileStat = $newType(0, $kindStruct, \"os.fileStat\", \"fileStat\", \"os\", function(name_, size_, mode_, modTime_, sys_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.name = \"\";\n\t\t\tthis.size = new $Int64(0, 0);\n\t\t\tthis.mode = 0;\n\t\t\tthis.modTime = new time.Time.ptr();\n\t\t\tthis.sys = $ifaceNil;\n\t\t\treturn;\n\t\t}\n\t\tthis.name = name_;\n\t\tthis.size = size_;\n\t\tthis.mode = mode_;\n\t\tthis.modTime = modTime_;\n\t\tthis.sys = sys_;\n\t});\n\tsliceType = $sliceType($String);\n\tptrType = $ptrType(dirInfo);\n\tsliceType$1 = $sliceType($Uint8);\n\tsliceType$2 = $sliceType(FileInfo);\n\tptrType$2 = $ptrType(File);\n\tptrType$3 = $ptrType(PathError);\n\tptrType$4 = $ptrType(LinkError);\n\tarrayType = $arrayType($Uint8, 32);\n\tptrType$11 = $ptrType(file);\n\tfuncType$1 = $funcType([ptrType$11], [$error], false);\n\tptrType$12 = $ptrType($Int32);\n\tptrType$14 = $ptrType(fileStat);\n\tptrType$15 = $ptrType(SyscallError);\n\truntime_args = function() {\n\t\tvar $ptr;\n\t\treturn $pkg.Args;\n\t};\n\tinit = function() {\n\t\tvar $ptr, argv, i, process;\n\t\tprocess = $global.process;\n\t\tif (!(process === undefined)) {\n\t\t\targv = process.argv;\n\t\t\t$pkg.Args = $makeSlice(sliceType, ($parseInt(argv.length) - 1 >> 0));\n\t\t\ti = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(i < ($parseInt(argv.length) - 1 >> 0))) { break; }\n\t\t\t\t((i < 0 || i >= $pkg.Args.$length) ? $throwRuntimeError(\"index out of range\") : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(argv[(i + 1 >> 0)], $String));\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t}\n\t\tif ($pkg.Args.$length === 0) {\n\t\t\t$pkg.Args = new sliceType([\"?\"]);\n\t\t}\n\t};\n\tFile.ptr.prototype.readdirnames = function(n) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, d, err, errno, f, n, names, nb, nc, size;\n\t\tnames = sliceType.nil;\n\t\terr = $ifaceNil;\n\t\tf = this;\n\t\tif (f.file.dirinfo === ptrType.nil) {\n\t\t\tf.file.dirinfo = new dirInfo.ptr();\n\t\t\tf.file.dirinfo.buf = $makeSlice(sliceType$1, 4096);\n\t\t}\n\t\td = f.file.dirinfo;\n\t\tsize = n;\n\t\tif (size <= 0) {\n\t\t\tsize = 100;\n\t\t\tn = -1;\n\t\t}\n\t\tnames = $makeSlice(sliceType, 0, size);\n\t\twhile (true) {\n\t\t\tif (!(!((n === 0)))) { break; }\n\t\t\tif (d.bufp >= d.nbuf) {\n\t\t\t\td.bufp = 0;\n\t\t\t\terrno = $ifaceNil;\n\t\t\t\t_tuple$1 = syscall.ReadDirent(f.file.fd, d.buf);\n\t\t\t\t_tuple = fixCount(_tuple$1[0], _tuple$1[1]); d.nbuf = _tuple[0]; errno = _tuple[1];\n\t\t\t\tif (!($interfaceIsEqual(errno, $ifaceNil))) {\n\t\t\t\t\t_tmp = names; _tmp$1 = NewSyscallError(\"readdirent\", errno); names = _tmp; err = _tmp$1;\n\t\t\t\t\treturn [names, err];\n\t\t\t\t}\n\t\t\t\tif (d.nbuf <= 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_tmp$2 = 0; _tmp$3 = 0; nb = _tmp$2; nc = _tmp$3;\n\t\t\t_tuple$2 = syscall.ParseDirent($subslice(d.buf, d.bufp, d.nbuf), n, names); nb = _tuple$2[0]; nc = _tuple$2[1]; names = _tuple$2[2];\n\t\t\td.bufp = d.bufp + (nb) >> 0;\n\t\t\tn = n - (nc) >> 0;\n\t\t}\n\t\tif (n >= 0 && (names.$length === 0)) {\n\t\t\t_tmp$4 = names; _tmp$5 = io.EOF; names = _tmp$4; err = _tmp$5;\n\t\t\treturn [names, err];\n\t\t}\n\t\t_tmp$6 = names; _tmp$7 = $ifaceNil; names = _tmp$6; err = _tmp$7;\n\t\treturn [names, err];\n\t};\n\tFile.prototype.readdirnames = function(n) { return this.$val.readdirnames(n); };\n\tFile.ptr.prototype.Readdir = function(n) {\n\t\tvar $ptr, _r, _tmp, _tmp$1, _tuple, err, f, fi, n, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; fi = $f.fi; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tfi = sliceType$2.nil;\n\t\terr = $ifaceNil;\n\t\tf = this;\n\t\tif (f === ptrType$2.nil) {\n\t\t\t_tmp = sliceType$2.nil; _tmp$1 = $pkg.ErrInvalid; fi = _tmp; err = _tmp$1;\n\t\t\treturn [fi, err];\n\t\t}\n\t\t_r = f.readdir(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; fi = _tuple[0]; err = _tuple[1];\n\t\treturn [fi, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdir }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.fi = fi; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFile.prototype.Readdir = function(n) { return this.$val.Readdir(n); };\n\tFile.ptr.prototype.Readdirnames = function(n) {\n\t\tvar $ptr, _tmp, _tmp$1, _tuple, err, f, n, names;\n\t\tnames = sliceType.nil;\n\t\terr = $ifaceNil;\n\t\tf = this;\n\t\tif (f === ptrType$2.nil) {\n\t\t\t_tmp = sliceType.nil; _tmp$1 = $pkg.ErrInvalid; names = _tmp; err = _tmp$1;\n\t\t\treturn [names, err];\n\t\t}\n\t\t_tuple = f.readdirnames(n); names = _tuple[0]; err = _tuple[1];\n\t\treturn [names, err];\n\t};\n\tFile.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };\n\tPathError.ptr.prototype.Error = function() {\n\t\tvar $ptr, _r, e, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\te = this;\n\t\t_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn e.Op + \" \" + e.Path + \": \" + _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PathError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tPathError.prototype.Error = function() { return this.$val.Error(); };\n\tSyscallError.ptr.prototype.Error = function() {\n\t\tvar $ptr, _r, e, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\te = this;\n\t\t_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn e.Syscall + \": \" + _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: SyscallError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tSyscallError.prototype.Error = function() { return this.$val.Error(); };\n\tNewSyscallError = function(syscall$1, err) {\n\t\tvar $ptr, err, syscall$1;\n\t\tif ($interfaceIsEqual(err, $ifaceNil)) {\n\t\t\treturn $ifaceNil;\n\t\t}\n\t\treturn new SyscallError.ptr(syscall$1, err);\n\t};\n\t$pkg.NewSyscallError = NewSyscallError;\n\tIsNotExist = function(err) {\n\t\tvar $ptr, err;\n\t\treturn isNotExist(err);\n\t};\n\t$pkg.IsNotExist = IsNotExist;\n\tisNotExist = function(err) {\n\t\tvar $ptr, _ref, err, pe, pe$1, pe$2;\n\t\t_ref = err;\n\t\tif (_ref === $ifaceNil) {\n\t\t\tpe = _ref;\n\t\t\treturn false;\n\t\t} else if ($assertType(_ref, ptrType$3, true)[1]) {\n\t\t\tpe$1 = _ref.$val;\n\t\t\terr = pe$1.Err;\n\t\t} else if ($assertType(_ref, ptrType$4, true)[1]) {\n\t\t\tpe$2 = _ref.$val;\n\t\t\terr = pe$2.Err;\n\t\t}\n\t\treturn $interfaceIsEqual(err, new syscall.Errno(2)) || $interfaceIsEqual(err, $pkg.ErrNotExist);\n\t};\n\tFile.ptr.prototype.Name = function() {\n\t\tvar $ptr, f;\n\t\tf = this;\n\t\treturn f.file.name;\n\t};\n\tFile.prototype.Name = function() { return this.$val.Name(); };\n\tLinkError.ptr.prototype.Error = function() {\n\t\tvar $ptr, _r, e, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\te = this;\n\t\t_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn e.Op + \" \" + e.Old + \" \" + e.New + \": \" + _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: LinkError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tLinkError.prototype.Error = function() { return this.$val.Error(); };\n\tFile.ptr.prototype.Read = function(b) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, f, n;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tf = this;\n\t\tif (f === ptrType$2.nil) {\n\t\t\t_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;\n\t\t\treturn [n, err];\n\t\t}\n\t\t_tuple = f.read(b); n = _tuple[0]; e = _tuple[1];\n\t\tif (n < 0) {\n\t\t\tn = 0;\n\t\t}\n\t\tif ((n === 0) && b.$length > 0 && $interfaceIsEqual(e, $ifaceNil)) {\n\t\t\t_tmp$2 = 0; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;\n\t\t\treturn [n, err];\n\t\t}\n\t\tif (!($interfaceIsEqual(e, $ifaceNil))) {\n\t\t\terr = new PathError.ptr(\"read\", f.file.name, e);\n\t\t}\n\t\t_tmp$4 = n; _tmp$5 = err; n = _tmp$4; err = _tmp$5;\n\t\treturn [n, err];\n\t};\n\tFile.prototype.Read = function(b) { return this.$val.Read(b); };\n\tFile.ptr.prototype.ReadAt = function(b, off) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, f, m, n, off, x;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tf = this;\n\t\tif (f === ptrType$2.nil) {\n\t\t\t_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;\n\t\t\treturn [n, err];\n\t\t}\n\t\twhile (true) {\n\t\t\tif (!(b.$length > 0)) { break; }\n\t\t\t_tuple = f.pread(b, off); m = _tuple[0]; e = _tuple[1];\n\t\t\tif ((m === 0) && $interfaceIsEqual(e, $ifaceNil)) {\n\t\t\t\t_tmp$2 = n; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;\n\t\t\t\treturn [n, err];\n\t\t\t}\n\t\t\tif (!($interfaceIsEqual(e, $ifaceNil))) {\n\t\t\t\terr = new PathError.ptr(\"read\", f.file.name, e);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tn = n + (m) >> 0;\n\t\t\tb = $subslice(b, m);\n\t\t\toff = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));\n\t\t}\n\t\treturn [n, err];\n\t};\n\tFile.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };\n\tFile.ptr.prototype.Write = function(b) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, f, n;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tf = this;\n\t\tif (f === ptrType$2.nil) {\n\t\t\t_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;\n\t\t\treturn [n, err];\n\t\t}\n\t\t_tuple = f.write(b); n = _tuple[0]; e = _tuple[1];\n\t\tif (n < 0) {\n\t\t\tn = 0;\n\t\t}\n\t\tif (!((n === b.$length))) {\n\t\t\terr = io.ErrShortWrite;\n\t\t}\n\t\tepipecheck(f, e);\n\t\tif (!($interfaceIsEqual(e, $ifaceNil))) {\n\t\t\terr = new PathError.ptr(\"write\", f.file.name, e);\n\t\t}\n\t\t_tmp$2 = n; _tmp$3 = err; n = _tmp$2; err = _tmp$3;\n\t\treturn [n, err];\n\t};\n\tFile.prototype.Write = function(b) { return this.$val.Write(b); };\n\tFile.ptr.prototype.WriteAt = function(b, off) {\n\t\tvar $ptr, _tmp, _tmp$1, _tuple, b, e, err, f, m, n, off, x;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tf = this;\n\t\tif (f === ptrType$2.nil) {\n\t\t\t_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;\n\t\t\treturn [n, err];\n\t\t}\n\t\twhile (true) {\n\t\t\tif (!(b.$length > 0)) { break; }\n\t\t\t_tuple = f.pwrite(b, off); m = _tuple[0]; e = _tuple[1];\n\t\t\tif (!($interfaceIsEqual(e, $ifaceNil))) {\n\t\t\t\terr = new PathError.ptr(\"write\", f.file.name, e);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tn = n + (m) >> 0;\n\t\t\tb = $subslice(b, m);\n\t\t\toff = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));\n\t\t}\n\t\treturn [n, err];\n\t};\n\tFile.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };\n\tFile.ptr.prototype.Seek = function(offset, whence) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err, f, offset, r, ret, whence;\n\t\tret = new $Int64(0, 0);\n\t\terr = $ifaceNil;\n\t\tf = this;\n\t\tif (f === ptrType$2.nil) {\n\t\t\t_tmp = new $Int64(0, 0); _tmp$1 = $pkg.ErrInvalid; ret = _tmp; err = _tmp$1;\n\t\t\treturn [ret, err];\n\t\t}\n\t\t_tuple = f.seek(offset, whence); r = _tuple[0]; e = _tuple[1];\n\t\tif ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ptrType.nil) && !((r.$high === 0 && r.$low === 0))) {\n\t\t\te = new syscall.Errno(21);\n\t\t}\n\t\tif (!($interfaceIsEqual(e, $ifaceNil))) {\n\t\t\t_tmp$2 = new $Int64(0, 0); _tmp$3 = new PathError.ptr(\"seek\", f.file.name, e); ret = _tmp$2; err = _tmp$3;\n\t\t\treturn [ret, err];\n\t\t}\n\t\t_tmp$4 = r; _tmp$5 = $ifaceNil; ret = _tmp$4; err = _tmp$5;\n\t\treturn [ret, err];\n\t};\n\tFile.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };\n\tFile.ptr.prototype.WriteString = function(s) {\n\t\tvar $ptr, _tmp, _tmp$1, _tuple, err, f, ret, s;\n\t\tret = 0;\n\t\terr = $ifaceNil;\n\t\tf = this;\n\t\tif (f === ptrType$2.nil) {\n\t\t\t_tmp = 0; _tmp$1 = $pkg.ErrInvalid; ret = _tmp; err = _tmp$1;\n\t\t\treturn [ret, err];\n\t\t}\n\t\t_tuple = f.Write(new sliceType$1($stringToBytes(s))); ret = _tuple[0]; err = _tuple[1];\n\t\treturn [ret, err];\n\t};\n\tFile.prototype.WriteString = function(s) { return this.$val.WriteString(s); };\n\tFile.ptr.prototype.Chdir = function() {\n\t\tvar $ptr, e, f;\n\t\tf = this;\n\t\tif (f === ptrType$2.nil) {\n\t\t\treturn $pkg.ErrInvalid;\n\t\t}\n\t\te = syscall.Fchdir(f.file.fd);\n\t\tif (!($interfaceIsEqual(e, $ifaceNil))) {\n\t\t\treturn new PathError.ptr(\"chdir\", f.file.name, e);\n\t\t}\n\t\treturn $ifaceNil;\n\t};\n\tFile.prototype.Chdir = function() { return this.$val.Chdir(); };\n\tfixCount = function(n, err) {\n\t\tvar $ptr, err, n;\n\t\tif (n < 0) {\n\t\t\tn = 0;\n\t\t}\n\t\treturn [n, err];\n\t};\n\tsigpipe = function() {\n\t\t$panic(\"Native function not implemented: os.sigpipe\");\n\t};\n\tsyscallMode = function(i) {\n\t\tvar $ptr, i, o;\n\t\to = 0;\n\t\to = (o | ((new FileMode(i).Perm() >>> 0))) >>> 0;\n\t\tif (!((((i & 8388608) >>> 0) === 0))) {\n\t\t\to = (o | (2048)) >>> 0;\n\t\t}\n\t\tif (!((((i & 4194304) >>> 0) === 0))) {\n\t\t\to = (o | (1024)) >>> 0;\n\t\t}\n\t\tif (!((((i & 1048576) >>> 0) === 0))) {\n\t\t\to = (o | (512)) >>> 0;\n\t\t}\n\t\treturn o;\n\t};\n\tFile.ptr.prototype.Chmod = function(mode) {\n\t\tvar $ptr, e, f, mode;\n\t\tf = this;\n\t\tif (f === ptrType$2.nil) {\n\t\t\treturn $pkg.ErrInvalid;\n\t\t}\n\t\te = syscall.Fchmod(f.file.fd, syscallMode(mode));\n\t\tif (!($interfaceIsEqual(e, $ifaceNil))) {\n\t\t\treturn new PathError.ptr(\"chmod\", f.file.name, e);\n\t\t}\n\t\treturn $ifaceNil;\n\t};\n\tFile.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };\n\tFile.ptr.prototype.Chown = function(uid, gid) {\n\t\tvar $ptr, e, f, gid, uid;\n\t\tf = this;\n\t\tif (f === ptrType$2.nil) {\n\t\t\treturn $pkg.ErrInvalid;\n\t\t}\n\t\te = syscall.Fchown(f.file.fd, uid, gid);\n\t\tif (!($interfaceIsEqual(e, $ifaceNil))) {\n\t\t\treturn new PathError.ptr(\"chown\", f.file.name, e);\n\t\t}\n\t\treturn $ifaceNil;\n\t};\n\tFile.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };\n\tFile.ptr.prototype.Truncate = function(size) {\n\t\tvar $ptr, e, f, size;\n\t\tf = this;\n\t\tif (f === ptrType$2.nil) {\n\t\t\treturn $pkg.ErrInvalid;\n\t\t}\n\t\te = syscall.Ftruncate(f.file.fd, size);\n\t\tif (!($interfaceIsEqual(e, $ifaceNil))) {\n\t\t\treturn new PathError.ptr(\"truncate\", f.file.name, e);\n\t\t}\n\t\treturn $ifaceNil;\n\t};\n\tFile.prototype.Truncate = function(size) { return this.$val.Truncate(size); };\n\tFile.ptr.prototype.Sync = function() {\n\t\tvar $ptr, e, err, f;\n\t\terr = $ifaceNil;\n\t\tf = this;\n\t\tif (f === ptrType$2.nil) {\n\t\t\terr = $pkg.ErrInvalid;\n\t\t\treturn err;\n\t\t}\n\t\te = syscall.Fsync(f.file.fd);\n\t\tif (!($interfaceIsEqual(e, $ifaceNil))) {\n\t\t\terr = NewSyscallError(\"fsync\", e);\n\t\t\treturn err;\n\t\t}\n\t\terr = $ifaceNil;\n\t\treturn err;\n\t};\n\tFile.prototype.Sync = function() { return this.$val.Sync(); };\n\tFile.ptr.prototype.Fd = function() {\n\t\tvar $ptr, f;\n\t\tf = this;\n\t\tif (f === ptrType$2.nil) {\n\t\t\treturn 4294967295;\n\t\t}\n\t\treturn (f.file.fd >>> 0);\n\t};\n\tFile.prototype.Fd = function() { return this.$val.Fd(); };\n\tNewFile = function(fd, name) {\n\t\tvar $ptr, f, fd, fdi, name;\n\t\tfdi = (fd >> 0);\n\t\tif (fdi < 0) {\n\t\t\treturn ptrType$2.nil;\n\t\t}\n\t\tf = new File.ptr(new file.ptr(fdi, name, ptrType.nil, 0));\n\t\truntime.SetFinalizer(f.file, new funcType$1($methodExpr(ptrType$11.prototype.close)));\n\t\treturn f;\n\t};\n\t$pkg.NewFile = NewFile;\n\tepipecheck = function(file$1, e) {\n\t\tvar $ptr, e, file$1;\n\t\tif ($interfaceIsEqual(e, new syscall.Errno(32))) {\n\t\t\tif (atomic.AddInt32((file$1.$ptr_nepipe || (file$1.$ptr_nepipe = new ptrType$12(function() { return this.$target.file.nepipe; }, function($v) { this.$target.file.nepipe = $v; }, file$1))), 1) >= 10) {\n\t\t\t\tsigpipe();\n\t\t\t}\n\t\t} else {\n\t\t\tatomic.StoreInt32((file$1.$ptr_nepipe || (file$1.$ptr_nepipe = new ptrType$12(function() { return this.$target.file.nepipe; }, function($v) { this.$target.file.nepipe = $v; }, file$1))), 0);\n\t\t}\n\t};\n\tFile.ptr.prototype.Close = function() {\n\t\tvar $ptr, f;\n\t\tf = this;\n\t\tif (f === ptrType$2.nil) {\n\t\t\treturn $pkg.ErrInvalid;\n\t\t}\n\t\treturn f.file.close();\n\t};\n\tFile.prototype.Close = function() { return this.$val.Close(); };\n\tfile.ptr.prototype.close = function() {\n\t\tvar $ptr, e, err, file$1;\n\t\tfile$1 = this;\n\t\tif (file$1 === ptrType$11.nil || file$1.fd < 0) {\n\t\t\treturn new syscall.Errno(22);\n\t\t}\n\t\terr = $ifaceNil;\n\t\te = syscall.Close(file$1.fd);\n\t\tif (!($interfaceIsEqual(e, $ifaceNil))) {\n\t\t\terr = new PathError.ptr(\"close\", file$1.name, e);\n\t\t}\n\t\tfile$1.fd = -1;\n\t\truntime.SetFinalizer(file$1, $ifaceNil);\n\t\treturn err;\n\t};\n\tfile.prototype.close = function() { return this.$val.close(); };\n\tFile.ptr.prototype.Stat = function() {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, err, f, fi, stat;\n\t\tfi = $ifaceNil;\n\t\terr = $ifaceNil;\n\t\tf = this;\n\t\tif (f === ptrType$2.nil) {\n\t\t\t_tmp = $ifaceNil; _tmp$1 = $pkg.ErrInvalid; fi = _tmp; err = _tmp$1;\n\t\t\treturn [fi, err];\n\t\t}\n\t\tstat = $clone(new syscall.Stat_t.ptr(), syscall.Stat_t);\n\t\terr = syscall.Fstat(f.file.fd, stat);\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t_tmp$2 = $ifaceNil; _tmp$3 = new PathError.ptr(\"stat\", f.file.name, err); fi = _tmp$2; err = _tmp$3;\n\t\t\treturn [fi, err];\n\t\t}\n\t\t_tmp$4 = fileInfoFromStat(stat, f.file.name); _tmp$5 = $ifaceNil; fi = _tmp$4; err = _tmp$5;\n\t\treturn [fi, err];\n\t};\n\tFile.prototype.Stat = function() { return this.$val.Stat(); };\n\tLstat = function(name) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, err, fi, name, stat;\n\t\tfi = $ifaceNil;\n\t\terr = $ifaceNil;\n\t\tstat = $clone(new syscall.Stat_t.ptr(), syscall.Stat_t);\n\t\terr = syscall.Lstat(name, stat);\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t_tmp = $ifaceNil; _tmp$1 = new PathError.ptr(\"lstat\", name, err); fi = _tmp; err = _tmp$1;\n\t\t\treturn [fi, err];\n\t\t}\n\t\t_tmp$2 = fileInfoFromStat(stat, name); _tmp$3 = $ifaceNil; fi = _tmp$2; err = _tmp$3;\n\t\treturn [fi, err];\n\t};\n\t$pkg.Lstat = Lstat;\n\tFile.ptr.prototype.readdir = function(n) {\n\t\tvar $ptr, _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, dirname, err, f, fi, filename, fip, lerr, n, names, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dirname = $f.dirname; err = $f.err; f = $f.f; fi = $f.fi; filename = $f.filename; fip = $f.fip; lerr = $f.lerr; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tfi = sliceType$2.nil;\n\t\terr = $ifaceNil;\n\t\tf = this;\n\t\tdirname = f.file.name;\n\t\tif (dirname === \"\") {\n\t\t\tdirname = \".\";\n\t\t}\n\t\t_tuple = f.Readdirnames(n); names = _tuple[0]; err = _tuple[1];\n\t\tfi = $makeSlice(sliceType$2, 0, names.$length);\n\t\t_ref = names;\n\t\t_i = 0;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }\n\t\t\tfilename = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\t_r = lstat(dirname + \"/\" + filename); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t_tuple$1 = _r; fip = _tuple$1[0]; lerr = _tuple$1[1];\n\t\t\tif (IsNotExist(lerr)) {\n\t\t\t\t_i++;\n\t\t\t\t/* continue; */ $s = 1; continue;\n\t\t\t}\n\t\t\tif (!($interfaceIsEqual(lerr, $ifaceNil))) {\n\t\t\t\t_tmp = fi; _tmp$1 = lerr; fi = _tmp; err = _tmp$1;\n\t\t\t\treturn [fi, err];\n\t\t\t}\n\t\t\tfi = $append(fi, fip);\n\t\t\t_i++;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\t_tmp$2 = fi; _tmp$3 = err; fi = _tmp$2; err = _tmp$3;\n\t\treturn [fi, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdir }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dirname = dirname; $f.err = err; $f.f = f; $f.fi = fi; $f.filename = filename; $f.fip = fip; $f.lerr = lerr; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFile.prototype.readdir = function(n) { return this.$val.readdir(n); };\n\tFile.ptr.prototype.read = function(b) {\n\t\tvar $ptr, _tuple, _tuple$1, b, err, f, n;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tf = this;\n\t\t_tuple$1 = syscall.Read(f.file.fd, b);\n\t\t_tuple = fixCount(_tuple$1[0], _tuple$1[1]); n = _tuple[0]; err = _tuple[1];\n\t\treturn [n, err];\n\t};\n\tFile.prototype.read = function(b) { return this.$val.read(b); };\n\tFile.ptr.prototype.pread = function(b, off) {\n\t\tvar $ptr, _tuple, _tuple$1, b, err, f, n, off;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tf = this;\n\t\t_tuple$1 = syscall.Pread(f.file.fd, b, off);\n\t\t_tuple = fixCount(_tuple$1[0], _tuple$1[1]); n = _tuple[0]; err = _tuple[1];\n\t\treturn [n, err];\n\t};\n\tFile.prototype.pread = function(b, off) { return this.$val.pread(b, off); };\n\tFile.ptr.prototype.write = function(b) {\n\t\tvar $ptr, _tmp, _tmp$1, _tuple, _tuple$1, b, bcap, err, err$1, f, m, n;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tf = this;\n\t\twhile (true) {\n\t\t\tbcap = b;\n\t\t\t_tuple$1 = syscall.Write(f.file.fd, bcap);\n\t\t\t_tuple = fixCount(_tuple$1[0], _tuple$1[1]); m = _tuple[0]; err$1 = _tuple[1];\n\t\t\tn = n + (m) >> 0;\n\t\t\tif (0 < m && m < bcap.$length || $interfaceIsEqual(err$1, new syscall.Errno(4))) {\n\t\t\t\tb = $subslice(b, m);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t_tmp = n; _tmp$1 = err$1; n = _tmp; err = _tmp$1;\n\t\t\treturn [n, err];\n\t\t}\n\t};\n\tFile.prototype.write = function(b) { return this.$val.write(b); };\n\tFile.ptr.prototype.pwrite = function(b, off) {\n\t\tvar $ptr, _tuple, _tuple$1, b, err, f, n, off;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tf = this;\n\t\t_tuple$1 = syscall.Pwrite(f.file.fd, b, off);\n\t\t_tuple = fixCount(_tuple$1[0], _tuple$1[1]); n = _tuple[0]; err = _tuple[1];\n\t\treturn [n, err];\n\t};\n\tFile.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };\n\tFile.ptr.prototype.seek = function(offset, whence) {\n\t\tvar $ptr, _tuple, err, f, offset, ret, whence;\n\t\tret = new $Int64(0, 0);\n\t\terr = $ifaceNil;\n\t\tf = this;\n\t\t_tuple = syscall.Seek(f.file.fd, offset, whence); ret = _tuple[0]; err = _tuple[1];\n\t\treturn [ret, err];\n\t};\n\tFile.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };\n\tbasename = function(name) {\n\t\tvar $ptr, i, name;\n\t\ti = name.length - 1 >> 0;\n\t\twhile (true) {\n\t\t\tif (!(i > 0 && (name.charCodeAt(i) === 47))) { break; }\n\t\t\tname = name.substring(0, i);\n\t\t\ti = i - (1) >> 0;\n\t\t}\n\t\ti = i - (1) >> 0;\n\t\twhile (true) {\n\t\t\tif (!(i >= 0)) { break; }\n\t\t\tif (name.charCodeAt(i) === 47) {\n\t\t\t\tname = name.substring((i + 1 >> 0));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti = i - (1) >> 0;\n\t\t}\n\t\treturn name;\n\t};\n\tinit$1 = function() {\n\t\tvar $ptr;\n\t\t$pkg.Args = runtime_args();\n\t};\n\tExit = function(code) {\n\t\tvar $ptr, code;\n\t\tsyscall.Exit(code);\n\t};\n\t$pkg.Exit = Exit;\n\tfileInfoFromStat = function(st, name) {\n\t\tvar $ptr, _ref, fs, name, st;\n\t\tfs = new fileStat.ptr(basename(name), st.Size, 0, $clone(timespecToTime(st.Mtim), time.Time), st);\n\t\tfs.mode = (((st.Mode & 511) >>> 0) >>> 0);\n\t\t_ref = (st.Mode & 61440) >>> 0;\n\t\tif (_ref === 24576) {\n\t\t\tfs.mode = (fs.mode | (67108864)) >>> 0;\n\t\t} else if (_ref === 8192) {\n\t\t\tfs.mode = (fs.mode | (69206016)) >>> 0;\n\t\t} else if (_ref === 16384) {\n\t\t\tfs.mode = (fs.mode | (2147483648)) >>> 0;\n\t\t} else if (_ref === 4096) {\n\t\t\tfs.mode = (fs.mode | (33554432)) >>> 0;\n\t\t} else if (_ref === 40960) {\n\t\t\tfs.mode = (fs.mode | (134217728)) >>> 0;\n\t\t} else if (_ref === 32768) {\n\t\t} else if (_ref === 49152) {\n\t\t\tfs.mode = (fs.mode | (16777216)) >>> 0;\n\t\t}\n\t\tif (!((((st.Mode & 1024) >>> 0) === 0))) {\n\t\t\tfs.mode = (fs.mode | (4194304)) >>> 0;\n\t\t}\n\t\tif (!((((st.Mode & 2048) >>> 0) === 0))) {\n\t\t\tfs.mode = (fs.mode | (8388608)) >>> 0;\n\t\t}\n\t\tif (!((((st.Mode & 512) >>> 0) === 0))) {\n\t\t\tfs.mode = (fs.mode | (1048576)) >>> 0;\n\t\t}\n\t\treturn fs;\n\t};\n\ttimespecToTime = function(ts) {\n\t\tvar $ptr, ts;\n\t\tts = $clone(ts, syscall.Timespec);\n\t\treturn time.Unix(ts.Sec, ts.Nsec);\n\t};\n\tFileMode.prototype.String = function() {\n\t\tvar $ptr, _i, _i$1, _ref, _ref$1, _rune, _rune$1, buf, c, c$1, i, i$1, m, w, y, y$1;\n\t\tm = this.$val;\n\t\tbuf = $clone(arrayType.zero(), arrayType);\n\t\tw = 0;\n\t\t_ref = \"dalTLDpSugct\";\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.length)) { break; }\n\t\t\t_rune = $decodeRune(_ref, _i);\n\t\t\ti = _i;\n\t\t\tc = _rune[0];\n\t\t\tif (!((((m & (((y = ((31 - i >> 0) >>> 0), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {\n\t\t\t\t((w < 0 || w >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[w] = (c << 24 >>> 24));\n\t\t\t\tw = w + (1) >> 0;\n\t\t\t}\n\t\t\t_i += _rune[1];\n\t\t}\n\t\tif (w === 0) {\n\t\t\t((w < 0 || w >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[w] = 45);\n\t\t\tw = w + (1) >> 0;\n\t\t}\n\t\t_ref$1 = \"rwxrwxrwx\";\n\t\t_i$1 = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i$1 < _ref$1.length)) { break; }\n\t\t\t_rune$1 = $decodeRune(_ref$1, _i$1);\n\t\t\ti$1 = _i$1;\n\t\t\tc$1 = _rune$1[0];\n\t\t\tif (!((((m & (((y$1 = ((8 - i$1 >> 0) >>> 0), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {\n\t\t\t\t((w < 0 || w >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[w] = (c$1 << 24 >>> 24));\n\t\t\t} else {\n\t\t\t\t((w < 0 || w >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[w] = 45);\n\t\t\t}\n\t\t\tw = w + (1) >> 0;\n\t\t\t_i$1 += _rune$1[1];\n\t\t}\n\t\treturn $bytesToString($subslice(new sliceType$1(buf), 0, w));\n\t};\n\t$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };\n\tFileMode.prototype.IsDir = function() {\n\t\tvar $ptr, m;\n\t\tm = this.$val;\n\t\treturn !((((m & 2147483648) >>> 0) === 0));\n\t};\n\t$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };\n\tFileMode.prototype.IsRegular = function() {\n\t\tvar $ptr, m;\n\t\tm = this.$val;\n\t\treturn ((m & 2399141888) >>> 0) === 0;\n\t};\n\t$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };\n\tFileMode.prototype.Perm = function() {\n\t\tvar $ptr, m;\n\t\tm = this.$val;\n\t\treturn (m & 511) >>> 0;\n\t};\n\t$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };\n\tfileStat.ptr.prototype.Name = function() {\n\t\tvar $ptr, fs;\n\t\tfs = this;\n\t\treturn fs.name;\n\t};\n\tfileStat.prototype.Name = function() { return this.$val.Name(); };\n\tfileStat.ptr.prototype.IsDir = function() {\n\t\tvar $ptr, fs;\n\t\tfs = this;\n\t\treturn new FileMode(fs.Mode()).IsDir();\n\t};\n\tfileStat.prototype.IsDir = function() { return this.$val.IsDir(); };\n\tfileStat.ptr.prototype.Size = function() {\n\t\tvar $ptr, fs;\n\t\tfs = this;\n\t\treturn fs.size;\n\t};\n\tfileStat.prototype.Size = function() { return this.$val.Size(); };\n\tfileStat.ptr.prototype.Mode = function() {\n\t\tvar $ptr, fs;\n\t\tfs = this;\n\t\treturn fs.mode;\n\t};\n\tfileStat.prototype.Mode = function() { return this.$val.Mode(); };\n\tfileStat.ptr.prototype.ModTime = function() {\n\t\tvar $ptr, fs;\n\t\tfs = this;\n\t\treturn fs.modTime;\n\t};\n\tfileStat.prototype.ModTime = function() { return this.$val.ModTime(); };\n\tfileStat.ptr.prototype.Sys = function() {\n\t\tvar $ptr, fs;\n\t\tfs = this;\n\t\treturn fs.sys;\n\t};\n\tfileStat.prototype.Sys = function() { return this.$val.Sys(); };\n\tptrType$3.methods = [{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$15.methods = [{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$4.methods = [{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$2.methods = [{prop: \"readdirnames\", name: \"readdirnames\", pkg: \"os\", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: \"Readdir\", name: \"Readdir\", pkg: \"\", typ: $funcType([$Int], [sliceType$2, $error], false)}, {prop: \"Readdirnames\", name: \"Readdirnames\", pkg: \"\", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Read\", name: \"Read\", pkg: \"\", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: \"ReadAt\", name: \"ReadAt\", pkg: \"\", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: \"Write\", name: \"Write\", pkg: \"\", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: \"WriteAt\", name: \"WriteAt\", pkg: \"\", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: \"Seek\", name: \"Seek\", pkg: \"\", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: \"WriteString\", name: \"WriteString\", pkg: \"\", typ: $funcType([$String], [$Int, $error], false)}, {prop: \"Chdir\", name: \"Chdir\", pkg: \"\", typ: $funcType([], [$error], false)}, {prop: \"Chmod\", name: \"Chmod\", pkg: \"\", typ: $funcType([FileMode], [$error], false)}, {prop: \"Chown\", name: \"Chown\", pkg: \"\", typ: $funcType([$Int, $Int], [$error], false)}, {prop: \"Truncate\", name: \"Truncate\", pkg: \"\", typ: $funcType([$Int64], [$error], false)}, {prop: \"Sync\", name: \"Sync\", pkg: \"\", typ: $funcType([], [$error], false)}, {prop: \"Fd\", name: \"Fd\", pkg: \"\", typ: $funcType([], [$Uintptr], false)}, {prop: \"Close\", name: \"Close\", pkg: \"\", typ: $funcType([], [$error], false)}, {prop: \"Stat\", name: \"Stat\", pkg: \"\", typ: $funcType([], [FileInfo, $error], false)}, {prop: \"readdir\", name: \"readdir\", pkg: \"os\", typ: $funcType([$Int], [sliceType$2, $error], false)}, {prop: \"read\", name: \"read\", pkg: \"os\", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: \"pread\", name: \"pread\", pkg: \"os\", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: \"write\", name: \"write\", pkg: \"os\", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: \"pwrite\", name: \"pwrite\", pkg: \"os\", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: \"seek\", name: \"seek\", pkg: \"os\", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}];\n\tptrType$11.methods = [{prop: \"close\", name: \"close\", pkg: \"os\", typ: $funcType([], [$error], false)}];\n\tFileMode.methods = [{prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"IsDir\", name: \"IsDir\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"IsRegular\", name: \"IsRegular\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Perm\", name: \"Perm\", pkg: \"\", typ: $funcType([], [FileMode], false)}];\n\tptrType$14.methods = [{prop: \"Name\", name: \"Name\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"IsDir\", name: \"IsDir\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Size\", name: \"Size\", pkg: \"\", typ: $funcType([], [$Int64], false)}, {prop: \"Mode\", name: \"Mode\", pkg: \"\", typ: $funcType([], [FileMode], false)}, {prop: \"ModTime\", name: \"ModTime\", pkg: \"\", typ: $funcType([], [time.Time], false)}, {prop: \"Sys\", name: \"Sys\", pkg: \"\", typ: $funcType([], [$emptyInterface], false)}];\n\tPathError.init([{prop: \"Op\", name: \"Op\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Path\", name: \"Path\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Err\", name: \"Err\", pkg: \"\", typ: $error, tag: \"\"}]);\n\tSyscallError.init([{prop: \"Syscall\", name: \"Syscall\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Err\", name: \"Err\", pkg: \"\", typ: $error, tag: \"\"}]);\n\tLinkError.init([{prop: \"Op\", name: \"Op\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Old\", name: \"Old\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"New\", name: \"New\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Err\", name: \"Err\", pkg: \"\", typ: $error, tag: \"\"}]);\n\tFile.init([{prop: \"file\", name: \"\", pkg: \"os\", typ: ptrType$11, tag: \"\"}]);\n\tfile.init([{prop: \"fd\", name: \"fd\", pkg: \"os\", typ: $Int, tag: \"\"}, {prop: \"name\", name: \"name\", pkg: \"os\", typ: $String, tag: \"\"}, {prop: \"dirinfo\", name: \"dirinfo\", pkg: \"os\", typ: ptrType, tag: \"\"}, {prop: \"nepipe\", name: \"nepipe\", pkg: \"os\", typ: $Int32, tag: \"\"}]);\n\tdirInfo.init([{prop: \"buf\", name: \"buf\", pkg: \"os\", typ: sliceType$1, tag: \"\"}, {prop: \"nbuf\", name: \"nbuf\", pkg: \"os\", typ: $Int, tag: \"\"}, {prop: \"bufp\", name: \"bufp\", pkg: \"os\", typ: $Int, tag: \"\"}]);\n\tFileInfo.init([{prop: \"IsDir\", name: \"IsDir\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"ModTime\", name: \"ModTime\", pkg: \"\", typ: $funcType([], [time.Time], false)}, {prop: \"Mode\", name: \"Mode\", pkg: \"\", typ: $funcType([], [FileMode], false)}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Size\", name: \"Size\", pkg: \"\", typ: $funcType([], [$Int64], false)}, {prop: \"Sys\", name: \"Sys\", pkg: \"\", typ: $funcType([], [$emptyInterface], false)}]);\n\tfileStat.init([{prop: \"name\", name: \"name\", pkg: \"os\", typ: $String, tag: \"\"}, {prop: \"size\", name: \"size\", pkg: \"os\", typ: $Int64, tag: \"\"}, {prop: \"mode\", name: \"mode\", pkg: \"os\", typ: FileMode, tag: \"\"}, {prop: \"modTime\", name: \"modTime\", pkg: \"os\", typ: time.Time, tag: \"\"}, {prop: \"sys\", name: \"sys\", pkg: \"os\", typ: $emptyInterface, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = atomic.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = syscall.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$pkg.Args = sliceType.nil;\n\t\t$pkg.ErrInvalid = errors.New(\"invalid argument\");\n\t\t$pkg.ErrPermission = errors.New(\"permission denied\");\n\t\t$pkg.ErrExist = errors.New(\"file already exists\");\n\t\t$pkg.ErrNotExist = errors.New(\"file does not exist\");\n\t\terrFinished = errors.New(\"os: process already finished\");\n\t\t$pkg.Stdin = NewFile((syscall.Stdin >>> 0), \"/dev/stdin\");\n\t\t$pkg.Stdout = NewFile((syscall.Stdout >>> 0), \"/dev/stdout\");\n\t\t$pkg.Stderr = NewFile((syscall.Stderr >>> 0), \"/dev/stderr\");\n\t\tlstat = Lstat;\n\t\tinit();\n\t\tinit$1();\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"strconv\"] = (function() {\n\tvar $pkg = {}, $init, errors, math, utf8, NumError, decimal, leftCheat, extFloat, floatInfo, decimalSlice, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, sliceType$6, ptrType, arrayType, arrayType$1, ptrType$1, arrayType$2, arrayType$3, arrayType$4, arrayType$5, arrayType$6, ptrType$2, ptrType$3, ptrType$4, optimize, powtab, float64pow10, float32pow10, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float32info_ptr, float64info, float64info_ptr, isPrint16, isNotPrint16, isPrint32, isNotPrint32, shifts, ParseBool, equalIgnoreCase, special, readFloat, atof64exact, atof32exact, atof32, atof64, ParseFloat, syntaxError, rangeError, cutoff64, ParseUint, ParseInt, Atoi, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, max, FormatInt, Itoa, formatBits, quoteWith, Quote, QuoteToASCII, QuoteRune, AppendQuoteRune, QuoteRuneToASCII, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint;\n\terrors = $packages[\"errors\"];\n\tmath = $packages[\"math\"];\n\tutf8 = $packages[\"unicode/utf8\"];\n\tNumError = $pkg.NumError = $newType(0, $kindStruct, \"strconv.NumError\", \"NumError\", \"strconv\", function(Func_, Num_, Err_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Func = \"\";\n\t\t\tthis.Num = \"\";\n\t\t\tthis.Err = $ifaceNil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Func = Func_;\n\t\tthis.Num = Num_;\n\t\tthis.Err = Err_;\n\t});\n\tdecimal = $pkg.decimal = $newType(0, $kindStruct, \"strconv.decimal\", \"decimal\", \"strconv\", function(d_, nd_, dp_, neg_, trunc_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.d = arrayType$6.zero();\n\t\t\tthis.nd = 0;\n\t\t\tthis.dp = 0;\n\t\t\tthis.neg = false;\n\t\t\tthis.trunc = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.d = d_;\n\t\tthis.nd = nd_;\n\t\tthis.dp = dp_;\n\t\tthis.neg = neg_;\n\t\tthis.trunc = trunc_;\n\t});\n\tleftCheat = $pkg.leftCheat = $newType(0, $kindStruct, \"strconv.leftCheat\", \"leftCheat\", \"strconv\", function(delta_, cutoff_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.delta = 0;\n\t\t\tthis.cutoff = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.delta = delta_;\n\t\tthis.cutoff = cutoff_;\n\t});\n\textFloat = $pkg.extFloat = $newType(0, $kindStruct, \"strconv.extFloat\", \"extFloat\", \"strconv\", function(mant_, exp_, neg_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.mant = new $Uint64(0, 0);\n\t\t\tthis.exp = 0;\n\t\t\tthis.neg = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.mant = mant_;\n\t\tthis.exp = exp_;\n\t\tthis.neg = neg_;\n\t});\n\tfloatInfo = $pkg.floatInfo = $newType(0, $kindStruct, \"strconv.floatInfo\", \"floatInfo\", \"strconv\", function(mantbits_, expbits_, bias_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.mantbits = 0;\n\t\t\tthis.expbits = 0;\n\t\t\tthis.bias = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.mantbits = mantbits_;\n\t\tthis.expbits = expbits_;\n\t\tthis.bias = bias_;\n\t});\n\tdecimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, \"strconv.decimalSlice\", \"decimalSlice\", \"strconv\", function(d_, nd_, dp_, neg_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.d = sliceType$6.nil;\n\t\t\tthis.nd = 0;\n\t\t\tthis.dp = 0;\n\t\t\tthis.neg = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.d = d_;\n\t\tthis.nd = nd_;\n\t\tthis.dp = dp_;\n\t\tthis.neg = neg_;\n\t});\n\tsliceType = $sliceType($Int);\n\tsliceType$1 = $sliceType($Float64);\n\tsliceType$2 = $sliceType($Float32);\n\tsliceType$3 = $sliceType(leftCheat);\n\tsliceType$4 = $sliceType($Uint16);\n\tsliceType$5 = $sliceType($Uint32);\n\tsliceType$6 = $sliceType($Uint8);\n\tptrType = $ptrType(NumError);\n\tarrayType = $arrayType($Uint8, 24);\n\tarrayType$1 = $arrayType($Uint8, 32);\n\tptrType$1 = $ptrType(floatInfo);\n\tarrayType$2 = $arrayType($Uint8, 3);\n\tarrayType$3 = $arrayType($Uint8, 50);\n\tarrayType$4 = $arrayType($Uint8, 65);\n\tarrayType$5 = $arrayType($Uint8, 4);\n\tarrayType$6 = $arrayType($Uint8, 800);\n\tptrType$2 = $ptrType(decimal);\n\tptrType$3 = $ptrType(decimalSlice);\n\tptrType$4 = $ptrType(extFloat);\n\tParseBool = function(str) {\n\t\tvar $ptr, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, err, str, value;\n\t\tvalue = false;\n\t\terr = $ifaceNil;\n\t\t_ref = str;\n\t\tif (_ref === \"1\" || _ref === \"t\" || _ref === \"T\" || _ref === \"true\" || _ref === \"TRUE\" || _ref === \"True\") {\n\t\t\t_tmp = true; _tmp$1 = $ifaceNil; value = _tmp; err = _tmp$1;\n\t\t\treturn [value, err];\n\t\t} else if (_ref === \"0\" || _ref === \"f\" || _ref === \"F\" || _ref === \"false\" || _ref === \"FALSE\" || _ref === \"False\") {\n\t\t\t_tmp$2 = false; _tmp$3 = $ifaceNil; value = _tmp$2; err = _tmp$3;\n\t\t\treturn [value, err];\n\t\t}\n\t\t_tmp$4 = false; _tmp$5 = syntaxError(\"ParseBool\", str); value = _tmp$4; err = _tmp$5;\n\t\treturn [value, err];\n\t};\n\t$pkg.ParseBool = ParseBool;\n\tequalIgnoreCase = function(s1, s2) {\n\t\tvar $ptr, c1, c2, i, s1, s2;\n\t\tif (!((s1.length === s2.length))) {\n\t\t\treturn false;\n\t\t}\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < s1.length)) { break; }\n\t\t\tc1 = s1.charCodeAt(i);\n\t\t\tif (65 <= c1 && c1 <= 90) {\n\t\t\t\tc1 = c1 + (32) << 24 >>> 24;\n\t\t\t}\n\t\t\tc2 = s2.charCodeAt(i);\n\t\t\tif (65 <= c2 && c2 <= 90) {\n\t\t\t\tc2 = c2 + (32) << 24 >>> 24;\n\t\t\t}\n\t\t\tif (!((c1 === c2))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn true;\n\t};\n\tspecial = function(s) {\n\t\tvar $ptr, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, f, ok, s;\n\t\tf = 0;\n\t\tok = false;\n\t\tif (s.length === 0) {\n\t\t\treturn [f, ok];\n\t\t}\n\t\t_ref = s.charCodeAt(0);\n\t\tif (_ref === 43) {\n\t\t\tif (equalIgnoreCase(s, \"+inf\") || equalIgnoreCase(s, \"+infinity\")) {\n\t\t\t\t_tmp = math.Inf(1); _tmp$1 = true; f = _tmp; ok = _tmp$1;\n\t\t\t\treturn [f, ok];\n\t\t\t}\n\t\t} else if (_ref === 45) {\n\t\t\tif (equalIgnoreCase(s, \"-inf\") || equalIgnoreCase(s, \"-infinity\")) {\n\t\t\t\t_tmp$2 = math.Inf(-1); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;\n\t\t\t\treturn [f, ok];\n\t\t\t}\n\t\t} else if (_ref === 110 || _ref === 78) {\n\t\t\tif (equalIgnoreCase(s, \"nan\")) {\n\t\t\t\t_tmp$4 = math.NaN(); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;\n\t\t\t\treturn [f, ok];\n\t\t\t}\n\t\t} else if (_ref === 105 || _ref === 73) {\n\t\t\tif (equalIgnoreCase(s, \"inf\") || equalIgnoreCase(s, \"infinity\")) {\n\t\t\t\t_tmp$6 = math.Inf(1); _tmp$7 = true; f = _tmp$6; ok = _tmp$7;\n\t\t\t\treturn [f, ok];\n\t\t\t}\n\t\t} else {\n\t\t\treturn [f, ok];\n\t\t}\n\t\treturn [f, ok];\n\t};\n\tdecimal.ptr.prototype.set = function(s) {\n\t\tvar $ptr, b, e, esign, i, ok, s, sawdigits, sawdot, x, x$1;\n\t\tok = false;\n\t\tb = this;\n\t\ti = 0;\n\t\tb.neg = false;\n\t\tb.trunc = false;\n\t\tif (i >= s.length) {\n\t\t\treturn ok;\n\t\t}\n\t\tif (s.charCodeAt(i) === 43) {\n\t\t\ti = i + (1) >> 0;\n\t\t} else if (s.charCodeAt(i) === 45) {\n\t\t\tb.neg = true;\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\tsawdot = false;\n\t\tsawdigits = false;\n\t\twhile (true) {\n\t\t\tif (!(i < s.length)) { break; }\n\t\t\tif (s.charCodeAt(i) === 46) {\n\t\t\t\tif (sawdot) {\n\t\t\t\t\treturn ok;\n\t\t\t\t}\n\t\t\t\tsawdot = true;\n\t\t\t\tb.dp = b.nd;\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t\tcontinue;\n\t\t\t} else if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {\n\t\t\t\tsawdigits = true;\n\t\t\t\tif ((s.charCodeAt(i) === 48) && (b.nd === 0)) {\n\t\t\t\t\tb.dp = b.dp - (1) >> 0;\n\t\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (b.nd < 800) {\n\t\t\t\t\t(x = b.d, x$1 = b.nd, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError(\"index out of range\") : x[x$1] = s.charCodeAt(i)));\n\t\t\t\t\tb.nd = b.nd + (1) >> 0;\n\t\t\t\t} else if (!((s.charCodeAt(i) === 48))) {\n\t\t\t\t\tb.trunc = true;\n\t\t\t\t}\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif (!sawdigits) {\n\t\t\treturn ok;\n\t\t}\n\t\tif (!sawdot) {\n\t\t\tb.dp = b.nd;\n\t\t}\n\t\tif (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {\n\t\t\ti = i + (1) >> 0;\n\t\t\tif (i >= s.length) {\n\t\t\t\treturn ok;\n\t\t\t}\n\t\t\tesign = 1;\n\t\t\tif (s.charCodeAt(i) === 43) {\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t} else if (s.charCodeAt(i) === 45) {\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t\tesign = -1;\n\t\t\t}\n\t\t\tif (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {\n\t\t\t\treturn ok;\n\t\t\t}\n\t\t\te = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }\n\t\t\t\tif (e < 10000) {\n\t\t\t\t\te = ((e * 10 >> 0) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;\n\t\t\t\t}\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t\tb.dp = b.dp + ((e * esign >> 0)) >> 0;\n\t\t}\n\t\tif (!((i === s.length))) {\n\t\t\treturn ok;\n\t\t}\n\t\tok = true;\n\t\treturn ok;\n\t};\n\tdecimal.prototype.set = function(s) { return this.$val.set(s); };\n\treadFloat = function(s) {\n\t\tvar $ptr, _ref, c, dp, e, esign, exp, i, mantissa, nd, ndMant, neg, ok, s, sawdigits, sawdot, trunc, x;\n\t\tmantissa = new $Uint64(0, 0);\n\t\texp = 0;\n\t\tneg = false;\n\t\ttrunc = false;\n\t\tok = false;\n\t\ti = 0;\n\t\tif (i >= s.length) {\n\t\t\treturn [mantissa, exp, neg, trunc, ok];\n\t\t}\n\t\tif (s.charCodeAt(i) === 43) {\n\t\t\ti = i + (1) >> 0;\n\t\t} else if (s.charCodeAt(i) === 45) {\n\t\t\tneg = true;\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\tsawdot = false;\n\t\tsawdigits = false;\n\t\tnd = 0;\n\t\tndMant = 0;\n\t\tdp = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < s.length)) { break; }\n\t\t\tc = s.charCodeAt(i);\n\t\t\t_ref = true;\n\t\t\tif (_ref === (c === 46)) {\n\t\t\t\tif (sawdot) {\n\t\t\t\t\treturn [mantissa, exp, neg, trunc, ok];\n\t\t\t\t}\n\t\t\t\tsawdot = true;\n\t\t\t\tdp = nd;\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t\tcontinue;\n\t\t\t} else if (_ref === 48 <= c && c <= 57) {\n\t\t\t\tsawdigits = true;\n\t\t\t\tif ((c === 48) && (nd === 0)) {\n\t\t\t\t\tdp = dp - (1) >> 0;\n\t\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tnd = nd + (1) >> 0;\n\t\t\t\tif (ndMant < 19) {\n\t\t\t\t\tmantissa = $mul64(mantissa, (new $Uint64(0, 10)));\n\t\t\t\t\tmantissa = (x = new $Uint64(0, (c - 48 << 24 >>> 24)), new $Uint64(mantissa.$high + x.$high, mantissa.$low + x.$low));\n\t\t\t\t\tndMant = ndMant + (1) >> 0;\n\t\t\t\t} else if (!((s.charCodeAt(i) === 48))) {\n\t\t\t\t\ttrunc = true;\n\t\t\t\t}\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif (!sawdigits) {\n\t\t\treturn [mantissa, exp, neg, trunc, ok];\n\t\t}\n\t\tif (!sawdot) {\n\t\t\tdp = nd;\n\t\t}\n\t\tif (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {\n\t\t\ti = i + (1) >> 0;\n\t\t\tif (i >= s.length) {\n\t\t\t\treturn [mantissa, exp, neg, trunc, ok];\n\t\t\t}\n\t\t\tesign = 1;\n\t\t\tif (s.charCodeAt(i) === 43) {\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t} else if (s.charCodeAt(i) === 45) {\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t\tesign = -1;\n\t\t\t}\n\t\t\tif (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {\n\t\t\t\treturn [mantissa, exp, neg, trunc, ok];\n\t\t\t}\n\t\t\te = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }\n\t\t\t\tif (e < 10000) {\n\t\t\t\t\te = ((e * 10 >> 0) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;\n\t\t\t\t}\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t\tdp = dp + ((e * esign >> 0)) >> 0;\n\t\t}\n\t\tif (!((i === s.length))) {\n\t\t\treturn [mantissa, exp, neg, trunc, ok];\n\t\t}\n\t\texp = dp - ndMant >> 0;\n\t\tok = true;\n\t\treturn [mantissa, exp, neg, trunc, ok];\n\t};\n\tdecimal.ptr.prototype.floatBits = function(flt) {\n\t\tvar $ptr, _tmp, _tmp$1, b, bits, d, exp, flt, mant, n, n$1, n$2, overflow, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, y$1, y$2, y$3, $s;\n\t\t/* */ $s = 0; s: while (true) { switch ($s) { case 0:\n\t\tb = new $Uint64(0, 0);\n\t\toverflow = false;\n\t\td = this;\n\t\texp = 0;\n\t\tmant = new $Uint64(0, 0);\n\t\t/* */ if (d.nd === 0) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (d.nd === 0) { */ case 1:\n\t\t\tmant = new $Uint64(0, 0);\n\t\t\texp = flt.bias;\n\t\t\t/* goto out */ $s = 3; continue;\n\t\t/* } */ case 2:\n\t\t/* */ if (d.dp > 310) { $s = 4; continue; }\n\t\t/* */ $s = 5; continue;\n\t\t/* if (d.dp > 310) { */ case 4:\n\t\t\t/* goto overflow */ $s = 6; continue;\n\t\t/* } */ case 5:\n\t\t/* */ if (d.dp < -330) { $s = 7; continue; }\n\t\t/* */ $s = 8; continue;\n\t\t/* if (d.dp < -330) { */ case 7:\n\t\t\tmant = new $Uint64(0, 0);\n\t\t\texp = flt.bias;\n\t\t\t/* goto out */ $s = 3; continue;\n\t\t/* } */ case 8:\n\t\texp = 0;\n\t\twhile (true) {\n\t\t\tif (!(d.dp > 0)) { break; }\n\t\t\tn = 0;\n\t\t\tif (d.dp >= powtab.$length) {\n\t\t\t\tn = 27;\n\t\t\t} else {\n\t\t\t\tn = (x = d.dp, ((x < 0 || x >= powtab.$length) ? $throwRuntimeError(\"index out of range\") : powtab.$array[powtab.$offset + x]));\n\t\t\t}\n\t\t\td.Shift(-n);\n\t\t\texp = exp + (n) >> 0;\n\t\t}\n\t\twhile (true) {\n\t\t\tif (!(d.dp < 0 || (d.dp === 0) && d.d[0] < 53)) { break; }\n\t\t\tn$1 = 0;\n\t\t\tif (-d.dp >= powtab.$length) {\n\t\t\t\tn$1 = 27;\n\t\t\t} else {\n\t\t\t\tn$1 = (x$1 = -d.dp, ((x$1 < 0 || x$1 >= powtab.$length) ? $throwRuntimeError(\"index out of range\") : powtab.$array[powtab.$offset + x$1]));\n\t\t\t}\n\t\t\td.Shift(n$1);\n\t\t\texp = exp - (n$1) >> 0;\n\t\t}\n\t\texp = exp - (1) >> 0;\n\t\tif (exp < (flt.bias + 1 >> 0)) {\n\t\t\tn$2 = (flt.bias + 1 >> 0) - exp >> 0;\n\t\t\td.Shift(-n$2);\n\t\t\texp = exp + (n$2) >> 0;\n\t\t}\n\t\t/* */ if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { $s = 9; continue; }\n\t\t/* */ $s = 10; continue;\n\t\t/* if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { */ case 9:\n\t\t\t/* goto overflow */ $s = 6; continue;\n\t\t/* } */ case 10:\n\t\td.Shift(((1 + flt.mantbits >>> 0) >> 0));\n\t\tmant = d.RoundedInteger();\n\t\t/* */ if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { $s = 11; continue; }\n\t\t/* */ $s = 12; continue;\n\t\t/* if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { */ case 11:\n\t\t\tmant = $shiftRightUint64(mant, (1));\n\t\t\texp = exp + (1) >> 0;\n\t\t\t/* */ if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { $s = 13; continue; }\n\t\t\t/* */ $s = 14; continue;\n\t\t\t/* if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { */ case 13:\n\t\t\t\t/* goto overflow */ $s = 6; continue;\n\t\t\t/* } */ case 14:\n\t\t/* } */ case 12:\n\t\tif ((x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$4.$high, (mant.$low & x$4.$low) >>> 0)), (x$3.$high === 0 && x$3.$low === 0))) {\n\t\t\texp = flt.bias;\n\t\t}\n\t\t/* goto out */ $s = 3; continue;\n\t\t/* overflow: */ case 6:\n\t\tmant = new $Uint64(0, 0);\n\t\texp = (((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;\n\t\toverflow = true;\n\t\t/* out: */ case 3:\n\t\tbits = (x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$6.$high - 0, x$6.$low - 1)), new $Uint64(mant.$high & x$5.$high, (mant.$low & x$5.$low) >>> 0));\n\t\tbits = (x$7 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$3 = flt.expbits, y$3 < 32 ? (1 << y$3) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$7.$high, (bits.$low | x$7.$low) >>> 0));\n\t\tif (d.neg) {\n\t\t\tbits = (x$8 = $shiftLeft64($shiftLeft64(new $Uint64(0, 1), flt.mantbits), flt.expbits), new $Uint64(bits.$high | x$8.$high, (bits.$low | x$8.$low) >>> 0));\n\t\t}\n\t\t_tmp = bits; _tmp$1 = overflow; b = _tmp; overflow = _tmp$1;\n\t\treturn [b, overflow];\n\t\t/* */ $s = -1; case -1: } return; }\n\t};\n\tdecimal.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };\n\tatof64exact = function(mantissa, exp, neg) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;\n\t\tf = 0;\n\t\tok = false;\n\t\tif (!((x = $shiftRightUint64(mantissa, float64info.mantbits), (x.$high === 0 && x.$low === 0)))) {\n\t\t\treturn [f, ok];\n\t\t}\n\t\tf = $flatten64(mantissa);\n\t\tif (neg) {\n\t\t\tf = -f;\n\t\t}\n\t\tif (exp === 0) {\n\t\t\t_tmp = f; _tmp$1 = true; f = _tmp; ok = _tmp$1;\n\t\t\treturn [f, ok];\n\t\t} else if (exp > 0 && exp <= 37) {\n\t\t\tif (exp > 22) {\n\t\t\t\tf = f * ((x$1 = exp - 22 >> 0, ((x$1 < 0 || x$1 >= float64pow10.$length) ? $throwRuntimeError(\"index out of range\") : float64pow10.$array[float64pow10.$offset + x$1])));\n\t\t\t\texp = 22;\n\t\t\t}\n\t\t\tif (f > 1e+15 || f < -1e+15) {\n\t\t\t\treturn [f, ok];\n\t\t\t}\n\t\t\t_tmp$2 = f * ((exp < 0 || exp >= float64pow10.$length) ? $throwRuntimeError(\"index out of range\") : float64pow10.$array[float64pow10.$offset + exp]); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;\n\t\t\treturn [f, ok];\n\t\t} else if (exp < 0 && exp >= -22) {\n\t\t\t_tmp$4 = f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float64pow10.$length) ? $throwRuntimeError(\"index out of range\") : float64pow10.$array[float64pow10.$offset + x$2])); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;\n\t\t\treturn [f, ok];\n\t\t}\n\t\treturn [f, ok];\n\t};\n\tatof32exact = function(mantissa, exp, neg) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;\n\t\tf = 0;\n\t\tok = false;\n\t\tif (!((x = $shiftRightUint64(mantissa, float32info.mantbits), (x.$high === 0 && x.$low === 0)))) {\n\t\t\treturn [f, ok];\n\t\t}\n\t\tf = $flatten64(mantissa);\n\t\tif (neg) {\n\t\t\tf = -f;\n\t\t}\n\t\tif (exp === 0) {\n\t\t\t_tmp = f; _tmp$1 = true; f = _tmp; ok = _tmp$1;\n\t\t\treturn [f, ok];\n\t\t} else if (exp > 0 && exp <= 17) {\n\t\t\tif (exp > 10) {\n\t\t\t\tf = $fround(f * ((x$1 = exp - 10 >> 0, ((x$1 < 0 || x$1 >= float32pow10.$length) ? $throwRuntimeError(\"index out of range\") : float32pow10.$array[float32pow10.$offset + x$1]))));\n\t\t\t\texp = 10;\n\t\t\t}\n\t\t\tif (f > 1e+07 || f < -1e+07) {\n\t\t\t\treturn [f, ok];\n\t\t\t}\n\t\t\t_tmp$2 = $fround(f * ((exp < 0 || exp >= float32pow10.$length) ? $throwRuntimeError(\"index out of range\") : float32pow10.$array[float32pow10.$offset + exp])); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;\n\t\t\treturn [f, ok];\n\t\t} else if (exp < 0 && exp >= -10) {\n\t\t\t_tmp$4 = $fround(f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float32pow10.$length) ? $throwRuntimeError(\"index out of range\") : float32pow10.$array[float32pow10.$offset + x$2]))); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;\n\t\t\treturn [f, ok];\n\t\t}\n\t\treturn [f, ok];\n\t};\n\tatof32 = function(s) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err, exp, ext, f, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;\n\t\tf = 0;\n\t\terr = $ifaceNil;\n\t\t_tuple = special(s); val = _tuple[0]; ok = _tuple[1];\n\t\tif (ok) {\n\t\t\t_tmp = $fround(val); _tmp$1 = $ifaceNil; f = _tmp; err = _tmp$1;\n\t\t\treturn [f, err];\n\t\t}\n\t\tif (optimize) {\n\t\t\t_tuple$1 = readFloat(s); mantissa = _tuple$1[0]; exp = _tuple$1[1]; neg = _tuple$1[2]; trunc = _tuple$1[3]; ok$1 = _tuple$1[4];\n\t\t\tif (ok$1) {\n\t\t\t\tif (!trunc) {\n\t\t\t\t\t_tuple$2 = atof32exact(mantissa, exp, neg); f$1 = _tuple$2[0]; ok$2 = _tuple$2[1];\n\t\t\t\t\tif (ok$2) {\n\t\t\t\t\t\t_tmp$2 = f$1; _tmp$3 = $ifaceNil; f = _tmp$2; err = _tmp$3;\n\t\t\t\t\t\treturn [f, err];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\text = new extFloat.ptr();\n\t\t\t\tok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float32info);\n\t\t\t\tif (ok$3) {\n\t\t\t\t\t_tuple$3 = ext.floatBits(float32info); b = _tuple$3[0]; ovf = _tuple$3[1];\n\t\t\t\t\tf = math.Float32frombits((b.$low >>> 0));\n\t\t\t\t\tif (ovf) {\n\t\t\t\t\t\terr = rangeError(\"ParseFloat\", s);\n\t\t\t\t\t}\n\t\t\t\t\t_tmp$4 = f; _tmp$5 = err; f = _tmp$4; err = _tmp$5;\n\t\t\t\t\treturn [f, err];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\td = $clone(new decimal.ptr(), decimal);\n\t\tif (!d.set(s)) {\n\t\t\t_tmp$6 = 0; _tmp$7 = syntaxError(\"ParseFloat\", s); f = _tmp$6; err = _tmp$7;\n\t\t\treturn [f, err];\n\t\t}\n\t\t_tuple$4 = d.floatBits(float32info); b$1 = _tuple$4[0]; ovf$1 = _tuple$4[1];\n\t\tf = math.Float32frombits((b$1.$low >>> 0));\n\t\tif (ovf$1) {\n\t\t\terr = rangeError(\"ParseFloat\", s);\n\t\t}\n\t\t_tmp$8 = f; _tmp$9 = err; f = _tmp$8; err = _tmp$9;\n\t\treturn [f, err];\n\t};\n\tatof64 = function(s) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err, exp, ext, f, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;\n\t\tf = 0;\n\t\terr = $ifaceNil;\n\t\t_tuple = special(s); val = _tuple[0]; ok = _tuple[1];\n\t\tif (ok) {\n\t\t\t_tmp = val; _tmp$1 = $ifaceNil; f = _tmp; err = _tmp$1;\n\t\t\treturn [f, err];\n\t\t}\n\t\tif (optimize) {\n\t\t\t_tuple$1 = readFloat(s); mantissa = _tuple$1[0]; exp = _tuple$1[1]; neg = _tuple$1[2]; trunc = _tuple$1[3]; ok$1 = _tuple$1[4];\n\t\t\tif (ok$1) {\n\t\t\t\tif (!trunc) {\n\t\t\t\t\t_tuple$2 = atof64exact(mantissa, exp, neg); f$1 = _tuple$2[0]; ok$2 = _tuple$2[1];\n\t\t\t\t\tif (ok$2) {\n\t\t\t\t\t\t_tmp$2 = f$1; _tmp$3 = $ifaceNil; f = _tmp$2; err = _tmp$3;\n\t\t\t\t\t\treturn [f, err];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\text = new extFloat.ptr();\n\t\t\t\tok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float64info);\n\t\t\t\tif (ok$3) {\n\t\t\t\t\t_tuple$3 = ext.floatBits(float64info); b = _tuple$3[0]; ovf = _tuple$3[1];\n\t\t\t\t\tf = math.Float64frombits(b);\n\t\t\t\t\tif (ovf) {\n\t\t\t\t\t\terr = rangeError(\"ParseFloat\", s);\n\t\t\t\t\t}\n\t\t\t\t\t_tmp$4 = f; _tmp$5 = err; f = _tmp$4; err = _tmp$5;\n\t\t\t\t\treturn [f, err];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\td = $clone(new decimal.ptr(), decimal);\n\t\tif (!d.set(s)) {\n\t\t\t_tmp$6 = 0; _tmp$7 = syntaxError(\"ParseFloat\", s); f = _tmp$6; err = _tmp$7;\n\t\t\treturn [f, err];\n\t\t}\n\t\t_tuple$4 = d.floatBits(float64info); b$1 = _tuple$4[0]; ovf$1 = _tuple$4[1];\n\t\tf = math.Float64frombits(b$1);\n\t\tif (ovf$1) {\n\t\t\terr = rangeError(\"ParseFloat\", s);\n\t\t}\n\t\t_tmp$8 = f; _tmp$9 = err; f = _tmp$8; err = _tmp$9;\n\t\treturn [f, err];\n\t};\n\tParseFloat = function(s, bitSize) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, bitSize, err, err1, err1$1, f, f1, f1$1, s;\n\t\tf = 0;\n\t\terr = $ifaceNil;\n\t\tif (bitSize === 32) {\n\t\t\t_tuple = atof32(s); f1 = _tuple[0]; err1 = _tuple[1];\n\t\t\t_tmp = f1; _tmp$1 = err1; f = _tmp; err = _tmp$1;\n\t\t\treturn [f, err];\n\t\t}\n\t\t_tuple$1 = atof64(s); f1$1 = _tuple$1[0]; err1$1 = _tuple$1[1];\n\t\t_tmp$2 = f1$1; _tmp$3 = err1$1; f = _tmp$2; err = _tmp$3;\n\t\treturn [f, err];\n\t};\n\t$pkg.ParseFloat = ParseFloat;\n\tNumError.ptr.prototype.Error = function() {\n\t\tvar $ptr, _r, e, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\te = this;\n\t\t_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn \"strconv.\" + e.Func + \": \" + \"parsing \" + Quote(e.Num) + \": \" + _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NumError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tNumError.prototype.Error = function() { return this.$val.Error(); };\n\tsyntaxError = function(fn, str) {\n\t\tvar $ptr, fn, str;\n\t\treturn new NumError.ptr(fn, str, $pkg.ErrSyntax);\n\t};\n\trangeError = function(fn, str) {\n\t\tvar $ptr, fn, str;\n\t\treturn new NumError.ptr(fn, str, $pkg.ErrRange);\n\t};\n\tcutoff64 = function(base) {\n\t\tvar $ptr, base, x;\n\t\tif (base < 2) {\n\t\t\treturn new $Uint64(0, 0);\n\t\t}\n\t\treturn (x = $div64(new $Uint64(4294967295, 4294967295), new $Uint64(0, base), false), new $Uint64(x.$high + 0, x.$low + 1));\n\t};\n\tParseUint = function(s, base, bitSize) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, base, bitSize, cutoff, d, err, i, maxVal, n, n1, s, s0, v, x, x$1, $s;\n\t\t/* */ $s = 0; s: while (true) { switch ($s) { case 0:\n\t\tn = new $Uint64(0, 0);\n\t\terr = $ifaceNil;\n\t\t_tmp = new $Uint64(0, 0); _tmp$1 = new $Uint64(0, 0); cutoff = _tmp; maxVal = _tmp$1;\n\t\tif (bitSize === 0) {\n\t\t\tbitSize = 32;\n\t\t}\n\t\ts0 = s;\n\t\t/* */ if (s.length < 1) { $s = 1; continue; }\n\t\t/* */ if (2 <= base && base <= 36) { $s = 2; continue; }\n\t\t/* */ if (base === 0) { $s = 3; continue; }\n\t\t/* */ $s = 4; continue;\n\t\t/* if (s.length < 1) { */ case 1:\n\t\t\terr = $pkg.ErrSyntax;\n\t\t\t/* goto Error */ $s = 6; continue;\n\t\t\t$s = 5; continue;\n\t\t/* } else if (2 <= base && base <= 36) { */ case 2:\n\t\t\t$s = 5; continue;\n\t\t/* } else if (base === 0) { */ case 3:\n\t\t\t/* */ if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { $s = 7; continue; }\n\t\t\t/* */ if (s.charCodeAt(0) === 48) { $s = 8; continue; }\n\t\t\t/* */ $s = 9; continue;\n\t\t\t/* if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { */ case 7:\n\t\t\t\tbase = 16;\n\t\t\t\ts = s.substring(2);\n\t\t\t\t/* */ if (s.length < 1) { $s = 11; continue; }\n\t\t\t\t/* */ $s = 12; continue;\n\t\t\t\t/* if (s.length < 1) { */ case 11:\n\t\t\t\t\terr = $pkg.ErrSyntax;\n\t\t\t\t\t/* goto Error */ $s = 6; continue;\n\t\t\t\t/* } */ case 12:\n\t\t\t\t$s = 10; continue;\n\t\t\t/* } else if (s.charCodeAt(0) === 48) { */ case 8:\n\t\t\t\tbase = 8;\n\t\t\t\t$s = 10; continue;\n\t\t\t/* } else { */ case 9:\n\t\t\t\tbase = 10;\n\t\t\t/* } */ case 10:\n\t\t\t$s = 5; continue;\n\t\t/* } else { */ case 4:\n\t\t\terr = errors.New(\"invalid base \" + Itoa(base));\n\t\t\t/* goto Error */ $s = 6; continue;\n\t\t/* } */ case 5:\n\t\tn = new $Uint64(0, 0);\n\t\tcutoff = cutoff64(base);\n\t\tmaxVal = (x = $shiftLeft64(new $Uint64(0, 1), (bitSize >>> 0)), new $Uint64(x.$high - 0, x.$low - 1));\n\t\ti = 0;\n\t\t/* while (true) { */ case 13:\n\t\t\t/* if (!(i < s.length)) { break; } */ if(!(i < s.length)) { $s = 14; continue; }\n\t\t\tv = 0;\n\t\t\td = s.charCodeAt(i);\n\t\t\t/* */ if (48 <= d && d <= 57) { $s = 15; continue; }\n\t\t\t/* */ if (97 <= d && d <= 122) { $s = 16; continue; }\n\t\t\t/* */ if (65 <= d && d <= 90) { $s = 17; continue; }\n\t\t\t/* */ $s = 18; continue;\n\t\t\t/* if (48 <= d && d <= 57) { */ case 15:\n\t\t\t\tv = d - 48 << 24 >>> 24;\n\t\t\t\t$s = 19; continue;\n\t\t\t/* } else if (97 <= d && d <= 122) { */ case 16:\n\t\t\t\tv = (d - 97 << 24 >>> 24) + 10 << 24 >>> 24;\n\t\t\t\t$s = 19; continue;\n\t\t\t/* } else if (65 <= d && d <= 90) { */ case 17:\n\t\t\t\tv = (d - 65 << 24 >>> 24) + 10 << 24 >>> 24;\n\t\t\t\t$s = 19; continue;\n\t\t\t/* } else { */ case 18:\n\t\t\t\tn = new $Uint64(0, 0);\n\t\t\t\terr = $pkg.ErrSyntax;\n\t\t\t\t/* goto Error */ $s = 6; continue;\n\t\t\t/* } */ case 19:\n\t\t\t/* */ if ((v >> 0) >= base) { $s = 20; continue; }\n\t\t\t/* */ $s = 21; continue;\n\t\t\t/* if ((v >> 0) >= base) { */ case 20:\n\t\t\t\tn = new $Uint64(0, 0);\n\t\t\t\terr = $pkg.ErrSyntax;\n\t\t\t\t/* goto Error */ $s = 6; continue;\n\t\t\t/* } */ case 21:\n\t\t\t/* */ if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { $s = 22; continue; }\n\t\t\t/* */ $s = 23; continue;\n\t\t\t/* if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { */ case 22:\n\t\t\t\tn = new $Uint64(4294967295, 4294967295);\n\t\t\t\terr = $pkg.ErrRange;\n\t\t\t\t/* goto Error */ $s = 6; continue;\n\t\t\t/* } */ case 23:\n\t\t\tn = $mul64(n, (new $Uint64(0, base)));\n\t\t\tn1 = (x$1 = new $Uint64(0, v), new $Uint64(n.$high + x$1.$high, n.$low + x$1.$low));\n\t\t\t/* */ if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { $s = 24; continue; }\n\t\t\t/* */ $s = 25; continue;\n\t\t\t/* if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { */ case 24:\n\t\t\t\tn = new $Uint64(4294967295, 4294967295);\n\t\t\t\terr = $pkg.ErrRange;\n\t\t\t\t/* goto Error */ $s = 6; continue;\n\t\t\t/* } */ case 25:\n\t\t\tn = n1;\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 13; continue; case 14:\n\t\t_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;\n\t\treturn [n, err];\n\t\t/* Error: */ case 6:\n\t\t_tmp$4 = n; _tmp$5 = new NumError.ptr(\"ParseUint\", s0, err); n = _tmp$4; err = _tmp$5;\n\t\treturn [n, err];\n\t\t/* */ $s = -1; case -1: } return; }\n\t};\n\t$pkg.ParseUint = ParseUint;\n\tParseInt = function(s, base, bitSize) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, base, bitSize, cutoff, err, i, n, neg, s, s0, un, x, x$1;\n\t\ti = new $Int64(0, 0);\n\t\terr = $ifaceNil;\n\t\tif (bitSize === 0) {\n\t\t\tbitSize = 32;\n\t\t}\n\t\tif (s.length === 0) {\n\t\t\t_tmp = new $Int64(0, 0); _tmp$1 = syntaxError(\"ParseInt\", s); i = _tmp; err = _tmp$1;\n\t\t\treturn [i, err];\n\t\t}\n\t\ts0 = s;\n\t\tneg = false;\n\t\tif (s.charCodeAt(0) === 43) {\n\t\t\ts = s.substring(1);\n\t\t} else if (s.charCodeAt(0) === 45) {\n\t\t\tneg = true;\n\t\t\ts = s.substring(1);\n\t\t}\n\t\tun = new $Uint64(0, 0);\n\t\t_tuple = ParseUint(s, base, bitSize); un = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual($assertType(err, ptrType).Err, $pkg.ErrRange))) {\n\t\t\t$assertType(err, ptrType).Func = \"ParseInt\";\n\t\t\t$assertType(err, ptrType).Num = s0;\n\t\t\t_tmp$2 = new $Int64(0, 0); _tmp$3 = err; i = _tmp$2; err = _tmp$3;\n\t\t\treturn [i, err];\n\t\t}\n\t\tcutoff = $shiftLeft64(new $Uint64(0, 1), ((bitSize - 1 >> 0) >>> 0));\n\t\tif (!neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low >= cutoff.$low))) {\n\t\t\t_tmp$4 = (x = new $Uint64(cutoff.$high - 0, cutoff.$low - 1), new $Int64(x.$high, x.$low)); _tmp$5 = rangeError(\"ParseInt\", s0); i = _tmp$4; err = _tmp$5;\n\t\t\treturn [i, err];\n\t\t}\n\t\tif (neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low > cutoff.$low))) {\n\t\t\t_tmp$6 = (x$1 = new $Int64(cutoff.$high, cutoff.$low), new $Int64(-x$1.$high, -x$1.$low)); _tmp$7 = rangeError(\"ParseInt\", s0); i = _tmp$6; err = _tmp$7;\n\t\t\treturn [i, err];\n\t\t}\n\t\tn = new $Int64(un.$high, un.$low);\n\t\tif (neg) {\n\t\t\tn = new $Int64(-n.$high, -n.$low);\n\t\t}\n\t\t_tmp$8 = n; _tmp$9 = $ifaceNil; i = _tmp$8; err = _tmp$9;\n\t\treturn [i, err];\n\t};\n\t$pkg.ParseInt = ParseInt;\n\tAtoi = function(s) {\n\t\tvar $ptr, _tmp, _tmp$1, _tuple, err, i, i64, s;\n\t\ti = 0;\n\t\terr = $ifaceNil;\n\t\t_tuple = ParseInt(s, 10, 0); i64 = _tuple[0]; err = _tuple[1];\n\t\t_tmp = ((i64.$low + ((i64.$high >> 31) * 4294967296)) >> 0); _tmp$1 = err; i = _tmp; err = _tmp$1;\n\t\treturn [i, err];\n\t};\n\t$pkg.Atoi = Atoi;\n\tdecimal.ptr.prototype.String = function() {\n\t\tvar $ptr, a, buf, n, w;\n\t\ta = this;\n\t\tn = 10 + a.nd >> 0;\n\t\tif (a.dp > 0) {\n\t\t\tn = n + (a.dp) >> 0;\n\t\t}\n\t\tif (a.dp < 0) {\n\t\t\tn = n + (-a.dp) >> 0;\n\t\t}\n\t\tbuf = $makeSlice(sliceType$6, n);\n\t\tw = 0;\n\t\tif (a.nd === 0) {\n\t\t\treturn \"0\";\n\t\t} else if (a.dp <= 0) {\n\t\t\t((w < 0 || w >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + w] = 48);\n\t\t\tw = w + (1) >> 0;\n\t\t\t((w < 0 || w >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + w] = 46);\n\t\t\tw = w + (1) >> 0;\n\t\t\tw = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;\n\t\t\tw = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;\n\t\t} else if (a.dp < a.nd) {\n\t\t\tw = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.dp))) >> 0;\n\t\t\t((w < 0 || w >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + w] = 46);\n\t\t\tw = w + (1) >> 0;\n\t\t\tw = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), a.dp, a.nd))) >> 0;\n\t\t} else {\n\t\t\tw = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;\n\t\t\tw = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;\n\t\t}\n\t\treturn $bytesToString($subslice(buf, 0, w));\n\t};\n\tdecimal.prototype.String = function() { return this.$val.String(); };\n\tdigitZero = function(dst) {\n\t\tvar $ptr, _i, _ref, dst, i;\n\t\t_ref = dst;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\t((i < 0 || i >= dst.$length) ? $throwRuntimeError(\"index out of range\") : dst.$array[dst.$offset + i] = 48);\n\t\t\t_i++;\n\t\t}\n\t\treturn dst.$length;\n\t};\n\ttrim = function(a) {\n\t\tvar $ptr, a, x, x$1;\n\t\twhile (true) {\n\t\t\tif (!(a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError(\"index out of range\") : x[x$1])) === 48))) { break; }\n\t\t\ta.nd = a.nd - (1) >> 0;\n\t\t}\n\t\tif (a.nd === 0) {\n\t\t\ta.dp = 0;\n\t\t}\n\t};\n\tdecimal.ptr.prototype.Assign = function(v) {\n\t\tvar $ptr, a, buf, n, v, v1, x, x$1, x$2;\n\t\ta = this;\n\t\tbuf = $clone(arrayType.zero(), arrayType);\n\t\tn = 0;\n\t\twhile (true) {\n\t\t\tif (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }\n\t\t\tv1 = $div64(v, new $Uint64(0, 10), false);\n\t\t\tv = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));\n\t\t\t((n < 0 || n >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24));\n\t\t\tn = n + (1) >> 0;\n\t\t\tv = v1;\n\t\t}\n\t\ta.nd = 0;\n\t\tn = n - (1) >> 0;\n\t\twhile (true) {\n\t\t\tif (!(n >= 0)) { break; }\n\t\t\t(x$1 = a.d, x$2 = a.nd, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError(\"index out of range\") : x$1[x$2] = ((n < 0 || n >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[n])));\n\t\t\ta.nd = a.nd + (1) >> 0;\n\t\t\tn = n - (1) >> 0;\n\t\t}\n\t\ta.dp = a.nd;\n\t\ttrim(a);\n\t};\n\tdecimal.prototype.Assign = function(v) { return this.$val.Assign(v); };\n\trightShift = function(a, k) {\n\t\tvar $ptr, a, c, c$1, dig, dig$1, k, n, r, w, x, x$1, x$2, x$3, y, y$1;\n\t\tr = 0;\n\t\tw = 0;\n\t\tn = 0;\n\t\twhile (true) {\n\t\t\tif (!(((n >> $min(k, 31)) >> 0) === 0)) { break; }\n\t\t\tif (r >= a.nd) {\n\t\t\t\tif (n === 0) {\n\t\t\t\t\ta.nd = 0;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!(((n >> $min(k, 31)) >> 0) === 0)) { break; }\n\t\t\t\t\tn = n * 10 >> 0;\n\t\t\t\t\tr = r + (1) >> 0;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tc = ((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError(\"index out of range\") : x[r])) >> 0);\n\t\t\tn = ((n * 10 >> 0) + c >> 0) - 48 >> 0;\n\t\t\tr = r + (1) >> 0;\n\t\t}\n\t\ta.dp = a.dp - ((r - 1 >> 0)) >> 0;\n\t\twhile (true) {\n\t\t\tif (!(r < a.nd)) { break; }\n\t\t\tc$1 = ((x$1 = a.d, ((r < 0 || r >= x$1.length) ? $throwRuntimeError(\"index out of range\") : x$1[r])) >> 0);\n\t\t\tdig = (n >> $min(k, 31)) >> 0;\n\t\t\tn = n - (((y = k, y < 32 ? (dig << y) : 0) >> 0)) >> 0;\n\t\t\t(x$2 = a.d, ((w < 0 || w >= x$2.length) ? $throwRuntimeError(\"index out of range\") : x$2[w] = ((dig + 48 >> 0) << 24 >>> 24)));\n\t\t\tw = w + (1) >> 0;\n\t\t\tn = ((n * 10 >> 0) + c$1 >> 0) - 48 >> 0;\n\t\t\tr = r + (1) >> 0;\n\t\t}\n\t\twhile (true) {\n\t\t\tif (!(n > 0)) { break; }\n\t\t\tdig$1 = (n >> $min(k, 31)) >> 0;\n\t\t\tn = n - (((y$1 = k, y$1 < 32 ? (dig$1 << y$1) : 0) >> 0)) >> 0;\n\t\t\tif (w < 800) {\n\t\t\t\t(x$3 = a.d, ((w < 0 || w >= x$3.length) ? $throwRuntimeError(\"index out of range\") : x$3[w] = ((dig$1 + 48 >> 0) << 24 >>> 24)));\n\t\t\t\tw = w + (1) >> 0;\n\t\t\t} else if (dig$1 > 0) {\n\t\t\t\ta.trunc = true;\n\t\t\t}\n\t\t\tn = n * 10 >> 0;\n\t\t}\n\t\ta.nd = w;\n\t\ttrim(a);\n\t};\n\tprefixIsLessThan = function(b, s) {\n\t\tvar $ptr, b, i, s;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < s.length)) { break; }\n\t\t\tif (i >= b.$length) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (!((((i < 0 || i >= b.$length) ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {\n\t\t\t\treturn ((i < 0 || i >= b.$length) ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + i]) < s.charCodeAt(i);\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn false;\n\t};\n\tleftShift = function(a, k) {\n\t\tvar $ptr, _q, _q$1, a, delta, k, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;\n\t\tdelta = ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError(\"index out of range\") : leftcheats.$array[leftcheats.$offset + k]).delta;\n\t\tif (prefixIsLessThan($subslice(new sliceType$6(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError(\"index out of range\") : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {\n\t\t\tdelta = delta - (1) >> 0;\n\t\t}\n\t\tr = a.nd;\n\t\tw = a.nd + delta >> 0;\n\t\tn = 0;\n\t\tr = r - (1) >> 0;\n\t\twhile (true) {\n\t\t\tif (!(r >= 0)) { break; }\n\t\t\tn = n + (((y = k, y < 32 ? (((((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError(\"index out of range\") : x[r])) >> 0) - 48 >> 0)) << y) : 0) >> 0)) >> 0;\n\t\t\tquo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t\trem = n - (10 * quo >> 0) >> 0;\n\t\t\tw = w - (1) >> 0;\n\t\t\tif (w < 800) {\n\t\t\t\t(x$1 = a.d, ((w < 0 || w >= x$1.length) ? $throwRuntimeError(\"index out of range\") : x$1[w] = ((rem + 48 >> 0) << 24 >>> 24)));\n\t\t\t} else if (!((rem === 0))) {\n\t\t\t\ta.trunc = true;\n\t\t\t}\n\t\t\tn = quo;\n\t\t\tr = r - (1) >> 0;\n\t\t}\n\t\twhile (true) {\n\t\t\tif (!(n > 0)) { break; }\n\t\t\tquo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t\trem$1 = n - (10 * quo$1 >> 0) >> 0;\n\t\t\tw = w - (1) >> 0;\n\t\t\tif (w < 800) {\n\t\t\t\t(x$2 = a.d, ((w < 0 || w >= x$2.length) ? $throwRuntimeError(\"index out of range\") : x$2[w] = ((rem$1 + 48 >> 0) << 24 >>> 24)));\n\t\t\t} else if (!((rem$1 === 0))) {\n\t\t\t\ta.trunc = true;\n\t\t\t}\n\t\t\tn = quo$1;\n\t\t}\n\t\ta.nd = a.nd + (delta) >> 0;\n\t\tif (a.nd >= 800) {\n\t\t\ta.nd = 800;\n\t\t}\n\t\ta.dp = a.dp + (delta) >> 0;\n\t\ttrim(a);\n\t};\n\tdecimal.ptr.prototype.Shift = function(k) {\n\t\tvar $ptr, a, k;\n\t\ta = this;\n\t\tif (a.nd === 0) {\n\t\t} else if (k > 0) {\n\t\t\twhile (true) {\n\t\t\t\tif (!(k > 27)) { break; }\n\t\t\t\tleftShift(a, 27);\n\t\t\t\tk = k - (27) >> 0;\n\t\t\t}\n\t\t\tleftShift(a, (k >>> 0));\n\t\t} else if (k < 0) {\n\t\t\twhile (true) {\n\t\t\t\tif (!(k < -27)) { break; }\n\t\t\t\trightShift(a, 27);\n\t\t\t\tk = k + (27) >> 0;\n\t\t\t}\n\t\t\trightShift(a, (-k >>> 0));\n\t\t}\n\t};\n\tdecimal.prototype.Shift = function(k) { return this.$val.Shift(k); };\n\tshouldRoundUp = function(a, nd) {\n\t\tvar $ptr, _r, a, nd, x, x$1, x$2, x$3;\n\t\tif (nd < 0 || nd >= a.nd) {\n\t\t\treturn false;\n\t\t}\n\t\tif (((x = a.d, ((nd < 0 || nd >= x.length) ? $throwRuntimeError(\"index out of range\") : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {\n\t\t\tif (a.trunc) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError(\"index out of range\") : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError(\"integer divide by zero\")) === 0));\n\t\t}\n\t\treturn (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? $throwRuntimeError(\"index out of range\") : x$3[nd])) >= 53;\n\t};\n\tdecimal.ptr.prototype.Round = function(nd) {\n\t\tvar $ptr, a, nd;\n\t\ta = this;\n\t\tif (nd < 0 || nd >= a.nd) {\n\t\t\treturn;\n\t\t}\n\t\tif (shouldRoundUp(a, nd)) {\n\t\t\ta.RoundUp(nd);\n\t\t} else {\n\t\t\ta.RoundDown(nd);\n\t\t}\n\t};\n\tdecimal.prototype.Round = function(nd) { return this.$val.Round(nd); };\n\tdecimal.ptr.prototype.RoundDown = function(nd) {\n\t\tvar $ptr, a, nd;\n\t\ta = this;\n\t\tif (nd < 0 || nd >= a.nd) {\n\t\t\treturn;\n\t\t}\n\t\ta.nd = nd;\n\t\ttrim(a);\n\t};\n\tdecimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };\n\tdecimal.ptr.prototype.RoundUp = function(nd) {\n\t\tvar $ptr, a, c, i, nd, x, x$1, x$2;\n\t\ta = this;\n\t\tif (nd < 0 || nd >= a.nd) {\n\t\t\treturn;\n\t\t}\n\t\ti = nd - 1 >> 0;\n\t\twhile (true) {\n\t\t\tif (!(i >= 0)) { break; }\n\t\t\tc = (x = a.d, ((i < 0 || i >= x.length) ? $throwRuntimeError(\"index out of range\") : x[i]));\n\t\t\tif (c < 57) {\n\t\t\t\t(x$2 = a.d, ((i < 0 || i >= x$2.length) ? $throwRuntimeError(\"index out of range\") : x$2[i] = (x$1 = a.d, ((i < 0 || i >= x$1.length) ? $throwRuntimeError(\"index out of range\") : x$1[i])) + (1) << 24 >>> 24));\n\t\t\t\ta.nd = i + 1 >> 0;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ti = i - (1) >> 0;\n\t\t}\n\t\ta.d[0] = 49;\n\t\ta.nd = 1;\n\t\ta.dp = a.dp + (1) >> 0;\n\t};\n\tdecimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };\n\tdecimal.ptr.prototype.RoundedInteger = function() {\n\t\tvar $ptr, a, i, n, x, x$1, x$2, x$3;\n\t\ta = this;\n\t\tif (a.dp > 20) {\n\t\t\treturn new $Uint64(4294967295, 4294967295);\n\t\t}\n\t\ti = 0;\n\t\tn = new $Uint64(0, 0);\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < a.dp && i < a.nd)) { break; }\n\t\t\tn = (x = $mul64(n, new $Uint64(0, 10)), x$1 = new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? $throwRuntimeError(\"index out of range\") : x$2[i])) - 48 << 24 >>> 24)), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\twhile (true) {\n\t\t\tif (!(i < a.dp)) { break; }\n\t\t\tn = $mul64(n, (new $Uint64(0, 10)));\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\tif (shouldRoundUp(a, a.dp)) {\n\t\t\tn = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));\n\t\t}\n\t\treturn n;\n\t};\n\tdecimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };\n\textFloat.ptr.prototype.floatBits = function(flt) {\n\t\tvar $ptr, bits, exp, f, flt, mant, n, overflow, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2;\n\t\tbits = new $Uint64(0, 0);\n\t\toverflow = false;\n\t\tf = this;\n\t\tf.Normalize();\n\t\texp = f.exp + 63 >> 0;\n\t\tif (exp < (flt.bias + 1 >> 0)) {\n\t\t\tn = (flt.bias + 1 >> 0) - exp >> 0;\n\t\t\tf.mant = $shiftRightUint64(f.mant, ((n >>> 0)));\n\t\t\texp = exp + (n) >> 0;\n\t\t}\n\t\tmant = $shiftRightUint64(f.mant, ((63 - flt.mantbits >>> 0)));\n\t\tif (!((x = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, 1), ((62 - flt.mantbits >>> 0))), new $Uint64(x$1.$high & x$2.$high, (x$1.$low & x$2.$low) >>> 0)), (x.$high === 0 && x.$low === 0)))) {\n\t\t\tmant = (x$3 = new $Uint64(0, 1), new $Uint64(mant.$high + x$3.$high, mant.$low + x$3.$low));\n\t\t}\n\t\tif ((x$4 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$4.$high && mant.$low === x$4.$low))) {\n\t\t\tmant = $shiftRightUint64(mant, (1));\n\t\t\texp = exp + (1) >> 0;\n\t\t}\n\t\tif ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) {\n\t\t\tmant = new $Uint64(0, 0);\n\t\t\texp = (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;\n\t\t\toverflow = true;\n\t\t} else if ((x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$6.$high, (mant.$low & x$6.$low) >>> 0)), (x$5.$high === 0 && x$5.$low === 0))) {\n\t\t\texp = flt.bias;\n\t\t}\n\t\tbits = (x$7 = (x$8 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$8.$high - 0, x$8.$low - 1)), new $Uint64(mant.$high & x$7.$high, (mant.$low & x$7.$low) >>> 0));\n\t\tbits = (x$9 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$9.$high, (bits.$low | x$9.$low) >>> 0));\n\t\tif (f.neg) {\n\t\t\tbits = (x$10 = $shiftLeft64(new $Uint64(0, 1), ((flt.mantbits + flt.expbits >>> 0))), new $Uint64(bits.$high | x$10.$high, (bits.$low | x$10.$low) >>> 0));\n\t\t}\n\t\treturn [bits, overflow];\n\t};\n\textFloat.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };\n\textFloat.ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {\n\t\tvar $ptr, _tmp, _tmp$1, exp, expBiased, f, flt, lower, mant, neg, upper, x, x$1, x$2, x$3, x$4;\n\t\tlower = new extFloat.ptr();\n\t\tupper = new extFloat.ptr();\n\t\tf = this;\n\t\tf.mant = mant;\n\t\tf.exp = exp - (flt.mantbits >> 0) >> 0;\n\t\tf.neg = neg;\n\t\tif (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, (-f.exp >>> 0))), (-f.exp >>> 0)), (mant.$high === x.$high && mant.$low === x.$low))) {\n\t\t\tf.mant = $shiftRightUint64(f.mant, ((-f.exp >>> 0)));\n\t\t\tf.exp = 0;\n\t\t\t_tmp = $clone(f, extFloat); _tmp$1 = $clone(f, extFloat); $copy(lower, _tmp, extFloat); $copy(upper, _tmp$1, extFloat);\n\t\t\treturn [lower, upper];\n\t\t}\n\t\texpBiased = exp - flt.bias >> 0;\n\t\t$copy(upper, new extFloat.ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.$high + 0, x$1.$low + 1)), f.exp - 1 >> 0, f.neg), extFloat);\n\t\tif (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) || (expBiased === 1)) {\n\t\t\t$copy(lower, new extFloat.ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.$high - 0, x$3.$low - 1)), f.exp - 1 >> 0, f.neg), extFloat);\n\t\t} else {\n\t\t\t$copy(lower, new extFloat.ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.$high - 0, x$4.$low - 1)), f.exp - 2 >> 0, f.neg), extFloat);\n\t\t}\n\t\treturn [lower, upper];\n\t};\n\textFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };\n\textFloat.ptr.prototype.Normalize = function() {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, exp, f, mant, shift, x, x$1, x$2, x$3, x$4, x$5;\n\t\tshift = 0;\n\t\tf = this;\n\t\t_tmp = f.mant; _tmp$1 = f.exp; mant = _tmp; exp = _tmp$1;\n\t\tif ((mant.$high === 0 && mant.$low === 0)) {\n\t\t\tshift = 0;\n\t\t\treturn shift;\n\t\t}\n\t\tif ((x = $shiftRightUint64(mant, 32), (x.$high === 0 && x.$low === 0))) {\n\t\t\tmant = $shiftLeft64(mant, (32));\n\t\t\texp = exp - (32) >> 0;\n\t\t}\n\t\tif ((x$1 = $shiftRightUint64(mant, 48), (x$1.$high === 0 && x$1.$low === 0))) {\n\t\t\tmant = $shiftLeft64(mant, (16));\n\t\t\texp = exp - (16) >> 0;\n\t\t}\n\t\tif ((x$2 = $shiftRightUint64(mant, 56), (x$2.$high === 0 && x$2.$low === 0))) {\n\t\t\tmant = $shiftLeft64(mant, (8));\n\t\t\texp = exp - (8) >> 0;\n\t\t}\n\t\tif ((x$3 = $shiftRightUint64(mant, 60), (x$3.$high === 0 && x$3.$low === 0))) {\n\t\t\tmant = $shiftLeft64(mant, (4));\n\t\t\texp = exp - (4) >> 0;\n\t\t}\n\t\tif ((x$4 = $shiftRightUint64(mant, 62), (x$4.$high === 0 && x$4.$low === 0))) {\n\t\t\tmant = $shiftLeft64(mant, (2));\n\t\t\texp = exp - (2) >> 0;\n\t\t}\n\t\tif ((x$5 = $shiftRightUint64(mant, 63), (x$5.$high === 0 && x$5.$low === 0))) {\n\t\t\tmant = $shiftLeft64(mant, (1));\n\t\t\texp = exp - (1) >> 0;\n\t\t}\n\t\tshift = ((f.exp - exp >> 0) >>> 0);\n\t\t_tmp$2 = mant; _tmp$3 = exp; f.mant = _tmp$2; f.exp = _tmp$3;\n\t\treturn shift;\n\t};\n\textFloat.prototype.Normalize = function() { return this.$val.Normalize(); };\n\textFloat.ptr.prototype.Multiply = function(g) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, cross1, cross2, f, fhi, flo, g, ghi, glo, rem, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;\n\t\tf = this;\n\t\tg = $clone(g, extFloat);\n\t\t_tmp = $shiftRightUint64(f.mant, 32); _tmp$1 = new $Uint64(0, (f.mant.$low >>> 0)); fhi = _tmp; flo = _tmp$1;\n\t\t_tmp$2 = $shiftRightUint64(g.mant, 32); _tmp$3 = new $Uint64(0, (g.mant.$low >>> 0)); ghi = _tmp$2; glo = _tmp$3;\n\t\tcross1 = $mul64(fhi, glo);\n\t\tcross2 = $mul64(flo, ghi);\n\t\tf.mant = (x = (x$1 = $mul64(fhi, ghi), x$2 = $shiftRightUint64(cross1, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), x$3 = $shiftRightUint64(cross2, 32), new $Uint64(x.$high + x$3.$high, x.$low + x$3.$low));\n\t\trem = (x$4 = (x$5 = new $Uint64(0, (cross1.$low >>> 0)), x$6 = new $Uint64(0, (cross2.$low >>> 0)), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $shiftRightUint64(($mul64(flo, glo)), 32), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));\n\t\trem = (x$8 = new $Uint64(0, 2147483648), new $Uint64(rem.$high + x$8.$high, rem.$low + x$8.$low));\n\t\tf.mant = (x$9 = f.mant, x$10 = ($shiftRightUint64(rem, 32)), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));\n\t\tf.exp = (f.exp + g.exp >> 0) + 64 >> 0;\n\t};\n\textFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };\n\textFloat.ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {\n\t\tvar $ptr, _q, _r, adjExp, denormalExp, errors$1, exp10, extrabits, f, flt, halfway, i, mant_extra, mantissa, neg, ok, shift, trunc, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y;\n\t\tok = false;\n\t\tf = this;\n\t\terrors$1 = 0;\n\t\tif (trunc) {\n\t\t\terrors$1 = errors$1 + (4) >> 0;\n\t\t}\n\t\tf.mant = mantissa;\n\t\tf.exp = 0;\n\t\tf.neg = neg;\n\t\ti = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\tif (exp10 < -348 || i >= 87) {\n\t\t\tok = false;\n\t\t\treturn ok;\n\t\t}\n\t\tadjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : $throwRuntimeError(\"integer divide by zero\"));\n\t\tif (adjExp < 19 && (x = (x$1 = 19 - adjExp >> 0, ((x$1 < 0 || x$1 >= uint64pow10.length) ? $throwRuntimeError(\"index out of range\") : uint64pow10[x$1])), (mantissa.$high < x.$high || (mantissa.$high === x.$high && mantissa.$low < x.$low)))) {\n\t\t\tf.mant = $mul64(f.mant, (((adjExp < 0 || adjExp >= uint64pow10.length) ? $throwRuntimeError(\"index out of range\") : uint64pow10[adjExp])));\n\t\t\tf.Normalize();\n\t\t} else {\n\t\t\tf.Normalize();\n\t\t\tf.Multiply(((adjExp < 0 || adjExp >= smallPowersOfTen.length) ? $throwRuntimeError(\"index out of range\") : smallPowersOfTen[adjExp]));\n\t\t\terrors$1 = errors$1 + (4) >> 0;\n\t\t}\n\t\tf.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError(\"index out of range\") : powersOfTen[i]));\n\t\tif (errors$1 > 0) {\n\t\t\terrors$1 = errors$1 + (1) >> 0;\n\t\t}\n\t\terrors$1 = errors$1 + (4) >> 0;\n\t\tshift = f.Normalize();\n\t\terrors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;\n\t\tdenormalExp = flt.bias - 63 >> 0;\n\t\textrabits = 0;\n\t\tif (f.exp <= denormalExp) {\n\t\t\textrabits = (((63 - flt.mantbits >>> 0) + 1 >>> 0) + ((denormalExp - f.exp >> 0) >>> 0) >>> 0);\n\t\t} else {\n\t\t\textrabits = (63 - flt.mantbits >>> 0);\n\t\t}\n\t\thalfway = $shiftLeft64(new $Uint64(0, 1), ((extrabits - 1 >>> 0)));\n\t\tmant_extra = (x$2 = f.mant, x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), extrabits), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));\n\t\tif ((x$5 = (x$6 = new $Int64(halfway.$high, halfway.$low), x$7 = new $Int64(0, errors$1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low)), x$8 = new $Int64(mant_extra.$high, mant_extra.$low), (x$5.$high < x$8.$high || (x$5.$high === x$8.$high && x$5.$low < x$8.$low))) && (x$9 = new $Int64(mant_extra.$high, mant_extra.$low), x$10 = (x$11 = new $Int64(halfway.$high, halfway.$low), x$12 = new $Int64(0, errors$1), new $Int64(x$11.$high + x$12.$high, x$11.$low + x$12.$low)), (x$9.$high < x$10.$high || (x$9.$high === x$10.$high && x$9.$low < x$10.$low)))) {\n\t\t\tok = false;\n\t\t\treturn ok;\n\t\t}\n\t\tok = true;\n\t\treturn ok;\n\t};\n\textFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };\n\textFloat.ptr.prototype.frexp10 = function() {\n\t\tvar $ptr, _q, _q$1, _tmp, _tmp$1, approxExp10, exp, exp10, f, i, index;\n\t\texp10 = 0;\n\t\tindex = 0;\n\t\tf = this;\n\t\tapproxExp10 = (_q = (((-46 - f.exp >> 0)) * 28 >> 0) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\ti = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\tLoop:\n\t\twhile (true) {\n\t\t\texp = (f.exp + ((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError(\"index out of range\") : powersOfTen[i]).exp >> 0) + 64 >> 0;\n\t\t\tif (exp < -60) {\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t} else if (exp > -32) {\n\t\t\t\ti = i - (1) >> 0;\n\t\t\t} else {\n\t\t\t\tbreak Loop;\n\t\t\t}\n\t\t}\n\t\tf.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError(\"index out of range\") : powersOfTen[i]));\n\t\t_tmp = -((-348 + (i * 8 >> 0) >> 0)); _tmp$1 = i; exp10 = _tmp; index = _tmp$1;\n\t\treturn [exp10, index];\n\t};\n\textFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };\n\tfrexp10Many = function(a, b, c) {\n\t\tvar $ptr, _tuple, a, b, c, exp10, i;\n\t\texp10 = 0;\n\t\t_tuple = c.frexp10(); exp10 = _tuple[0]; i = _tuple[1];\n\t\ta.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError(\"index out of range\") : powersOfTen[i]));\n\t\tb.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError(\"index out of range\") : powersOfTen[i]));\n\t\treturn exp10;\n\t};\n\textFloat.ptr.prototype.FixedDecimal = function(d, n) {\n\t\tvar $ptr, _q, _q$1, _tmp, _tmp$1, _tuple, buf, d, digit, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, n, nd, needed, nonAsciiName, ok, pos, pow, pow10, rest, shift, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;\n\t\tf = this;\n\t\tif ((x = f.mant, (x.$high === 0 && x.$low === 0))) {\n\t\t\td.nd = 0;\n\t\t\td.dp = 0;\n\t\t\td.neg = f.neg;\n\t\t\treturn true;\n\t\t}\n\t\tif (n === 0) {\n\t\t\t$panic(new $String(\"strconv: internal error: extFloat.FixedDecimal called with n == 0\"));\n\t\t}\n\t\tf.Normalize();\n\t\t_tuple = f.frexp10(); exp10 = _tuple[0];\n\t\tshift = (-f.exp >>> 0);\n\t\tinteger = ($shiftRightUint64(f.mant, shift).$low >>> 0);\n\t\tfraction = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));\n\t\tnonAsciiName = new $Uint64(0, 1);\n\t\tneeded = n;\n\t\tintegerDigits = 0;\n\t\tpow10 = new $Uint64(0, 1);\n\t\t_tmp = 0; _tmp$1 = new $Uint64(0, 1); i = _tmp; pow = _tmp$1;\n\t\twhile (true) {\n\t\t\tif (!(i < 20)) { break; }\n\t\t\tif ((x$3 = new $Uint64(0, integer), (pow.$high > x$3.$high || (pow.$high === x$3.$high && pow.$low > x$3.$low)))) {\n\t\t\t\tintegerDigits = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpow = $mul64(pow, (new $Uint64(0, 10)));\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\trest = integer;\n\t\tif (integerDigits > needed) {\n\t\t\tpow10 = (x$4 = integerDigits - needed >> 0, ((x$4 < 0 || x$4 >= uint64pow10.length) ? $throwRuntimeError(\"index out of range\") : uint64pow10[x$4]));\n\t\t\tinteger = (_q = integer / ((pow10.$low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t\trest = rest - ((x$5 = (pow10.$low >>> 0), (((integer >>> 16 << 16) * x$5 >>> 0) + (integer << 16 >>> 16) * x$5) >>> 0)) >>> 0;\n\t\t} else {\n\t\t\trest = 0;\n\t\t}\n\t\tbuf = $clone(arrayType$1.zero(), arrayType$1);\n\t\tpos = 32;\n\t\tv = integer;\n\t\twhile (true) {\n\t\t\tif (!(v > 0)) { break; }\n\t\t\tv1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t\tv = v - (((((10 >>> 16 << 16) * v1 >>> 0) + (10 << 16 >>> 16) * v1) >>> 0)) >>> 0;\n\t\t\tpos = pos - (1) >> 0;\n\t\t\t((pos < 0 || pos >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[pos] = ((v + 48 >>> 0) << 24 >>> 24));\n\t\t\tv = v1;\n\t\t}\n\t\ti$1 = pos;\n\t\twhile (true) {\n\t\t\tif (!(i$1 < 32)) { break; }\n\t\t\t(x$6 = d.d, x$7 = i$1 - pos >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? $throwRuntimeError(\"index out of range\") : x$6.$array[x$6.$offset + x$7] = ((i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[i$1])));\n\t\t\ti$1 = i$1 + (1) >> 0;\n\t\t}\n\t\tnd = 32 - pos >> 0;\n\t\td.nd = nd;\n\t\td.dp = integerDigits + exp10 >> 0;\n\t\tneeded = needed - (nd) >> 0;\n\t\tif (needed > 0) {\n\t\t\tif (!((rest === 0)) || !((pow10.$high === 0 && pow10.$low === 1))) {\n\t\t\t\t$panic(new $String(\"strconv: internal error, rest != 0 but needed > 0\"));\n\t\t\t}\n\t\t\twhile (true) {\n\t\t\t\tif (!(needed > 0)) { break; }\n\t\t\t\tfraction = $mul64(fraction, (new $Uint64(0, 10)));\n\t\t\t\tnonAsciiName = $mul64(nonAsciiName, (new $Uint64(0, 10)));\n\t\t\t\tif ((x$8 = $mul64(new $Uint64(0, 2), nonAsciiName), x$9 = $shiftLeft64(new $Uint64(0, 1), shift), (x$8.$high > x$9.$high || (x$8.$high === x$9.$high && x$8.$low > x$9.$low)))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tdigit = $shiftRightUint64(fraction, shift);\n\t\t\t\t(x$10 = d.d, ((nd < 0 || nd >= x$10.$length) ? $throwRuntimeError(\"index out of range\") : x$10.$array[x$10.$offset + nd] = (new $Uint64(digit.$high + 0, digit.$low + 48).$low << 24 >>> 24)));\n\t\t\t\tfraction = (x$11 = $shiftLeft64(digit, shift), new $Uint64(fraction.$high - x$11.$high, fraction.$low - x$11.$low));\n\t\t\t\tnd = nd + (1) >> 0;\n\t\t\t\tneeded = needed - (1) >> 0;\n\t\t\t}\n\t\t\td.nd = nd;\n\t\t}\n\t\tok = adjustLastDigitFixed(d, (x$12 = $shiftLeft64(new $Uint64(0, rest), shift), new $Uint64(x$12.$high | fraction.$high, (x$12.$low | fraction.$low) >>> 0)), pow10, shift, nonAsciiName);\n\t\tif (!ok) {\n\t\t\treturn false;\n\t\t}\n\t\ti$2 = d.nd - 1 >> 0;\n\t\twhile (true) {\n\t\t\tif (!(i$2 >= 0)) { break; }\n\t\t\tif (!(((x$13 = d.d, ((i$2 < 0 || i$2 >= x$13.$length) ? $throwRuntimeError(\"index out of range\") : x$13.$array[x$13.$offset + i$2])) === 48))) {\n\t\t\t\td.nd = i$2 + 1 >> 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti$2 = i$2 - (1) >> 0;\n\t\t}\n\t\treturn true;\n\t};\n\textFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };\n\tadjustLastDigitFixed = function(d, num, den, shift, nonAsciiName) {\n\t\tvar $ptr, d, den, i, nonAsciiName, num, shift, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;\n\t\tif ((x = $shiftLeft64(den, shift), (num.$high > x.$high || (num.$high === x.$high && num.$low > x.$low)))) {\n\t\t\t$panic(new $String(\"strconv: num > den<<shift in adjustLastDigitFixed\"));\n\t\t}\n\t\tif ((x$1 = $mul64(new $Uint64(0, 2), nonAsciiName), x$2 = $shiftLeft64(den, shift), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {\n\t\t\t$panic(new $String(\"strconv: \\xCE\\xB5 > (den<<shift)/2\"));\n\t\t}\n\t\tif ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high + nonAsciiName.$high, num.$low + nonAsciiName.$low))), x$4 = $shiftLeft64(den, shift), (x$3.$high < x$4.$high || (x$3.$high === x$4.$high && x$3.$low < x$4.$low)))) {\n\t\t\treturn true;\n\t\t}\n\t\tif ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high - nonAsciiName.$high, num.$low - nonAsciiName.$low))), x$6 = $shiftLeft64(den, shift), (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)))) {\n\t\t\ti = d.nd - 1 >> 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(i >= 0)) { break; }\n\t\t\t\tif ((x$7 = d.d, ((i < 0 || i >= x$7.$length) ? $throwRuntimeError(\"index out of range\") : x$7.$array[x$7.$offset + i])) === 57) {\n\t\t\t\t\td.nd = d.nd - (1) >> 0;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti = i - (1) >> 0;\n\t\t\t}\n\t\t\tif (i < 0) {\n\t\t\t\t(x$8 = d.d, (0 >= x$8.$length ? $throwRuntimeError(\"index out of range\") : x$8.$array[x$8.$offset + 0] = 49));\n\t\t\t\td.nd = 1;\n\t\t\t\td.dp = d.dp + (1) >> 0;\n\t\t\t} else {\n\t\t\t\t(x$10 = d.d, ((i < 0 || i >= x$10.$length) ? $throwRuntimeError(\"index out of range\") : x$10.$array[x$10.$offset + i] = (x$9 = d.d, ((i < 0 || i >= x$9.$length) ? $throwRuntimeError(\"index out of range\") : x$9.$array[x$9.$offset + i])) + (1) << 24 >>> 24));\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t};\n\textFloat.ptr.prototype.ShortestDecimal = function(d, lower, upper) {\n\t\tvar $ptr, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, allowance, buf, currentDiff, d, digit, digit$1, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, lower, multiplier, n, nd, pow, pow$1, shift, targetDiff, upper, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$3, x$4, x$5, x$6, x$7, x$8, x$9;\n\t\tf = this;\n\t\tif ((x = f.mant, (x.$high === 0 && x.$low === 0))) {\n\t\t\td.nd = 0;\n\t\t\td.dp = 0;\n\t\t\td.neg = f.neg;\n\t\t\treturn true;\n\t\t}\n\t\tif ((f.exp === 0) && $equal(lower, f, extFloat) && $equal(lower, upper, extFloat)) {\n\t\t\tbuf = $clone(arrayType.zero(), arrayType);\n\t\t\tn = 23;\n\t\t\tv = f.mant;\n\t\t\twhile (true) {\n\t\t\t\tif (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }\n\t\t\t\tv1 = $div64(v, new $Uint64(0, 10), false);\n\t\t\t\tv = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x$1.$high, v.$low - x$1.$low));\n\t\t\t\t((n < 0 || n >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24));\n\t\t\t\tn = n - (1) >> 0;\n\t\t\t\tv = v1;\n\t\t\t}\n\t\t\tnd = (24 - n >> 0) - 1 >> 0;\n\t\t\ti = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(i < nd)) { break; }\n\t\t\t\t(x$3 = d.d, ((i < 0 || i >= x$3.$length) ? $throwRuntimeError(\"index out of range\") : x$3.$array[x$3.$offset + i] = (x$2 = (n + 1 >> 0) + i >> 0, ((x$2 < 0 || x$2 >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[x$2]))));\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t\t_tmp = nd; _tmp$1 = nd; d.nd = _tmp; d.dp = _tmp$1;\n\t\t\twhile (true) {\n\t\t\t\tif (!(d.nd > 0 && ((x$4 = d.d, x$5 = d.nd - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError(\"index out of range\") : x$4.$array[x$4.$offset + x$5])) === 48))) { break; }\n\t\t\t\td.nd = d.nd - (1) >> 0;\n\t\t\t}\n\t\t\tif (d.nd === 0) {\n\t\t\t\td.dp = 0;\n\t\t\t}\n\t\t\td.neg = f.neg;\n\t\t\treturn true;\n\t\t}\n\t\tupper.Normalize();\n\t\tif (f.exp > upper.exp) {\n\t\t\tf.mant = $shiftLeft64(f.mant, (((f.exp - upper.exp >> 0) >>> 0)));\n\t\t\tf.exp = upper.exp;\n\t\t}\n\t\tif (lower.exp > upper.exp) {\n\t\t\tlower.mant = $shiftLeft64(lower.mant, (((lower.exp - upper.exp >> 0) >>> 0)));\n\t\t\tlower.exp = upper.exp;\n\t\t}\n\t\texp10 = frexp10Many(lower, f, upper);\n\t\tupper.mant = (x$6 = upper.mant, x$7 = new $Uint64(0, 1), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));\n\t\tlower.mant = (x$8 = lower.mant, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));\n\t\tshift = (-upper.exp >>> 0);\n\t\tinteger = ($shiftRightUint64(upper.mant, shift).$low >>> 0);\n\t\tfraction = (x$10 = upper.mant, x$11 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$10.$high - x$11.$high, x$10.$low - x$11.$low));\n\t\tallowance = (x$12 = upper.mant, x$13 = lower.mant, new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));\n\t\ttargetDiff = (x$14 = upper.mant, x$15 = f.mant, new $Uint64(x$14.$high - x$15.$high, x$14.$low - x$15.$low));\n\t\tintegerDigits = 0;\n\t\t_tmp$2 = 0; _tmp$3 = new $Uint64(0, 1); i$1 = _tmp$2; pow = _tmp$3;\n\t\twhile (true) {\n\t\t\tif (!(i$1 < 20)) { break; }\n\t\t\tif ((x$16 = new $Uint64(0, integer), (pow.$high > x$16.$high || (pow.$high === x$16.$high && pow.$low > x$16.$low)))) {\n\t\t\t\tintegerDigits = i$1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpow = $mul64(pow, (new $Uint64(0, 10)));\n\t\t\ti$1 = i$1 + (1) >> 0;\n\t\t}\n\t\ti$2 = 0;\n\t\twhile (true) {\n\t\t\tif (!(i$2 < integerDigits)) { break; }\n\t\t\tpow$1 = (x$17 = (integerDigits - i$2 >> 0) - 1 >> 0, ((x$17 < 0 || x$17 >= uint64pow10.length) ? $throwRuntimeError(\"index out of range\") : uint64pow10[x$17]));\n\t\t\tdigit = (_q = integer / (pow$1.$low >>> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t\t(x$18 = d.d, ((i$2 < 0 || i$2 >= x$18.$length) ? $throwRuntimeError(\"index out of range\") : x$18.$array[x$18.$offset + i$2] = ((digit + 48 >>> 0) << 24 >>> 24)));\n\t\t\tinteger = integer - ((x$19 = (pow$1.$low >>> 0), (((digit >>> 16 << 16) * x$19 >>> 0) + (digit << 16 >>> 16) * x$19) >>> 0)) >>> 0;\n\t\t\tcurrentDiff = (x$20 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$20.$high + fraction.$high, x$20.$low + fraction.$low));\n\t\t\tif ((currentDiff.$high < allowance.$high || (currentDiff.$high === allowance.$high && currentDiff.$low < allowance.$low))) {\n\t\t\t\td.nd = i$2 + 1 >> 0;\n\t\t\t\td.dp = integerDigits + exp10 >> 0;\n\t\t\t\td.neg = f.neg;\n\t\t\t\treturn adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));\n\t\t\t}\n\t\t\ti$2 = i$2 + (1) >> 0;\n\t\t}\n\t\td.nd = integerDigits;\n\t\td.dp = d.nd + exp10 >> 0;\n\t\td.neg = f.neg;\n\t\tdigit$1 = 0;\n\t\tmultiplier = new $Uint64(0, 1);\n\t\twhile (true) {\n\t\t\tfraction = $mul64(fraction, (new $Uint64(0, 10)));\n\t\t\tmultiplier = $mul64(multiplier, (new $Uint64(0, 10)));\n\t\t\tdigit$1 = ($shiftRightUint64(fraction, shift).$low >> 0);\n\t\t\t(x$21 = d.d, x$22 = d.nd, ((x$22 < 0 || x$22 >= x$21.$length) ? $throwRuntimeError(\"index out of range\") : x$21.$array[x$21.$offset + x$22] = ((digit$1 + 48 >> 0) << 24 >>> 24)));\n\t\t\td.nd = d.nd + (1) >> 0;\n\t\t\tfraction = (x$23 = $shiftLeft64(new $Uint64(0, digit$1), shift), new $Uint64(fraction.$high - x$23.$high, fraction.$low - x$23.$low));\n\t\t\tif ((x$24 = $mul64(allowance, multiplier), (fraction.$high < x$24.$high || (fraction.$high === x$24.$high && fraction.$low < x$24.$low)))) {\n\t\t\t\treturn adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));\n\t\t\t}\n\t\t}\n\t};\n\textFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.$val.ShortestDecimal(d, lower, upper); };\n\tadjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {\n\t\tvar $ptr, _index, currentDiff, d, maxDiff, targetDiff, ulpBinary, ulpDecimal, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;\n\t\tif ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.$high < x.$high || (ulpDecimal.$high === x.$high && ulpDecimal.$low < x.$low)))) {\n\t\t\treturn false;\n\t\t}\n\t\twhile (true) {\n\t\t\tif (!((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.$high + x$3.$high, currentDiff.$low + x$3.$low)), new $Uint64(x$2.$high + ulpBinary.$high, x$2.$low + ulpBinary.$low)), (x$1.$high < targetDiff.$high || (x$1.$high === targetDiff.$high && x$1.$low < targetDiff.$low))))) { break; }\n\t\t\t_index = d.nd - 1 >> 0;\n\t\t\t(x$5 = d.d, ((_index < 0 || _index >= x$5.$length) ? $throwRuntimeError(\"index out of range\") : x$5.$array[x$5.$offset + _index] = (x$4 = d.d, ((_index < 0 || _index >= x$4.$length) ? $throwRuntimeError(\"index out of range\") : x$4.$array[x$4.$offset + _index])) - (1) << 24 >>> 24));\n\t\t\tcurrentDiff = (x$6 = ulpDecimal, new $Uint64(currentDiff.$high + x$6.$high, currentDiff.$low + x$6.$low));\n\t\t}\n\t\tif ((x$7 = new $Uint64(currentDiff.$high + ulpDecimal.$high, currentDiff.$low + ulpDecimal.$low), x$8 = (x$9 = (x$10 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.$high + x$10.$high, targetDiff.$low + x$10.$low)), new $Uint64(x$9.$high + ulpBinary.$high, x$9.$low + ulpBinary.$low)), (x$7.$high < x$8.$high || (x$7.$high === x$8.$high && x$7.$low <= x$8.$low)))) {\n\t\t\treturn false;\n\t\t}\n\t\tif ((currentDiff.$high < ulpBinary.$high || (currentDiff.$high === ulpBinary.$high && currentDiff.$low < ulpBinary.$low)) || (x$11 = new $Uint64(maxDiff.$high - ulpBinary.$high, maxDiff.$low - ulpBinary.$low), (currentDiff.$high > x$11.$high || (currentDiff.$high === x$11.$high && currentDiff.$low > x$11.$low)))) {\n\t\t\treturn false;\n\t\t}\n\t\tif ((d.nd === 1) && ((x$12 = d.d, (0 >= x$12.$length ? $throwRuntimeError(\"index out of range\") : x$12.$array[x$12.$offset + 0])) === 48)) {\n\t\t\td.nd = 0;\n\t\t\td.dp = 0;\n\t\t}\n\t\treturn true;\n\t};\n\tAppendFloat = function(dst, f, fmt, prec, bitSize) {\n\t\tvar $ptr, bitSize, dst, f, fmt, prec;\n\t\treturn genericFtoa(dst, f, fmt, prec, bitSize);\n\t};\n\t$pkg.AppendFloat = AppendFloat;\n\tgenericFtoa = function(dst, val, fmt, prec, bitSize) {\n\t\tvar $ptr, _ref, _ref$1, _ref$2, _ref$3, _tuple, bitSize, bits, buf, buf$1, digits, digs, dst, exp, f, f$1, flt, fmt, lower, mant, neg, ok, prec, s, shortest, upper, val, x, x$1, x$2, x$3, y, y$1;\n\t\tbits = new $Uint64(0, 0);\n\t\tflt = ptrType$1.nil;\n\t\t_ref = bitSize;\n\t\tif (_ref === 32) {\n\t\t\tbits = new $Uint64(0, math.Float32bits($fround(val)));\n\t\t\tflt = float32info;\n\t\t} else if (_ref === 64) {\n\t\t\tbits = math.Float64bits(val);\n\t\t\tflt = float64info;\n\t\t} else {\n\t\t\t$panic(new $String(\"strconv: illegal AppendFloat/FormatFloat bitSize\"));\n\t\t}\n\t\tneg = !((x = $shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));\n\t\texp = ($shiftRightUint64(bits, flt.mantbits).$low >> 0) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));\n\t\tmant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits.$high & x$1.$high, (bits.$low & x$1.$low) >>> 0));\n\t\t_ref$1 = exp;\n\t\tif (_ref$1 === (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) {\n\t\t\ts = \"\";\n\t\t\tif (!((mant.$high === 0 && mant.$low === 0))) {\n\t\t\t\ts = \"NaN\";\n\t\t\t} else if (neg) {\n\t\t\t\ts = \"-Inf\";\n\t\t\t} else {\n\t\t\t\ts = \"+Inf\";\n\t\t\t}\n\t\t\treturn $appendSlice(dst, new sliceType$6($stringToBytes(s)));\n\t\t} else if (_ref$1 === 0) {\n\t\t\texp = exp + (1) >> 0;\n\t\t} else {\n\t\t\tmant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));\n\t\t}\n\t\texp = exp + (flt.bias) >> 0;\n\t\tif (fmt === 98) {\n\t\t\treturn fmtB(dst, neg, mant, exp, flt);\n\t\t}\n\t\tif (!optimize) {\n\t\t\treturn bigFtoa(dst, prec, fmt, neg, mant, exp, flt);\n\t\t}\n\t\tdigs = $clone(new decimalSlice.ptr(), decimalSlice);\n\t\tok = false;\n\t\tshortest = prec < 0;\n\t\tif (shortest) {\n\t\t\tf = new extFloat.ptr();\n\t\t\t_tuple = f.AssignComputeBounds(mant, exp, neg, flt); lower = $clone(_tuple[0], extFloat); upper = $clone(_tuple[1], extFloat);\n\t\t\tbuf = $clone(arrayType$1.zero(), arrayType$1);\n\t\t\tdigs.d = new sliceType$6(buf);\n\t\t\tok = f.ShortestDecimal(digs, lower, upper);\n\t\t\tif (!ok) {\n\t\t\t\treturn bigFtoa(dst, prec, fmt, neg, mant, exp, flt);\n\t\t\t}\n\t\t\t_ref$2 = fmt;\n\t\t\tif (_ref$2 === 101 || _ref$2 === 69) {\n\t\t\t\tprec = digs.nd - 1 >> 0;\n\t\t\t} else if (_ref$2 === 102) {\n\t\t\t\tprec = max(digs.nd - digs.dp >> 0, 0);\n\t\t\t} else if (_ref$2 === 103 || _ref$2 === 71) {\n\t\t\t\tprec = digs.nd;\n\t\t\t}\n\t\t} else if (!((fmt === 102))) {\n\t\t\tdigits = prec;\n\t\t\t_ref$3 = fmt;\n\t\t\tif (_ref$3 === 101 || _ref$3 === 69) {\n\t\t\t\tdigits = digits + (1) >> 0;\n\t\t\t} else if (_ref$3 === 103 || _ref$3 === 71) {\n\t\t\t\tif (prec === 0) {\n\t\t\t\t\tprec = 1;\n\t\t\t\t}\n\t\t\t\tdigits = prec;\n\t\t\t}\n\t\t\tif (digits <= 15) {\n\t\t\t\tbuf$1 = $clone(arrayType.zero(), arrayType);\n\t\t\t\tdigs.d = new sliceType$6(buf$1);\n\t\t\t\tf$1 = new extFloat.ptr(mant, exp - (flt.mantbits >> 0) >> 0, neg);\n\t\t\t\tok = f$1.FixedDecimal(digs, digits);\n\t\t\t}\n\t\t}\n\t\tif (!ok) {\n\t\t\treturn bigFtoa(dst, prec, fmt, neg, mant, exp, flt);\n\t\t}\n\t\treturn formatDigits(dst, shortest, neg, digs, prec, fmt);\n\t};\n\tbigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {\n\t\tvar $ptr, _ref, _ref$1, d, digs, dst, exp, flt, fmt, mant, neg, prec, shortest;\n\t\td = new decimal.ptr();\n\t\td.Assign(mant);\n\t\td.Shift(exp - (flt.mantbits >> 0) >> 0);\n\t\tdigs = $clone(new decimalSlice.ptr(), decimalSlice);\n\t\tshortest = prec < 0;\n\t\tif (shortest) {\n\t\t\troundShortest(d, mant, exp, flt);\n\t\t\t$copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false), decimalSlice);\n\t\t\t_ref = fmt;\n\t\t\tif (_ref === 101 || _ref === 69) {\n\t\t\t\tprec = digs.nd - 1 >> 0;\n\t\t\t} else if (_ref === 102) {\n\t\t\t\tprec = max(digs.nd - digs.dp >> 0, 0);\n\t\t\t} else if (_ref === 103 || _ref === 71) {\n\t\t\t\tprec = digs.nd;\n\t\t\t}\n\t\t} else {\n\t\t\t_ref$1 = fmt;\n\t\t\tif (_ref$1 === 101 || _ref$1 === 69) {\n\t\t\t\td.Round(prec + 1 >> 0);\n\t\t\t} else if (_ref$1 === 102) {\n\t\t\t\td.Round(d.dp + prec >> 0);\n\t\t\t} else if (_ref$1 === 103 || _ref$1 === 71) {\n\t\t\t\tif (prec === 0) {\n\t\t\t\t\tprec = 1;\n\t\t\t\t}\n\t\t\t\td.Round(prec);\n\t\t\t}\n\t\t\t$copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false), decimalSlice);\n\t\t}\n\t\treturn formatDigits(dst, shortest, neg, digs, prec, fmt);\n\t};\n\tformatDigits = function(dst, shortest, neg, digs, prec, fmt) {\n\t\tvar $ptr, _ref, digs, dst, eprec, exp, fmt, neg, prec, shortest;\n\t\tdigs = $clone(digs, decimalSlice);\n\t\t_ref = fmt;\n\t\tif (_ref === 101 || _ref === 69) {\n\t\t\treturn fmtE(dst, neg, digs, prec, fmt);\n\t\t} else if (_ref === 102) {\n\t\t\treturn fmtF(dst, neg, digs, prec);\n\t\t} else if (_ref === 103 || _ref === 71) {\n\t\t\teprec = prec;\n\t\t\tif (eprec > digs.nd && digs.nd >= digs.dp) {\n\t\t\t\teprec = digs.nd;\n\t\t\t}\n\t\t\tif (shortest) {\n\t\t\t\teprec = 6;\n\t\t\t}\n\t\t\texp = digs.dp - 1 >> 0;\n\t\t\tif (exp < -4 || exp >= eprec) {\n\t\t\t\tif (prec > digs.nd) {\n\t\t\t\t\tprec = digs.nd;\n\t\t\t\t}\n\t\t\t\treturn fmtE(dst, neg, digs, prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);\n\t\t\t}\n\t\t\tif (prec > digs.dp) {\n\t\t\t\tprec = digs.nd;\n\t\t\t}\n\t\t\treturn fmtF(dst, neg, digs, max(prec - digs.dp >> 0, 0));\n\t\t}\n\t\treturn $append(dst, 37, fmt);\n\t};\n\troundShortest = function(d, mant, exp, flt) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, d, exp, explo, flt, i, inclusive, l, lower, m, mant, mantlo, minexp, okdown, okup, u, upper, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;\n\t\tif ((mant.$high === 0 && mant.$low === 0)) {\n\t\t\td.nd = 0;\n\t\t\treturn;\n\t\t}\n\t\tminexp = flt.bias + 1 >> 0;\n\t\tif (exp > minexp && (332 * ((d.dp - d.nd >> 0)) >> 0) >= (100 * ((exp - (flt.mantbits >> 0) >> 0)) >> 0)) {\n\t\t\treturn;\n\t\t}\n\t\tupper = new decimal.ptr();\n\t\tupper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));\n\t\tupper.Shift((exp - (flt.mantbits >> 0) >> 0) - 1 >> 0);\n\t\tmantlo = new $Uint64(0, 0);\n\t\texplo = 0;\n\t\tif ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {\n\t\t\tmantlo = new $Uint64(mant.$high - 0, mant.$low - 1);\n\t\t\texplo = exp;\n\t\t} else {\n\t\t\tmantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));\n\t\t\texplo = exp - 1 >> 0;\n\t\t}\n\t\tlower = new decimal.ptr();\n\t\tlower.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));\n\t\tlower.Shift((explo - (flt.mantbits >> 0) >> 0) - 1 >> 0);\n\t\tinclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < d.nd)) { break; }\n\t\t\t_tmp = 0; _tmp$1 = 0; _tmp$2 = 0; l = _tmp; m = _tmp$1; u = _tmp$2;\n\t\t\tif (i < lower.nd) {\n\t\t\t\tl = (x$5 = lower.d, ((i < 0 || i >= x$5.length) ? $throwRuntimeError(\"index out of range\") : x$5[i]));\n\t\t\t} else {\n\t\t\t\tl = 48;\n\t\t\t}\n\t\t\tm = (x$6 = d.d, ((i < 0 || i >= x$6.length) ? $throwRuntimeError(\"index out of range\") : x$6[i]));\n\t\t\tif (i < upper.nd) {\n\t\t\t\tu = (x$7 = upper.d, ((i < 0 || i >= x$7.length) ? $throwRuntimeError(\"index out of range\") : x$7[i]));\n\t\t\t} else {\n\t\t\t\tu = 48;\n\t\t\t}\n\t\t\tokdown = !((l === m)) || (inclusive && (l === m) && ((i + 1 >> 0) === lower.nd));\n\t\t\tokup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);\n\t\t\tif (okdown && okup) {\n\t\t\t\td.Round(i + 1 >> 0);\n\t\t\t\treturn;\n\t\t\t} else if (okdown) {\n\t\t\t\td.RoundDown(i + 1 >> 0);\n\t\t\t\treturn;\n\t\t\t} else if (okup) {\n\t\t\t\td.RoundUp(i + 1 >> 0);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t};\n\tfmtE = function(dst, neg, d, prec, fmt) {\n\t\tvar $ptr, _q, _r, _ref, buf, ch, d, dst, exp, fmt, i, i$1, m, neg, prec, x, x$1;\n\t\td = $clone(d, decimalSlice);\n\t\tif (neg) {\n\t\t\tdst = $append(dst, 45);\n\t\t}\n\t\tch = 48;\n\t\tif (!((d.nd === 0))) {\n\t\t\tch = (x = d.d, (0 >= x.$length ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + 0]));\n\t\t}\n\t\tdst = $append(dst, ch);\n\t\tif (prec > 0) {\n\t\t\tdst = $append(dst, 46);\n\t\t\ti = 1;\n\t\t\tm = ((d.nd + prec >> 0) + 1 >> 0) - max(d.nd, prec + 1 >> 0) >> 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(i < m)) { break; }\n\t\t\t\tdst = $append(dst, (x$1 = d.d, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError(\"index out of range\") : x$1.$array[x$1.$offset + i])));\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t\twhile (true) {\n\t\t\t\tif (!(i <= prec)) { break; }\n\t\t\t\tdst = $append(dst, 48);\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t}\n\t\tdst = $append(dst, fmt);\n\t\texp = d.dp - 1 >> 0;\n\t\tif (d.nd === 0) {\n\t\t\texp = 0;\n\t\t}\n\t\tif (exp < 0) {\n\t\t\tch = 45;\n\t\t\texp = -exp;\n\t\t} else {\n\t\t\tch = 43;\n\t\t}\n\t\tdst = $append(dst, ch);\n\t\tbuf = $clone(arrayType$2.zero(), arrayType$2);\n\t\ti$1 = 3;\n\t\twhile (true) {\n\t\t\tif (!(exp >= 10)) { break; }\n\t\t\ti$1 = i$1 - (1) >> 0;\n\t\t\t((i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[i$1] = (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError(\"integer divide by zero\")) + 48 >> 0) << 24 >>> 24));\n\t\t\texp = (_q = exp / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t}\n\t\ti$1 = i$1 - (1) >> 0;\n\t\t((i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[i$1] = ((exp + 48 >> 0) << 24 >>> 24));\n\t\t_ref = i$1;\n\t\tif (_ref === 0) {\n\t\t\tdst = $append(dst, buf[0], buf[1], buf[2]);\n\t\t} else if (_ref === 1) {\n\t\t\tdst = $append(dst, buf[1], buf[2]);\n\t\t} else if (_ref === 2) {\n\t\t\tdst = $append(dst, 48, buf[2]);\n\t\t}\n\t\treturn dst;\n\t};\n\tfmtF = function(dst, neg, d, prec) {\n\t\tvar $ptr, ch, d, dst, i, i$1, j, neg, prec, x, x$1;\n\t\td = $clone(d, decimalSlice);\n\t\tif (neg) {\n\t\t\tdst = $append(dst, 45);\n\t\t}\n\t\tif (d.dp > 0) {\n\t\t\ti = 0;\n\t\t\ti = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(i < d.dp && i < d.nd)) { break; }\n\t\t\t\tdst = $append(dst, (x = d.d, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i])));\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t\twhile (true) {\n\t\t\t\tif (!(i < d.dp)) { break; }\n\t\t\t\tdst = $append(dst, 48);\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t} else {\n\t\t\tdst = $append(dst, 48);\n\t\t}\n\t\tif (prec > 0) {\n\t\t\tdst = $append(dst, 46);\n\t\t\ti$1 = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(i$1 < prec)) { break; }\n\t\t\t\tch = 48;\n\t\t\t\tj = d.dp + i$1 >> 0;\n\t\t\t\tif (0 <= j && j < d.nd) {\n\t\t\t\t\tch = (x$1 = d.d, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError(\"index out of range\") : x$1.$array[x$1.$offset + j]));\n\t\t\t\t}\n\t\t\t\tdst = $append(dst, ch);\n\t\t\t\ti$1 = i$1 + (1) >> 0;\n\t\t\t}\n\t\t}\n\t\treturn dst;\n\t};\n\tfmtB = function(dst, neg, mant, exp, flt) {\n\t\tvar $ptr, _q, _r, buf, dst, esign, exp, flt, mant, n, neg, w, x;\n\t\tbuf = $clone(arrayType$3.zero(), arrayType$3);\n\t\tw = 50;\n\t\texp = exp - ((flt.mantbits >> 0)) >> 0;\n\t\tesign = 43;\n\t\tif (exp < 0) {\n\t\t\tesign = 45;\n\t\t\texp = -exp;\n\t\t}\n\t\tn = 0;\n\t\twhile (true) {\n\t\t\tif (!(exp > 0 || n < 1)) { break; }\n\t\t\tn = n + (1) >> 0;\n\t\t\tw = w - (1) >> 0;\n\t\t\t((w < 0 || w >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[w] = (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError(\"integer divide by zero\")) + 48 >> 0) << 24 >>> 24));\n\t\t\texp = (_q = exp / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t}\n\t\tw = w - (1) >> 0;\n\t\t((w < 0 || w >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[w] = esign);\n\t\tw = w - (1) >> 0;\n\t\t((w < 0 || w >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[w] = 112);\n\t\tn = 0;\n\t\twhile (true) {\n\t\t\tif (!((mant.$high > 0 || (mant.$high === 0 && mant.$low > 0)) || n < 1)) { break; }\n\t\t\tn = n + (1) >> 0;\n\t\t\tw = w - (1) >> 0;\n\t\t\t((w < 0 || w >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[w] = ((x = $div64(mant, new $Uint64(0, 10), true), new $Uint64(x.$high + 0, x.$low + 48)).$low << 24 >>> 24));\n\t\t\tmant = $div64(mant, (new $Uint64(0, 10)), false);\n\t\t}\n\t\tif (neg) {\n\t\t\tw = w - (1) >> 0;\n\t\t\t((w < 0 || w >= buf.length) ? $throwRuntimeError(\"index out of range\") : buf[w] = 45);\n\t\t}\n\t\treturn $appendSlice(dst, $subslice(new sliceType$6(buf), w));\n\t};\n\tmax = function(a, b) {\n\t\tvar $ptr, a, b;\n\t\tif (a > b) {\n\t\t\treturn a;\n\t\t}\n\t\treturn b;\n\t};\n\tFormatInt = function(i, base) {\n\t\tvar $ptr, _tuple, base, i, s;\n\t\t_tuple = formatBits(sliceType$6.nil, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false); s = _tuple[1];\n\t\treturn s;\n\t};\n\t$pkg.FormatInt = FormatInt;\n\tItoa = function(i) {\n\t\tvar $ptr, i;\n\t\treturn FormatInt(new $Int64(0, i), 10);\n\t};\n\t$pkg.Itoa = Itoa;\n\tformatBits = function(dst, u, base, neg, append_) {\n\t\tvar $ptr, a, append_, b, b$1, base, d, dst, i, j, m, neg, q, q$1, s, s$1, u, x, x$1, x$2, x$3;\n\t\td = sliceType$6.nil;\n\t\ts = \"\";\n\t\tif (base < 2 || base > 36) {\n\t\t\t$panic(new $String(\"strconv: illegal AppendInt/FormatInt base\"));\n\t\t}\n\t\ta = $clone(arrayType$4.zero(), arrayType$4);\n\t\ti = 65;\n\t\tif (neg) {\n\t\t\tu = new $Uint64(-u.$high, -u.$low);\n\t\t}\n\t\tif (base === 10) {\n\t\t\twhile (true) {\n\t\t\t\tif (!((u.$high > 0 || (u.$high === 0 && u.$low >= 100)))) { break; }\n\t\t\t\ti = i - (2) >> 0;\n\t\t\t\tq = $div64(u, new $Uint64(0, 100), false);\n\t\t\t\tj = ((x = $mul64(q, new $Uint64(0, 100)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0);\n\t\t\t\t(x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= a.length) ? $throwRuntimeError(\"index out of range\") : a[x$1] = \"0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\".charCodeAt(j)));\n\t\t\t\t(x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= a.length) ? $throwRuntimeError(\"index out of range\") : a[x$2] = \"0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999\".charCodeAt(j)));\n\t\t\t\tu = q;\n\t\t\t}\n\t\t\tif ((u.$high > 0 || (u.$high === 0 && u.$low >= 10))) {\n\t\t\t\ti = i - (1) >> 0;\n\t\t\t\tq$1 = $div64(u, new $Uint64(0, 10), false);\n\t\t\t\t((i < 0 || i >= a.length) ? $throwRuntimeError(\"index out of range\") : a[i] = \"0123456789abcdefghijklmnopqrstuvwxyz\".charCodeAt(((x$3 = $mul64(q$1, new $Uint64(0, 10)), new $Uint64(u.$high - x$3.$high, u.$low - x$3.$low)).$low >>> 0)));\n\t\t\t\tu = q$1;\n\t\t\t}\n\t\t} else {\n\t\t\ts$1 = ((base < 0 || base >= shifts.length) ? $throwRuntimeError(\"index out of range\") : shifts[base]);\n\t\t\tif (s$1 > 0) {\n\t\t\t\tb = new $Uint64(0, base);\n\t\t\t\tm = (b.$low >>> 0) - 1 >>> 0;\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low)))) { break; }\n\t\t\t\t\ti = i - (1) >> 0;\n\t\t\t\t\t((i < 0 || i >= a.length) ? $throwRuntimeError(\"index out of range\") : a[i] = \"0123456789abcdefghijklmnopqrstuvwxyz\".charCodeAt((((u.$low >>> 0) & m) >>> 0)));\n\t\t\t\t\tu = $shiftRightUint64(u, (s$1));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tb$1 = new $Uint64(0, base);\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low)))) { break; }\n\t\t\t\t\ti = i - (1) >> 0;\n\t\t\t\t\t((i < 0 || i >= a.length) ? $throwRuntimeError(\"index out of range\") : a[i] = \"0123456789abcdefghijklmnopqrstuvwxyz\".charCodeAt(($div64(u, b$1, true).$low >>> 0)));\n\t\t\t\t\tu = $div64(u, (b$1), false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti = i - (1) >> 0;\n\t\t((i < 0 || i >= a.length) ? $throwRuntimeError(\"index out of range\") : a[i] = \"0123456789abcdefghijklmnopqrstuvwxyz\".charCodeAt((u.$low >>> 0)));\n\t\tif (neg) {\n\t\t\ti = i - (1) >> 0;\n\t\t\t((i < 0 || i >= a.length) ? $throwRuntimeError(\"index out of range\") : a[i] = 45);\n\t\t}\n\t\tif (append_) {\n\t\t\td = $appendSlice(dst, $subslice(new sliceType$6(a), i));\n\t\t\treturn [d, s];\n\t\t}\n\t\ts = $bytesToString($subslice(new sliceType$6(a), i));\n\t\treturn [d, s];\n\t};\n\tquoteWith = function(s, quote, ASCIIonly) {\n\t\tvar $ptr, ASCIIonly, _q, _ref, _tuple, buf, n, quote, r, runeTmp, s, s$1, s$2, width;\n\t\truneTmp = $clone(arrayType$5.zero(), arrayType$5);\n\t\tbuf = $makeSlice(sliceType$6, 0, (_q = (3 * s.length >> 0) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\")));\n\t\tbuf = $append(buf, quote);\n\t\twidth = 0;\n\t\twhile (true) {\n\t\t\tif (!(s.length > 0)) { break; }\n\t\t\tr = (s.charCodeAt(0) >> 0);\n\t\t\twidth = 1;\n\t\t\tif (r >= 128) {\n\t\t\t\t_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; width = _tuple[1];\n\t\t\t}\n\t\t\tif ((width === 1) && (r === 65533)) {\n\t\t\t\tbuf = $appendSlice(buf, new sliceType$6($stringToBytes(\"\\\\x\")));\n\t\t\t\tbuf = $append(buf, \"0123456789abcdef\".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));\n\t\t\t\tbuf = $append(buf, \"0123456789abcdef\".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));\n\t\t\t\ts = s.substring(width);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ((r === (quote >> 0)) || (r === 92)) {\n\t\t\t\tbuf = $append(buf, 92);\n\t\t\t\tbuf = $append(buf, (r << 24 >>> 24));\n\t\t\t\ts = s.substring(width);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (ASCIIonly) {\n\t\t\t\tif (r < 128 && IsPrint(r)) {\n\t\t\t\t\tbuf = $append(buf, (r << 24 >>> 24));\n\t\t\t\t\ts = s.substring(width);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (IsPrint(r)) {\n\t\t\t\tn = utf8.EncodeRune(new sliceType$6(runeTmp), r);\n\t\t\t\tbuf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n));\n\t\t\t\ts = s.substring(width);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t_ref = r;\n\t\t\tif (_ref === 7) {\n\t\t\t\tbuf = $appendSlice(buf, new sliceType$6($stringToBytes(\"\\\\a\")));\n\t\t\t} else if (_ref === 8) {\n\t\t\t\tbuf = $appendSlice(buf, new sliceType$6($stringToBytes(\"\\\\b\")));\n\t\t\t} else if (_ref === 12) {\n\t\t\t\tbuf = $appendSlice(buf, new sliceType$6($stringToBytes(\"\\\\f\")));\n\t\t\t} else if (_ref === 10) {\n\t\t\t\tbuf = $appendSlice(buf, new sliceType$6($stringToBytes(\"\\\\n\")));\n\t\t\t} else if (_ref === 13) {\n\t\t\t\tbuf = $appendSlice(buf, new sliceType$6($stringToBytes(\"\\\\r\")));\n\t\t\t} else if (_ref === 9) {\n\t\t\t\tbuf = $appendSlice(buf, new sliceType$6($stringToBytes(\"\\\\t\")));\n\t\t\t} else if (_ref === 11) {\n\t\t\t\tbuf = $appendSlice(buf, new sliceType$6($stringToBytes(\"\\\\v\")));\n\t\t\t} else {\n\t\t\t\tif (r < 32) {\n\t\t\t\t\tbuf = $appendSlice(buf, new sliceType$6($stringToBytes(\"\\\\x\")));\n\t\t\t\t\tbuf = $append(buf, \"0123456789abcdef\".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));\n\t\t\t\t\tbuf = $append(buf, \"0123456789abcdef\".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));\n\t\t\t\t} else if (r > 1114111) {\n\t\t\t\t\tr = 65533;\n\t\t\t\t\tbuf = $appendSlice(buf, new sliceType$6($stringToBytes(\"\\\\u\")));\n\t\t\t\t\ts$1 = 12;\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tif (!(s$1 >= 0)) { break; }\n\t\t\t\t\t\tbuf = $append(buf, \"0123456789abcdef\".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));\n\t\t\t\t\t\ts$1 = s$1 - (4) >> 0;\n\t\t\t\t\t}\n\t\t\t\t} else if (r < 65536) {\n\t\t\t\t\tbuf = $appendSlice(buf, new sliceType$6($stringToBytes(\"\\\\u\")));\n\t\t\t\t\ts$1 = 12;\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tif (!(s$1 >= 0)) { break; }\n\t\t\t\t\t\tbuf = $append(buf, \"0123456789abcdef\".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));\n\t\t\t\t\t\ts$1 = s$1 - (4) >> 0;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbuf = $appendSlice(buf, new sliceType$6($stringToBytes(\"\\\\U\")));\n\t\t\t\t\ts$2 = 28;\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tif (!(s$2 >= 0)) { break; }\n\t\t\t\t\t\tbuf = $append(buf, \"0123456789abcdef\".charCodeAt((((r >> $min((s$2 >>> 0), 31)) >> 0) & 15)));\n\t\t\t\t\t\ts$2 = s$2 - (4) >> 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ts = s.substring(width);\n\t\t}\n\t\tbuf = $append(buf, quote);\n\t\treturn $bytesToString(buf);\n\t};\n\tQuote = function(s) {\n\t\tvar $ptr, s;\n\t\treturn quoteWith(s, 34, false);\n\t};\n\t$pkg.Quote = Quote;\n\tQuoteToASCII = function(s) {\n\t\tvar $ptr, s;\n\t\treturn quoteWith(s, 34, true);\n\t};\n\t$pkg.QuoteToASCII = QuoteToASCII;\n\tQuoteRune = function(r) {\n\t\tvar $ptr, r;\n\t\treturn quoteWith($encodeRune(r), 39, false);\n\t};\n\t$pkg.QuoteRune = QuoteRune;\n\tAppendQuoteRune = function(dst, r) {\n\t\tvar $ptr, dst, r;\n\t\treturn $appendSlice(dst, new sliceType$6($stringToBytes(QuoteRune(r))));\n\t};\n\t$pkg.AppendQuoteRune = AppendQuoteRune;\n\tQuoteRuneToASCII = function(r) {\n\t\tvar $ptr, r;\n\t\treturn quoteWith($encodeRune(r), 39, true);\n\t};\n\t$pkg.QuoteRuneToASCII = QuoteRuneToASCII;\n\tAppendQuoteRuneToASCII = function(dst, r) {\n\t\tvar $ptr, dst, r;\n\t\treturn $appendSlice(dst, new sliceType$6($stringToBytes(QuoteRuneToASCII(r))));\n\t};\n\t$pkg.AppendQuoteRuneToASCII = AppendQuoteRuneToASCII;\n\tCanBackquote = function(s) {\n\t\tvar $ptr, _tuple, r, s, wid;\n\t\twhile (true) {\n\t\t\tif (!(s.length > 0)) { break; }\n\t\t\t_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; wid = _tuple[1];\n\t\t\ts = s.substring(wid);\n\t\t\tif (wid > 1) {\n\t\t\t\tif (r === 65279) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (r === 65533) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ((r < 32 && !((r === 9))) || (r === 96) || (r === 127)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t};\n\t$pkg.CanBackquote = CanBackquote;\n\tunhex = function(b) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, c, ok, v;\n\t\tv = 0;\n\t\tok = false;\n\t\tc = (b >> 0);\n\t\tif (48 <= c && c <= 57) {\n\t\t\t_tmp = c - 48 >> 0; _tmp$1 = true; v = _tmp; ok = _tmp$1;\n\t\t\treturn [v, ok];\n\t\t} else if (97 <= c && c <= 102) {\n\t\t\t_tmp$2 = (c - 97 >> 0) + 10 >> 0; _tmp$3 = true; v = _tmp$2; ok = _tmp$3;\n\t\t\treturn [v, ok];\n\t\t} else if (65 <= c && c <= 70) {\n\t\t\t_tmp$4 = (c - 65 >> 0) + 10 >> 0; _tmp$5 = true; v = _tmp$4; ok = _tmp$5;\n\t\t\treturn [v, ok];\n\t\t}\n\t\treturn [v, ok];\n\t};\n\tUnquoteChar = function(s, quote) {\n\t\tvar $ptr, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err, j, j$1, multibyte, n, ok, quote, r, s, size, tail, v, v$1, value, x, x$1;\n\t\tvalue = 0;\n\t\tmultibyte = false;\n\t\ttail = \"\";\n\t\terr = $ifaceNil;\n\t\tc = s.charCodeAt(0);\n\t\tif ((c === quote) && ((quote === 39) || (quote === 34))) {\n\t\t\terr = $pkg.ErrSyntax;\n\t\t\treturn [value, multibyte, tail, err];\n\t\t} else if (c >= 128) {\n\t\t\t_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; size = _tuple[1];\n\t\t\t_tmp = r; _tmp$1 = true; _tmp$2 = s.substring(size); _tmp$3 = $ifaceNil; value = _tmp; multibyte = _tmp$1; tail = _tmp$2; err = _tmp$3;\n\t\t\treturn [value, multibyte, tail, err];\n\t\t} else if (!((c === 92))) {\n\t\t\t_tmp$4 = (s.charCodeAt(0) >> 0); _tmp$5 = false; _tmp$6 = s.substring(1); _tmp$7 = $ifaceNil; value = _tmp$4; multibyte = _tmp$5; tail = _tmp$6; err = _tmp$7;\n\t\t\treturn [value, multibyte, tail, err];\n\t\t}\n\t\tif (s.length <= 1) {\n\t\t\terr = $pkg.ErrSyntax;\n\t\t\treturn [value, multibyte, tail, err];\n\t\t}\n\t\tc$1 = s.charCodeAt(1);\n\t\ts = s.substring(2);\n\t\t_ref = c$1;\n\t\tswitch (0) { default: if (_ref === 97) {\n\t\t\tvalue = 7;\n\t\t} else if (_ref === 98) {\n\t\t\tvalue = 8;\n\t\t} else if (_ref === 102) {\n\t\t\tvalue = 12;\n\t\t} else if (_ref === 110) {\n\t\t\tvalue = 10;\n\t\t} else if (_ref === 114) {\n\t\t\tvalue = 13;\n\t\t} else if (_ref === 116) {\n\t\t\tvalue = 9;\n\t\t} else if (_ref === 118) {\n\t\t\tvalue = 11;\n\t\t} else if (_ref === 120 || _ref === 117 || _ref === 85) {\n\t\t\tn = 0;\n\t\t\t_ref$1 = c$1;\n\t\t\tif (_ref$1 === 120) {\n\t\t\t\tn = 2;\n\t\t\t} else if (_ref$1 === 117) {\n\t\t\t\tn = 4;\n\t\t\t} else if (_ref$1 === 85) {\n\t\t\t\tn = 8;\n\t\t\t}\n\t\t\tv = 0;\n\t\t\tif (s.length < n) {\n\t\t\t\terr = $pkg.ErrSyntax;\n\t\t\t\treturn [value, multibyte, tail, err];\n\t\t\t}\n\t\t\tj = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(j < n)) { break; }\n\t\t\t\t_tuple$1 = unhex(s.charCodeAt(j)); x = _tuple$1[0]; ok = _tuple$1[1];\n\t\t\t\tif (!ok) {\n\t\t\t\t\terr = $pkg.ErrSyntax;\n\t\t\t\t\treturn [value, multibyte, tail, err];\n\t\t\t\t}\n\t\t\t\tv = (v << 4 >> 0) | x;\n\t\t\t\tj = j + (1) >> 0;\n\t\t\t}\n\t\t\ts = s.substring(n);\n\t\t\tif (c$1 === 120) {\n\t\t\t\tvalue = v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (v > 1114111) {\n\t\t\t\terr = $pkg.ErrSyntax;\n\t\t\t\treturn [value, multibyte, tail, err];\n\t\t\t}\n\t\t\tvalue = v;\n\t\t\tmultibyte = true;\n\t\t} else if (_ref === 48 || _ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55) {\n\t\t\tv$1 = (c$1 >> 0) - 48 >> 0;\n\t\t\tif (s.length < 2) {\n\t\t\t\terr = $pkg.ErrSyntax;\n\t\t\t\treturn [value, multibyte, tail, err];\n\t\t\t}\n\t\t\tj$1 = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(j$1 < 2)) { break; }\n\t\t\t\tx$1 = (s.charCodeAt(j$1) >> 0) - 48 >> 0;\n\t\t\t\tif (x$1 < 0 || x$1 > 7) {\n\t\t\t\t\terr = $pkg.ErrSyntax;\n\t\t\t\t\treturn [value, multibyte, tail, err];\n\t\t\t\t}\n\t\t\t\tv$1 = ((v$1 << 3 >> 0)) | x$1;\n\t\t\t\tj$1 = j$1 + (1) >> 0;\n\t\t\t}\n\t\t\ts = s.substring(2);\n\t\t\tif (v$1 > 255) {\n\t\t\t\terr = $pkg.ErrSyntax;\n\t\t\t\treturn [value, multibyte, tail, err];\n\t\t\t}\n\t\t\tvalue = v$1;\n\t\t} else if (_ref === 92) {\n\t\t\tvalue = 92;\n\t\t} else if (_ref === 39 || _ref === 34) {\n\t\t\tif (!((c$1 === quote))) {\n\t\t\t\terr = $pkg.ErrSyntax;\n\t\t\t\treturn [value, multibyte, tail, err];\n\t\t\t}\n\t\t\tvalue = (c$1 >> 0);\n\t\t} else {\n\t\t\terr = $pkg.ErrSyntax;\n\t\t\treturn [value, multibyte, tail, err];\n\t\t} }\n\t\ttail = s;\n\t\treturn [value, multibyte, tail, err];\n\t};\n\t$pkg.UnquoteChar = UnquoteChar;\n\tUnquote = function(s) {\n\t\tvar $ptr, _q, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, buf, c, err, err$1, multibyte, n, n$1, quote, r, runeTmp, s, size, ss, t;\n\t\tt = \"\";\n\t\terr = $ifaceNil;\n\t\tn = s.length;\n\t\tif (n < 2) {\n\t\t\t_tmp = \"\"; _tmp$1 = $pkg.ErrSyntax; t = _tmp; err = _tmp$1;\n\t\t\treturn [t, err];\n\t\t}\n\t\tquote = s.charCodeAt(0);\n\t\tif (!((quote === s.charCodeAt((n - 1 >> 0))))) {\n\t\t\t_tmp$2 = \"\"; _tmp$3 = $pkg.ErrSyntax; t = _tmp$2; err = _tmp$3;\n\t\t\treturn [t, err];\n\t\t}\n\t\ts = s.substring(1, (n - 1 >> 0));\n\t\tif (quote === 96) {\n\t\t\tif (contains(s, 96)) {\n\t\t\t\t_tmp$4 = \"\"; _tmp$5 = $pkg.ErrSyntax; t = _tmp$4; err = _tmp$5;\n\t\t\t\treturn [t, err];\n\t\t\t}\n\t\t\t_tmp$6 = s; _tmp$7 = $ifaceNil; t = _tmp$6; err = _tmp$7;\n\t\t\treturn [t, err];\n\t\t}\n\t\tif (!((quote === 34)) && !((quote === 39))) {\n\t\t\t_tmp$8 = \"\"; _tmp$9 = $pkg.ErrSyntax; t = _tmp$8; err = _tmp$9;\n\t\t\treturn [t, err];\n\t\t}\n\t\tif (contains(s, 10)) {\n\t\t\t_tmp$10 = \"\"; _tmp$11 = $pkg.ErrSyntax; t = _tmp$10; err = _tmp$11;\n\t\t\treturn [t, err];\n\t\t}\n\t\tif (!contains(s, 92) && !contains(s, quote)) {\n\t\t\t_ref = quote;\n\t\t\tif (_ref === 34) {\n\t\t\t\t_tmp$12 = s; _tmp$13 = $ifaceNil; t = _tmp$12; err = _tmp$13;\n\t\t\t\treturn [t, err];\n\t\t\t} else if (_ref === 39) {\n\t\t\t\t_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; size = _tuple[1];\n\t\t\t\tif ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {\n\t\t\t\t\t_tmp$14 = s; _tmp$15 = $ifaceNil; t = _tmp$14; err = _tmp$15;\n\t\t\t\t\treturn [t, err];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\truneTmp = $clone(arrayType$5.zero(), arrayType$5);\n\t\tbuf = $makeSlice(sliceType$6, 0, (_q = (3 * s.length >> 0) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\")));\n\t\twhile (true) {\n\t\t\tif (!(s.length > 0)) { break; }\n\t\t\t_tuple$1 = UnquoteChar(s, quote); c = _tuple$1[0]; multibyte = _tuple$1[1]; ss = _tuple$1[2]; err$1 = _tuple$1[3];\n\t\t\tif (!($interfaceIsEqual(err$1, $ifaceNil))) {\n\t\t\t\t_tmp$16 = \"\"; _tmp$17 = err$1; t = _tmp$16; err = _tmp$17;\n\t\t\t\treturn [t, err];\n\t\t\t}\n\t\t\ts = ss;\n\t\t\tif (c < 128 || !multibyte) {\n\t\t\t\tbuf = $append(buf, (c << 24 >>> 24));\n\t\t\t} else {\n\t\t\t\tn$1 = utf8.EncodeRune(new sliceType$6(runeTmp), c);\n\t\t\t\tbuf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n$1));\n\t\t\t}\n\t\t\tif ((quote === 39) && !((s.length === 0))) {\n\t\t\t\t_tmp$18 = \"\"; _tmp$19 = $pkg.ErrSyntax; t = _tmp$18; err = _tmp$19;\n\t\t\t\treturn [t, err];\n\t\t\t}\n\t\t}\n\t\t_tmp$20 = $bytesToString(buf); _tmp$21 = $ifaceNil; t = _tmp$20; err = _tmp$21;\n\t\treturn [t, err];\n\t};\n\t$pkg.Unquote = Unquote;\n\tcontains = function(s, c) {\n\t\tvar $ptr, c, i, s;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < s.length)) { break; }\n\t\t\tif (s.charCodeAt(i) === c) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn false;\n\t};\n\tbsearch16 = function(a, x) {\n\t\tvar $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;\n\t\t_tmp = 0; _tmp$1 = a.$length; i = _tmp; j = _tmp$1;\n\t\twhile (true) {\n\t\t\tif (!(i < j)) { break; }\n\t\t\th = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\")) >> 0;\n\t\t\tif (((h < 0 || h >= a.$length) ? $throwRuntimeError(\"index out of range\") : a.$array[a.$offset + h]) < x) {\n\t\t\t\ti = h + 1 >> 0;\n\t\t\t} else {\n\t\t\t\tj = h;\n\t\t\t}\n\t\t}\n\t\treturn i;\n\t};\n\tbsearch32 = function(a, x) {\n\t\tvar $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;\n\t\t_tmp = 0; _tmp$1 = a.$length; i = _tmp; j = _tmp$1;\n\t\twhile (true) {\n\t\t\tif (!(i < j)) { break; }\n\t\t\th = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\")) >> 0;\n\t\t\tif (((h < 0 || h >= a.$length) ? $throwRuntimeError(\"index out of range\") : a.$array[a.$offset + h]) < x) {\n\t\t\t\ti = h + 1 >> 0;\n\t\t\t} else {\n\t\t\t\tj = h;\n\t\t\t}\n\t\t}\n\t\treturn i;\n\t};\n\tIsPrint = function(r) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, r, rr, rr$1, x, x$1, x$2, x$3;\n\t\tif (r <= 255) {\n\t\t\tif (32 <= r && r <= 126) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (161 <= r && r <= 255) {\n\t\t\t\treturn !((r === 173));\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tif (0 <= r && r < 65536) {\n\t\t\t_tmp = (r << 16 >>> 16); _tmp$1 = isPrint16; _tmp$2 = isNotPrint16; rr = _tmp; isPrint = _tmp$1; isNotPrint = _tmp$2;\n\t\t\ti = bsearch16(isPrint, rr);\n\t\t\tif (i >= isPrint.$length || rr < (x = (i & ~1) >> 0, ((x < 0 || x >= isPrint.$length) ? $throwRuntimeError(\"index out of range\") : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? $throwRuntimeError(\"index out of range\") : isPrint.$array[isPrint.$offset + x$1])) < rr) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tj = bsearch16(isNotPrint, rr);\n\t\t\treturn j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? $throwRuntimeError(\"index out of range\") : isNotPrint.$array[isNotPrint.$offset + j]) === rr));\n\t\t}\n\t\t_tmp$3 = (r >>> 0); _tmp$4 = isPrint32; _tmp$5 = isNotPrint32; rr$1 = _tmp$3; isPrint$1 = _tmp$4; isNotPrint$1 = _tmp$5;\n\t\ti$1 = bsearch32(isPrint$1, rr$1);\n\t\tif (i$1 >= isPrint$1.$length || rr$1 < (x$2 = (i$1 & ~1) >> 0, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? $throwRuntimeError(\"index out of range\") : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? $throwRuntimeError(\"index out of range\") : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {\n\t\t\treturn false;\n\t\t}\n\t\tif (r >= 131072) {\n\t\t\treturn true;\n\t\t}\n\t\tr = r - (65536) >> 0;\n\t\tj$1 = bsearch16(isNotPrint$1, (r << 16 >>> 16));\n\t\treturn j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? $throwRuntimeError(\"index out of range\") : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === (r << 16 >>> 16)));\n\t};\n\t$pkg.IsPrint = IsPrint;\n\tptrType.methods = [{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$2.methods = [{prop: \"set\", name: \"set\", pkg: \"strconv\", typ: $funcType([$String], [$Bool], false)}, {prop: \"floatBits\", name: \"floatBits\", pkg: \"strconv\", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Assign\", name: \"Assign\", pkg: \"\", typ: $funcType([$Uint64], [], false)}, {prop: \"Shift\", name: \"Shift\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"Round\", name: \"Round\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"RoundDown\", name: \"RoundDown\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"RoundUp\", name: \"RoundUp\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"RoundedInteger\", name: \"RoundedInteger\", pkg: \"\", typ: $funcType([], [$Uint64], false)}];\n\tptrType$4.methods = [{prop: \"floatBits\", name: \"floatBits\", pkg: \"strconv\", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: \"AssignComputeBounds\", name: \"AssignComputeBounds\", pkg: \"\", typ: $funcType([$Uint64, $Int, $Bool, ptrType$1], [extFloat, extFloat], false)}, {prop: \"Normalize\", name: \"Normalize\", pkg: \"\", typ: $funcType([], [$Uint], false)}, {prop: \"Multiply\", name: \"Multiply\", pkg: \"\", typ: $funcType([extFloat], [], false)}, {prop: \"AssignDecimal\", name: \"AssignDecimal\", pkg: \"\", typ: $funcType([$Uint64, $Int, $Bool, $Bool, ptrType$1], [$Bool], false)}, {prop: \"frexp10\", name: \"frexp10\", pkg: \"strconv\", typ: $funcType([], [$Int, $Int], false)}, {prop: \"FixedDecimal\", name: \"FixedDecimal\", pkg: \"\", typ: $funcType([ptrType$3, $Int], [$Bool], false)}, {prop: \"ShortestDecimal\", name: \"ShortestDecimal\", pkg: \"\", typ: $funcType([ptrType$3, ptrType$4, ptrType$4], [$Bool], false)}];\n\tNumError.init([{prop: \"Func\", name: \"Func\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Num\", name: \"Num\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Err\", name: \"Err\", pkg: \"\", typ: $error, tag: \"\"}]);\n\tdecimal.init([{prop: \"d\", name: \"d\", pkg: \"strconv\", typ: arrayType$6, tag: \"\"}, {prop: \"nd\", name: \"nd\", pkg: \"strconv\", typ: $Int, tag: \"\"}, {prop: \"dp\", name: \"dp\", pkg: \"strconv\", typ: $Int, tag: \"\"}, {prop: \"neg\", name: \"neg\", pkg: \"strconv\", typ: $Bool, tag: \"\"}, {prop: \"trunc\", name: \"trunc\", pkg: \"strconv\", typ: $Bool, tag: \"\"}]);\n\tleftCheat.init([{prop: \"delta\", name: \"delta\", pkg: \"strconv\", typ: $Int, tag: \"\"}, {prop: \"cutoff\", name: \"cutoff\", pkg: \"strconv\", typ: $String, tag: \"\"}]);\n\textFloat.init([{prop: \"mant\", name: \"mant\", pkg: \"strconv\", typ: $Uint64, tag: \"\"}, {prop: \"exp\", name: \"exp\", pkg: \"strconv\", typ: $Int, tag: \"\"}, {prop: \"neg\", name: \"neg\", pkg: \"strconv\", typ: $Bool, tag: \"\"}]);\n\tfloatInfo.init([{prop: \"mantbits\", name: \"mantbits\", pkg: \"strconv\", typ: $Uint, tag: \"\"}, {prop: \"expbits\", name: \"expbits\", pkg: \"strconv\", typ: $Uint, tag: \"\"}, {prop: \"bias\", name: \"bias\", pkg: \"strconv\", typ: $Int, tag: \"\"}]);\n\tdecimalSlice.init([{prop: \"d\", name: \"d\", pkg: \"strconv\", typ: sliceType$6, tag: \"\"}, {prop: \"nd\", name: \"nd\", pkg: \"strconv\", typ: $Int, tag: \"\"}, {prop: \"dp\", name: \"dp\", pkg: \"strconv\", typ: $Int, tag: \"\"}, {prop: \"neg\", name: \"neg\", pkg: \"strconv\", typ: $Bool, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\toptimize = true;\n\t\tpowtab = new sliceType([1, 3, 6, 9, 13, 16, 19, 23, 26]);\n\t\tfloat64pow10 = new sliceType$1([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+11, 1e+12, 1e+13, 1e+14, 1e+15, 1e+16, 1e+17, 1e+18, 1e+19, 1e+20, 1e+21, 1e+22]);\n\t\tfloat32pow10 = new sliceType$2([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10]);\n\t\t$pkg.ErrRange = errors.New(\"value out of range\");\n\t\t$pkg.ErrSyntax = errors.New(\"invalid syntax\");\n\t\tleftcheats = new sliceType$3([new leftCheat.ptr(0, \"\"), new leftCheat.ptr(1, \"5\"), new leftCheat.ptr(1, \"25\"), new leftCheat.ptr(1, \"125\"), new leftCheat.ptr(2, \"625\"), new leftCheat.ptr(2, \"3125\"), new leftCheat.ptr(2, \"15625\"), new leftCheat.ptr(3, \"78125\"), new leftCheat.ptr(3, \"390625\"), new leftCheat.ptr(3, \"1953125\"), new leftCheat.ptr(4, \"9765625\"), new leftCheat.ptr(4, \"48828125\"), new leftCheat.ptr(4, \"244140625\"), new leftCheat.ptr(4, \"1220703125\"), new leftCheat.ptr(5, \"6103515625\"), new leftCheat.ptr(5, \"30517578125\"), new leftCheat.ptr(5, \"152587890625\"), new leftCheat.ptr(6, \"762939453125\"), new leftCheat.ptr(6, \"3814697265625\"), new leftCheat.ptr(6, \"19073486328125\"), new leftCheat.ptr(7, \"95367431640625\"), new leftCheat.ptr(7, \"476837158203125\"), new leftCheat.ptr(7, \"2384185791015625\"), new leftCheat.ptr(7, \"11920928955078125\"), new leftCheat.ptr(8, \"59604644775390625\"), new leftCheat.ptr(8, \"298023223876953125\"), new leftCheat.ptr(8, \"1490116119384765625\"), new leftCheat.ptr(9, \"7450580596923828125\")]);\n\t\tsmallPowersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(2147483648, 0), -63, false), new extFloat.ptr(new $Uint64(2684354560, 0), -60, false), new extFloat.ptr(new $Uint64(3355443200, 0), -57, false), new extFloat.ptr(new $Uint64(4194304000, 0), -54, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3276800000, 0), -47, false), new extFloat.ptr(new $Uint64(4096000000, 0), -44, false), new extFloat.ptr(new $Uint64(2560000000, 0), -40, false)]);\n\t\tpowersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);\n\t\tuint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);\n\t\tfloat32info = new floatInfo.ptr(23, 8, -127);\n\t\tfloat64info = new floatInfo.ptr(52, 11, -1023);\n\t\tisPrint16 = new sliceType$4([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2142, 2208, 2226, 2276, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2555, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2817, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3161, 3168, 3171, 3174, 3183, 3192, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3329, 3386, 3389, 3406, 3415, 3415, 3424, 3427, 3430, 3445, 3449, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5108, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6846, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7295, 7360, 7367, 7376, 7417, 7424, 7669, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8381, 8400, 8432, 8448, 8585, 8592, 9210, 9216, 9254, 9280, 9290, 9312, 11123, 11126, 11157, 11160, 11193, 11197, 11217, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11842, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12589, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40908, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42925, 42928, 42929, 42999, 43051, 43056, 43065, 43072, 43127, 43136, 43204, 43214, 43225, 43232, 43259, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43871, 43876, 43877, 43968, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65069, 65072, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);\n\t\tisNotPrint16 = new sliceType$4([173, 907, 909, 930, 1328, 1376, 1416, 1424, 1757, 2111, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3141, 3145, 3159, 3200, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7415, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 11209, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 42654, 42895, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);\n\t\tisPrint32 = new sliceType$5([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65932, 65936, 65947, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66352, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67840, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68030, 68031, 68096, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 69216, 69246, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 69968, 70006, 70016, 70088, 70093, 70093, 70096, 70106, 70113, 70132, 70144, 70205, 70320, 70378, 70384, 70393, 70401, 70412, 70415, 70416, 70419, 70457, 70460, 70468, 70471, 70472, 70475, 70477, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71113, 71168, 71236, 71248, 71257, 71296, 71351, 71360, 71369, 71840, 71922, 71935, 71935, 72384, 72440, 73728, 74648, 74752, 74868, 77824, 78894, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93952, 94020, 94032, 94078, 94095, 94111, 110592, 110593, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119261, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 120831, 124928, 125124, 125127, 125142, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127244, 127248, 127339, 127344, 127386, 127462, 127490, 127504, 127546, 127552, 127560, 127568, 127569, 127744, 127788, 127792, 127869, 127872, 127950, 127956, 127991, 128000, 128330, 128336, 128578, 128581, 128719, 128736, 128748, 128752, 128755, 128768, 128883, 128896, 128980, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 131072, 173782, 173824, 177972, 177984, 178205, 194560, 195101, 917760, 917999]);\n\t\tisNotPrint32 = new sliceType$4([12, 39, 59, 62, 926, 2057, 2102, 2134, 2564, 2580, 2584, 4285, 4405, 4626, 4868, 4905, 4913, 4916, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 61743, 62719, 62842, 62884]);\n\t\tshifts = $toNativeArray($kindUint, [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]);\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"reflect\"] = (function() {\n\tvar $pkg = {}, $init, js, math, runtime, strconv, sync, mapIter, Type, Kind, rtype, typeAlg, method, uncommonType, ChanDir, arrayType, chanType, funcType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, StructField, StructTag, fieldScan, Value, flag, ValueError, nonEmptyInterface, ptrType$1, sliceType$1, ptrType$3, funcType$1, sliceType$2, ptrType$4, arrayType$1, ptrType$5, ptrType$6, sliceType$3, sliceType$4, sliceType$5, sliceType$6, structType$5, sliceType$7, ptrType$7, arrayType$2, structType$6, ptrType$8, sliceType$8, ptrType$9, sliceType$9, ptrType$10, ptrType$11, ptrType$12, sliceType$11, sliceType$12, ptrType$13, ptrType$18, sliceType$14, sliceType$15, funcType$3, funcType$4, funcType$5, arrayType$3, ptrType$21, initialized, stringPtrMap, callHelper, jsObjectPtr, selectHelper, kindNames, uint8Type, init, jsType, reflectType, setKindType, newStringPtr, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, SliceOf, Zero, unsafe_New, makeInt, memmove, makemap, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapiternext, maplen, cvtDirect, Copy, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, chanrecv, chansend, PtrTo, implements$1, directlyAssignable, haveIdenticalUnderlyingType, toType, ifaceIndir, overflowFloat32, typesMustMatch, grow, Append, MakeMap, Indirect, New, convertOp, makeFloat, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I;\n\tjs = $packages[\"github.com/gopherjs/gopherjs/js\"];\n\tmath = $packages[\"math\"];\n\truntime = $packages[\"runtime\"];\n\tstrconv = $packages[\"strconv\"];\n\tsync = $packages[\"sync\"];\n\tmapIter = $pkg.mapIter = $newType(0, $kindStruct, \"reflect.mapIter\", \"mapIter\", \"reflect\", function(t_, m_, keys_, i_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.t = $ifaceNil;\n\t\t\tthis.m = null;\n\t\t\tthis.keys = null;\n\t\t\tthis.i = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.t = t_;\n\t\tthis.m = m_;\n\t\tthis.keys = keys_;\n\t\tthis.i = i_;\n\t});\n\tType = $pkg.Type = $newType(8, $kindInterface, \"reflect.Type\", \"Type\", \"reflect\", null);\n\tKind = $pkg.Kind = $newType(4, $kindUint, \"reflect.Kind\", \"Kind\", \"reflect\", null);\n\trtype = $pkg.rtype = $newType(0, $kindStruct, \"reflect.rtype\", \"rtype\", \"reflect\", function(size_, hash_, _$2_, align_, fieldAlign_, kind_, alg_, gc_, string_, uncommonType_, ptrToThis_, zero_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.size = 0;\n\t\t\tthis.hash = 0;\n\t\t\tthis._$2 = 0;\n\t\t\tthis.align = 0;\n\t\t\tthis.fieldAlign = 0;\n\t\t\tthis.kind = 0;\n\t\t\tthis.alg = ptrType$4.nil;\n\t\t\tthis.gc = arrayType$1.zero();\n\t\t\tthis.string = ptrType$5.nil;\n\t\t\tthis.uncommonType = ptrType$6.nil;\n\t\t\tthis.ptrToThis = ptrType$1.nil;\n\t\t\tthis.zero = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.size = size_;\n\t\tthis.hash = hash_;\n\t\tthis._$2 = _$2_;\n\t\tthis.align = align_;\n\t\tthis.fieldAlign = fieldAlign_;\n\t\tthis.kind = kind_;\n\t\tthis.alg = alg_;\n\t\tthis.gc = gc_;\n\t\tthis.string = string_;\n\t\tthis.uncommonType = uncommonType_;\n\t\tthis.ptrToThis = ptrToThis_;\n\t\tthis.zero = zero_;\n\t});\n\ttypeAlg = $pkg.typeAlg = $newType(0, $kindStruct, \"reflect.typeAlg\", \"typeAlg\", \"reflect\", function(hash_, equal_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.hash = $throwNilPointerError;\n\t\t\tthis.equal = $throwNilPointerError;\n\t\t\treturn;\n\t\t}\n\t\tthis.hash = hash_;\n\t\tthis.equal = equal_;\n\t});\n\tmethod = $pkg.method = $newType(0, $kindStruct, \"reflect.method\", \"method\", \"reflect\", function(name_, pkgPath_, mtyp_, typ_, ifn_, tfn_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.name = ptrType$5.nil;\n\t\t\tthis.pkgPath = ptrType$5.nil;\n\t\t\tthis.mtyp = ptrType$1.nil;\n\t\t\tthis.typ = ptrType$1.nil;\n\t\t\tthis.ifn = 0;\n\t\t\tthis.tfn = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.name = name_;\n\t\tthis.pkgPath = pkgPath_;\n\t\tthis.mtyp = mtyp_;\n\t\tthis.typ = typ_;\n\t\tthis.ifn = ifn_;\n\t\tthis.tfn = tfn_;\n\t});\n\tuncommonType = $pkg.uncommonType = $newType(0, $kindStruct, \"reflect.uncommonType\", \"uncommonType\", \"reflect\", function(name_, pkgPath_, methods_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.name = ptrType$5.nil;\n\t\t\tthis.pkgPath = ptrType$5.nil;\n\t\t\tthis.methods = sliceType$3.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.name = name_;\n\t\tthis.pkgPath = pkgPath_;\n\t\tthis.methods = methods_;\n\t});\n\tChanDir = $pkg.ChanDir = $newType(4, $kindInt, \"reflect.ChanDir\", \"ChanDir\", \"reflect\", null);\n\tarrayType = $pkg.arrayType = $newType(0, $kindStruct, \"reflect.arrayType\", \"arrayType\", \"reflect\", function(rtype_, elem_, slice_, len_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.rtype = new rtype.ptr();\n\t\t\tthis.elem = ptrType$1.nil;\n\t\t\tthis.slice = ptrType$1.nil;\n\t\t\tthis.len = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.rtype = rtype_;\n\t\tthis.elem = elem_;\n\t\tthis.slice = slice_;\n\t\tthis.len = len_;\n\t});\n\tchanType = $pkg.chanType = $newType(0, $kindStruct, \"reflect.chanType\", \"chanType\", \"reflect\", function(rtype_, elem_, dir_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.rtype = new rtype.ptr();\n\t\t\tthis.elem = ptrType$1.nil;\n\t\t\tthis.dir = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.rtype = rtype_;\n\t\tthis.elem = elem_;\n\t\tthis.dir = dir_;\n\t});\n\tfuncType = $pkg.funcType = $newType(0, $kindStruct, \"reflect.funcType\", \"funcType\", \"reflect\", function(rtype_, dotdotdot_, in$2_, out_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.rtype = new rtype.ptr();\n\t\t\tthis.dotdotdot = false;\n\t\t\tthis.in$2 = sliceType$4.nil;\n\t\t\tthis.out = sliceType$4.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.rtype = rtype_;\n\t\tthis.dotdotdot = dotdotdot_;\n\t\tthis.in$2 = in$2_;\n\t\tthis.out = out_;\n\t});\n\timethod = $pkg.imethod = $newType(0, $kindStruct, \"reflect.imethod\", \"imethod\", \"reflect\", function(name_, pkgPath_, typ_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.name = ptrType$5.nil;\n\t\t\tthis.pkgPath = ptrType$5.nil;\n\t\t\tthis.typ = ptrType$1.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.name = name_;\n\t\tthis.pkgPath = pkgPath_;\n\t\tthis.typ = typ_;\n\t});\n\tinterfaceType = $pkg.interfaceType = $newType(0, $kindStruct, \"reflect.interfaceType\", \"interfaceType\", \"reflect\", function(rtype_, methods_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.rtype = new rtype.ptr();\n\t\t\tthis.methods = sliceType$5.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.rtype = rtype_;\n\t\tthis.methods = methods_;\n\t});\n\tmapType = $pkg.mapType = $newType(0, $kindStruct, \"reflect.mapType\", \"mapType\", \"reflect\", function(rtype_, key_, elem_, bucket_, hmap_, keysize_, indirectkey_, valuesize_, indirectvalue_, bucketsize_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.rtype = new rtype.ptr();\n\t\t\tthis.key = ptrType$1.nil;\n\t\t\tthis.elem = ptrType$1.nil;\n\t\t\tthis.bucket = ptrType$1.nil;\n\t\t\tthis.hmap = ptrType$1.nil;\n\t\t\tthis.keysize = 0;\n\t\t\tthis.indirectkey = 0;\n\t\t\tthis.valuesize = 0;\n\t\t\tthis.indirectvalue = 0;\n\t\t\tthis.bucketsize = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.rtype = rtype_;\n\t\tthis.key = key_;\n\t\tthis.elem = elem_;\n\t\tthis.bucket = bucket_;\n\t\tthis.hmap = hmap_;\n\t\tthis.keysize = keysize_;\n\t\tthis.indirectkey = indirectkey_;\n\t\tthis.valuesize = valuesize_;\n\t\tthis.indirectvalue = indirectvalue_;\n\t\tthis.bucketsize = bucketsize_;\n\t});\n\tptrType = $pkg.ptrType = $newType(0, $kindStruct, \"reflect.ptrType\", \"ptrType\", \"reflect\", function(rtype_, elem_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.rtype = new rtype.ptr();\n\t\t\tthis.elem = ptrType$1.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.rtype = rtype_;\n\t\tthis.elem = elem_;\n\t});\n\tsliceType = $pkg.sliceType = $newType(0, $kindStruct, \"reflect.sliceType\", \"sliceType\", \"reflect\", function(rtype_, elem_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.rtype = new rtype.ptr();\n\t\t\tthis.elem = ptrType$1.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.rtype = rtype_;\n\t\tthis.elem = elem_;\n\t});\n\tstructField = $pkg.structField = $newType(0, $kindStruct, \"reflect.structField\", \"structField\", \"reflect\", function(name_, pkgPath_, typ_, tag_, offset_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.name = ptrType$5.nil;\n\t\t\tthis.pkgPath = ptrType$5.nil;\n\t\t\tthis.typ = ptrType$1.nil;\n\t\t\tthis.tag = ptrType$5.nil;\n\t\t\tthis.offset = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.name = name_;\n\t\tthis.pkgPath = pkgPath_;\n\t\tthis.typ = typ_;\n\t\tthis.tag = tag_;\n\t\tthis.offset = offset_;\n\t});\n\tstructType = $pkg.structType = $newType(0, $kindStruct, \"reflect.structType\", \"structType\", \"reflect\", function(rtype_, fields_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.rtype = new rtype.ptr();\n\t\t\tthis.fields = sliceType$6.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.rtype = rtype_;\n\t\tthis.fields = fields_;\n\t});\n\tMethod = $pkg.Method = $newType(0, $kindStruct, \"reflect.Method\", \"Method\", \"reflect\", function(Name_, PkgPath_, Type_, Func_, Index_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Name = \"\";\n\t\t\tthis.PkgPath = \"\";\n\t\t\tthis.Type = $ifaceNil;\n\t\t\tthis.Func = new Value.ptr();\n\t\t\tthis.Index = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.Name = Name_;\n\t\tthis.PkgPath = PkgPath_;\n\t\tthis.Type = Type_;\n\t\tthis.Func = Func_;\n\t\tthis.Index = Index_;\n\t});\n\tStructField = $pkg.StructField = $newType(0, $kindStruct, \"reflect.StructField\", \"StructField\", \"reflect\", function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Name = \"\";\n\t\t\tthis.PkgPath = \"\";\n\t\t\tthis.Type = $ifaceNil;\n\t\t\tthis.Tag = \"\";\n\t\t\tthis.Offset = 0;\n\t\t\tthis.Index = sliceType$11.nil;\n\t\t\tthis.Anonymous = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.Name = Name_;\n\t\tthis.PkgPath = PkgPath_;\n\t\tthis.Type = Type_;\n\t\tthis.Tag = Tag_;\n\t\tthis.Offset = Offset_;\n\t\tthis.Index = Index_;\n\t\tthis.Anonymous = Anonymous_;\n\t});\n\tStructTag = $pkg.StructTag = $newType(8, $kindString, \"reflect.StructTag\", \"StructTag\", \"reflect\", null);\n\tfieldScan = $pkg.fieldScan = $newType(0, $kindStruct, \"reflect.fieldScan\", \"fieldScan\", \"reflect\", function(typ_, index_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.typ = ptrType$13.nil;\n\t\t\tthis.index = sliceType$11.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.typ = typ_;\n\t\tthis.index = index_;\n\t});\n\tValue = $pkg.Value = $newType(0, $kindStruct, \"reflect.Value\", \"Value\", \"reflect\", function(typ_, ptr_, flag_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.typ = ptrType$1.nil;\n\t\t\tthis.ptr = 0;\n\t\t\tthis.flag = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.typ = typ_;\n\t\tthis.ptr = ptr_;\n\t\tthis.flag = flag_;\n\t});\n\tflag = $pkg.flag = $newType(4, $kindUintptr, \"reflect.flag\", \"flag\", \"reflect\", null);\n\tValueError = $pkg.ValueError = $newType(0, $kindStruct, \"reflect.ValueError\", \"ValueError\", \"reflect\", function(Method_, Kind_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Method = \"\";\n\t\t\tthis.Kind = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.Method = Method_;\n\t\tthis.Kind = Kind_;\n\t});\n\tnonEmptyInterface = $pkg.nonEmptyInterface = $newType(0, $kindStruct, \"reflect.nonEmptyInterface\", \"nonEmptyInterface\", \"reflect\", function(itab_, word_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.itab = ptrType$8.nil;\n\t\t\tthis.word = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.itab = itab_;\n\t\tthis.word = word_;\n\t});\n\tptrType$1 = $ptrType(rtype);\n\tsliceType$1 = $sliceType($emptyInterface);\n\tptrType$3 = $ptrType(js.Object);\n\tfuncType$1 = $funcType([sliceType$1], [ptrType$3], true);\n\tsliceType$2 = $sliceType($String);\n\tptrType$4 = $ptrType(typeAlg);\n\tarrayType$1 = $arrayType($UnsafePointer, 2);\n\tptrType$5 = $ptrType($String);\n\tptrType$6 = $ptrType(uncommonType);\n\tsliceType$3 = $sliceType(method);\n\tsliceType$4 = $sliceType(ptrType$1);\n\tsliceType$5 = $sliceType(imethod);\n\tsliceType$6 = $sliceType(structField);\n\tstructType$5 = $structType([{prop: \"str\", name: \"str\", pkg: \"reflect\", typ: $String, tag: \"\"}]);\n\tsliceType$7 = $sliceType(Value);\n\tptrType$7 = $ptrType(nonEmptyInterface);\n\tarrayType$2 = $arrayType($UnsafePointer, 100000);\n\tstructType$6 = $structType([{prop: \"ityp\", name: \"ityp\", pkg: \"reflect\", typ: ptrType$1, tag: \"\"}, {prop: \"typ\", name: \"typ\", pkg: \"reflect\", typ: ptrType$1, tag: \"\"}, {prop: \"link\", name: \"link\", pkg: \"reflect\", typ: $UnsafePointer, tag: \"\"}, {prop: \"bad\", name: \"bad\", pkg: \"reflect\", typ: $Int32, tag: \"\"}, {prop: \"unused\", name: \"unused\", pkg: \"reflect\", typ: $Int32, tag: \"\"}, {prop: \"fun\", name: \"fun\", pkg: \"reflect\", typ: arrayType$2, tag: \"\"}]);\n\tptrType$8 = $ptrType(structType$6);\n\tsliceType$8 = $sliceType(ptrType$3);\n\tptrType$9 = $ptrType($Uint8);\n\tsliceType$9 = $sliceType(sliceType$1);\n\tptrType$10 = $ptrType(method);\n\tptrType$11 = $ptrType(interfaceType);\n\tptrType$12 = $ptrType(imethod);\n\tsliceType$11 = $sliceType($Int);\n\tsliceType$12 = $sliceType(fieldScan);\n\tptrType$13 = $ptrType(structType);\n\tptrType$18 = $ptrType($UnsafePointer);\n\tsliceType$14 = $sliceType($Uint8);\n\tsliceType$15 = $sliceType($Int32);\n\tfuncType$3 = $funcType([$String], [$Bool], false);\n\tfuncType$4 = $funcType([$UnsafePointer, $Uintptr, $Uintptr], [$Uintptr], false);\n\tfuncType$5 = $funcType([$UnsafePointer, $UnsafePointer, $Uintptr], [$Bool], false);\n\tarrayType$3 = $arrayType($Uintptr, 2);\n\tptrType$21 = $ptrType(ValueError);\n\tinit = function() {\n\t\tvar $ptr, used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; used = $f.used; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tused = (function(i) {\n\t\t\tvar $ptr, i;\n\t\t});\n\t\t$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil, arrayType$1.zero(), ptrType$5.nil, ptrType$6.nil, ptrType$1.nil, 0), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = used((x$1 = new uncommonType.ptr(ptrType$5.nil, ptrType$5.nil, sliceType$3.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = used((x$2 = new method.ptr(ptrType$5.nil, ptrType$5.nil, ptrType$1.nil, ptrType$1.nil, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = used((x$3 = new arrayType.ptr(new rtype.ptr(), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = used((x$4 = new chanType.ptr(new rtype.ptr(), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = used((x$5 = new funcType.ptr(new rtype.ptr(), false, sliceType$4.nil, sliceType$4.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(), sliceType$5.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = used((x$7 = new mapType.ptr(new rtype.ptr(), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = used((x$8 = new ptrType.ptr(new rtype.ptr(), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = used((x$9 = new sliceType.ptr(new rtype.ptr(), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = used((x$10 = new structType.ptr(new rtype.ptr(), sliceType$6.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = used((x$11 = new imethod.ptr(ptrType$5.nil, ptrType$5.nil, ptrType$1.nil), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = used((x$12 = new structField.ptr(ptrType$5.nil, ptrType$5.nil, ptrType$1.nil, ptrType$5.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tinitialized = true;\n\t\tuint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: init }; } $f.$ptr = $ptr; $f.used = used; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tjsType = function(typ) {\n\t\tvar $ptr, typ;\n\t\treturn typ.jsType;\n\t};\n\treflectType = function(typ) {\n\t\tvar $ptr, _i, _i$1, _i$2, _i$3, _i$4, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, dir, f, fields, i, i$1, i$2, i$3, i$4, imethods, in$1, m, m$1, methodSet, methods, out, params, reflectFields, reflectMethods, results, rt, t, typ;\n\t\tif (typ.reflectType === undefined) {\n\t\t\trt = new rtype.ptr((($parseInt(typ.size) >> 0) >>> 0), 0, 0, 0, 0, (($parseInt(typ.kind) >> 0) << 24 >>> 24), ptrType$4.nil, arrayType$1.zero(), newStringPtr(typ.string), ptrType$6.nil, ptrType$1.nil, 0);\n\t\t\trt.jsType = typ;\n\t\t\ttyp.reflectType = rt;\n\t\t\tmethodSet = $methodSet(typ);\n\t\t\tif (!($internalize(typ.typeName, $String) === \"\") || !(($parseInt(methodSet.length) === 0))) {\n\t\t\t\treflectMethods = $makeSlice(sliceType$3, $parseInt(methodSet.length));\n\t\t\t\t_ref = reflectMethods;\n\t\t\t\t_i = 0;\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\t\t\ti = _i;\n\t\t\t\t\tm = methodSet[i];\n\t\t\t\t\tt = m.typ;\n\t\t\t\t\t$copy(((i < 0 || i >= reflectMethods.$length) ? $throwRuntimeError(\"index out of range\") : reflectMethods.$array[reflectMethods.$offset + i]), new method.ptr(newStringPtr(m.name), newStringPtr(m.pkg), reflectType(t), reflectType($funcType(new ($global.Array)(typ).concat(t.params), t.results, t.variadic)), 0, 0), method);\n\t\t\t\t\t_i++;\n\t\t\t\t}\n\t\t\t\trt.uncommonType = new uncommonType.ptr(newStringPtr(typ.typeName), newStringPtr(typ.pkg), reflectMethods);\n\t\t\t\trt.uncommonType.jsType = typ;\n\t\t\t}\n\t\t\t_ref$1 = rt.Kind();\n\t\t\tif (_ref$1 === 17) {\n\t\t\t\tsetKindType(rt, new arrayType.ptr(new rtype.ptr(), reflectType(typ.elem), ptrType$1.nil, (($parseInt(typ.len) >> 0) >>> 0)));\n\t\t\t} else if (_ref$1 === 18) {\n\t\t\t\tdir = 3;\n\t\t\t\tif (!!(typ.sendOnly)) {\n\t\t\t\t\tdir = 2;\n\t\t\t\t}\n\t\t\t\tif (!!(typ.recvOnly)) {\n\t\t\t\t\tdir = 1;\n\t\t\t\t}\n\t\t\t\tsetKindType(rt, new chanType.ptr(new rtype.ptr(), reflectType(typ.elem), (dir >>> 0)));\n\t\t\t} else if (_ref$1 === 19) {\n\t\t\t\tparams = typ.params;\n\t\t\t\tin$1 = $makeSlice(sliceType$4, $parseInt(params.length));\n\t\t\t\t_ref$2 = in$1;\n\t\t\t\t_i$1 = 0;\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!(_i$1 < _ref$2.$length)) { break; }\n\t\t\t\t\ti$1 = _i$1;\n\t\t\t\t\t((i$1 < 0 || i$1 >= in$1.$length) ? $throwRuntimeError(\"index out of range\") : in$1.$array[in$1.$offset + i$1] = reflectType(params[i$1]));\n\t\t\t\t\t_i$1++;\n\t\t\t\t}\n\t\t\t\tresults = typ.results;\n\t\t\t\tout = $makeSlice(sliceType$4, $parseInt(results.length));\n\t\t\t\t_ref$3 = out;\n\t\t\t\t_i$2 = 0;\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!(_i$2 < _ref$3.$length)) { break; }\n\t\t\t\t\ti$2 = _i$2;\n\t\t\t\t\t((i$2 < 0 || i$2 >= out.$length) ? $throwRuntimeError(\"index out of range\") : out.$array[out.$offset + i$2] = reflectType(results[i$2]));\n\t\t\t\t\t_i$2++;\n\t\t\t\t}\n\t\t\t\tsetKindType(rt, new funcType.ptr($clone(rt, rtype), !!(typ.variadic), in$1, out));\n\t\t\t} else if (_ref$1 === 20) {\n\t\t\t\tmethods = typ.methods;\n\t\t\t\timethods = $makeSlice(sliceType$5, $parseInt(methods.length));\n\t\t\t\t_ref$4 = imethods;\n\t\t\t\t_i$3 = 0;\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!(_i$3 < _ref$4.$length)) { break; }\n\t\t\t\t\ti$3 = _i$3;\n\t\t\t\t\tm$1 = methods[i$3];\n\t\t\t\t\t$copy(((i$3 < 0 || i$3 >= imethods.$length) ? $throwRuntimeError(\"index out of range\") : imethods.$array[imethods.$offset + i$3]), new imethod.ptr(newStringPtr(m$1.name), newStringPtr(m$1.pkg), reflectType(m$1.typ)), imethod);\n\t\t\t\t\t_i$3++;\n\t\t\t\t}\n\t\t\t\tsetKindType(rt, new interfaceType.ptr($clone(rt, rtype), imethods));\n\t\t\t} else if (_ref$1 === 21) {\n\t\t\t\tsetKindType(rt, new mapType.ptr(new rtype.ptr(), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0));\n\t\t\t} else if (_ref$1 === 22) {\n\t\t\t\tsetKindType(rt, new ptrType.ptr(new rtype.ptr(), reflectType(typ.elem)));\n\t\t\t} else if (_ref$1 === 23) {\n\t\t\t\tsetKindType(rt, new sliceType.ptr(new rtype.ptr(), reflectType(typ.elem)));\n\t\t\t} else if (_ref$1 === 25) {\n\t\t\t\tfields = typ.fields;\n\t\t\t\treflectFields = $makeSlice(sliceType$6, $parseInt(fields.length));\n\t\t\t\t_ref$5 = reflectFields;\n\t\t\t\t_i$4 = 0;\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!(_i$4 < _ref$5.$length)) { break; }\n\t\t\t\t\ti$4 = _i$4;\n\t\t\t\t\tf = fields[i$4];\n\t\t\t\t\t$copy(((i$4 < 0 || i$4 >= reflectFields.$length) ? $throwRuntimeError(\"index out of range\") : reflectFields.$array[reflectFields.$offset + i$4]), new structField.ptr(newStringPtr(f.name), newStringPtr(f.pkg), reflectType(f.typ), newStringPtr(f.tag), (i$4 >>> 0)), structField);\n\t\t\t\t\t_i$4++;\n\t\t\t\t}\n\t\t\t\tsetKindType(rt, new structType.ptr($clone(rt, rtype), reflectFields));\n\t\t\t}\n\t\t}\n\t\treturn typ.reflectType;\n\t};\n\tsetKindType = function(rt, kindType) {\n\t\tvar $ptr, kindType, rt;\n\t\trt.kindType = kindType;\n\t\tkindType.rtype = rt;\n\t};\n\tnewStringPtr = function(strObj) {\n\t\tvar $ptr, _entry, _key, _tuple, c, ok, ptr, str, strObj, str_ptr;\n\t\tc = $clone(new structType$5.ptr(), structType$5);\n\t\tc.str = strObj;\n\t\tstr = c.str;\n\t\tif (str === \"\") {\n\t\t\treturn ptrType$5.nil;\n\t\t}\n\t\t_tuple = (_entry = stringPtrMap[str], _entry !== undefined ? [_entry.v, true] : [ptrType$5.nil, false]); ptr = _tuple[0]; ok = _tuple[1];\n\t\tif (!ok) {\n\t\t\tptr = (str_ptr || (str_ptr = new ptrType$5(function() { return str; }, function($v) { str = $v; })));\n\t\t\t_key = str; (stringPtrMap || $throwRuntimeError(\"assignment to entry in nil map\"))[_key] = { k: _key, v: ptr };\n\t\t}\n\t\treturn ptr;\n\t};\n\tisWrapped = function(typ) {\n\t\tvar $ptr, _r, _r$1, _r$2, _ref, typ, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = typ.Kind(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_ref = _r;\n\t\t/* */ if (_ref === 1 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 12 || _ref === 13 || _ref === 14 || _ref === 17 || _ref === 21 || _ref === 19 || _ref === 24 || _ref === 25) { $s = 2; continue; }\n\t\t/* */ if (_ref === 22) { $s = 3; continue; }\n\t\t/* */ $s = 4; continue;\n\t\t/* if (_ref === 1 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 12 || _ref === 13 || _ref === 14 || _ref === 17 || _ref === 21 || _ref === 19 || _ref === 24 || _ref === 25) { */ case 2:\n\t\t\treturn true;\n\t\t\t$s = 4; continue;\n\t\t/* } else if (_ref === 22) { */ case 3:\n\t\t\t_r$1 = typ.Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t_r$2 = _r$1.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\treturn _r$2 === 17;\n\t\t/* } */ case 4:\n\t\treturn false;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: isWrapped }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tcopyStruct = function(dst, src, typ) {\n\t\tvar $ptr, dst, fields, i, prop, src, typ;\n\t\tfields = jsType(typ).fields;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < $parseInt(fields.length))) { break; }\n\t\t\tprop = $internalize(fields[i].prop, $String);\n\t\t\tdst[$externalize(prop, $String)] = src[$externalize(prop, $String)];\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t};\n\tmakeValue = function(t, v, fl) {\n\t\tvar $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; _v$1 = $f._v$1; fl = $f.fl; rt = $f.rt; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\trt = _r;\n\t\t_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\tif (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }\n\t\t_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_v$1 = _r$2 === 25; case 5:\n\t\tif (_v$1) { _v = true; $s = 4; continue s; }\n\t\t_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t_v = _r$3 === 22; case 4:\n\t\t/* */ if (_v) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (_v) { */ case 2:\n\t\t\t_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\treturn new Value.ptr(rt, v, (fl | (_r$4 >>> 0)) >>> 0);\n\t\t/* } */ case 3:\n\t\t_r$5 = t.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn new Value.ptr(rt, $newDataPointer(v, jsType(rt.ptrTo())), (((fl | (_r$5 >>> 0)) >>> 0) | 64) >>> 0);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeValue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f._v$1 = _v$1; $f.fl = fl; $f.rt = rt; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tMakeSlice = function(typ, len, cap) {\n\t\tvar $ptr, _r, _r$1, cap, len, typ, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; len = $f.len; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ttyp = [typ];\n\t\t_r = typ[0].Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t/* */ if (!((_r === 23))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!((_r === 23))) { */ case 1:\n\t\t\t$panic(new $String(\"reflect.MakeSlice of non-slice type\"));\n\t\t/* } */ case 2:\n\t\tif (len < 0) {\n\t\t\t$panic(new $String(\"reflect.MakeSlice: negative len\"));\n\t\t}\n\t\tif (cap < 0) {\n\t\t\t$panic(new $String(\"reflect.MakeSlice: negative cap\"));\n\t\t}\n\t\tif (len > cap) {\n\t\t\t$panic(new $String(\"reflect.MakeSlice: len > cap\"));\n\t\t}\n\t\t_r$1 = makeValue(typ[0], $makeSlice(jsType(typ[0]), len, cap, (function(typ) { return function $b() {\n\t\t\tvar $ptr, _r$1, _r$2, $s, $r;\n\t\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t\t_r$1 = typ[0].Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t_r$2 = jsType(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\treturn _r$2.zero();\n\t\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.$s = $s; $f.$r = $r; return $f;\n\t\t}; })(typ)), 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn _r$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MakeSlice }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.len = len; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.MakeSlice = MakeSlice;\n\tTypeOf = function(i) {\n\t\tvar $ptr, i;\n\t\tif (!initialized) {\n\t\t\treturn new rtype.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil, arrayType$1.zero(), ptrType$5.nil, ptrType$6.nil, ptrType$1.nil, 0);\n\t\t}\n\t\tif ($interfaceIsEqual(i, $ifaceNil)) {\n\t\t\treturn $ifaceNil;\n\t\t}\n\t\treturn reflectType(i.constructor);\n\t};\n\t$pkg.TypeOf = TypeOf;\n\tValueOf = function(i) {\n\t\tvar $ptr, _r, i, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tif ($interfaceIsEqual(i, $ifaceNil)) {\n\t\t\treturn new Value.ptr(ptrType$1.nil, 0, 0);\n\t\t}\n\t\t_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ValueOf }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.ValueOf = ValueOf;\n\trtype.ptr.prototype.ptrTo = function() {\n\t\tvar $ptr, t;\n\t\tt = this;\n\t\treturn reflectType($ptrType(jsType(t)));\n\t};\n\trtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };\n\tSliceOf = function(t) {\n\t\tvar $ptr, t;\n\t\treturn reflectType($sliceType(jsType(t)));\n\t};\n\t$pkg.SliceOf = SliceOf;\n\tZero = function(typ) {\n\t\tvar $ptr, _r, typ, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = makeValue(typ, jsType(typ).zero(), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Zero }; } $f.$ptr = $ptr; $f._r = _r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Zero = Zero;\n\tunsafe_New = function(typ) {\n\t\tvar $ptr, _ref, typ;\n\t\t_ref = typ.Kind();\n\t\tif (_ref === 25) {\n\t\t\treturn new (jsType(typ).ptr)();\n\t\t} else if (_ref === 17) {\n\t\t\treturn jsType(typ).zero();\n\t\t} else {\n\t\t\treturn $newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo()));\n\t\t}\n\t};\n\tmakeInt = function(f, bits, t) {\n\t\tvar $ptr, _r, _ref, bits, f, ptr, t, typ, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; bits = $f.bits; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\ttyp = _r;\n\t\tptr = unsafe_New(typ);\n\t\t_ref = typ.Kind();\n\t\tif (_ref === 3) {\n\t\t\tptr.$set((bits.$low << 24 >> 24));\n\t\t} else if (_ref === 4) {\n\t\t\tptr.$set((bits.$low << 16 >> 16));\n\t\t} else if (_ref === 2 || _ref === 5) {\n\t\t\tptr.$set((bits.$low >> 0));\n\t\t} else if (_ref === 6) {\n\t\t\tptr.$set(new $Int64(bits.$high, bits.$low));\n\t\t} else if (_ref === 8) {\n\t\t\tptr.$set((bits.$low << 24 >>> 24));\n\t\t} else if (_ref === 9) {\n\t\t\tptr.$set((bits.$low << 16 >>> 16));\n\t\t} else if (_ref === 7 || _ref === 10 || _ref === 12) {\n\t\t\tptr.$set((bits.$low >>> 0));\n\t\t} else if (_ref === 11) {\n\t\t\tptr.$set(bits);\n\t\t}\n\t\treturn new Value.ptr(typ, ptr, (((f | 64) >>> 0) | (typ.Kind() >>> 0)) >>> 0);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeInt }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.bits = bits; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tmemmove = function(adst, asrc, n) {\n\t\tvar $ptr, adst, asrc, n;\n\t\tadst.$set(asrc.$get());\n\t};\n\tmakemap = function(t) {\n\t\tvar $ptr, m, t;\n\t\tm = 0;\n\t\tm = new ($Map)();\n\t\treturn m;\n\t};\n\tmapaccess = function(t, m, key) {\n\t\tvar $ptr, entry, k, key, m, t;\n\t\tk = key.$get();\n\t\tif (!(k.$key === undefined)) {\n\t\t\tk = k.$key();\n\t\t}\n\t\tentry = m[$externalize($internalize(k, $String), $String)];\n\t\tif (entry === undefined) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn $newDataPointer(entry.v, jsType(PtrTo(t.Elem())));\n\t};\n\tmapassign = function(t, m, key, val) {\n\t\tvar $ptr, _r, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; entry = $f.entry; et = $f.et; jsVal = $f.jsVal; k = $f.k; key = $f.key; kv = $f.kv; m = $f.m; newVal = $f.newVal; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tkv = key.$get();\n\t\tk = kv;\n\t\tif (!(k.$key === undefined)) {\n\t\t\tk = k.$key();\n\t\t}\n\t\tjsVal = val.$get();\n\t\tet = t.Elem();\n\t\t_r = et.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t/* */ if (_r === 25) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (_r === 25) { */ case 1:\n\t\t\tnewVal = jsType(et).zero();\n\t\t\tcopyStruct(newVal, jsVal, et);\n\t\t\tjsVal = newVal;\n\t\t/* } */ case 2:\n\t\tentry = new ($global.Object)();\n\t\tentry.k = kv;\n\t\tentry.v = jsVal;\n\t\tm[$externalize($internalize(k, $String), $String)] = entry;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: mapassign }; } $f.$ptr = $ptr; $f._r = _r; $f.entry = entry; $f.et = et; $f.jsVal = jsVal; $f.k = k; $f.key = key; $f.kv = kv; $f.m = m; $f.newVal = newVal; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tmapdelete = function(t, m, key) {\n\t\tvar $ptr, k, key, m, t;\n\t\tk = key.$get();\n\t\tif (!(k.$key === undefined)) {\n\t\t\tk = k.$key();\n\t\t}\n\t\tdelete m[$externalize($internalize(k, $String), $String)];\n\t};\n\tmapiterinit = function(t, m) {\n\t\tvar $ptr, m, t;\n\t\treturn new mapIter.ptr(t, m, $keys(m), 0);\n\t};\n\tmapiterkey = function(it) {\n\t\tvar $ptr, _r, _r$1, _r$2, it, iter, k, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; iter = $f.iter; k = $f.k; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\titer = it;\n\t\tk = iter.keys[iter.i];\n\t\t_r = iter.t.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\treturn $newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, _r$2);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: mapiterkey }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.iter = iter; $f.k = k; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tmapiternext = function(it) {\n\t\tvar $ptr, it, iter;\n\t\titer = it;\n\t\titer.i = iter.i + (1) >> 0;\n\t};\n\tmaplen = function(m) {\n\t\tvar $ptr, m;\n\t\treturn $parseInt($keys(m).length);\n\t};\n\tcvtDirect = function(v, typ) {\n\t\tvar $ptr, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, k, slice, srcVal, typ, v, val, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; k = $f.k; slice = $f.slice; srcVal = $f.srcVal; typ = $f.typ; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\tsrcVal = v.object();\n\t\t/* */ if (srcVal === jsType(v.typ).nil) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (srcVal === jsType(v.typ).nil) { */ case 1:\n\t\t\t_r = makeValue(typ, jsType(typ).nil, v.flag); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\treturn _r;\n\t\t/* } */ case 2:\n\t\tval = null;\n\t\t_r$1 = typ.Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\tk = _r$1;\n\t\t_ref = k;\n\t\t/* */ if (_ref === 18) { $s = 5; continue; }\n\t\t/* */ if (_ref === 23) { $s = 6; continue; }\n\t\t/* */ if (_ref === 22) { $s = 7; continue; }\n\t\t/* */ if (_ref === 25) { $s = 8; continue; }\n\t\t/* */ if (_ref === 17 || _ref === 19 || _ref === 20 || _ref === 21 || _ref === 24) { $s = 9; continue; }\n\t\t/* */ $s = 10; continue;\n\t\t/* switch (0) { default: if (_ref === 18) { */ case 5:\n\t\t\tval = new (jsType(typ))();\n\t\t\t$s = 11; continue;\n\t\t/* } else if (_ref === 23) { */ case 6:\n\t\t\tslice = new (jsType(typ))(srcVal.$array);\n\t\t\tslice.$offset = srcVal.$offset;\n\t\t\tslice.$length = srcVal.$length;\n\t\t\tslice.$capacity = srcVal.$capacity;\n\t\t\tval = $newDataPointer(slice, jsType(PtrTo(typ)));\n\t\t\t$s = 11; continue;\n\t\t/* } else if (_ref === 22) { */ case 7:\n\t\t\t_r$2 = typ.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t_r$3 = _r$2.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t/* */ if (_r$3 === 25) { $s = 12; continue; }\n\t\t\t/* */ $s = 13; continue;\n\t\t\t/* if (_r$3 === 25) { */ case 12:\n\t\t\t\t_r$4 = typ.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t\t/* */ if ($interfaceIsEqual(_r$4, v.typ.Elem())) { $s = 16; continue; }\n\t\t\t\t/* */ $s = 17; continue;\n\t\t\t\t/* if ($interfaceIsEqual(_r$4, v.typ.Elem())) { */ case 16:\n\t\t\t\t\tval = srcVal;\n\t\t\t\t\t/* break; */ $s = 11; continue;\n\t\t\t\t/* } */ case 17:\n\t\t\t\tval = new (jsType(typ))();\n\t\t\t\t_arg = val;\n\t\t\t\t_arg$1 = srcVal;\n\t\t\t\t_r$5 = typ.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t\t_arg$2 = _r$5;\n\t\t\t\t$r = copyStruct(_arg, _arg$1, _arg$2); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t/* break; */ $s = 11; continue;\n\t\t\t/* } */ case 13:\n\t\t\tval = new (jsType(typ))(srcVal.$get, srcVal.$set);\n\t\t\t$s = 11; continue;\n\t\t/* } else if (_ref === 25) { */ case 8:\n\t\t\tval = new (jsType(typ).ptr)();\n\t\t\tcopyStruct(val, srcVal, typ);\n\t\t\t$s = 11; continue;\n\t\t/* } else if (_ref === 17 || _ref === 19 || _ref === 20 || _ref === 21 || _ref === 24) { */ case 9:\n\t\t\tval = v.ptr;\n\t\t\t$s = 11; continue;\n\t\t/* } else { */ case 10:\n\t\t\t$panic(new ValueError.ptr(\"reflect.Convert\", k));\n\t\t/* } } */ case 11:\n\t\t_r$6 = typ.common(); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_r$7 = typ.Kind(); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\treturn new Value.ptr(_r$6, val, (((v.flag & 96) >>> 0) | (_r$7 >>> 0)) >>> 0);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtDirect }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f.k = k; $f.slice = slice; $f.srcVal = srcVal; $f.typ = typ; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tCopy = function(dst, src) {\n\t\tvar $ptr, dk, dst, dstVal, sk, src, srcVal, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; dk = $f.dk; dst = $f.dst; dstVal = $f.dstVal; sk = $f.sk; src = $f.src; srcVal = $f.srcVal; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tsrc = src;\n\t\tdst = dst;\n\t\tdk = new flag(dst.flag).kind();\n\t\tif (!((dk === 17)) && !((dk === 23))) {\n\t\t\t$panic(new ValueError.ptr(\"reflect.Copy\", dk));\n\t\t}\n\t\tif (dk === 17) {\n\t\t\tnew flag(dst.flag).mustBeAssignable();\n\t\t}\n\t\tnew flag(dst.flag).mustBeExported();\n\t\tsk = new flag(src.flag).kind();\n\t\tif (!((sk === 17)) && !((sk === 23))) {\n\t\t\t$panic(new ValueError.ptr(\"reflect.Copy\", sk));\n\t\t}\n\t\tnew flag(src.flag).mustBeExported();\n\t\t$r = typesMustMatch(\"reflect.Copy\", dst.typ.Elem(), src.typ.Elem()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tdstVal = dst.object();\n\t\tif (dk === 17) {\n\t\t\tdstVal = new (jsType(SliceOf(dst.typ.Elem())))(dstVal);\n\t\t}\n\t\tsrcVal = src.object();\n\t\tif (sk === 17) {\n\t\t\tsrcVal = new (jsType(SliceOf(src.typ.Elem())))(srcVal);\n\t\t}\n\t\treturn $parseInt($copySlice(dstVal, srcVal)) >> 0;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Copy }; } $f.$ptr = $ptr; $f.dk = dk; $f.dst = dst; $f.dstVal = dstVal; $f.sk = sk; $f.src = src; $f.srcVal = srcVal; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Copy = Copy;\n\tmethodReceiver = function(op, v, i) {\n\t\tvar $ptr, _r, fn, i, iface, m, m$1, op, prop, rcvr, rcvrtype, t, tt, ut, v, x, x$1, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; fn = $f.fn; i = $f.i; iface = $f.iface; m = $f.m; m$1 = $f.m$1; op = $f.op; prop = $f.prop; rcvr = $f.rcvr; rcvrtype = $f.rcvrtype; t = $f.t; tt = $f.tt; ut = $f.ut; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\trcvrtype = ptrType$1.nil;\n\t\tt = ptrType$1.nil;\n\t\tfn = 0;\n\t\tv = v;\n\t\tprop = \"\";\n\t\tif (v.typ.Kind() === 20) {\n\t\t\ttt = v.typ.kindType;\n\t\t\tif (i < 0 || i >= tt.methods.$length) {\n\t\t\t\t$panic(new $String(\"reflect: internal error: invalid method index\"));\n\t\t\t}\n\t\t\tm = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]));\n\t\t\tif (!(m.pkgPath === ptrType$5.nil)) {\n\t\t\t\t$panic(new $String(\"reflect: \" + op + \" of unexported method\"));\n\t\t\t}\n\t\t\tiface = $pointerOfStructConversion(v.ptr, ptrType$7);\n\t\t\tif (iface.itab === ptrType$8.nil) {\n\t\t\t\t$panic(new $String(\"reflect: \" + op + \" of method on nil interface value\"));\n\t\t\t}\n\t\t\tt = m.typ;\n\t\t\tprop = m.name.$get();\n\t\t} else {\n\t\t\tut = v.typ.uncommonType.uncommon();\n\t\t\tif (ut === ptrType$6.nil || i < 0 || i >= ut.methods.$length) {\n\t\t\t\t$panic(new $String(\"reflect: internal error: invalid method index\"));\n\t\t\t}\n\t\t\tm$1 = (x$1 = ut.methods, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError(\"index out of range\") : x$1.$array[x$1.$offset + i]));\n\t\t\tif (!(m$1.pkgPath === ptrType$5.nil)) {\n\t\t\t\t$panic(new $String(\"reflect: \" + op + \" of unexported method\"));\n\t\t\t}\n\t\t\tt = m$1.mtyp;\n\t\t\tprop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);\n\t\t}\n\t\trcvr = v.object();\n\t\t_r = isWrapped(v.typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t/* */ if (_r) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (_r) { */ case 1:\n\t\t\trcvr = new (jsType(v.typ))(rcvr);\n\t\t/* } */ case 2:\n\t\tfn = rcvr[$externalize(prop, $String)];\n\t\treturn [rcvrtype, t, fn];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: methodReceiver }; } $f.$ptr = $ptr; $f._r = _r; $f.fn = fn; $f.i = i; $f.iface = iface; $f.m = m; $f.m$1 = m$1; $f.op = op; $f.prop = prop; $f.rcvr = rcvr; $f.rcvrtype = rcvrtype; $f.t = t; $f.tt = tt; $f.ut = ut; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tvalueInterface = function(v, safe) {\n\t\tvar $ptr, _r, _r$1, safe, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; safe = $f.safe; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\tif (v.flag === 0) {\n\t\t\t$panic(new ValueError.ptr(\"reflect.Value.Interface\", 0));\n\t\t}\n\t\tif (safe && !((((v.flag & 32) >>> 0) === 0))) {\n\t\t\t$panic(new $String(\"reflect.Value.Interface: cannot return value obtained from unexported field or method\"));\n\t\t}\n\t\t/* */ if (!((((v.flag & 256) >>> 0) === 0))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!((((v.flag & 256) >>> 0) === 0))) { */ case 1:\n\t\t\t_r = makeMethodValue(\"Interface\", v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\tv = _r;\n\t\t/* } */ case 2:\n\t\t_r$1 = isWrapped(v.typ); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t/* */ if (_r$1) { $s = 4; continue; }\n\t\t/* */ $s = 5; continue;\n\t\t/* if (_r$1) { */ case 4:\n\t\t\treturn new (jsType(v.typ))(v.object());\n\t\t/* } */ case 5:\n\t\treturn v.object();\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: valueInterface }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.safe = safe; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tifaceE2I = function(t, src, dst) {\n\t\tvar $ptr, dst, src, t;\n\t\tdst.$set(src);\n\t};\n\tmethodName = function() {\n\t\tvar $ptr;\n\t\treturn \"?FIXME?\";\n\t};\n\tmakeMethodValue = function(op, v) {\n\t\tvar $ptr, _r, _r$1, _r$2, _tuple, fn, fv, op, rcvr, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; fn = $f.fn; fv = $f.fv; op = $f.op; rcvr = $f.rcvr; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tfn = [fn];\n\t\trcvr = [rcvr];\n\t\tv = v;\n\t\tif (((v.flag & 256) >>> 0) === 0) {\n\t\t\t$panic(new $String(\"reflect: internal error: invalid use of makePartialFunc\"));\n\t\t}\n\t\t_r = methodReceiver(op, v, (v.flag >> 0) >> 9 >> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; fn[0] = _tuple[2];\n\t\trcvr[0] = v.object();\n\t\t_r$1 = isWrapped(v.typ); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t/* */ if (_r$1) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (_r$1) { */ case 2:\n\t\t\trcvr[0] = new (jsType(v.typ))(rcvr[0]);\n\t\t/* } */ case 3:\n\t\tfv = $makeFunc((function(fn, rcvr) { return function(arguments$1) {\n\t\t\tvar $ptr, arguments$1;\n\t\t\treturn fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$8));\n\t\t}; })(fn, rcvr));\n\t\t_r$2 = v.Type().common(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\treturn new Value.ptr(_r$2, fv, (((v.flag & 32) >>> 0) | 19) >>> 0);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeMethodValue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.fn = fn; $f.fv = fv; $f.op = op; $f.rcvr = rcvr; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\trtype.ptr.prototype.pointers = function() {\n\t\tvar $ptr, _ref, t;\n\t\tt = this;\n\t\t_ref = t.Kind();\n\t\tif (_ref === 22 || _ref === 21 || _ref === 18 || _ref === 19 || _ref === 25 || _ref === 17) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t};\n\trtype.prototype.pointers = function() { return this.$val.pointers(); };\n\trtype.ptr.prototype.Comparable = function() {\n\t\tvar $ptr, _r, _r$1, _r$2, _ref, i, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; i = $f.i; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = this;\n\t\t_ref = t.Kind();\n\t\t/* */ if (_ref === 19 || _ref === 23 || _ref === 21) { $s = 1; continue; }\n\t\t/* */ if (_ref === 17) { $s = 2; continue; }\n\t\t/* */ if (_ref === 25) { $s = 3; continue; }\n\t\t/* */ $s = 4; continue;\n\t\t/* if (_ref === 19 || _ref === 23 || _ref === 21) { */ case 1:\n\t\t\treturn false;\n\t\t\t$s = 4; continue;\n\t\t/* } else if (_ref === 17) { */ case 2:\n\t\t\t_r = t.Elem().Comparable(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\treturn _r;\n\t\t\t$s = 4; continue;\n\t\t/* } else if (_ref === 25) { */ case 3:\n\t\t\ti = 0;\n\t\t\t/* while (true) { */ case 6:\n\t\t\t\t/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 7; continue; }\n\t\t\t\t_r$1 = t.Field(i); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t\t_r$2 = _r$1.Type.Comparable(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\t/* */ if (!_r$2) { $s = 8; continue; }\n\t\t\t\t/* */ $s = 9; continue;\n\t\t\t\t/* if (!_r$2) { */ case 8:\n\t\t\t\t\treturn false;\n\t\t\t\t/* } */ case 9:\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t/* } */ $s = 6; continue; case 7:\n\t\t/* } */ case 4:\n\t\treturn true;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Comparable }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.i = i; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\trtype.prototype.Comparable = function() { return this.$val.Comparable(); };\n\tuncommonType.ptr.prototype.Method = function(i) {\n\t\tvar $ptr, fl, fn, i, m, mt, p, prop, t, x;\n\t\tm = new Method.ptr();\n\t\tt = this;\n\t\tif (t === ptrType$6.nil || i < 0 || i >= t.methods.$length) {\n\t\t\t$panic(new $String(\"reflect: Method index out of range\"));\n\t\t}\n\t\tp = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]));\n\t\tif (!(p.name === ptrType$5.nil)) {\n\t\t\tm.Name = p.name.$get();\n\t\t}\n\t\tfl = 19;\n\t\tif (!(p.pkgPath === ptrType$5.nil)) {\n\t\t\tm.PkgPath = p.pkgPath.$get();\n\t\t\tfl = (fl | (32)) >>> 0;\n\t\t}\n\t\tmt = p.typ;\n\t\tm.Type = mt;\n\t\tprop = $internalize($methodSet(t.jsType)[i].prop, $String);\n\t\tfn = $makeFunc((function(arguments$1) {\n\t\t\tvar $ptr, arguments$1, rcvr;\n\t\t\trcvr = (0 >= arguments$1.$length ? $throwRuntimeError(\"index out of range\") : arguments$1.$array[arguments$1.$offset + 0]);\n\t\t\treturn rcvr[$externalize(prop, $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$8));\n\t\t}));\n\t\tm.Func = new Value.ptr(mt, fn, fl);\n\t\tm.Index = i;\n\t\treturn m;\n\t};\n\tuncommonType.prototype.Method = function(i) { return this.$val.Method(i); };\n\tValue.ptr.prototype.object = function() {\n\t\tvar $ptr, _ref, newVal, v, val;\n\t\tv = this;\n\t\tif ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {\n\t\t\treturn v.ptr;\n\t\t}\n\t\tif (!((((v.flag & 64) >>> 0) === 0))) {\n\t\t\tval = v.ptr.$get();\n\t\t\tif (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {\n\t\t\t\t_ref = v.typ.Kind();\n\t\t\t\tswitch (0) { default: if (_ref === 11 || _ref === 6) {\n\t\t\t\t\tval = new (jsType(v.typ))(val.$high, val.$low);\n\t\t\t\t} else if (_ref === 15 || _ref === 16) {\n\t\t\t\t\tval = new (jsType(v.typ))(val.$real, val.$imag);\n\t\t\t\t} else if (_ref === 23) {\n\t\t\t\t\tif (val === val.constructor.nil) {\n\t\t\t\t\t\tval = jsType(v.typ).nil;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tnewVal = new (jsType(v.typ))(val.$array);\n\t\t\t\t\tnewVal.$offset = val.$offset;\n\t\t\t\t\tnewVal.$length = val.$length;\n\t\t\t\t\tnewVal.$capacity = val.$capacity;\n\t\t\t\t\tval = newVal;\n\t\t\t\t} }\n\t\t\t}\n\t\t\treturn val;\n\t\t}\n\t\treturn v.ptr;\n\t};\n\tValue.prototype.object = function() { return this.$val.object(); };\n\tValue.ptr.prototype.call = function(op, in$1) {\n\t\tvar $ptr, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; arg = $f.arg; argsArray = $f.argsArray; elem = $f.elem; fn = $f.fn; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; in$1 = $f.in$1; isSlice = $f.isSlice; m = $f.m; n = $f.n; nin = $f.nin; nout = $f.nout; op = $f.op; origIn = $f.origIn; rcvr = $f.rcvr; results = $f.results; ret = $f.ret; slice = $f.slice; t = $f.t; targ = $f.targ; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; xt = $f.xt; xt$1 = $f.xt$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\tt = v.typ;\n\t\tfn = 0;\n\t\trcvr = null;\n\t\t/* */ if (!((((v.flag & 256) >>> 0) === 0))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!((((v.flag & 256) >>> 0) === 0))) { */ case 1:\n\t\t\t_r = methodReceiver(op, v, (v.flag >> 0) >> 9 >> 0); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t_tuple = _r; t = _tuple[1]; fn = _tuple[2];\n\t\t\trcvr = v.object();\n\t\t\t_r$1 = isWrapped(v.typ); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t/* */ if (_r$1) { $s = 5; continue; }\n\t\t\t/* */ $s = 6; continue;\n\t\t\t/* if (_r$1) { */ case 5:\n\t\t\t\trcvr = new (jsType(v.typ))(rcvr);\n\t\t\t/* } */ case 6:\n\t\t\t$s = 3; continue;\n\t\t/* } else { */ case 2:\n\t\t\tfn = v.object();\n\t\t\trcvr = undefined;\n\t\t/* } */ case 3:\n\t\tif (fn === 0) {\n\t\t\t$panic(new $String(\"reflect.Value.Call: call of nil function\"));\n\t\t}\n\t\tisSlice = op === \"CallSlice\";\n\t\tn = t.NumIn();\n\t\tif (isSlice) {\n\t\t\tif (!t.IsVariadic()) {\n\t\t\t\t$panic(new $String(\"reflect: CallSlice of non-variadic function\"));\n\t\t\t}\n\t\t\tif (in$1.$length < n) {\n\t\t\t\t$panic(new $String(\"reflect: CallSlice with too few input arguments\"));\n\t\t\t}\n\t\t\tif (in$1.$length > n) {\n\t\t\t\t$panic(new $String(\"reflect: CallSlice with too many input arguments\"));\n\t\t\t}\n\t\t} else {\n\t\t\tif (t.IsVariadic()) {\n\t\t\t\tn = n - (1) >> 0;\n\t\t\t}\n\t\t\tif (in$1.$length < n) {\n\t\t\t\t$panic(new $String(\"reflect: Call with too few input arguments\"));\n\t\t\t}\n\t\t\tif (!t.IsVariadic() && in$1.$length > n) {\n\t\t\t\t$panic(new $String(\"reflect: Call with too many input arguments\"));\n\t\t\t}\n\t\t}\n\t\t_ref = in$1;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\tx = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tif (x.Kind() === 0) {\n\t\t\t\t$panic(new $String(\"reflect: \" + op + \" using zero Value argument\"));\n\t\t\t}\n\t\t\t_i++;\n\t\t}\n\t\ti = 0;\n\t\t/* while (true) { */ case 8:\n\t\t\t/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 9; continue; }\n\t\t\t_tmp = ((i < 0 || i >= in$1.$length) ? $throwRuntimeError(\"index out of range\") : in$1.$array[in$1.$offset + i]).Type(); _tmp$1 = t.In(i); xt = _tmp; targ = _tmp$1;\n\t\t\t_r$2 = xt.AssignableTo(targ); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t/* */ if (!_r$2) { $s = 10; continue; }\n\t\t\t/* */ $s = 11; continue;\n\t\t\t/* if (!_r$2) { */ case 10:\n\t\t\t\t_r$3 = xt.String(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t\t_r$4 = targ.String(); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t\t$panic(new $String(\"reflect: \" + op + \" using \" + _r$3 + \" as type \" + _r$4));\n\t\t\t/* } */ case 11:\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 8; continue; case 9:\n\t\t/* */ if (!isSlice && t.IsVariadic()) { $s = 15; continue; }\n\t\t/* */ $s = 16; continue;\n\t\t/* if (!isSlice && t.IsVariadic()) { */ case 15:\n\t\t\tm = in$1.$length - n >> 0;\n\t\t\t_r$5 = MakeSlice(t.In(n), m, m); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\tslice = _r$5;\n\t\t\t_r$6 = t.In(n).Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\telem = _r$6;\n\t\t\ti$1 = 0;\n\t\t\t/* while (true) { */ case 19:\n\t\t\t\t/* if (!(i$1 < m)) { break; } */ if(!(i$1 < m)) { $s = 20; continue; }\n\t\t\t\tx$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? $throwRuntimeError(\"index out of range\") : in$1.$array[in$1.$offset + x$1]));\n\t\t\t\txt$1 = x$2.Type();\n\t\t\t\t_r$7 = xt$1.AssignableTo(elem); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t\t/* */ if (!_r$7) { $s = 21; continue; }\n\t\t\t\t/* */ $s = 22; continue;\n\t\t\t\t/* if (!_r$7) { */ case 21:\n\t\t\t\t\t_r$8 = xt$1.String(); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$9 = elem.String(); /* */ $s = 25; case 25: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\t\t\t$panic(new $String(\"reflect: cannot use \" + _r$8 + \" as type \" + _r$9 + \" in \" + op));\n\t\t\t\t/* } */ case 22:\n\t\t\t\t_r$10 = slice.Index(i$1); /* */ $s = 26; case 26: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\t\t$r = _r$10.Set(x$2); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\ti$1 = i$1 + (1) >> 0;\n\t\t\t/* } */ $s = 19; continue; case 20:\n\t\t\torigIn = in$1;\n\t\t\tin$1 = $makeSlice(sliceType$7, (n + 1 >> 0));\n\t\t\t$copySlice($subslice(in$1, 0, n), origIn);\n\t\t\t((n < 0 || n >= in$1.$length) ? $throwRuntimeError(\"index out of range\") : in$1.$array[in$1.$offset + n] = slice);\n\t\t/* } */ case 16:\n\t\tnin = in$1.$length;\n\t\tif (!((nin === t.NumIn()))) {\n\t\t\t$panic(new $String(\"reflect.Value.Call: wrong argument count\"));\n\t\t}\n\t\tnout = t.NumOut();\n\t\targsArray = new ($global.Array)(t.NumIn());\n\t\t_ref$1 = in$1;\n\t\t_i$1 = 0;\n\t\t/* while (true) { */ case 28:\n\t\t\t/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 29; continue; }\n\t\t\ti$2 = _i$1;\n\t\t\targ = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError(\"index out of range\") : _ref$1.$array[_ref$1.$offset + _i$1]);\n\t\t\t_arg = t.In(i$2);\n\t\t\t_r$11 = t.In(i$2).common(); /* */ $s = 30; case 30: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t\t_arg$1 = _r$11;\n\t\t\t_arg$2 = 0;\n\t\t\t_r$12 = arg.assignTo(\"reflect.Value.Call\", _arg$1, _arg$2); /* */ $s = 31; case 31: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\t\t_r$13 = _r$12.object(); /* */ $s = 32; case 32: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }\n\t\t\t_arg$3 = _r$13;\n\t\t\t_r$14 = unwrapJsObject(_arg, _arg$3); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }\n\t\t\targsArray[i$2] = _r$14;\n\t\t\t_i$1++;\n\t\t/* } */ $s = 28; continue; case 29:\n\t\t_r$15 = callHelper(new sliceType$1([new $jsObjectPtr(fn), new $jsObjectPtr(rcvr), new $jsObjectPtr(argsArray)])); /* */ $s = 34; case 34: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }\n\t\tresults = _r$15;\n\t\t_ref$2 = nout;\n\t\t/* */ if (_ref$2 === 0) { $s = 35; continue; }\n\t\t/* */ if (_ref$2 === 1) { $s = 36; continue; }\n\t\t/* */ $s = 37; continue;\n\t\t/* if (_ref$2 === 0) { */ case 35:\n\t\t\treturn sliceType$7.nil;\n\t\t\t$s = 38; continue;\n\t\t/* } else if (_ref$2 === 1) { */ case 36:\n\t\t\t_r$16 = makeValue(t.Out(0), wrapJsObject(t.Out(0), results), 0); /* */ $s = 39; case 39: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }\n\t\t\treturn new sliceType$7([$clone(_r$16, Value)]);\n\t\t\t$s = 38; continue;\n\t\t/* } else { */ case 37:\n\t\t\tret = $makeSlice(sliceType$7, nout);\n\t\t\t_ref$3 = ret;\n\t\t\t_i$2 = 0;\n\t\t\t/* while (true) { */ case 40:\n\t\t\t\t/* if (!(_i$2 < _ref$3.$length)) { break; } */ if(!(_i$2 < _ref$3.$length)) { $s = 41; continue; }\n\t\t\t\ti$3 = _i$2;\n\t\t\t\t_r$17 = makeValue(t.Out(i$3), wrapJsObject(t.Out(i$3), results[i$3]), 0); /* */ $s = 42; case 42: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }\n\t\t\t\t((i$3 < 0 || i$3 >= ret.$length) ? $throwRuntimeError(\"index out of range\") : ret.$array[ret.$offset + i$3] = _r$17);\n\t\t\t\t_i$2++;\n\t\t\t/* } */ $s = 40; continue; case 41:\n\t\t\treturn ret;\n\t\t/* } */ case 38:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.call }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.arg = arg; $f.argsArray = argsArray; $f.elem = elem; $f.fn = fn; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.in$1 = in$1; $f.isSlice = isSlice; $f.m = m; $f.n = n; $f.nin = nin; $f.nout = nout; $f.op = op; $f.origIn = origIn; $f.rcvr = rcvr; $f.results = results; $f.ret = ret; $f.slice = slice; $f.t = t; $f.targ = targ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.xt = xt; $f.xt$1 = xt$1; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };\n\tValue.ptr.prototype.Cap = function() {\n\t\tvar $ptr, _ref, k, v;\n\t\tv = this;\n\t\tk = new flag(v.flag).kind();\n\t\t_ref = k;\n\t\tif (_ref === 17) {\n\t\t\treturn v.typ.Len();\n\t\t} else if (_ref === 18 || _ref === 23) {\n\t\t\treturn $parseInt(v.object().$capacity) >> 0;\n\t\t}\n\t\t$panic(new ValueError.ptr(\"reflect.Value.Cap\", k));\n\t};\n\tValue.prototype.Cap = function() { return this.$val.Cap(); };\n\twrapJsObject = function(typ, val) {\n\t\tvar $ptr, typ, val;\n\t\tif ($interfaceIsEqual(typ, jsObjectPtr)) {\n\t\t\treturn new (jsType(jsObjectPtr))(val);\n\t\t}\n\t\treturn val;\n\t};\n\tunwrapJsObject = function(typ, val) {\n\t\tvar $ptr, typ, val;\n\t\tif ($interfaceIsEqual(typ, jsObjectPtr)) {\n\t\t\treturn val.object;\n\t\t}\n\t\treturn val;\n\t};\n\tValue.ptr.prototype.Elem = function() {\n\t\tvar $ptr, _r, _ref, fl, k, tt, typ, v, val, val$1, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; fl = $f.fl; k = $f.k; tt = $f.tt; typ = $f.typ; v = $f.v; val = $f.val; val$1 = $f.val$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\tk = new flag(v.flag).kind();\n\t\t_ref = k;\n\t\t/* */ if (_ref === 20) { $s = 1; continue; }\n\t\t/* */ if (_ref === 22) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (_ref === 20) { */ case 1:\n\t\t\tval = v.object();\n\t\t\tif (val === $ifaceNil) {\n\t\t\t\treturn new Value.ptr(ptrType$1.nil, 0, 0);\n\t\t\t}\n\t\t\ttyp = reflectType(val.constructor);\n\t\t\t_r = makeValue(typ, val.$val, (v.flag & 32) >>> 0); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\treturn _r;\n\t\t\t$s = 4; continue;\n\t\t/* } else if (_ref === 22) { */ case 2:\n\t\t\tif (v.IsNil()) {\n\t\t\t\treturn new Value.ptr(ptrType$1.nil, 0, 0);\n\t\t\t}\n\t\t\tval$1 = v.object();\n\t\t\ttt = v.typ.kindType;\n\t\t\tfl = (((((v.flag & 32) >>> 0) | 64) >>> 0) | 128) >>> 0;\n\t\t\tfl = (fl | ((tt.elem.Kind() >>> 0))) >>> 0;\n\t\t\treturn new Value.ptr(tt.elem, wrapJsObject(tt.elem, val$1), fl);\n\t\t\t$s = 4; continue;\n\t\t/* } else { */ case 3:\n\t\t\t$panic(new ValueError.ptr(\"reflect.Value.Elem\", k));\n\t\t/* } */ case 4:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Elem }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.fl = fl; $f.k = k; $f.tt = tt; $f.typ = typ; $f.v = v; $f.val = val; $f.val$1 = val$1; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.Elem = function() { return this.$val.Elem(); };\n\tValue.ptr.prototype.Field = function(i) {\n\t\tvar $ptr, _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; field = $f.field; fl = $f.fl; i = $f.i; jsTag = $f.jsTag; o = $f.o; prop = $f.prop; s = $f.s; tag = $f.tag; tt = $f.tt; typ = $f.typ; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tjsTag = [jsTag];\n\t\tprop = [prop];\n\t\ts = [s];\n\t\ttyp = [typ];\n\t\tv = this;\n\t\tnew flag(v.flag).mustBe(25);\n\t\ttt = v.typ.kindType;\n\t\tif (i < 0 || i >= tt.fields.$length) {\n\t\t\t$panic(new $String(\"reflect: Field index out of range\"));\n\t\t}\n\t\tprop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);\n\t\tfield = (x = tt.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]));\n\t\ttyp[0] = field.typ;\n\t\tfl = (v.flag & 224) >>> 0;\n\t\tif (!(field.pkgPath === ptrType$5.nil)) {\n\t\t\tfl = (fl | (32)) >>> 0;\n\t\t}\n\t\tfl = (fl | ((typ[0].Kind() >>> 0))) >>> 0;\n\t\ttag = (x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError(\"index out of range\") : x$1.$array[x$1.$offset + i])).tag;\n\t\t/* */ if (!(tag === ptrType$5.nil) && !((i === 0))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!(tag === ptrType$5.nil) && !((i === 0))) { */ case 1:\n\t\t\tjsTag[0] = getJsTag(tag.$get());\n\t\t\t/* */ if (!(jsTag[0] === \"\")) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (!(jsTag[0] === \"\")) { */ case 3:\n\t\t\t\t/* while (true) { */ case 5:\n\t\t\t\t\to = [o];\n\t\t\t\t\t_r = v.Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t\t\tv = _r;\n\t\t\t\t\t/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }\n\t\t\t\t\t/* */ $s = 9; continue;\n\t\t\t\t\t/* if (v.typ === jsObjectPtr) { */ case 8:\n\t\t\t\t\t\to[0] = v.object().object;\n\t\t\t\t\t\treturn new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {\n\t\t\t\t\t\t\tvar $ptr;\n\t\t\t\t\t\t\treturn $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));\n\t\t\t\t\t\t}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {\n\t\t\t\t\t\t\tvar $ptr, x$2;\n\t\t\t\t\t\t\to[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));\n\t\t\t\t\t\t}; })(jsTag, o, prop, s, typ)), fl);\n\t\t\t\t\t/* } */ case 9:\n\t\t\t\t\t/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }\n\t\t\t\t\t/* */ $s = 11; continue;\n\t\t\t\t\t/* if (v.typ.Kind() === 22) { */ case 10:\n\t\t\t\t\t\t_r$1 = v.Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t\t\t\tv = _r$1;\n\t\t\t\t\t/* } */ case 11:\n\t\t\t\t/* } */ $s = 5; continue; case 6:\n\t\t\t/* } */ case 4:\n\t\t/* } */ case 2:\n\t\ts[0] = v.ptr;\n\t\t/* */ if (!((((fl & 64) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }\n\t\t/* */ $s = 14; continue;\n\t\t/* if (!((((fl & 64) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:\n\t\t\treturn new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {\n\t\t\t\tvar $ptr;\n\t\t\t\treturn wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);\n\t\t\t}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {\n\t\t\t\tvar $ptr, x$2;\n\t\t\t\ts[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);\n\t\t\t}; })(jsTag, prop, s, typ)), fl);\n\t\t/* } */ case 14:\n\t\t_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\treturn _r$2;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.field = field; $f.fl = fl; $f.i = i; $f.jsTag = jsTag; $f.o = o; $f.prop = prop; $f.s = s; $f.tag = tag; $f.tt = tt; $f.typ = typ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.Field = function(i) { return this.$val.Field(i); };\n\tgetJsTag = function(tag) {\n\t\tvar $ptr, _tuple, i, name, qvalue, tag, value;\n\t\twhile (true) {\n\t\t\tif (!(!(tag === \"\"))) { break; }\n\t\t\ti = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t\ttag = tag.substring(i);\n\t\t\tif (tag === \"\") {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t\tif ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tname = tag.substring(0, i);\n\t\t\ttag = tag.substring((i + 1 >> 0));\n\t\t\ti = 1;\n\t\t\twhile (true) {\n\t\t\t\tif (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }\n\t\t\t\tif (tag.charCodeAt(i) === 92) {\n\t\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t}\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t\tif (i >= tag.length) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tqvalue = tag.substring(0, (i + 1 >> 0));\n\t\t\ttag = tag.substring((i + 1 >> 0));\n\t\t\tif (name === \"js\") {\n\t\t\t\t_tuple = strconv.Unquote(qvalue); value = _tuple[0];\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t\treturn \"\";\n\t};\n\tValue.ptr.prototype.Index = function(i) {\n\t\tvar $ptr, _r, _r$1, _ref, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; a = $f.a; a$1 = $f.a$1; c = $f.c; fl = $f.fl; fl$1 = $f.fl$1; fl$2 = $f.fl$2; i = $f.i; k = $f.k; s = $f.s; str = $f.str; tt = $f.tt; tt$1 = $f.tt$1; typ = $f.typ; typ$1 = $f.typ$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ta = [a];\n\t\ta$1 = [a$1];\n\t\tc = [c];\n\t\ti = [i];\n\t\ttyp = [typ];\n\t\ttyp$1 = [typ$1];\n\t\tv = this;\n\t\tk = new flag(v.flag).kind();\n\t\t_ref = k;\n\t\t/* */ if (_ref === 17) { $s = 1; continue; }\n\t\t/* */ if (_ref === 23) { $s = 2; continue; }\n\t\t/* */ if (_ref === 24) { $s = 3; continue; }\n\t\t/* */ $s = 4; continue;\n\t\t/* if (_ref === 17) { */ case 1:\n\t\t\ttt = v.typ.kindType;\n\t\t\tif (i[0] < 0 || i[0] > (tt.len >> 0)) {\n\t\t\t\t$panic(new $String(\"reflect: array index out of range\"));\n\t\t\t}\n\t\t\ttyp$1[0] = tt.elem;\n\t\t\tfl = (v.flag & 224) >>> 0;\n\t\t\tfl = (fl | ((typ$1[0].Kind() >>> 0))) >>> 0;\n\t\t\ta[0] = v.ptr;\n\t\t\t/* */ if (!((((fl & 64) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 6; continue; }\n\t\t\t/* */ $s = 7; continue;\n\t\t\t/* if (!((((fl & 64) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 6:\n\t\t\t\treturn new Value.ptr(typ$1[0], new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {\n\t\t\t\t\tvar $ptr;\n\t\t\t\t\treturn wrapJsObject(typ$1[0], a[0][i[0]]);\n\t\t\t\t}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {\n\t\t\t\t\tvar $ptr, x;\n\t\t\t\t\ta[0][i[0]] = unwrapJsObject(typ$1[0], x);\n\t\t\t\t}; })(a, a$1, c, i, typ, typ$1)), fl);\n\t\t\t/* } */ case 7:\n\t\t\t_r = makeValue(typ$1[0], wrapJsObject(typ$1[0], a[0][i[0]]), fl); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\treturn _r;\n\t\t\t$s = 5; continue;\n\t\t/* } else if (_ref === 23) { */ case 2:\n\t\t\ts = v.object();\n\t\t\tif (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {\n\t\t\t\t$panic(new $String(\"reflect: slice index out of range\"));\n\t\t\t}\n\t\t\ttt$1 = v.typ.kindType;\n\t\t\ttyp[0] = tt$1.elem;\n\t\t\tfl$1 = (192 | ((v.flag & 32) >>> 0)) >>> 0;\n\t\t\tfl$1 = (fl$1 | ((typ[0].Kind() >>> 0))) >>> 0;\n\t\t\ti[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;\n\t\t\ta$1[0] = s.$array;\n\t\t\t/* */ if (!((((fl$1 & 64) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 9; continue; }\n\t\t\t/* */ $s = 10; continue;\n\t\t\t/* if (!((((fl$1 & 64) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 9:\n\t\t\t\treturn new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {\n\t\t\t\t\tvar $ptr;\n\t\t\t\t\treturn wrapJsObject(typ[0], a$1[0][i[0]]);\n\t\t\t\t}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {\n\t\t\t\t\tvar $ptr, x;\n\t\t\t\t\ta$1[0][i[0]] = unwrapJsObject(typ[0], x);\n\t\t\t\t}; })(a, a$1, c, i, typ, typ$1)), fl$1);\n\t\t\t/* } */ case 10:\n\t\t\t_r$1 = makeValue(typ[0], wrapJsObject(typ[0], a$1[0][i[0]]), fl$1); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\treturn _r$1;\n\t\t\t$s = 5; continue;\n\t\t/* } else if (_ref === 24) { */ case 3:\n\t\t\tstr = v.ptr.$get();\n\t\t\tif (i[0] < 0 || i[0] >= str.length) {\n\t\t\t\t$panic(new $String(\"reflect: string index out of range\"));\n\t\t\t}\n\t\t\tfl$2 = (((v.flag & 32) >>> 0) | 8) >>> 0;\n\t\t\tc[0] = str.charCodeAt(i[0]);\n\t\t\treturn new Value.ptr(uint8Type, (c.$ptr || (c.$ptr = new ptrType$9(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c))), (fl$2 | 64) >>> 0);\n\t\t\t$s = 5; continue;\n\t\t/* } else { */ case 4:\n\t\t\t$panic(new ValueError.ptr(\"reflect.Value.Index\", k));\n\t\t/* } */ case 5:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Index }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.a = a; $f.a$1 = a$1; $f.c = c; $f.fl = fl; $f.fl$1 = fl$1; $f.fl$2 = fl$2; $f.i = i; $f.k = k; $f.s = s; $f.str = str; $f.tt = tt; $f.tt$1 = tt$1; $f.typ = typ; $f.typ$1 = typ$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.Index = function(i) { return this.$val.Index(i); };\n\tValue.ptr.prototype.IsNil = function() {\n\t\tvar $ptr, _ref, k, v;\n\t\tv = this;\n\t\tk = new flag(v.flag).kind();\n\t\t_ref = k;\n\t\tif (_ref === 18 || _ref === 22 || _ref === 23) {\n\t\t\treturn v.object() === jsType(v.typ).nil;\n\t\t} else if (_ref === 19) {\n\t\t\treturn v.object() === $throwNilPointerError;\n\t\t} else if (_ref === 21) {\n\t\t\treturn v.object() === false;\n\t\t} else if (_ref === 20) {\n\t\t\treturn v.object() === $ifaceNil;\n\t\t} else {\n\t\t\t$panic(new ValueError.ptr(\"reflect.Value.IsNil\", k));\n\t\t}\n\t};\n\tValue.prototype.IsNil = function() { return this.$val.IsNil(); };\n\tValue.ptr.prototype.Len = function() {\n\t\tvar $ptr, _ref, k, v;\n\t\tv = this;\n\t\tk = new flag(v.flag).kind();\n\t\t_ref = k;\n\t\tif (_ref === 17 || _ref === 24) {\n\t\t\treturn $parseInt(v.object().length);\n\t\t} else if (_ref === 23) {\n\t\t\treturn $parseInt(v.object().$length) >> 0;\n\t\t} else if (_ref === 18) {\n\t\t\treturn $parseInt(v.object().$buffer.length) >> 0;\n\t\t} else if (_ref === 21) {\n\t\t\treturn $parseInt($keys(v.object()).length);\n\t\t} else {\n\t\t\t$panic(new ValueError.ptr(\"reflect.Value.Len\", k));\n\t\t}\n\t};\n\tValue.prototype.Len = function() { return this.$val.Len(); };\n\tValue.ptr.prototype.Pointer = function() {\n\t\tvar $ptr, _ref, k, v;\n\t\tv = this;\n\t\tk = new flag(v.flag).kind();\n\t\t_ref = k;\n\t\tif (_ref === 18 || _ref === 21 || _ref === 22 || _ref === 26) {\n\t\t\tif (v.IsNil()) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn v.object();\n\t\t} else if (_ref === 19) {\n\t\t\tif (v.IsNil()) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn 1;\n\t\t} else if (_ref === 23) {\n\t\t\tif (v.IsNil()) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn v.object().$array;\n\t\t} else {\n\t\t\t$panic(new ValueError.ptr(\"reflect.Value.Pointer\", k));\n\t\t}\n\t};\n\tValue.prototype.Pointer = function() { return this.$val.Pointer(); };\n\tValue.ptr.prototype.Set = function(x) {\n\t\tvar $ptr, _r, _r$1, _ref, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\tx = x;\n\t\tnew flag(v.flag).mustBeAssignable();\n\t\tnew flag(x.flag).mustBeExported();\n\t\t_r = x.assignTo(\"reflect.Set\", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tx = _r;\n\t\t/* */ if (!((((v.flag & 64) >>> 0) === 0))) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (!((((v.flag & 64) >>> 0) === 0))) { */ case 2:\n\t\t\t_ref = v.typ.Kind();\n\t\t\t/* */ if (_ref === 17) { $s = 4; continue; }\n\t\t\t/* */ if (_ref === 20) { $s = 5; continue; }\n\t\t\t/* */ if (_ref === 25) { $s = 6; continue; }\n\t\t\t/* */ $s = 7; continue;\n\t\t\t/* if (_ref === 17) { */ case 4:\n\t\t\t\t$copy(v.ptr, x.ptr, jsType(v.typ));\n\t\t\t\t$s = 8; continue;\n\t\t\t/* } else if (_ref === 20) { */ case 5:\n\t\t\t\t_r$1 = valueInterface(x, false); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t\tv.ptr.$set(_r$1);\n\t\t\t\t$s = 8; continue;\n\t\t\t/* } else if (_ref === 25) { */ case 6:\n\t\t\t\tcopyStruct(v.ptr, x.ptr, v.typ);\n\t\t\t\t$s = 8; continue;\n\t\t\t/* } else { */ case 7:\n\t\t\t\tv.ptr.$set(x.object());\n\t\t\t/* } */ case 8:\n\t\t\treturn;\n\t\t/* } */ case 3:\n\t\tv.ptr = x.ptr;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.Set = function(x) { return this.$val.Set(x); };\n\tValue.ptr.prototype.SetCap = function(n) {\n\t\tvar $ptr, n, newSlice, s, v;\n\t\tv = this;\n\t\tnew flag(v.flag).mustBeAssignable();\n\t\tnew flag(v.flag).mustBe(23);\n\t\ts = v.ptr.$get();\n\t\tif (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {\n\t\t\t$panic(new $String(\"reflect: slice capacity out of range in SetCap\"));\n\t\t}\n\t\tnewSlice = new (jsType(v.typ))(s.$array);\n\t\tnewSlice.$offset = s.$offset;\n\t\tnewSlice.$length = s.$length;\n\t\tnewSlice.$capacity = n;\n\t\tv.ptr.$set(newSlice);\n\t};\n\tValue.prototype.SetCap = function(n) { return this.$val.SetCap(n); };\n\tValue.ptr.prototype.SetLen = function(n) {\n\t\tvar $ptr, n, newSlice, s, v;\n\t\tv = this;\n\t\tnew flag(v.flag).mustBeAssignable();\n\t\tnew flag(v.flag).mustBe(23);\n\t\ts = v.ptr.$get();\n\t\tif (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {\n\t\t\t$panic(new $String(\"reflect: slice length out of range in SetLen\"));\n\t\t}\n\t\tnewSlice = new (jsType(v.typ))(s.$array);\n\t\tnewSlice.$offset = s.$offset;\n\t\tnewSlice.$length = n;\n\t\tnewSlice.$capacity = s.$capacity;\n\t\tv.ptr.$set(newSlice);\n\t};\n\tValue.prototype.SetLen = function(n) { return this.$val.SetLen(n); };\n\tValue.ptr.prototype.Slice = function(i, j) {\n\t\tvar $ptr, _r, _r$1, _ref, cap, i, j, kind, s, str, tt, typ, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; cap = $f.cap; i = $f.i; j = $f.j; kind = $f.kind; s = $f.s; str = $f.str; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\tcap = 0;\n\t\ttyp = $ifaceNil;\n\t\ts = null;\n\t\tkind = new flag(v.flag).kind();\n\t\t_ref = kind;\n\t\t/* */ if (_ref === 17) { $s = 1; continue; }\n\t\t/* */ if (_ref === 23) { $s = 2; continue; }\n\t\t/* */ if (_ref === 24) { $s = 3; continue; }\n\t\t/* */ $s = 4; continue;\n\t\t/* if (_ref === 17) { */ case 1:\n\t\t\tif (((v.flag & 128) >>> 0) === 0) {\n\t\t\t\t$panic(new $String(\"reflect.Value.Slice: slice of unaddressable array\"));\n\t\t\t}\n\t\t\ttt = v.typ.kindType;\n\t\t\tcap = (tt.len >> 0);\n\t\t\ttyp = SliceOf(tt.elem);\n\t\t\ts = new (jsType(typ))(v.object());\n\t\t\t$s = 5; continue;\n\t\t/* } else if (_ref === 23) { */ case 2:\n\t\t\ttyp = v.typ;\n\t\t\ts = v.object();\n\t\t\tcap = $parseInt(s.$capacity) >> 0;\n\t\t\t$s = 5; continue;\n\t\t/* } else if (_ref === 24) { */ case 3:\n\t\t\tstr = v.ptr.$get();\n\t\t\tif (i < 0 || j < i || j > str.length) {\n\t\t\t\t$panic(new $String(\"reflect.Value.Slice: string slice index out of bounds\"));\n\t\t\t}\n\t\t\t_r = ValueOf(new $String(str.substring(i, j))); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\treturn _r;\n\t\t\t$s = 5; continue;\n\t\t/* } else { */ case 4:\n\t\t\t$panic(new ValueError.ptr(\"reflect.Value.Slice\", kind));\n\t\t/* } */ case 5:\n\t\tif (i < 0 || j < i || j > cap) {\n\t\t\t$panic(new $String(\"reflect.Value.Slice: slice index out of bounds\"));\n\t\t}\n\t\t_r$1 = makeValue(typ, $subslice(s, i, j), (v.flag & 32) >>> 0); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn _r$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.cap = cap; $f.i = i; $f.j = j; $f.kind = kind; $f.s = s; $f.str = str; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };\n\tValue.ptr.prototype.Slice3 = function(i, j, k) {\n\t\tvar $ptr, _r, _ref, cap, i, j, k, kind, s, tt, typ, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; cap = $f.cap; i = $f.i; j = $f.j; k = $f.k; kind = $f.kind; s = $f.s; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\tcap = 0;\n\t\ttyp = $ifaceNil;\n\t\ts = null;\n\t\tkind = new flag(v.flag).kind();\n\t\t_ref = kind;\n\t\tif (_ref === 17) {\n\t\t\tif (((v.flag & 128) >>> 0) === 0) {\n\t\t\t\t$panic(new $String(\"reflect.Value.Slice: slice of unaddressable array\"));\n\t\t\t}\n\t\t\ttt = v.typ.kindType;\n\t\t\tcap = (tt.len >> 0);\n\t\t\ttyp = SliceOf(tt.elem);\n\t\t\ts = new (jsType(typ))(v.object());\n\t\t} else if (_ref === 23) {\n\t\t\ttyp = v.typ;\n\t\t\ts = v.object();\n\t\t\tcap = $parseInt(s.$capacity) >> 0;\n\t\t} else {\n\t\t\t$panic(new ValueError.ptr(\"reflect.Value.Slice3\", kind));\n\t\t}\n\t\tif (i < 0 || j < i || k < j || k > cap) {\n\t\t\t$panic(new $String(\"reflect.Value.Slice3: slice index out of bounds\"));\n\t\t}\n\t\t_r = makeValue(typ, $subslice(s, i, j, k), (v.flag & 32) >>> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice3 }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.cap = cap; $f.i = i; $f.j = j; $f.k = k; $f.kind = kind; $f.s = s; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };\n\tValue.ptr.prototype.Close = function() {\n\t\tvar $ptr, v;\n\t\tv = this;\n\t\tnew flag(v.flag).mustBe(18);\n\t\tnew flag(v.flag).mustBeExported();\n\t\t$close(v.object());\n\t};\n\tValue.prototype.Close = function() { return this.$val.Close(); };\n\tchanrecv = function(t, ch, nb, val) {\n\t\tvar $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, t, val, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; ch = $f.ch; comms = $f.comms; nb = $f.nb; received = $f.received; recvRes = $f.recvRes; selectRes = $f.selectRes; selected = $f.selected; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tselected = false;\n\t\treceived = false;\n\t\tcomms = new sliceType$9([new sliceType$1([new $jsObjectPtr(ch)])]);\n\t\tif (nb) {\n\t\t\tcomms = $append(comms, new sliceType$1([]));\n\t\t}\n\t\t_r = selectHelper(new sliceType$1([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tselectRes = _r;\n\t\tif (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {\n\t\t\t_tmp = false; _tmp$1 = false; selected = _tmp; received = _tmp$1;\n\t\t\treturn [selected, received];\n\t\t}\n\t\trecvRes = selectRes[1];\n\t\tval.$set(recvRes[0]);\n\t\t_tmp$2 = true; _tmp$3 = !!(recvRes[1]); selected = _tmp$2; received = _tmp$3;\n\t\treturn [selected, received];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: chanrecv }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.received = received; $f.recvRes = recvRes; $f.selectRes = selectRes; $f.selected = selected; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tchansend = function(t, ch, val, nb) {\n\t\tvar $ptr, _r, ch, comms, nb, selectRes, t, val, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ch = $f.ch; comms = $f.comms; nb = $f.nb; selectRes = $f.selectRes; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tcomms = new sliceType$9([new sliceType$1([new $jsObjectPtr(ch), new $jsObjectPtr(val.$get())])]);\n\t\tif (nb) {\n\t\t\tcomms = $append(comms, new sliceType$1([]));\n\t\t}\n\t\t_r = selectHelper(new sliceType$1([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tselectRes = _r;\n\t\tif (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: chansend }; } $f.$ptr = $ptr; $f._r = _r; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.selectRes = selectRes; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tKind.prototype.String = function() {\n\t\tvar $ptr, k;\n\t\tk = this.$val;\n\t\tif ((k >> 0) < kindNames.$length) {\n\t\t\treturn ((k < 0 || k >= kindNames.$length) ? $throwRuntimeError(\"index out of range\") : kindNames.$array[kindNames.$offset + k]);\n\t\t}\n\t\treturn \"kind\" + strconv.Itoa((k >> 0));\n\t};\n\t$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };\n\tuncommonType.ptr.prototype.uncommon = function() {\n\t\tvar $ptr, t;\n\t\tt = this;\n\t\treturn t;\n\t};\n\tuncommonType.prototype.uncommon = function() { return this.$val.uncommon(); };\n\tuncommonType.ptr.prototype.PkgPath = function() {\n\t\tvar $ptr, t;\n\t\tt = this;\n\t\tif (t === ptrType$6.nil || t.pkgPath === ptrType$5.nil) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn t.pkgPath.$get();\n\t};\n\tuncommonType.prototype.PkgPath = function() { return this.$val.PkgPath(); };\n\tuncommonType.ptr.prototype.Name = function() {\n\t\tvar $ptr, t;\n\t\tt = this;\n\t\tif (t === ptrType$6.nil || t.name === ptrType$5.nil) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn t.name.$get();\n\t};\n\tuncommonType.prototype.Name = function() { return this.$val.Name(); };\n\trtype.ptr.prototype.String = function() {\n\t\tvar $ptr, t;\n\t\tt = this;\n\t\treturn t.string.$get();\n\t};\n\trtype.prototype.String = function() { return this.$val.String(); };\n\trtype.ptr.prototype.Size = function() {\n\t\tvar $ptr, t;\n\t\tt = this;\n\t\treturn t.size;\n\t};\n\trtype.prototype.Size = function() { return this.$val.Size(); };\n\trtype.ptr.prototype.Bits = function() {\n\t\tvar $ptr, k, t;\n\t\tt = this;\n\t\tif (t === ptrType$1.nil) {\n\t\t\t$panic(new $String(\"reflect: Bits of nil Type\"));\n\t\t}\n\t\tk = t.Kind();\n\t\tif (k < 2 || k > 16) {\n\t\t\t$panic(new $String(\"reflect: Bits of non-arithmetic Type \" + t.String()));\n\t\t}\n\t\treturn (t.size >> 0) * 8 >> 0;\n\t};\n\trtype.prototype.Bits = function() { return this.$val.Bits(); };\n\trtype.ptr.prototype.Align = function() {\n\t\tvar $ptr, t;\n\t\tt = this;\n\t\treturn (t.align >> 0);\n\t};\n\trtype.prototype.Align = function() { return this.$val.Align(); };\n\trtype.ptr.prototype.FieldAlign = function() {\n\t\tvar $ptr, t;\n\t\tt = this;\n\t\treturn (t.fieldAlign >> 0);\n\t};\n\trtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };\n\trtype.ptr.prototype.Kind = function() {\n\t\tvar $ptr, t;\n\t\tt = this;\n\t\treturn (((t.kind & 31) >>> 0) >>> 0);\n\t};\n\trtype.prototype.Kind = function() { return this.$val.Kind(); };\n\trtype.ptr.prototype.common = function() {\n\t\tvar $ptr, t;\n\t\tt = this;\n\t\treturn t;\n\t};\n\trtype.prototype.common = function() { return this.$val.common(); };\n\tuncommonType.ptr.prototype.NumMethod = function() {\n\t\tvar $ptr, t;\n\t\tt = this;\n\t\tif (t === ptrType$6.nil) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn t.methods.$length;\n\t};\n\tuncommonType.prototype.NumMethod = function() { return this.$val.NumMethod(); };\n\tuncommonType.ptr.prototype.MethodByName = function(name) {\n\t\tvar $ptr, _i, _ref, _tmp, _tmp$1, i, m, name, ok, p, t, x;\n\t\tm = new Method.ptr();\n\t\tok = false;\n\t\tt = this;\n\t\tif (t === ptrType$6.nil) {\n\t\t\treturn [m, ok];\n\t\t}\n\t\tp = ptrType$10.nil;\n\t\t_ref = t.methods;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\tp = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]));\n\t\t\tif (!(p.name === ptrType$5.nil) && p.name.$get() === name) {\n\t\t\t\t_tmp = $clone(t.Method(i), Method); _tmp$1 = true; $copy(m, _tmp, Method); ok = _tmp$1;\n\t\t\t\treturn [m, ok];\n\t\t\t}\n\t\t\t_i++;\n\t\t}\n\t\treturn [m, ok];\n\t};\n\tuncommonType.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };\n\trtype.ptr.prototype.NumMethod = function() {\n\t\tvar $ptr, t, tt;\n\t\tt = this;\n\t\tif (t.Kind() === 20) {\n\t\t\ttt = t.kindType;\n\t\t\treturn tt.NumMethod();\n\t\t}\n\t\treturn t.uncommonType.NumMethod();\n\t};\n\trtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };\n\trtype.ptr.prototype.Method = function(i) {\n\t\tvar $ptr, i, m, t, tt;\n\t\tm = new Method.ptr();\n\t\tt = this;\n\t\tif (t.Kind() === 20) {\n\t\t\ttt = t.kindType;\n\t\t\t$copy(m, tt.Method(i), Method);\n\t\t\treturn m;\n\t\t}\n\t\t$copy(m, t.uncommonType.Method(i), Method);\n\t\treturn m;\n\t};\n\trtype.prototype.Method = function(i) { return this.$val.Method(i); };\n\trtype.ptr.prototype.MethodByName = function(name) {\n\t\tvar $ptr, _tuple, _tuple$1, m, name, ok, t, tt;\n\t\tm = new Method.ptr();\n\t\tok = false;\n\t\tt = this;\n\t\tif (t.Kind() === 20) {\n\t\t\ttt = t.kindType;\n\t\t\t_tuple = tt.MethodByName(name); $copy(m, _tuple[0], Method); ok = _tuple[1];\n\t\t\treturn [m, ok];\n\t\t}\n\t\t_tuple$1 = t.uncommonType.MethodByName(name); $copy(m, _tuple$1[0], Method); ok = _tuple$1[1];\n\t\treturn [m, ok];\n\t};\n\trtype.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };\n\trtype.ptr.prototype.PkgPath = function() {\n\t\tvar $ptr, t;\n\t\tt = this;\n\t\treturn t.uncommonType.PkgPath();\n\t};\n\trtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };\n\trtype.ptr.prototype.Name = function() {\n\t\tvar $ptr, t;\n\t\tt = this;\n\t\treturn t.uncommonType.Name();\n\t};\n\trtype.prototype.Name = function() { return this.$val.Name(); };\n\trtype.ptr.prototype.ChanDir = function() {\n\t\tvar $ptr, t, tt;\n\t\tt = this;\n\t\tif (!((t.Kind() === 18))) {\n\t\t\t$panic(new $String(\"reflect: ChanDir of non-chan type\"));\n\t\t}\n\t\ttt = t.kindType;\n\t\treturn (tt.dir >> 0);\n\t};\n\trtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };\n\trtype.ptr.prototype.IsVariadic = function() {\n\t\tvar $ptr, t, tt;\n\t\tt = this;\n\t\tif (!((t.Kind() === 19))) {\n\t\t\t$panic(new $String(\"reflect: IsVariadic of non-func type\"));\n\t\t}\n\t\ttt = t.kindType;\n\t\treturn tt.dotdotdot;\n\t};\n\trtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };\n\trtype.ptr.prototype.Elem = function() {\n\t\tvar $ptr, _ref, t, tt, tt$1, tt$2, tt$3, tt$4;\n\t\tt = this;\n\t\t_ref = t.Kind();\n\t\tif (_ref === 17) {\n\t\t\ttt = t.kindType;\n\t\t\treturn toType(tt.elem);\n\t\t} else if (_ref === 18) {\n\t\t\ttt$1 = t.kindType;\n\t\t\treturn toType(tt$1.elem);\n\t\t} else if (_ref === 21) {\n\t\t\ttt$2 = t.kindType;\n\t\t\treturn toType(tt$2.elem);\n\t\t} else if (_ref === 22) {\n\t\t\ttt$3 = t.kindType;\n\t\t\treturn toType(tt$3.elem);\n\t\t} else if (_ref === 23) {\n\t\t\ttt$4 = t.kindType;\n\t\t\treturn toType(tt$4.elem);\n\t\t}\n\t\t$panic(new $String(\"reflect: Elem of invalid type\"));\n\t};\n\trtype.prototype.Elem = function() { return this.$val.Elem(); };\n\trtype.ptr.prototype.Field = function(i) {\n\t\tvar $ptr, _r, i, t, tt, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = this;\n\t\tif (!((t.Kind() === 25))) {\n\t\t\t$panic(new $String(\"reflect: Field of non-struct type\"));\n\t\t}\n\t\ttt = t.kindType;\n\t\t_r = tt.Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\trtype.prototype.Field = function(i) { return this.$val.Field(i); };\n\trtype.ptr.prototype.FieldByIndex = function(index) {\n\t\tvar $ptr, _r, index, t, tt, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; index = $f.index; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = this;\n\t\tif (!((t.Kind() === 25))) {\n\t\t\t$panic(new $String(\"reflect: FieldByIndex of non-struct type\"));\n\t\t}\n\t\ttt = t.kindType;\n\t\t_r = tt.FieldByIndex(index); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.index = index; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\trtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };\n\trtype.ptr.prototype.FieldByName = function(name) {\n\t\tvar $ptr, _r, name, t, tt, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = this;\n\t\tif (!((t.Kind() === 25))) {\n\t\t\t$panic(new $String(\"reflect: FieldByName of non-struct type\"));\n\t\t}\n\t\ttt = t.kindType;\n\t\t_r = tt.FieldByName(name); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\trtype.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };\n\trtype.ptr.prototype.FieldByNameFunc = function(match) {\n\t\tvar $ptr, _r, match, t, tt, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; match = $f.match; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = this;\n\t\tif (!((t.Kind() === 25))) {\n\t\t\t$panic(new $String(\"reflect: FieldByNameFunc of non-struct type\"));\n\t\t}\n\t\ttt = t.kindType;\n\t\t_r = tt.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.match = match; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\trtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };\n\trtype.ptr.prototype.In = function(i) {\n\t\tvar $ptr, i, t, tt, x;\n\t\tt = this;\n\t\tif (!((t.Kind() === 19))) {\n\t\t\t$panic(new $String(\"reflect: In of non-func type\"));\n\t\t}\n\t\ttt = t.kindType;\n\t\treturn toType((x = tt.in$2, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i])));\n\t};\n\trtype.prototype.In = function(i) { return this.$val.In(i); };\n\trtype.ptr.prototype.Key = function() {\n\t\tvar $ptr, t, tt;\n\t\tt = this;\n\t\tif (!((t.Kind() === 21))) {\n\t\t\t$panic(new $String(\"reflect: Key of non-map type\"));\n\t\t}\n\t\ttt = t.kindType;\n\t\treturn toType(tt.key);\n\t};\n\trtype.prototype.Key = function() { return this.$val.Key(); };\n\trtype.ptr.prototype.Len = function() {\n\t\tvar $ptr, t, tt;\n\t\tt = this;\n\t\tif (!((t.Kind() === 17))) {\n\t\t\t$panic(new $String(\"reflect: Len of non-array type\"));\n\t\t}\n\t\ttt = t.kindType;\n\t\treturn (tt.len >> 0);\n\t};\n\trtype.prototype.Len = function() { return this.$val.Len(); };\n\trtype.ptr.prototype.NumField = function() {\n\t\tvar $ptr, t, tt;\n\t\tt = this;\n\t\tif (!((t.Kind() === 25))) {\n\t\t\t$panic(new $String(\"reflect: NumField of non-struct type\"));\n\t\t}\n\t\ttt = t.kindType;\n\t\treturn tt.fields.$length;\n\t};\n\trtype.prototype.NumField = function() { return this.$val.NumField(); };\n\trtype.ptr.prototype.NumIn = function() {\n\t\tvar $ptr, t, tt;\n\t\tt = this;\n\t\tif (!((t.Kind() === 19))) {\n\t\t\t$panic(new $String(\"reflect: NumIn of non-func type\"));\n\t\t}\n\t\ttt = t.kindType;\n\t\treturn tt.in$2.$length;\n\t};\n\trtype.prototype.NumIn = function() { return this.$val.NumIn(); };\n\trtype.ptr.prototype.NumOut = function() {\n\t\tvar $ptr, t, tt;\n\t\tt = this;\n\t\tif (!((t.Kind() === 19))) {\n\t\t\t$panic(new $String(\"reflect: NumOut of non-func type\"));\n\t\t}\n\t\ttt = t.kindType;\n\t\treturn tt.out.$length;\n\t};\n\trtype.prototype.NumOut = function() { return this.$val.NumOut(); };\n\trtype.ptr.prototype.Out = function(i) {\n\t\tvar $ptr, i, t, tt, x;\n\t\tt = this;\n\t\tif (!((t.Kind() === 19))) {\n\t\t\t$panic(new $String(\"reflect: Out of non-func type\"));\n\t\t}\n\t\ttt = t.kindType;\n\t\treturn toType((x = tt.out, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i])));\n\t};\n\trtype.prototype.Out = function(i) { return this.$val.Out(i); };\n\tChanDir.prototype.String = function() {\n\t\tvar $ptr, _ref, d;\n\t\td = this.$val;\n\t\t_ref = d;\n\t\tif (_ref === 2) {\n\t\t\treturn \"chan<-\";\n\t\t} else if (_ref === 1) {\n\t\t\treturn \"<-chan\";\n\t\t} else if (_ref === 3) {\n\t\t\treturn \"chan\";\n\t\t}\n\t\treturn \"ChanDir\" + strconv.Itoa((d >> 0));\n\t};\n\t$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };\n\tinterfaceType.ptr.prototype.Method = function(i) {\n\t\tvar $ptr, i, m, p, t, x;\n\t\tm = new Method.ptr();\n\t\tt = this;\n\t\tif (i < 0 || i >= t.methods.$length) {\n\t\t\treturn m;\n\t\t}\n\t\tp = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]));\n\t\tm.Name = p.name.$get();\n\t\tif (!(p.pkgPath === ptrType$5.nil)) {\n\t\t\tm.PkgPath = p.pkgPath.$get();\n\t\t}\n\t\tm.Type = toType(p.typ);\n\t\tm.Index = i;\n\t\treturn m;\n\t};\n\tinterfaceType.prototype.Method = function(i) { return this.$val.Method(i); };\n\tinterfaceType.ptr.prototype.NumMethod = function() {\n\t\tvar $ptr, t;\n\t\tt = this;\n\t\treturn t.methods.$length;\n\t};\n\tinterfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };\n\tinterfaceType.ptr.prototype.MethodByName = function(name) {\n\t\tvar $ptr, _i, _ref, _tmp, _tmp$1, i, m, name, ok, p, t, x;\n\t\tm = new Method.ptr();\n\t\tok = false;\n\t\tt = this;\n\t\tif (t === ptrType$11.nil) {\n\t\t\treturn [m, ok];\n\t\t}\n\t\tp = ptrType$12.nil;\n\t\t_ref = t.methods;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\tp = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]));\n\t\t\tif (p.name.$get() === name) {\n\t\t\t\t_tmp = $clone(t.Method(i), Method); _tmp$1 = true; $copy(m, _tmp, Method); ok = _tmp$1;\n\t\t\t\treturn [m, ok];\n\t\t\t}\n\t\t\t_i++;\n\t\t}\n\t\treturn [m, ok];\n\t};\n\tinterfaceType.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };\n\tStructTag.prototype.Get = function(key) {\n\t\tvar $ptr, _tuple, i, key, name, qvalue, tag, value;\n\t\ttag = this.$val;\n\t\twhile (true) {\n\t\t\tif (!(!(tag === \"\"))) { break; }\n\t\t\ti = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t\ttag = tag.substring(i);\n\t\t\tif (tag === \"\") {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t\tif ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tname = tag.substring(0, i);\n\t\t\ttag = tag.substring((i + 1 >> 0));\n\t\t\ti = 1;\n\t\t\twhile (true) {\n\t\t\t\tif (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }\n\t\t\t\tif (tag.charCodeAt(i) === 92) {\n\t\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t}\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t\tif (i >= tag.length) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tqvalue = tag.substring(0, (i + 1 >> 0));\n\t\t\ttag = tag.substring((i + 1 >> 0));\n\t\t\tif (key === name) {\n\t\t\t\t_tuple = strconv.Unquote(qvalue); value = _tuple[0];\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t\treturn \"\";\n\t};\n\t$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };\n\tstructType.ptr.prototype.Field = function(i) {\n\t\tvar $ptr, _r, _r$1, _r$2, f, i, p, t, t$1, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; i = $f.i; p = $f.p; t = $f.t; t$1 = $f.t$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = new StructField.ptr();\n\t\tt = this;\n\t\tif (i < 0 || i >= t.fields.$length) {\n\t\t\treturn f;\n\t\t}\n\t\tp = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]));\n\t\tf.Type = toType(p.typ);\n\t\t/* */ if (!(p.name === ptrType$5.nil)) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!(p.name === ptrType$5.nil)) { */ case 1:\n\t\t\tf.Name = p.name.$get();\n\t\t\t$s = 3; continue;\n\t\t/* } else { */ case 2:\n\t\t\tt$1 = f.Type;\n\t\t\t_r = t$1.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t/* */ if (_r === 22) { $s = 4; continue; }\n\t\t\t/* */ $s = 5; continue;\n\t\t\t/* if (_r === 22) { */ case 4:\n\t\t\t\t_r$1 = t$1.Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t\tt$1 = _r$1;\n\t\t\t/* } */ case 5:\n\t\t\t_r$2 = t$1.Name(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\tf.Name = _r$2;\n\t\t\tf.Anonymous = true;\n\t\t/* } */ case 3:\n\t\tif (!(p.pkgPath === ptrType$5.nil)) {\n\t\t\tf.PkgPath = p.pkgPath.$get();\n\t\t}\n\t\tif (!(p.tag === ptrType$5.nil)) {\n\t\t\tf.Tag = p.tag.$get();\n\t\t}\n\t\tf.Offset = p.offset;\n\t\tf.Index = new sliceType$11([i]);\n\t\treturn f;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.i = i; $f.p = p; $f.t = t; $f.t$1 = t$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructType.prototype.Field = function(i) { return this.$val.Field(i); };\n\tstructType.ptr.prototype.FieldByIndex = function(index) {\n\t\tvar $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _v = $f._v; f = $f.f; ft = $f.ft; i = $f.i; index = $f.index; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = new StructField.ptr();\n\t\tt = this;\n\t\tf.Type = toType(t.rtype);\n\t\t_ref = index;\n\t\t_i = 0;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }\n\t\t\ti = _i;\n\t\t\tx = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\t/* */ if (i > 0) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (i > 0) { */ case 3:\n\t\t\t\tft = f.Type;\n\t\t\t\t_r = ft.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t\tif (!(_r === 22)) { _v = false; $s = 7; continue s; }\n\t\t\t\t_r$1 = ft.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t\t_r$2 = _r$1.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\t_v = _r$2 === 25; case 7:\n\t\t\t\t/* */ if (_v) { $s = 5; continue; }\n\t\t\t\t/* */ $s = 6; continue;\n\t\t\t\t/* if (_v) { */ case 5:\n\t\t\t\t\t_r$3 = ft.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t\t\tft = _r$3;\n\t\t\t\t/* } */ case 6:\n\t\t\t\tf.Type = ft;\n\t\t\t/* } */ case 4:\n\t\t\t_r$4 = f.Type.Field(x); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t$copy(f, _r$4, StructField);\n\t\t\t_i++;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\treturn f;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._v = _v; $f.f = f; $f.ft = ft; $f.i = i; $f.index = index; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };\n\tstructType.ptr.prototype.FieldByNameFunc = function(match) {\n\t\tvar $ptr, _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _key$4, _key$5, _map, _map$1, _r, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _key$5 = $f._key$5; _map = $f._map; _map$1 = $f._map$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; count = $f.count; current = $f.current; f = $f.f; fname = $f.fname; i = $f.i; index = $f.index; match = $f.match; next = $f.next; nextCount = $f.nextCount; ntyp = $f.ntyp; ok = $f.ok; result = $f.result; scan = $f.scan; styp = $f.styp; t = $f.t; t$1 = $f.t$1; visited = $f.visited; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tresult = new StructField.ptr();\n\t\tok = false;\n\t\tt = this;\n\t\tcurrent = new sliceType$12([]);\n\t\tnext = new sliceType$12([new fieldScan.ptr(t, sliceType$11.nil)]);\n\t\tnextCount = false;\n\t\tvisited = (_map = new $Map(), _map);\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }\n\t\t\t_tmp = next; _tmp$1 = $subslice(current, 0, 0); current = _tmp; next = _tmp$1;\n\t\t\tcount = nextCount;\n\t\t\tnextCount = false;\n\t\t\t_ref = current;\n\t\t\t_i = 0;\n\t\t\t/* while (true) { */ case 3:\n\t\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }\n\t\t\t\tscan = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]), fieldScan);\n\t\t\t\tt$1 = scan.typ;\n\t\t\t\t/* */ if ((_entry = visited[t$1.$key()], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }\n\t\t\t\t/* */ $s = 6; continue;\n\t\t\t\t/* if ((_entry = visited[t$1.$key()], _entry !== undefined ? _entry.v : false)) { */ case 5:\n\t\t\t\t\t_i++;\n\t\t\t\t\t/* continue; */ $s = 3; continue;\n\t\t\t\t/* } */ case 6:\n\t\t\t\t_key$1 = t$1; (visited || $throwRuntimeError(\"assignment to entry in nil map\"))[_key$1.$key()] = { k: _key$1, v: true };\n\t\t\t\t_ref$1 = t$1.fields;\n\t\t\t\t_i$1 = 0;\n\t\t\t\t/* while (true) { */ case 7:\n\t\t\t\t\t/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }\n\t\t\t\t\ti = _i$1;\n\t\t\t\t\tf = (x = t$1.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]));\n\t\t\t\t\tfname = \"\";\n\t\t\t\t\tntyp = ptrType$1.nil;\n\t\t\t\t\t/* */ if (!(f.name === ptrType$5.nil)) { $s = 9; continue; }\n\t\t\t\t\t/* */ $s = 10; continue;\n\t\t\t\t\t/* if (!(f.name === ptrType$5.nil)) { */ case 9:\n\t\t\t\t\t\tfname = f.name.$get();\n\t\t\t\t\t\t$s = 11; continue;\n\t\t\t\t\t/* } else { */ case 10:\n\t\t\t\t\t\tntyp = f.typ;\n\t\t\t\t\t\t/* */ if (ntyp.Kind() === 22) { $s = 12; continue; }\n\t\t\t\t\t\t/* */ $s = 13; continue;\n\t\t\t\t\t\t/* if (ntyp.Kind() === 22) { */ case 12:\n\t\t\t\t\t\t\t_r = ntyp.Elem().common(); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t\t\t\t\tntyp = _r;\n\t\t\t\t\t\t/* } */ case 13:\n\t\t\t\t\t\tfname = ntyp.Name();\n\t\t\t\t\t/* } */ case 11:\n\t\t\t\t\t_r$1 = match(fname); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t\t\t/* */ if (_r$1) { $s = 15; continue; }\n\t\t\t\t\t/* */ $s = 16; continue;\n\t\t\t\t\t/* if (_r$1) { */ case 15:\n\t\t\t\t\t\tif ((_entry$1 = count[t$1.$key()], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {\n\t\t\t\t\t\t\t_tmp$2 = new StructField.ptr(\"\", \"\", $ifaceNil, \"\", 0, sliceType$11.nil, false); _tmp$3 = false; $copy(result, _tmp$2, StructField); ok = _tmp$3;\n\t\t\t\t\t\t\treturn [result, ok];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_r$2 = t$1.Field(i); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\t\t\t$copy(result, _r$2, StructField);\n\t\t\t\t\t\tresult.Index = sliceType$11.nil;\n\t\t\t\t\t\tresult.Index = $appendSlice(result.Index, scan.index);\n\t\t\t\t\t\tresult.Index = $append(result.Index, i);\n\t\t\t\t\t\tok = true;\n\t\t\t\t\t\t_i$1++;\n\t\t\t\t\t\t/* continue; */ $s = 7; continue;\n\t\t\t\t\t/* } */ case 16:\n\t\t\t\t\tif (ok || ntyp === ptrType$1.nil || !((ntyp.Kind() === 25))) {\n\t\t\t\t\t\t_i$1++;\n\t\t\t\t\t\t/* continue; */ $s = 7; continue;\n\t\t\t\t\t}\n\t\t\t\t\tstyp = ntyp.kindType;\n\t\t\t\t\tif ((_entry$2 = nextCount[styp.$key()], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {\n\t\t\t\t\t\t_key$2 = styp; (nextCount || $throwRuntimeError(\"assignment to entry in nil map\"))[_key$2.$key()] = { k: _key$2, v: 2 };\n\t\t\t\t\t\t_i$1++;\n\t\t\t\t\t\t/* continue; */ $s = 7; continue;\n\t\t\t\t\t}\n\t\t\t\t\tif (nextCount === false) {\n\t\t\t\t\t\tnextCount = (_map$1 = new $Map(), _map$1);\n\t\t\t\t\t}\n\t\t\t\t\t_key$4 = styp; (nextCount || $throwRuntimeError(\"assignment to entry in nil map\"))[_key$4.$key()] = { k: _key$4, v: 1 };\n\t\t\t\t\tif ((_entry$3 = count[t$1.$key()], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {\n\t\t\t\t\t\t_key$5 = styp; (nextCount || $throwRuntimeError(\"assignment to entry in nil map\"))[_key$5.$key()] = { k: _key$5, v: 2 };\n\t\t\t\t\t}\n\t\t\t\t\tindex = sliceType$11.nil;\n\t\t\t\t\tindex = $appendSlice(index, scan.index);\n\t\t\t\t\tindex = $append(index, i);\n\t\t\t\t\tnext = $append(next, new fieldScan.ptr(styp, index));\n\t\t\t\t\t_i$1++;\n\t\t\t\t/* } */ $s = 7; continue; case 8:\n\t\t\t\t_i++;\n\t\t\t/* } */ $s = 3; continue; case 4:\n\t\t\tif (ok) {\n\t\t\t\t/* break; */ $s = 2; continue;\n\t\t\t}\n\t\t/* } */ $s = 1; continue; case 2:\n\t\treturn [result, ok];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._key$5 = _key$5; $f._map = _map; $f._map$1 = _map$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.count = count; $f.current = current; $f.f = f; $f.fname = fname; $f.i = i; $f.index = index; $f.match = match; $f.next = next; $f.nextCount = nextCount; $f.ntyp = ntyp; $f.ok = ok; $f.result = result; $f.scan = scan; $f.styp = styp; $f.t = t; $f.t$1 = t$1; $f.visited = visited; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };\n\tstructType.ptr.prototype.FieldByName = function(name) {\n\t\tvar $ptr, _i, _r, _r$1, _ref, _tmp, _tmp$1, _tuple, f, hasAnon, i, name, present, t, tf, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; hasAnon = $f.hasAnon; i = $f.i; name = $f.name; present = $f.present; t = $f.t; tf = $f.tf; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tname = [name];\n\t\tf = new StructField.ptr();\n\t\tpresent = false;\n\t\tt = this;\n\t\thasAnon = false;\n\t\t/* */ if (!(name[0] === \"\")) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!(name[0] === \"\")) { */ case 1:\n\t\t\t_ref = t.fields;\n\t\t\t_i = 0;\n\t\t\t/* while (true) { */ case 3:\n\t\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }\n\t\t\t\ti = _i;\n\t\t\t\ttf = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]));\n\t\t\t\t/* */ if (tf.name === ptrType$5.nil) { $s = 5; continue; }\n\t\t\t\t/* */ $s = 6; continue;\n\t\t\t\t/* if (tf.name === ptrType$5.nil) { */ case 5:\n\t\t\t\t\thasAnon = true;\n\t\t\t\t\t_i++;\n\t\t\t\t\t/* continue; */ $s = 3; continue;\n\t\t\t\t/* } */ case 6:\n\t\t\t\t/* */ if (tf.name.$get() === name[0]) { $s = 7; continue; }\n\t\t\t\t/* */ $s = 8; continue;\n\t\t\t\t/* if (tf.name.$get() === name[0]) { */ case 7:\n\t\t\t\t\t_r = t.Field(i); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t\t\t_tmp = $clone(_r, StructField); _tmp$1 = true; $copy(f, _tmp, StructField); present = _tmp$1;\n\t\t\t\t\treturn [f, present];\n\t\t\t\t/* } */ case 8:\n\t\t\t\t_i++;\n\t\t\t/* } */ $s = 3; continue; case 4:\n\t\t/* } */ case 2:\n\t\tif (!hasAnon) {\n\t\t\treturn [f, present];\n\t\t}\n\t\t_r$1 = t.FieldByNameFunc((function(name) { return function(s) {\n\t\t\tvar $ptr, s;\n\t\t\treturn s === name[0];\n\t\t}; })(name)); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_tuple = _r$1; $copy(f, _tuple[0], StructField); present = _tuple[1];\n\t\treturn [f, present];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.hasAnon = hasAnon; $f.i = i; $f.name = name; $f.present = present; $f.t = t; $f.tf = tf; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructType.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };\n\tPtrTo = function(t) {\n\t\tvar $ptr, t;\n\t\treturn $assertType(t, ptrType$1).ptrTo();\n\t};\n\t$pkg.PtrTo = PtrTo;\n\trtype.ptr.prototype.Implements = function(u) {\n\t\tvar $ptr, _r, t, u, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = this;\n\t\tif ($interfaceIsEqual(u, $ifaceNil)) {\n\t\t\t$panic(new $String(\"reflect: nil type passed to Type.Implements\"));\n\t\t}\n\t\t_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t/* */ if (!((_r === 20))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!((_r === 20))) { */ case 1:\n\t\t\t$panic(new $String(\"reflect: non-interface type passed to Type.Implements\"));\n\t\t/* } */ case 2:\n\t\treturn implements$1($assertType(u, ptrType$1), t);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Implements }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\trtype.prototype.Implements = function(u) { return this.$val.Implements(u); };\n\trtype.ptr.prototype.AssignableTo = function(u) {\n\t\tvar $ptr, t, u, uu;\n\t\tt = this;\n\t\tif ($interfaceIsEqual(u, $ifaceNil)) {\n\t\t\t$panic(new $String(\"reflect: nil type passed to Type.AssignableTo\"));\n\t\t}\n\t\tuu = $assertType(u, ptrType$1);\n\t\treturn directlyAssignable(uu, t) || implements$1(uu, t);\n\t};\n\trtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };\n\trtype.ptr.prototype.ConvertibleTo = function(u) {\n\t\tvar $ptr, _r, t, u, uu, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = this;\n\t\tif ($interfaceIsEqual(u, $ifaceNil)) {\n\t\t\t$panic(new $String(\"reflect: nil type passed to Type.ConvertibleTo\"));\n\t\t}\n\t\tuu = $assertType(u, ptrType$1);\n\t\t_r = convertOp(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn !(_r === $throwNilPointerError);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.ConvertibleTo }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\trtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };\n\timplements$1 = function(T, V) {\n\t\tvar $ptr, T, V, i, i$1, j, j$1, t, tm, tm$1, v, v$1, vm, vm$1, x, x$1, x$2, x$3;\n\t\tif (!((T.Kind() === 20))) {\n\t\t\treturn false;\n\t\t}\n\t\tt = T.kindType;\n\t\tif (t.methods.$length === 0) {\n\t\t\treturn true;\n\t\t}\n\t\tif (V.Kind() === 20) {\n\t\t\tv = V.kindType;\n\t\t\ti = 0;\n\t\t\tj = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(j < v.methods.$length)) { break; }\n\t\t\t\ttm = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]));\n\t\t\t\tvm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError(\"index out of range\") : x$1.$array[x$1.$offset + j]));\n\t\t\t\tif (vm.name === tm.name && vm.pkgPath === tm.pkgPath && vm.typ === tm.typ) {\n\t\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t\tif (i >= t.methods.$length) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tj = j + (1) >> 0;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tv$1 = V.uncommonType.uncommon();\n\t\tif (v$1 === ptrType$6.nil) {\n\t\t\treturn false;\n\t\t}\n\t\ti$1 = 0;\n\t\tj$1 = 0;\n\t\twhile (true) {\n\t\t\tif (!(j$1 < v$1.methods.$length)) { break; }\n\t\t\ttm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError(\"index out of range\") : x$2.$array[x$2.$offset + i$1]));\n\t\t\tvm$1 = (x$3 = v$1.methods, ((j$1 < 0 || j$1 >= x$3.$length) ? $throwRuntimeError(\"index out of range\") : x$3.$array[x$3.$offset + j$1]));\n\t\t\tif (vm$1.name === tm$1.name && vm$1.pkgPath === tm$1.pkgPath && vm$1.mtyp === tm$1.typ) {\n\t\t\t\ti$1 = i$1 + (1) >> 0;\n\t\t\t\tif (i$1 >= t.methods.$length) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tj$1 = j$1 + (1) >> 0;\n\t\t}\n\t\treturn false;\n\t};\n\tdirectlyAssignable = function(T, V) {\n\t\tvar $ptr, T, V;\n\t\tif (T === V) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!(T.Name() === \"\") && !(V.Name() === \"\") || !((T.Kind() === V.Kind()))) {\n\t\t\treturn false;\n\t\t}\n\t\treturn haveIdenticalUnderlyingType(T, V);\n\t};\n\thaveIdenticalUnderlyingType = function(T, V) {\n\t\tvar $ptr, T, V, _i, _i$1, _i$2, _ref, _ref$1, _ref$2, _ref$3, i, i$1, i$2, kind, t, t$1, t$2, tf, typ, typ$1, v, v$1, v$2, vf, x, x$1, x$2, x$3;\n\t\tif (T === V) {\n\t\t\treturn true;\n\t\t}\n\t\tkind = T.Kind();\n\t\tif (!((kind === V.Kind()))) {\n\t\t\treturn false;\n\t\t}\n\t\tif (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {\n\t\t\treturn true;\n\t\t}\n\t\t_ref = kind;\n\t\tif (_ref === 17) {\n\t\t\treturn $interfaceIsEqual(T.Elem(), V.Elem()) && (T.Len() === V.Len());\n\t\t} else if (_ref === 18) {\n\t\t\tif ((V.ChanDir() === 3) && $interfaceIsEqual(T.Elem(), V.Elem())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn (V.ChanDir() === T.ChanDir()) && $interfaceIsEqual(T.Elem(), V.Elem());\n\t\t} else if (_ref === 19) {\n\t\t\tt = T.kindType;\n\t\t\tv = V.kindType;\n\t\t\tif (!(t.dotdotdot === v.dotdotdot) || !((t.in$2.$length === v.in$2.$length)) || !((t.out.$length === v.out.$length))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t_ref$1 = t.in$2;\n\t\t\t_i = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(_i < _ref$1.$length)) { break; }\n\t\t\t\ti = _i;\n\t\t\t\ttyp = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError(\"index out of range\") : _ref$1.$array[_ref$1.$offset + _i]);\n\t\t\t\tif (!(typ === (x = v.in$2, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i])))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t_i++;\n\t\t\t}\n\t\t\t_ref$2 = t.out;\n\t\t\t_i$1 = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(_i$1 < _ref$2.$length)) { break; }\n\t\t\t\ti$1 = _i$1;\n\t\t\t\ttyp$1 = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError(\"index out of range\") : _ref$2.$array[_ref$2.$offset + _i$1]);\n\t\t\t\tif (!(typ$1 === (x$1 = v.out, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError(\"index out of range\") : x$1.$array[x$1.$offset + i$1])))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t_i$1++;\n\t\t\t}\n\t\t\treturn true;\n\t\t} else if (_ref === 20) {\n\t\t\tt$1 = T.kindType;\n\t\t\tv$1 = V.kindType;\n\t\t\tif ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t} else if (_ref === 21) {\n\t\t\treturn $interfaceIsEqual(T.Key(), V.Key()) && $interfaceIsEqual(T.Elem(), V.Elem());\n\t\t} else if (_ref === 22 || _ref === 23) {\n\t\t\treturn $interfaceIsEqual(T.Elem(), V.Elem());\n\t\t} else if (_ref === 25) {\n\t\t\tt$2 = T.kindType;\n\t\t\tv$2 = V.kindType;\n\t\t\tif (!((t$2.fields.$length === v$2.fields.$length))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t_ref$3 = t$2.fields;\n\t\t\t_i$2 = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(_i$2 < _ref$3.$length)) { break; }\n\t\t\t\ti$2 = _i$2;\n\t\t\t\ttf = (x$2 = t$2.fields, ((i$2 < 0 || i$2 >= x$2.$length) ? $throwRuntimeError(\"index out of range\") : x$2.$array[x$2.$offset + i$2]));\n\t\t\t\tvf = (x$3 = v$2.fields, ((i$2 < 0 || i$2 >= x$3.$length) ? $throwRuntimeError(\"index out of range\") : x$3.$array[x$3.$offset + i$2]));\n\t\t\t\tif (!(tf.name === vf.name) && (tf.name === ptrType$5.nil || vf.name === ptrType$5.nil || !(tf.name.$get() === vf.name.$get()))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (!(tf.pkgPath === vf.pkgPath) && (tf.pkgPath === ptrType$5.nil || vf.pkgPath === ptrType$5.nil || !(tf.pkgPath.$get() === vf.pkgPath.$get()))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (!(tf.typ === vf.typ)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (!(tf.tag === vf.tag) && (tf.tag === ptrType$5.nil || vf.tag === ptrType$5.nil || !(tf.tag.$get() === vf.tag.$get()))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (!((tf.offset === vf.offset))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t_i$2++;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t};\n\ttoType = function(t) {\n\t\tvar $ptr, t;\n\t\tif (t === ptrType$1.nil) {\n\t\t\treturn $ifaceNil;\n\t\t}\n\t\treturn t;\n\t};\n\tifaceIndir = function(t) {\n\t\tvar $ptr, t;\n\t\treturn ((t.kind & 32) >>> 0) === 0;\n\t};\n\tflag.prototype.kind = function() {\n\t\tvar $ptr, f;\n\t\tf = this.$val;\n\t\treturn (((f & 31) >>> 0) >>> 0);\n\t};\n\t$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };\n\tValue.ptr.prototype.pointer = function() {\n\t\tvar $ptr, v;\n\t\tv = this;\n\t\tif (!((v.typ.size === 4)) || !v.typ.pointers()) {\n\t\t\t$panic(new $String(\"can't call pointer on a non-pointer Value\"));\n\t\t}\n\t\tif (!((((v.flag & 64) >>> 0) === 0))) {\n\t\t\treturn v.ptr.$get();\n\t\t}\n\t\treturn v.ptr;\n\t};\n\tValue.prototype.pointer = function() { return this.$val.pointer(); };\n\tValueError.ptr.prototype.Error = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\tif (e.Kind === 0) {\n\t\t\treturn \"reflect: call of \" + e.Method + \" on zero Value\";\n\t\t}\n\t\treturn \"reflect: call of \" + e.Method + \" on \" + new Kind(e.Kind).String() + \" Value\";\n\t};\n\tValueError.prototype.Error = function() { return this.$val.Error(); };\n\tflag.prototype.mustBe = function(expected) {\n\t\tvar $ptr, expected, f;\n\t\tf = this.$val;\n\t\tif (!((new flag(f).kind() === expected))) {\n\t\t\t$panic(new ValueError.ptr(methodName(), new flag(f).kind()));\n\t\t}\n\t};\n\t$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };\n\tflag.prototype.mustBeExported = function() {\n\t\tvar $ptr, f;\n\t\tf = this.$val;\n\t\tif (f === 0) {\n\t\t\t$panic(new ValueError.ptr(methodName(), 0));\n\t\t}\n\t\tif (!((((f & 32) >>> 0) === 0))) {\n\t\t\t$panic(new $String(\"reflect: \" + methodName() + \" using value obtained using unexported field\"));\n\t\t}\n\t};\n\t$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };\n\tflag.prototype.mustBeAssignable = function() {\n\t\tvar $ptr, f;\n\t\tf = this.$val;\n\t\tif (f === 0) {\n\t\t\t$panic(new ValueError.ptr(methodName(), 0));\n\t\t}\n\t\tif (!((((f & 32) >>> 0) === 0))) {\n\t\t\t$panic(new $String(\"reflect: \" + methodName() + \" using value obtained using unexported field\"));\n\t\t}\n\t\tif (((f & 128) >>> 0) === 0) {\n\t\t\t$panic(new $String(\"reflect: \" + methodName() + \" using unaddressable value\"));\n\t\t}\n\t};\n\t$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };\n\tValue.ptr.prototype.Addr = function() {\n\t\tvar $ptr, v;\n\t\tv = this;\n\t\tif (((v.flag & 128) >>> 0) === 0) {\n\t\t\t$panic(new $String(\"reflect.Value.Addr of unaddressable value\"));\n\t\t}\n\t\treturn new Value.ptr(v.typ.ptrTo(), v.ptr, ((((v.flag & 32) >>> 0)) | 22) >>> 0);\n\t};\n\tValue.prototype.Addr = function() { return this.$val.Addr(); };\n\tValue.ptr.prototype.Bool = function() {\n\t\tvar $ptr, v;\n\t\tv = this;\n\t\tnew flag(v.flag).mustBe(1);\n\t\treturn v.ptr.$get();\n\t};\n\tValue.prototype.Bool = function() { return this.$val.Bool(); };\n\tValue.ptr.prototype.Bytes = function() {\n\t\tvar $ptr, _r, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\tnew flag(v.flag).mustBe(23);\n\t\t_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t/* */ if (!((_r === 8))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!((_r === 8))) { */ case 1:\n\t\t\t$panic(new $String(\"reflect.Value.Bytes of non-byte slice\"));\n\t\t/* } */ case 2:\n\t\treturn v.ptr.$get();\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Bytes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.Bytes = function() { return this.$val.Bytes(); };\n\tValue.ptr.prototype.runes = function() {\n\t\tvar $ptr, _r, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\tnew flag(v.flag).mustBe(23);\n\t\t_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t/* */ if (!((_r === 5))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!((_r === 5))) { */ case 1:\n\t\t\t$panic(new $String(\"reflect.Value.Bytes of non-rune slice\"));\n\t\t/* } */ case 2:\n\t\treturn v.ptr.$get();\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.runes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.runes = function() { return this.$val.runes(); };\n\tValue.ptr.prototype.CanAddr = function() {\n\t\tvar $ptr, v;\n\t\tv = this;\n\t\treturn !((((v.flag & 128) >>> 0) === 0));\n\t};\n\tValue.prototype.CanAddr = function() { return this.$val.CanAddr(); };\n\tValue.ptr.prototype.CanSet = function() {\n\t\tvar $ptr, v;\n\t\tv = this;\n\t\treturn ((v.flag & 160) >>> 0) === 128;\n\t};\n\tValue.prototype.CanSet = function() { return this.$val.CanSet(); };\n\tValue.ptr.prototype.Call = function(in$1) {\n\t\tvar $ptr, _r, in$1, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\tnew flag(v.flag).mustBe(19);\n\t\tnew flag(v.flag).mustBeExported();\n\t\t_r = v.call(\"Call\", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.Call = function(in$1) { return this.$val.Call(in$1); };\n\tValue.ptr.prototype.CallSlice = function(in$1) {\n\t\tvar $ptr, _r, in$1, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\tnew flag(v.flag).mustBe(19);\n\t\tnew flag(v.flag).mustBeExported();\n\t\t_r = v.call(\"CallSlice\", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.CallSlice }; } $f.$ptr = $ptr; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };\n\tValue.ptr.prototype.Complex = function() {\n\t\tvar $ptr, _ref, k, v, x;\n\t\tv = this;\n\t\tk = new flag(v.flag).kind();\n\t\t_ref = k;\n\t\tif (_ref === 15) {\n\t\t\treturn (x = v.ptr.$get(), new $Complex128(x.$real, x.$imag));\n\t\t} else if (_ref === 16) {\n\t\t\treturn v.ptr.$get();\n\t\t}\n\t\t$panic(new ValueError.ptr(\"reflect.Value.Complex\", new flag(v.flag).kind()));\n\t};\n\tValue.prototype.Complex = function() { return this.$val.Complex(); };\n\tValue.ptr.prototype.FieldByIndex = function(index) {\n\t\tvar $ptr, _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _v = $f._v; i = $f.i; index = $f.index; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\t/* */ if (index.$length === 1) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (index.$length === 1) { */ case 1:\n\t\t\t_r = v.Field((0 >= index.$length ? $throwRuntimeError(\"index out of range\") : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\treturn _r;\n\t\t/* } */ case 2:\n\t\tnew flag(v.flag).mustBe(25);\n\t\t_ref = index;\n\t\t_i = 0;\n\t\t/* while (true) { */ case 4:\n\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }\n\t\t\ti = _i;\n\t\t\tx = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\t/* */ if (i > 0) { $s = 6; continue; }\n\t\t\t/* */ $s = 7; continue;\n\t\t\t/* if (i > 0) { */ case 6:\n\t\t\t\tif (!(v.Kind() === 22)) { _v = false; $s = 10; continue s; }\n\t\t\t\t_r$1 = v.typ.Elem().Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t\t_v = _r$1 === 25; case 10:\n\t\t\t\t/* */ if (_v) { $s = 8; continue; }\n\t\t\t\t/* */ $s = 9; continue;\n\t\t\t\t/* if (_v) { */ case 8:\n\t\t\t\t\tif (v.IsNil()) {\n\t\t\t\t\t\t$panic(new $String(\"reflect: indirection through nil pointer to embedded struct\"));\n\t\t\t\t\t}\n\t\t\t\t\t_r$2 = v.Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\t\tv = _r$2;\n\t\t\t\t/* } */ case 9:\n\t\t\t/* } */ case 7:\n\t\t\t_r$3 = v.Field(x); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\tv = _r$3;\n\t\t\t_i++;\n\t\t/* } */ $s = 4; continue; case 5:\n\t\treturn v;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._v = _v; $f.i = i; $f.index = index; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };\n\tValue.ptr.prototype.FieldByName = function(name) {\n\t\tvar $ptr, _r, _r$1, _tuple, f, name, ok, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; name = $f.name; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\tnew flag(v.flag).mustBe(25);\n\t\t_r = v.typ.FieldByName(name); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; f = $clone(_tuple[0], StructField); ok = _tuple[1];\n\t\t/* */ if (ok) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (ok) { */ case 2:\n\t\t\t_r$1 = v.FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\treturn _r$1;\n\t\t/* } */ case 3:\n\t\treturn new Value.ptr(ptrType$1.nil, 0, 0);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.name = name; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };\n\tValue.ptr.prototype.FieldByNameFunc = function(match) {\n\t\tvar $ptr, _r, _r$1, _tuple, f, match, ok, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; match = $f.match; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\t_r = v.typ.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; f = $clone(_tuple[0], StructField); ok = _tuple[1];\n\t\t/* */ if (ok) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (ok) { */ case 2:\n\t\t\t_r$1 = v.FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\treturn _r$1;\n\t\t/* } */ case 3:\n\t\treturn new Value.ptr(ptrType$1.nil, 0, 0);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.match = match; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };\n\tValue.ptr.prototype.Float = function() {\n\t\tvar $ptr, _ref, k, v;\n\t\tv = this;\n\t\tk = new flag(v.flag).kind();\n\t\t_ref = k;\n\t\tif (_ref === 13) {\n\t\t\treturn v.ptr.$get();\n\t\t} else if (_ref === 14) {\n\t\t\treturn v.ptr.$get();\n\t\t}\n\t\t$panic(new ValueError.ptr(\"reflect.Value.Float\", new flag(v.flag).kind()));\n\t};\n\tValue.prototype.Float = function() { return this.$val.Float(); };\n\tValue.ptr.prototype.Int = function() {\n\t\tvar $ptr, _ref, k, p, v;\n\t\tv = this;\n\t\tk = new flag(v.flag).kind();\n\t\tp = v.ptr;\n\t\t_ref = k;\n\t\tif (_ref === 2) {\n\t\t\treturn new $Int64(0, p.$get());\n\t\t} else if (_ref === 3) {\n\t\t\treturn new $Int64(0, p.$get());\n\t\t} else if (_ref === 4) {\n\t\t\treturn new $Int64(0, p.$get());\n\t\t} else if (_ref === 5) {\n\t\t\treturn new $Int64(0, p.$get());\n\t\t} else if (_ref === 6) {\n\t\t\treturn p.$get();\n\t\t}\n\t\t$panic(new ValueError.ptr(\"reflect.Value.Int\", new flag(v.flag).kind()));\n\t};\n\tValue.prototype.Int = function() { return this.$val.Int(); };\n\tValue.ptr.prototype.CanInterface = function() {\n\t\tvar $ptr, v;\n\t\tv = this;\n\t\tif (v.flag === 0) {\n\t\t\t$panic(new ValueError.ptr(\"reflect.Value.CanInterface\", 0));\n\t\t}\n\t\treturn ((v.flag & 32) >>> 0) === 0;\n\t};\n\tValue.prototype.CanInterface = function() { return this.$val.CanInterface(); };\n\tValue.ptr.prototype.Interface = function() {\n\t\tvar $ptr, _r, i, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ti = $ifaceNil;\n\t\tv = this;\n\t\t_r = valueInterface(v, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\ti = _r;\n\t\treturn i;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Interface }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.Interface = function() { return this.$val.Interface(); };\n\tValue.ptr.prototype.InterfaceData = function() {\n\t\tvar $ptr, v;\n\t\tv = this;\n\t\tnew flag(v.flag).mustBe(20);\n\t\treturn v.ptr;\n\t};\n\tValue.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };\n\tValue.ptr.prototype.IsValid = function() {\n\t\tvar $ptr, v;\n\t\tv = this;\n\t\treturn !((v.flag === 0));\n\t};\n\tValue.prototype.IsValid = function() { return this.$val.IsValid(); };\n\tValue.ptr.prototype.Kind = function() {\n\t\tvar $ptr, v;\n\t\tv = this;\n\t\treturn new flag(v.flag).kind();\n\t};\n\tValue.prototype.Kind = function() { return this.$val.Kind(); };\n\tValue.ptr.prototype.MapIndex = function(key) {\n\t\tvar $ptr, _r, c, e, fl, k, key, tt, typ, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; e = $f.e; fl = $f.fl; k = $f.k; key = $f.key; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\tkey = key;\n\t\tnew flag(v.flag).mustBe(21);\n\t\ttt = v.typ.kindType;\n\t\t_r = key.assignTo(\"reflect.Value.MapIndex\", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tkey = _r;\n\t\tk = 0;\n\t\tif (!((((key.flag & 64) >>> 0) === 0))) {\n\t\t\tk = key.ptr;\n\t\t} else {\n\t\t\tk = (key.$ptr_ptr || (key.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key)));\n\t\t}\n\t\te = mapaccess(v.typ, v.pointer(), k);\n\t\tif (e === 0) {\n\t\t\treturn new Value.ptr(ptrType$1.nil, 0, 0);\n\t\t}\n\t\ttyp = tt.elem;\n\t\tfl = ((((v.flag | key.flag) >>> 0)) & 32) >>> 0;\n\t\tfl = (fl | ((typ.Kind() >>> 0))) >>> 0;\n\t\tif (ifaceIndir(typ)) {\n\t\t\tc = unsafe_New(typ);\n\t\t\tmemmove(c, e, typ.size);\n\t\t\treturn new Value.ptr(typ, c, (fl | 64) >>> 0);\n\t\t} else {\n\t\t\treturn new Value.ptr(typ, e.$get(), fl);\n\t\t}\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.e = e; $f.fl = fl; $f.k = k; $f.key = key; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };\n\tValue.ptr.prototype.MapKeys = function() {\n\t\tvar $ptr, _r, a, c, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; c = $f.c; fl = $f.fl; i = $f.i; it = $f.it; key = $f.key; keyType = $f.keyType; m = $f.m; mlen = $f.mlen; tt = $f.tt; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\tnew flag(v.flag).mustBe(21);\n\t\ttt = v.typ.kindType;\n\t\tkeyType = tt.key;\n\t\tfl = (((v.flag & 32) >>> 0) | (keyType.Kind() >>> 0)) >>> 0;\n\t\tm = v.pointer();\n\t\tmlen = 0;\n\t\tif (!(m === 0)) {\n\t\t\tmlen = maplen(m);\n\t\t}\n\t\tit = mapiterinit(v.typ, m);\n\t\ta = $makeSlice(sliceType$7, mlen);\n\t\ti = 0;\n\t\ti = 0;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }\n\t\t\t_r = mapiterkey(it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\tkey = _r;\n\t\t\tif (key === 0) {\n\t\t\t\t/* break; */ $s = 2; continue;\n\t\t\t}\n\t\t\tif (ifaceIndir(keyType)) {\n\t\t\t\tc = unsafe_New(keyType);\n\t\t\t\tmemmove(c, key, keyType.size);\n\t\t\t\t((i < 0 || i >= a.$length) ? $throwRuntimeError(\"index out of range\") : a.$array[a.$offset + i] = new Value.ptr(keyType, c, (fl | 64) >>> 0));\n\t\t\t} else {\n\t\t\t\t((i < 0 || i >= a.$length) ? $throwRuntimeError(\"index out of range\") : a.$array[a.$offset + i] = new Value.ptr(keyType, key.$get(), fl));\n\t\t\t}\n\t\t\tmapiternext(it);\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\treturn $subslice(a, 0, i);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapKeys }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.c = c; $f.fl = fl; $f.i = i; $f.it = it; $f.key = key; $f.keyType = keyType; $f.m = m; $f.mlen = mlen; $f.tt = tt; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.MapKeys = function() { return this.$val.MapKeys(); };\n\tValue.ptr.prototype.Method = function(i) {\n\t\tvar $ptr, fl, i, v;\n\t\tv = this;\n\t\tif (v.typ === ptrType$1.nil) {\n\t\t\t$panic(new ValueError.ptr(\"reflect.Value.Method\", 0));\n\t\t}\n\t\tif (!((((v.flag & 256) >>> 0) === 0)) || (i >>> 0) >= (v.typ.NumMethod() >>> 0)) {\n\t\t\t$panic(new $String(\"reflect: Method index out of range\"));\n\t\t}\n\t\tif ((v.typ.Kind() === 20) && v.IsNil()) {\n\t\t\t$panic(new $String(\"reflect: Method on nil interface value\"));\n\t\t}\n\t\tfl = (v.flag & 96) >>> 0;\n\t\tfl = (fl | (19)) >>> 0;\n\t\tfl = (fl | (((((i >>> 0) << 9 >>> 0) | 256) >>> 0))) >>> 0;\n\t\treturn new Value.ptr(v.typ, v.ptr, fl);\n\t};\n\tValue.prototype.Method = function(i) { return this.$val.Method(i); };\n\tValue.ptr.prototype.NumMethod = function() {\n\t\tvar $ptr, v;\n\t\tv = this;\n\t\tif (v.typ === ptrType$1.nil) {\n\t\t\t$panic(new ValueError.ptr(\"reflect.Value.NumMethod\", 0));\n\t\t}\n\t\tif (!((((v.flag & 256) >>> 0) === 0))) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn v.typ.NumMethod();\n\t};\n\tValue.prototype.NumMethod = function() { return this.$val.NumMethod(); };\n\tValue.ptr.prototype.MethodByName = function(name) {\n\t\tvar $ptr, _tuple, m, name, ok, v;\n\t\tv = this;\n\t\tif (v.typ === ptrType$1.nil) {\n\t\t\t$panic(new ValueError.ptr(\"reflect.Value.MethodByName\", 0));\n\t\t}\n\t\tif (!((((v.flag & 256) >>> 0) === 0))) {\n\t\t\treturn new Value.ptr(ptrType$1.nil, 0, 0);\n\t\t}\n\t\t_tuple = v.typ.MethodByName(name); m = $clone(_tuple[0], Method); ok = _tuple[1];\n\t\tif (!ok) {\n\t\t\treturn new Value.ptr(ptrType$1.nil, 0, 0);\n\t\t}\n\t\treturn v.Method(m.Index);\n\t};\n\tValue.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };\n\tValue.ptr.prototype.NumField = function() {\n\t\tvar $ptr, tt, v;\n\t\tv = this;\n\t\tnew flag(v.flag).mustBe(25);\n\t\ttt = v.typ.kindType;\n\t\treturn tt.fields.$length;\n\t};\n\tValue.prototype.NumField = function() { return this.$val.NumField(); };\n\tValue.ptr.prototype.OverflowComplex = function(x) {\n\t\tvar $ptr, _ref, k, v, x;\n\t\tv = this;\n\t\tk = new flag(v.flag).kind();\n\t\t_ref = k;\n\t\tif (_ref === 15) {\n\t\t\treturn overflowFloat32(x.$real) || overflowFloat32(x.$imag);\n\t\t} else if (_ref === 16) {\n\t\t\treturn false;\n\t\t}\n\t\t$panic(new ValueError.ptr(\"reflect.Value.OverflowComplex\", new flag(v.flag).kind()));\n\t};\n\tValue.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };\n\tValue.ptr.prototype.OverflowFloat = function(x) {\n\t\tvar $ptr, _ref, k, v, x;\n\t\tv = this;\n\t\tk = new flag(v.flag).kind();\n\t\t_ref = k;\n\t\tif (_ref === 13) {\n\t\t\treturn overflowFloat32(x);\n\t\t} else if (_ref === 14) {\n\t\t\treturn false;\n\t\t}\n\t\t$panic(new ValueError.ptr(\"reflect.Value.OverflowFloat\", new flag(v.flag).kind()));\n\t};\n\tValue.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };\n\toverflowFloat32 = function(x) {\n\t\tvar $ptr, x;\n\t\tif (x < 0) {\n\t\t\tx = -x;\n\t\t}\n\t\treturn 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;\n\t};\n\tValue.ptr.prototype.OverflowInt = function(x) {\n\t\tvar $ptr, _ref, bitSize, k, trunc, v, x, x$1;\n\t\tv = this;\n\t\tk = new flag(v.flag).kind();\n\t\t_ref = k;\n\t\tif (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {\n\t\t\tbitSize = (x$1 = v.typ.size, (((x$1 >>> 16 << 16) * 8 >>> 0) + (x$1 << 16 >>> 16) * 8) >>> 0);\n\t\t\ttrunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));\n\t\t\treturn !((x.$high === trunc.$high && x.$low === trunc.$low));\n\t\t}\n\t\t$panic(new ValueError.ptr(\"reflect.Value.OverflowInt\", new flag(v.flag).kind()));\n\t};\n\tValue.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };\n\tValue.ptr.prototype.OverflowUint = function(x) {\n\t\tvar $ptr, _ref, bitSize, k, trunc, v, x, x$1;\n\t\tv = this;\n\t\tk = new flag(v.flag).kind();\n\t\t_ref = k;\n\t\tif (_ref === 7 || _ref === 12 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11) {\n\t\t\tbitSize = (x$1 = v.typ.size, (((x$1 >>> 16 << 16) * 8 >>> 0) + (x$1 << 16 >>> 16) * 8) >>> 0);\n\t\t\ttrunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));\n\t\t\treturn !((x.$high === trunc.$high && x.$low === trunc.$low));\n\t\t}\n\t\t$panic(new ValueError.ptr(\"reflect.Value.OverflowUint\", new flag(v.flag).kind()));\n\t};\n\tValue.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };\n\tValue.ptr.prototype.Recv = function() {\n\t\tvar $ptr, _r, _tuple, ok, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tx = new Value.ptr();\n\t\tok = false;\n\t\tv = this;\n\t\tnew flag(v.flag).mustBe(18);\n\t\tnew flag(v.flag).mustBeExported();\n\t\t_r = v.recv(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; x = _tuple[0]; ok = _tuple[1];\n\t\treturn [x, ok];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Recv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.Recv = function() { return this.$val.Recv(); };\n\tValue.ptr.prototype.recv = function(nb) {\n\t\tvar $ptr, _r, _tuple, nb, ok, p, selected, t, tt, v, val, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; nb = $f.nb; ok = $f.ok; p = $f.p; selected = $f.selected; t = $f.t; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tval = new Value.ptr();\n\t\tok = false;\n\t\tv = this;\n\t\ttt = v.typ.kindType;\n\t\tif (((tt.dir >> 0) & 1) === 0) {\n\t\t\t$panic(new $String(\"reflect: recv on send-only channel\"));\n\t\t}\n\t\tt = tt.elem;\n\t\tval = new Value.ptr(t, 0, (t.Kind() >>> 0));\n\t\tp = 0;\n\t\tif (ifaceIndir(t)) {\n\t\t\tp = unsafe_New(t);\n\t\t\tval.ptr = p;\n\t\t\tval.flag = (val.flag | (64)) >>> 0;\n\t\t} else {\n\t\t\tp = (val.$ptr_ptr || (val.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val)));\n\t\t}\n\t\t_r = chanrecv(v.typ, v.pointer(), nb, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; selected = _tuple[0]; ok = _tuple[1];\n\t\tif (!selected) {\n\t\t\tval = new Value.ptr(ptrType$1.nil, 0, 0);\n\t\t}\n\t\treturn [val, ok];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.recv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.nb = nb; $f.ok = ok; $f.p = p; $f.selected = selected; $f.t = t; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.recv = function(nb) { return this.$val.recv(nb); };\n\tValue.ptr.prototype.Send = function(x) {\n\t\tvar $ptr, _r, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\tx = x;\n\t\tnew flag(v.flag).mustBe(18);\n\t\tnew flag(v.flag).mustBeExported();\n\t\t_r = v.send(x, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Send }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.Send = function(x) { return this.$val.Send(x); };\n\tValue.ptr.prototype.send = function(x, nb) {\n\t\tvar $ptr, _r, _r$1, nb, p, selected, tt, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; nb = $f.nb; p = $f.p; selected = $f.selected; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tselected = false;\n\t\tv = this;\n\t\tx = x;\n\t\ttt = v.typ.kindType;\n\t\tif (((tt.dir >> 0) & 2) === 0) {\n\t\t\t$panic(new $String(\"reflect: send on recv-only channel\"));\n\t\t}\n\t\tnew flag(x.flag).mustBeExported();\n\t\t_r = x.assignTo(\"reflect.Value.Send\", tt.elem, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tx = _r;\n\t\tp = 0;\n\t\tif (!((((x.flag & 64) >>> 0) === 0))) {\n\t\t\tp = x.ptr;\n\t\t} else {\n\t\t\tp = (x.$ptr_ptr || (x.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, x)));\n\t\t}\n\t\t_r$1 = chansend(v.typ, v.pointer(), p, nb); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\tselected = _r$1;\n\t\treturn selected;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.send }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.nb = nb; $f.p = p; $f.selected = selected; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.send = function(x, nb) { return this.$val.send(x, nb); };\n\tValue.ptr.prototype.SetBool = function(x) {\n\t\tvar $ptr, v, x;\n\t\tv = this;\n\t\tnew flag(v.flag).mustBeAssignable();\n\t\tnew flag(v.flag).mustBe(1);\n\t\tv.ptr.$set(x);\n\t};\n\tValue.prototype.SetBool = function(x) { return this.$val.SetBool(x); };\n\tValue.ptr.prototype.SetBytes = function(x) {\n\t\tvar $ptr, _r, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\tnew flag(v.flag).mustBeAssignable();\n\t\tnew flag(v.flag).mustBe(23);\n\t\t_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t/* */ if (!((_r === 8))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!((_r === 8))) { */ case 1:\n\t\t\t$panic(new $String(\"reflect.Value.SetBytes of non-byte slice\"));\n\t\t/* } */ case 2:\n\t\tv.ptr.$set(x);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };\n\tValue.ptr.prototype.setRunes = function(x) {\n\t\tvar $ptr, _r, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\tnew flag(v.flag).mustBeAssignable();\n\t\tnew flag(v.flag).mustBe(23);\n\t\t_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t/* */ if (!((_r === 5))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!((_r === 5))) { */ case 1:\n\t\t\t$panic(new $String(\"reflect.Value.setRunes of non-rune slice\"));\n\t\t/* } */ case 2:\n\t\tv.ptr.$set(x);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.setRunes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.setRunes = function(x) { return this.$val.setRunes(x); };\n\tValue.ptr.prototype.SetComplex = function(x) {\n\t\tvar $ptr, _ref, k, v, x;\n\t\tv = this;\n\t\tnew flag(v.flag).mustBeAssignable();\n\t\tk = new flag(v.flag).kind();\n\t\t_ref = k;\n\t\tif (_ref === 15) {\n\t\t\tv.ptr.$set(new $Complex64(x.$real, x.$imag));\n\t\t} else if (_ref === 16) {\n\t\t\tv.ptr.$set(x);\n\t\t} else {\n\t\t\t$panic(new ValueError.ptr(\"reflect.Value.SetComplex\", new flag(v.flag).kind()));\n\t\t}\n\t};\n\tValue.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };\n\tValue.ptr.prototype.SetFloat = function(x) {\n\t\tvar $ptr, _ref, k, v, x;\n\t\tv = this;\n\t\tnew flag(v.flag).mustBeAssignable();\n\t\tk = new flag(v.flag).kind();\n\t\t_ref = k;\n\t\tif (_ref === 13) {\n\t\t\tv.ptr.$set($fround(x));\n\t\t} else if (_ref === 14) {\n\t\t\tv.ptr.$set(x);\n\t\t} else {\n\t\t\t$panic(new ValueError.ptr(\"reflect.Value.SetFloat\", new flag(v.flag).kind()));\n\t\t}\n\t};\n\tValue.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };\n\tValue.ptr.prototype.SetInt = function(x) {\n\t\tvar $ptr, _ref, k, v, x;\n\t\tv = this;\n\t\tnew flag(v.flag).mustBeAssignable();\n\t\tk = new flag(v.flag).kind();\n\t\t_ref = k;\n\t\tif (_ref === 2) {\n\t\t\tv.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));\n\t\t} else if (_ref === 3) {\n\t\t\tv.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24));\n\t\t} else if (_ref === 4) {\n\t\t\tv.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16));\n\t\t} else if (_ref === 5) {\n\t\t\tv.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));\n\t\t} else if (_ref === 6) {\n\t\t\tv.ptr.$set(x);\n\t\t} else {\n\t\t\t$panic(new ValueError.ptr(\"reflect.Value.SetInt\", new flag(v.flag).kind()));\n\t\t}\n\t};\n\tValue.prototype.SetInt = function(x) { return this.$val.SetInt(x); };\n\tValue.ptr.prototype.SetMapIndex = function(key, val) {\n\t\tvar $ptr, _r, _r$1, e, k, key, tt, v, val, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; e = $f.e; k = $f.k; key = $f.key; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\tval = val;\n\t\tkey = key;\n\t\tnew flag(v.flag).mustBe(21);\n\t\tnew flag(v.flag).mustBeExported();\n\t\tnew flag(key.flag).mustBeExported();\n\t\ttt = v.typ.kindType;\n\t\t_r = key.assignTo(\"reflect.Value.SetMapIndex\", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tkey = _r;\n\t\tk = 0;\n\t\tif (!((((key.flag & 64) >>> 0) === 0))) {\n\t\t\tk = key.ptr;\n\t\t} else {\n\t\t\tk = (key.$ptr_ptr || (key.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key)));\n\t\t}\n\t\tif (val.typ === ptrType$1.nil) {\n\t\t\tmapdelete(v.typ, v.pointer(), k);\n\t\t\treturn;\n\t\t}\n\t\tnew flag(val.flag).mustBeExported();\n\t\t_r$1 = val.assignTo(\"reflect.Value.SetMapIndex\", tt.elem, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\tval = _r$1;\n\t\te = 0;\n\t\tif (!((((val.flag & 64) >>> 0) === 0))) {\n\t\t\te = val.ptr;\n\t\t} else {\n\t\t\te = (val.$ptr_ptr || (val.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val)));\n\t\t}\n\t\t$r = mapassign(v.typ, v.pointer(), k, e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetMapIndex }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.k = k; $f.key = key; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.SetMapIndex = function(key, val) { return this.$val.SetMapIndex(key, val); };\n\tValue.ptr.prototype.SetUint = function(x) {\n\t\tvar $ptr, _ref, k, v, x;\n\t\tv = this;\n\t\tnew flag(v.flag).mustBeAssignable();\n\t\tk = new flag(v.flag).kind();\n\t\t_ref = k;\n\t\tif (_ref === 7) {\n\t\t\tv.ptr.$set((x.$low >>> 0));\n\t\t} else if (_ref === 8) {\n\t\t\tv.ptr.$set((x.$low << 24 >>> 24));\n\t\t} else if (_ref === 9) {\n\t\t\tv.ptr.$set((x.$low << 16 >>> 16));\n\t\t} else if (_ref === 10) {\n\t\t\tv.ptr.$set((x.$low >>> 0));\n\t\t} else if (_ref === 11) {\n\t\t\tv.ptr.$set(x);\n\t\t} else if (_ref === 12) {\n\t\t\tv.ptr.$set((x.$low >>> 0));\n\t\t} else {\n\t\t\t$panic(new ValueError.ptr(\"reflect.Value.SetUint\", new flag(v.flag).kind()));\n\t\t}\n\t};\n\tValue.prototype.SetUint = function(x) { return this.$val.SetUint(x); };\n\tValue.ptr.prototype.SetPointer = function(x) {\n\t\tvar $ptr, v, x;\n\t\tv = this;\n\t\tnew flag(v.flag).mustBeAssignable();\n\t\tnew flag(v.flag).mustBe(26);\n\t\tv.ptr.$set(x);\n\t};\n\tValue.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };\n\tValue.ptr.prototype.SetString = function(x) {\n\t\tvar $ptr, v, x;\n\t\tv = this;\n\t\tnew flag(v.flag).mustBeAssignable();\n\t\tnew flag(v.flag).mustBe(24);\n\t\tv.ptr.$set(x);\n\t};\n\tValue.prototype.SetString = function(x) { return this.$val.SetString(x); };\n\tValue.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, _ref, k, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; k = $f.k; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\tk = new flag(v.flag).kind();\n\t\t_ref = k;\n\t\tif (_ref === 0) {\n\t\t\treturn \"<invalid Value>\";\n\t\t} else if (_ref === 24) {\n\t\t\treturn v.ptr.$get();\n\t\t}\n\t\t_r = v.Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn \"<\" + _r + \" Value>\";\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.k = k; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.String = function() { return this.$val.String(); };\n\tValue.ptr.prototype.TryRecv = function() {\n\t\tvar $ptr, _r, _tuple, ok, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tx = new Value.ptr();\n\t\tok = false;\n\t\tv = this;\n\t\tnew flag(v.flag).mustBe(18);\n\t\tnew flag(v.flag).mustBeExported();\n\t\t_r = v.recv(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; x = _tuple[0]; ok = _tuple[1];\n\t\treturn [x, ok];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TryRecv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.TryRecv = function() { return this.$val.TryRecv(); };\n\tValue.ptr.prototype.TrySend = function(x) {\n\t\tvar $ptr, _r, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\tx = x;\n\t\tnew flag(v.flag).mustBe(18);\n\t\tnew flag(v.flag).mustBeExported();\n\t\t_r = v.send(x, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TrySend }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.TrySend = function(x) { return this.$val.TrySend(x); };\n\tValue.ptr.prototype.Type = function() {\n\t\tvar $ptr, f, i, m, m$1, tt, ut, v, x, x$1;\n\t\tv = this;\n\t\tf = v.flag;\n\t\tif (f === 0) {\n\t\t\t$panic(new ValueError.ptr(\"reflect.Value.Type\", 0));\n\t\t}\n\t\tif (((f & 256) >>> 0) === 0) {\n\t\t\treturn v.typ;\n\t\t}\n\t\ti = (v.flag >> 0) >> 9 >> 0;\n\t\tif (v.typ.Kind() === 20) {\n\t\t\ttt = v.typ.kindType;\n\t\t\tif ((i >>> 0) >= (tt.methods.$length >>> 0)) {\n\t\t\t\t$panic(new $String(\"reflect: internal error: invalid method index\"));\n\t\t\t}\n\t\t\tm = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]));\n\t\t\treturn m.typ;\n\t\t}\n\t\tut = v.typ.uncommonType.uncommon();\n\t\tif (ut === ptrType$6.nil || (i >>> 0) >= (ut.methods.$length >>> 0)) {\n\t\t\t$panic(new $String(\"reflect: internal error: invalid method index\"));\n\t\t}\n\t\tm$1 = (x$1 = ut.methods, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError(\"index out of range\") : x$1.$array[x$1.$offset + i]));\n\t\treturn m$1.mtyp;\n\t};\n\tValue.prototype.Type = function() { return this.$val.Type(); };\n\tValue.ptr.prototype.Uint = function() {\n\t\tvar $ptr, _ref, k, p, v, x;\n\t\tv = this;\n\t\tk = new flag(v.flag).kind();\n\t\tp = v.ptr;\n\t\t_ref = k;\n\t\tif (_ref === 7) {\n\t\t\treturn new $Uint64(0, p.$get());\n\t\t} else if (_ref === 8) {\n\t\t\treturn new $Uint64(0, p.$get());\n\t\t} else if (_ref === 9) {\n\t\t\treturn new $Uint64(0, p.$get());\n\t\t} else if (_ref === 10) {\n\t\t\treturn new $Uint64(0, p.$get());\n\t\t} else if (_ref === 11) {\n\t\t\treturn p.$get();\n\t\t} else if (_ref === 12) {\n\t\t\treturn (x = p.$get(), new $Uint64(0, x.constructor === Number ? x : 1));\n\t\t}\n\t\t$panic(new ValueError.ptr(\"reflect.Value.Uint\", new flag(v.flag).kind()));\n\t};\n\tValue.prototype.Uint = function() { return this.$val.Uint(); };\n\tValue.ptr.prototype.UnsafeAddr = function() {\n\t\tvar $ptr, v;\n\t\tv = this;\n\t\tif (v.typ === ptrType$1.nil) {\n\t\t\t$panic(new ValueError.ptr(\"reflect.Value.UnsafeAddr\", 0));\n\t\t}\n\t\tif (((v.flag & 128) >>> 0) === 0) {\n\t\t\t$panic(new $String(\"reflect.Value.UnsafeAddr of unaddressable value\"));\n\t\t}\n\t\treturn v.ptr;\n\t};\n\tValue.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };\n\ttypesMustMatch = function(what, t1, t2) {\n\t\tvar $ptr, _r, _r$1, t1, t2, what, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; t1 = $f.t1; t2 = $f.t2; what = $f.what; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t/* */ if (!($interfaceIsEqual(t1, t2))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!($interfaceIsEqual(t1, t2))) { */ case 1:\n\t\t\t_r = t1.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t_r$1 = t2.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t$panic(new $String(what + \": \" + _r + \" != \" + _r$1));\n\t\t/* } */ case 2:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: typesMustMatch }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.t1 = t1; $f.t2 = t2; $f.what = what; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tgrow = function(s, extra) {\n\t\tvar $ptr, _q, _r, _r$1, _r$2, extra, i0, i1, m, s, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; extra = $f.extra; i0 = $f.i0; i1 = $f.i1; m = $f.m; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ts = s;\n\t\ti0 = s.Len();\n\t\ti1 = i0 + extra >> 0;\n\t\tif (i1 < i0) {\n\t\t\t$panic(new $String(\"reflect.Append: slice overflow\"));\n\t\t}\n\t\tm = s.Cap();\n\t\t/* */ if (i1 <= m) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (i1 <= m) { */ case 1:\n\t\t\t_r = s.Slice(0, i1); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\treturn [_r, i0, i1];\n\t\t/* } */ case 2:\n\t\tif (m === 0) {\n\t\t\tm = extra;\n\t\t} else {\n\t\t\twhile (true) {\n\t\t\t\tif (!(m < i1)) { break; }\n\t\t\t\tif (i0 < 1024) {\n\t\t\t\t\tm = m + (m) >> 0;\n\t\t\t\t} else {\n\t\t\t\t\tm = m + ((_q = m / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\"))) >> 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_r$1 = MakeSlice(s.Type(), i1, m); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\tt = _r$1;\n\t\t_r$2 = Copy(t, s); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_r$2;\n\t\treturn [t, i0, i1];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: grow }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.extra = extra; $f.i0 = i0; $f.i1 = i1; $f.m = m; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tAppend = function(s, x) {\n\t\tvar $ptr, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, i, i0, i1, j, s, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; i = $f.i; i0 = $f.i0; i1 = $f.i1; j = $f.j; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ts = s;\n\t\tnew flag(s.flag).mustBe(23);\n\t\t_r = grow(s, x.$length); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; s = _tuple[0]; i0 = _tuple[1]; i1 = _tuple[2];\n\t\t_tmp = i0; _tmp$1 = 0; i = _tmp; j = _tmp$1;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(i < i1)) { break; } */ if(!(i < i1)) { $s = 3; continue; }\n\t\t\t_r$1 = s.Index(i); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t$r = _r$1.Set(((j < 0 || j >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + j])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t_tmp$2 = i + 1 >> 0; _tmp$3 = j + 1 >> 0; i = _tmp$2; j = _tmp$3;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\treturn s;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Append }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.i = i; $f.i0 = i0; $f.i1 = i1; $f.j = j; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Append = Append;\n\tMakeMap = function(typ) {\n\t\tvar $ptr, _r, _r$1, m, typ, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; m = $f.m; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = typ.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t/* */ if (!((_r === 21))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!((_r === 21))) { */ case 1:\n\t\t\t$panic(new $String(\"reflect.MakeMap of non-map type\"));\n\t\t/* } */ case 2:\n\t\tm = makemap($assertType(typ, ptrType$1));\n\t\t_r$1 = typ.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn new Value.ptr(_r$1, m, 21);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MakeMap }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.m = m; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.MakeMap = MakeMap;\n\tIndirect = function(v) {\n\t\tvar $ptr, _r, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\tif (!((v.Kind() === 22))) {\n\t\t\treturn v;\n\t\t}\n\t\t_r = v.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Indirect }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Indirect = Indirect;\n\tNew = function(typ) {\n\t\tvar $ptr, _r, _r$1, fl, ptr, typ, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; fl = $f.fl; ptr = $f.ptr; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tif ($interfaceIsEqual(typ, $ifaceNil)) {\n\t\t\t$panic(new $String(\"reflect: New(nil)\"));\n\t\t}\n\t\tptr = unsafe_New($assertType(typ, ptrType$1));\n\t\tfl = 22;\n\t\t_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_r$1 = _r.ptrTo(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn new Value.ptr(_r$1, ptr, fl);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: New }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.fl = fl; $f.ptr = ptr; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.New = New;\n\tValue.ptr.prototype.assignTo = function(context, dst, target) {\n\t\tvar $ptr, _r, _r$1, context, dst, fl, target, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; context = $f.context; dst = $f.dst; fl = $f.fl; target = $f.target; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\t/* */ if (!((((v.flag & 256) >>> 0) === 0))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!((((v.flag & 256) >>> 0) === 0))) { */ case 1:\n\t\t\t_r = makeMethodValue(context, v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\tv = _r;\n\t\t/* } */ case 2:\n\t\t/* */ if (directlyAssignable(dst, v.typ)) { $s = 4; continue; }\n\t\t/* */ if (implements$1(dst, v.typ)) { $s = 5; continue; }\n\t\t/* */ $s = 6; continue;\n\t\t/* if (directlyAssignable(dst, v.typ)) { */ case 4:\n\t\t\tv.typ = dst;\n\t\t\tfl = (v.flag & 224) >>> 0;\n\t\t\tfl = (fl | ((dst.Kind() >>> 0))) >>> 0;\n\t\t\treturn new Value.ptr(dst, v.ptr, fl);\n\t\t\t$s = 6; continue;\n\t\t/* } else if (implements$1(dst, v.typ)) { */ case 5:\n\t\t\tif (target === 0) {\n\t\t\t\ttarget = unsafe_New(dst);\n\t\t\t}\n\t\t\t_r$1 = valueInterface(v, false); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\tx = _r$1;\n\t\t\tif (dst.NumMethod() === 0) {\n\t\t\t\ttarget.$set(x);\n\t\t\t} else {\n\t\t\t\tifaceE2I(dst, x, target);\n\t\t\t}\n\t\t\treturn new Value.ptr(dst, target, 84);\n\t\t/* } */ case 6:\n\t\t$panic(new $String(context + \": value of type \" + v.typ.String() + \" is not assignable to type \" + dst.String()));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.assignTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.context = context; $f.dst = dst; $f.fl = fl; $f.target = target; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };\n\tValue.ptr.prototype.Convert = function(t) {\n\t\tvar $ptr, _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; op = $f.op; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this;\n\t\t/* */ if (!((((v.flag & 256) >>> 0) === 0))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!((((v.flag & 256) >>> 0) === 0))) { */ case 1:\n\t\t\t_r = makeMethodValue(\"Convert\", v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\tv = _r;\n\t\t/* } */ case 2:\n\t\t_r$1 = t.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_r$2 = convertOp(_r$1, v.typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\top = _r$2;\n\t\t/* */ if (op === $throwNilPointerError) { $s = 6; continue; }\n\t\t/* */ $s = 7; continue;\n\t\t/* if (op === $throwNilPointerError) { */ case 6:\n\t\t\t_r$3 = t.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t$panic(new $String(\"reflect.Value.Convert: value of type \" + v.typ.String() + \" cannot be converted to type \" + _r$3));\n\t\t/* } */ case 7:\n\t\t_r$4 = op(v, t); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\treturn _r$4;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Convert }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.op = op; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tValue.prototype.Convert = function(t) { return this.$val.Convert(t); };\n\tconvertOp = function(dst, src) {\n\t\tvar $ptr, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _v, _v$1, _v$2, dst, src, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; dst = $f.dst; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_ref = src.Kind();\n\t\t/* */ if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { $s = 1; continue; }\n\t\t/* */ if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { $s = 2; continue; }\n\t\t/* */ if (_ref === 13 || _ref === 14) { $s = 3; continue; }\n\t\t/* */ if (_ref === 15 || _ref === 16) { $s = 4; continue; }\n\t\t/* */ if (_ref === 24) { $s = 5; continue; }\n\t\t/* */ if (_ref === 23) { $s = 6; continue; }\n\t\t/* */ $s = 7; continue;\n\t\t/* if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { */ case 1:\n\t\t\t_ref$1 = dst.Kind();\n\t\t\tif (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6 || _ref$1 === 7 || _ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10 || _ref$1 === 11 || _ref$1 === 12) {\n\t\t\t\treturn cvtInt;\n\t\t\t} else if (_ref$1 === 13 || _ref$1 === 14) {\n\t\t\t\treturn cvtIntFloat;\n\t\t\t} else if (_ref$1 === 24) {\n\t\t\t\treturn cvtIntString;\n\t\t\t}\n\t\t\t$s = 7; continue;\n\t\t/* } else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { */ case 2:\n\t\t\t_ref$2 = dst.Kind();\n\t\t\tif (_ref$2 === 2 || _ref$2 === 3 || _ref$2 === 4 || _ref$2 === 5 || _ref$2 === 6 || _ref$2 === 7 || _ref$2 === 8 || _ref$2 === 9 || _ref$2 === 10 || _ref$2 === 11 || _ref$2 === 12) {\n\t\t\t\treturn cvtUint;\n\t\t\t} else if (_ref$2 === 13 || _ref$2 === 14) {\n\t\t\t\treturn cvtUintFloat;\n\t\t\t} else if (_ref$2 === 24) {\n\t\t\t\treturn cvtUintString;\n\t\t\t}\n\t\t\t$s = 7; continue;\n\t\t/* } else if (_ref === 13 || _ref === 14) { */ case 3:\n\t\t\t_ref$3 = dst.Kind();\n\t\t\tif (_ref$3 === 2 || _ref$3 === 3 || _ref$3 === 4 || _ref$3 === 5 || _ref$3 === 6) {\n\t\t\t\treturn cvtFloatInt;\n\t\t\t} else if (_ref$3 === 7 || _ref$3 === 8 || _ref$3 === 9 || _ref$3 === 10 || _ref$3 === 11 || _ref$3 === 12) {\n\t\t\t\treturn cvtFloatUint;\n\t\t\t} else if (_ref$3 === 13 || _ref$3 === 14) {\n\t\t\t\treturn cvtFloat;\n\t\t\t}\n\t\t\t$s = 7; continue;\n\t\t/* } else if (_ref === 15 || _ref === 16) { */ case 4:\n\t\t\t_ref$4 = dst.Kind();\n\t\t\tif (_ref$4 === 15 || _ref$4 === 16) {\n\t\t\t\treturn cvtComplex;\n\t\t\t}\n\t\t\t$s = 7; continue;\n\t\t/* } else if (_ref === 24) { */ case 5:\n\t\t\tif (!(dst.Kind() === 23)) { _v = false; $s = 10; continue s; }\n\t\t\t_r = dst.Elem().PkgPath(); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t_v = _r === \"\"; case 10:\n\t\t\t/* */ if (_v) { $s = 8; continue; }\n\t\t\t/* */ $s = 9; continue;\n\t\t\t/* if (_v) { */ case 8:\n\t\t\t\t_r$1 = dst.Elem().Kind(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t\t_ref$5 = _r$1;\n\t\t\t\t/* */ if (_ref$5 === 8) { $s = 13; continue; }\n\t\t\t\t/* */ if (_ref$5 === 5) { $s = 14; continue; }\n\t\t\t\t/* */ $s = 15; continue;\n\t\t\t\t/* if (_ref$5 === 8) { */ case 13:\n\t\t\t\t\treturn cvtStringBytes;\n\t\t\t\t\t$s = 15; continue;\n\t\t\t\t/* } else if (_ref$5 === 5) { */ case 14:\n\t\t\t\t\treturn cvtStringRunes;\n\t\t\t\t/* } */ case 15:\n\t\t\t/* } */ case 9:\n\t\t\t$s = 7; continue;\n\t\t/* } else if (_ref === 23) { */ case 6:\n\t\t\tif (!(dst.Kind() === 24)) { _v$1 = false; $s = 18; continue s; }\n\t\t\t_r$2 = src.Elem().PkgPath(); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t_v$1 = _r$2 === \"\"; case 18:\n\t\t\t/* */ if (_v$1) { $s = 16; continue; }\n\t\t\t/* */ $s = 17; continue;\n\t\t\t/* if (_v$1) { */ case 16:\n\t\t\t\t_r$3 = src.Elem().Kind(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t\t_ref$6 = _r$3;\n\t\t\t\t/* */ if (_ref$6 === 8) { $s = 21; continue; }\n\t\t\t\t/* */ if (_ref$6 === 5) { $s = 22; continue; }\n\t\t\t\t/* */ $s = 23; continue;\n\t\t\t\t/* if (_ref$6 === 8) { */ case 21:\n\t\t\t\t\treturn cvtBytesString;\n\t\t\t\t\t$s = 23; continue;\n\t\t\t\t/* } else if (_ref$6 === 5) { */ case 22:\n\t\t\t\t\treturn cvtRunesString;\n\t\t\t\t/* } */ case 23:\n\t\t\t/* } */ case 17:\n\t\t/* } */ case 7:\n\t\tif (haveIdenticalUnderlyingType(dst, src)) {\n\t\t\treturn cvtDirect;\n\t\t}\n\t\tif (!((dst.Kind() === 22) && dst.Name() === \"\" && (src.Kind() === 22) && src.Name() === \"\")) { _v$2 = false; $s = 26; continue s; }\n\t\t_r$4 = dst.Elem().common(); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t_arg = _r$4;\n\t\t_r$5 = src.Elem().common(); /* */ $s = 28; case 28: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_arg$1 = _r$5;\n\t\t_r$6 = haveIdenticalUnderlyingType(_arg, _arg$1); /* */ $s = 29; case 29: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_v$2 = _r$6; case 26:\n\t\t/* */ if (_v$2) { $s = 24; continue; }\n\t\t/* */ $s = 25; continue;\n\t\t/* if (_v$2) { */ case 24:\n\t\t\treturn cvtDirect;\n\t\t/* } */ case 25:\n\t\tif (implements$1(dst, src)) {\n\t\t\tif (src.Kind() === 20) {\n\t\t\t\treturn cvtI2I;\n\t\t\t}\n\t\t\treturn cvtT2I;\n\t\t}\n\t\treturn $throwNilPointerError;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: convertOp }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.dst = dst; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tmakeFloat = function(f, v, t) {\n\t\tvar $ptr, _r, _ref, f, ptr, t, typ, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\ttyp = _r;\n\t\tptr = unsafe_New(typ);\n\t\t_ref = typ.size;\n\t\tif (_ref === 4) {\n\t\t\tptr.$set($fround(v));\n\t\t} else if (_ref === 8) {\n\t\t\tptr.$set(v);\n\t\t}\n\t\treturn new Value.ptr(typ, ptr, (((f | 64) >>> 0) | (typ.Kind() >>> 0)) >>> 0);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeFloat }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tmakeComplex = function(f, v, t) {\n\t\tvar $ptr, _r, _ref, f, ptr, t, typ, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\ttyp = _r;\n\t\tptr = unsafe_New(typ);\n\t\t_ref = typ.size;\n\t\tif (_ref === 8) {\n\t\t\tptr.$set(new $Complex64(v.$real, v.$imag));\n\t\t} else if (_ref === 16) {\n\t\t\tptr.$set(v);\n\t\t}\n\t\treturn new Value.ptr(typ, ptr, (((f | 64) >>> 0) | (typ.Kind() >>> 0)) >>> 0);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeComplex }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tmakeString = function(f, v, t) {\n\t\tvar $ptr, _r, _r$1, f, ret, t, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\tret = _r$1;\n\t\tret.SetString(v);\n\t\tret.flag = (((ret.flag & ~128) >>> 0) | f) >>> 0;\n\t\treturn ret;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tmakeBytes = function(f, v, t) {\n\t\tvar $ptr, _r, _r$1, f, ret, t, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\tret = _r$1;\n\t\t$r = ret.SetBytes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tret.flag = (((ret.flag & ~128) >>> 0) | f) >>> 0;\n\t\treturn ret;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tmakeRunes = function(f, v, t) {\n\t\tvar $ptr, _r, _r$1, f, ret, t, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\tret = _r$1;\n\t\t$r = ret.setRunes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tret.flag = (((ret.flag & ~128) >>> 0) | f) >>> 0;\n\t\treturn ret;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: makeRunes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tcvtInt = function(v, t) {\n\t\tvar $ptr, _r, t, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\t_r = makeInt((v.flag & 32) >>> 0, (x = v.Int(), new $Uint64(x.$high, x.$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtInt }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tcvtUint = function(v, t) {\n\t\tvar $ptr, _r, t, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\t_r = makeInt((v.flag & 32) >>> 0, v.Uint(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtUint }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tcvtFloatInt = function(v, t) {\n\t\tvar $ptr, _r, t, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\t_r = makeInt((v.flag & 32) >>> 0, (x = new $Int64(0, v.Float()), new $Uint64(x.$high, x.$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtFloatInt }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tcvtFloatUint = function(v, t) {\n\t\tvar $ptr, _r, t, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\t_r = makeInt((v.flag & 32) >>> 0, new $Uint64(0, v.Float()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtFloatUint }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tcvtIntFloat = function(v, t) {\n\t\tvar $ptr, _r, t, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\t_r = makeFloat((v.flag & 32) >>> 0, $flatten64(v.Int()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtIntFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tcvtUintFloat = function(v, t) {\n\t\tvar $ptr, _r, t, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\t_r = makeFloat((v.flag & 32) >>> 0, $flatten64(v.Uint()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtUintFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tcvtFloat = function(v, t) {\n\t\tvar $ptr, _r, t, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\t_r = makeFloat((v.flag & 32) >>> 0, v.Float(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tcvtComplex = function(v, t) {\n\t\tvar $ptr, _r, t, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\t_r = makeComplex((v.flag & 32) >>> 0, v.Complex(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtComplex }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tcvtIntString = function(v, t) {\n\t\tvar $ptr, _r, t, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\t_r = makeString((v.flag & 32) >>> 0, $encodeRune(v.Int().$low), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtIntString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tcvtUintString = function(v, t) {\n\t\tvar $ptr, _r, t, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\t_r = makeString((v.flag & 32) >>> 0, $encodeRune(v.Uint().$low), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtUintString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tcvtBytesString = function(v, t) {\n\t\tvar $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\t_arg = (v.flag & 32) >>> 0;\n\t\t_r = v.Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_arg$1 = $bytesToString(_r);\n\t\t_arg$2 = t;\n\t\t_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn _r$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtBytesString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tcvtStringBytes = function(v, t) {\n\t\tvar $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\t_arg = (v.flag & 32) >>> 0;\n\t\t_r = v.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_arg$1 = new sliceType$14($stringToBytes(_r));\n\t\t_arg$2 = t;\n\t\t_r$1 = makeBytes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn _r$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtStringBytes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tcvtRunesString = function(v, t) {\n\t\tvar $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\t_arg = (v.flag & 32) >>> 0;\n\t\t_r = v.runes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_arg$1 = $runesToString(_r);\n\t\t_arg$2 = t;\n\t\t_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn _r$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtRunesString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tcvtStringRunes = function(v, t) {\n\t\tvar $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\t_arg = (v.flag & 32) >>> 0;\n\t\t_r = v.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_arg$1 = new sliceType$15($stringToRunes(_r));\n\t\t_arg$2 = t;\n\t\t_r$1 = makeRunes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn _r$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtStringRunes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tcvtT2I = function(v, typ) {\n\t\tvar $ptr, _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; target = $f.target; typ = $f.typ; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\t_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_r$1 = unsafe_New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\ttarget = _r$1;\n\t\t_r$2 = valueInterface(v, false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\tx = _r$2;\n\t\t_r$3 = typ.NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t/* */ if (_r$3 === 0) { $s = 4; continue; }\n\t\t/* */ $s = 5; continue;\n\t\t/* if (_r$3 === 0) { */ case 4:\n\t\t\ttarget.$set(x);\n\t\t\t$s = 6; continue;\n\t\t/* } else { */ case 5:\n\t\t\tifaceE2I($assertType(typ, ptrType$1), x, target);\n\t\t/* } */ case 6:\n\t\t_r$4 = typ.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\treturn new Value.ptr(_r$4, target, (((((v.flag & 32) >>> 0) | 64) >>> 0) | 20) >>> 0);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtT2I }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.target = target; $f.typ = typ; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tcvtI2I = function(v, typ) {\n\t\tvar $ptr, _r, _r$1, _r$2, ret, typ, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ret = $f.ret; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\t/* */ if (v.IsNil()) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (v.IsNil()) { */ case 1:\n\t\t\t_r = Zero(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\tret = _r;\n\t\t\tret.flag = (ret.flag | (((v.flag & 32) >>> 0))) >>> 0;\n\t\t\treturn ret;\n\t\t/* } */ case 2:\n\t\t_r$1 = v.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_r$2 = cvtT2I(_r$1, typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\treturn _r$2;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cvtI2I }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ret = ret; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tKind.methods = [{prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$1.methods = [{prop: \"ptrTo\", name: \"ptrTo\", pkg: \"reflect\", typ: $funcType([], [ptrType$1], false)}, {prop: \"pointers\", name: \"pointers\", pkg: \"reflect\", typ: $funcType([], [$Bool], false)}, {prop: \"Comparable\", name: \"Comparable\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Size\", name: \"Size\", pkg: \"\", typ: $funcType([], [$Uintptr], false)}, {prop: \"Bits\", name: \"Bits\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Align\", name: \"Align\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"FieldAlign\", name: \"FieldAlign\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Kind\", name: \"Kind\", pkg: \"\", typ: $funcType([], [Kind], false)}, {prop: \"common\", name: \"common\", pkg: \"reflect\", typ: $funcType([], [ptrType$1], false)}, {prop: \"NumMethod\", name: \"NumMethod\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Method\", name: \"Method\", pkg: \"\", typ: $funcType([$Int], [Method], false)}, {prop: \"MethodByName\", name: \"MethodByName\", pkg: \"\", typ: $funcType([$String], [Method, $Bool], false)}, {prop: \"PkgPath\", name: \"PkgPath\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ChanDir\", name: \"ChanDir\", pkg: \"\", typ: $funcType([], [ChanDir], false)}, {prop: \"IsVariadic\", name: \"IsVariadic\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Elem\", name: \"Elem\", pkg: \"\", typ: $funcType([], [Type], false)}, {prop: \"Field\", name: \"Field\", pkg: \"\", typ: $funcType([$Int], [StructField], false)}, {prop: \"FieldByIndex\", name: \"FieldByIndex\", pkg: \"\", typ: $funcType([sliceType$11], [StructField], false)}, {prop: \"FieldByName\", name: \"FieldByName\", pkg: \"\", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: \"FieldByNameFunc\", name: \"FieldByNameFunc\", pkg: \"\", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: \"In\", name: \"In\", pkg: \"\", typ: $funcType([$Int], [Type], false)}, {prop: \"Key\", name: \"Key\", pkg: \"\", typ: $funcType([], [Type], false)}, {prop: \"Len\", name: \"Len\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"NumField\", name: \"NumField\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"NumIn\", name: \"NumIn\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"NumOut\", name: \"NumOut\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Out\", name: \"Out\", pkg: \"\", typ: $funcType([$Int], [Type], false)}, {prop: \"Implements\", name: \"Implements\", pkg: \"\", typ: $funcType([Type], [$Bool], false)}, {prop: \"AssignableTo\", name: \"AssignableTo\", pkg: \"\", typ: $funcType([Type], [$Bool], false)}, {prop: \"ConvertibleTo\", name: \"ConvertibleTo\", pkg: \"\", typ: $funcType([Type], [$Bool], false)}];\n\tptrType$6.methods = [{prop: \"Method\", name: \"Method\", pkg: \"\", typ: $funcType([$Int], [Method], false)}, {prop: \"uncommon\", name: \"uncommon\", pkg: \"reflect\", typ: $funcType([], [ptrType$6], false)}, {prop: \"PkgPath\", name: \"PkgPath\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"NumMethod\", name: \"NumMethod\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"MethodByName\", name: \"MethodByName\", pkg: \"\", typ: $funcType([$String], [Method, $Bool], false)}];\n\tChanDir.methods = [{prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$11.methods = [{prop: \"Method\", name: \"Method\", pkg: \"\", typ: $funcType([$Int], [Method], false)}, {prop: \"NumMethod\", name: \"NumMethod\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"MethodByName\", name: \"MethodByName\", pkg: \"\", typ: $funcType([$String], [Method, $Bool], false)}];\n\tptrType$13.methods = [{prop: \"Field\", name: \"Field\", pkg: \"\", typ: $funcType([$Int], [StructField], false)}, {prop: \"FieldByIndex\", name: \"FieldByIndex\", pkg: \"\", typ: $funcType([sliceType$11], [StructField], false)}, {prop: \"FieldByNameFunc\", name: \"FieldByNameFunc\", pkg: \"\", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: \"FieldByName\", name: \"FieldByName\", pkg: \"\", typ: $funcType([$String], [StructField, $Bool], false)}];\n\tStructTag.methods = [{prop: \"Get\", name: \"Get\", pkg: \"\", typ: $funcType([$String], [$String], false)}];\n\tValue.methods = [{prop: \"object\", name: \"object\", pkg: \"reflect\", typ: $funcType([], [ptrType$3], false)}, {prop: \"call\", name: \"call\", pkg: \"reflect\", typ: $funcType([$String, sliceType$7], [sliceType$7], false)}, {prop: \"Cap\", name: \"Cap\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Elem\", name: \"Elem\", pkg: \"\", typ: $funcType([], [Value], false)}, {prop: \"Field\", name: \"Field\", pkg: \"\", typ: $funcType([$Int], [Value], false)}, {prop: \"Index\", name: \"Index\", pkg: \"\", typ: $funcType([$Int], [Value], false)}, {prop: \"IsNil\", name: \"IsNil\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Len\", name: \"Len\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Pointer\", name: \"Pointer\", pkg: \"\", typ: $funcType([], [$Uintptr], false)}, {prop: \"Set\", name: \"Set\", pkg: \"\", typ: $funcType([Value], [], false)}, {prop: \"SetCap\", name: \"SetCap\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"SetLen\", name: \"SetLen\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"Slice\", name: \"Slice\", pkg: \"\", typ: $funcType([$Int, $Int], [Value], false)}, {prop: \"Slice3\", name: \"Slice3\", pkg: \"\", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: \"Close\", name: \"Close\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"pointer\", name: \"pointer\", pkg: \"reflect\", typ: $funcType([], [$UnsafePointer], false)}, {prop: \"Addr\", name: \"Addr\", pkg: \"\", typ: $funcType([], [Value], false)}, {prop: \"Bool\", name: \"Bool\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Bytes\", name: \"Bytes\", pkg: \"\", typ: $funcType([], [sliceType$14], false)}, {prop: \"runes\", name: \"runes\", pkg: \"reflect\", typ: $funcType([], [sliceType$15], false)}, {prop: \"CanAddr\", name: \"CanAddr\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"CanSet\", name: \"CanSet\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Call\", name: \"Call\", pkg: \"\", typ: $funcType([sliceType$7], [sliceType$7], false)}, {prop: \"CallSlice\", name: \"CallSlice\", pkg: \"\", typ: $funcType([sliceType$7], [sliceType$7], false)}, {prop: \"Complex\", name: \"Complex\", pkg: \"\", typ: $funcType([], [$Complex128], false)}, {prop: \"FieldByIndex\", name: \"FieldByIndex\", pkg: \"\", typ: $funcType([sliceType$11], [Value], false)}, {prop: \"FieldByName\", name: \"FieldByName\", pkg: \"\", typ: $funcType([$String], [Value], false)}, {prop: \"FieldByNameFunc\", name: \"FieldByNameFunc\", pkg: \"\", typ: $funcType([funcType$3], [Value], false)}, {prop: \"Float\", name: \"Float\", pkg: \"\", typ: $funcType([], [$Float64], false)}, {prop: \"Int\", name: \"Int\", pkg: \"\", typ: $funcType([], [$Int64], false)}, {prop: \"CanInterface\", name: \"CanInterface\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Interface\", name: \"Interface\", pkg: \"\", typ: $funcType([], [$emptyInterface], false)}, {prop: \"InterfaceData\", name: \"InterfaceData\", pkg: \"\", typ: $funcType([], [arrayType$3], false)}, {prop: \"IsValid\", name: \"IsValid\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Kind\", name: \"Kind\", pkg: \"\", typ: $funcType([], [Kind], false)}, {prop: \"MapIndex\", name: \"MapIndex\", pkg: \"\", typ: $funcType([Value], [Value], false)}, {prop: \"MapKeys\", name: \"MapKeys\", pkg: \"\", typ: $funcType([], [sliceType$7], false)}, {prop: \"Method\", name: \"Method\", pkg: \"\", typ: $funcType([$Int], [Value], false)}, {prop: \"NumMethod\", name: \"NumMethod\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"MethodByName\", name: \"MethodByName\", pkg: \"\", typ: $funcType([$String], [Value], false)}, {prop: \"NumField\", name: \"NumField\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"OverflowComplex\", name: \"OverflowComplex\", pkg: \"\", typ: $funcType([$Complex128], [$Bool], false)}, {prop: \"OverflowFloat\", name: \"OverflowFloat\", pkg: \"\", typ: $funcType([$Float64], [$Bool], false)}, {prop: \"OverflowInt\", name: \"OverflowInt\", pkg: \"\", typ: $funcType([$Int64], [$Bool], false)}, {prop: \"OverflowUint\", name: \"OverflowUint\", pkg: \"\", typ: $funcType([$Uint64], [$Bool], false)}, {prop: \"Recv\", name: \"Recv\", pkg: \"\", typ: $funcType([], [Value, $Bool], false)}, {prop: \"recv\", name: \"recv\", pkg: \"reflect\", typ: $funcType([$Bool], [Value, $Bool], false)}, {prop: \"Send\", name: \"Send\", pkg: \"\", typ: $funcType([Value], [], false)}, {prop: \"send\", name: \"send\", pkg: \"reflect\", typ: $funcType([Value, $Bool], [$Bool], false)}, {prop: \"SetBool\", name: \"SetBool\", pkg: \"\", typ: $funcType([$Bool], [], false)}, {prop: \"SetBytes\", name: \"SetBytes\", pkg: \"\", typ: $funcType([sliceType$14], [], false)}, {prop: \"setRunes\", name: \"setRunes\", pkg: \"reflect\", typ: $funcType([sliceType$15], [], false)}, {prop: \"SetComplex\", name: \"SetComplex\", pkg: \"\", typ: $funcType([$Complex128], [], false)}, {prop: \"SetFloat\", name: \"SetFloat\", pkg: \"\", typ: $funcType([$Float64], [], false)}, {prop: \"SetInt\", name: \"SetInt\", pkg: \"\", typ: $funcType([$Int64], [], false)}, {prop: \"SetMapIndex\", name: \"SetMapIndex\", pkg: \"\", typ: $funcType([Value, Value], [], false)}, {prop: \"SetUint\", name: \"SetUint\", pkg: \"\", typ: $funcType([$Uint64], [], false)}, {prop: \"SetPointer\", name: \"SetPointer\", pkg: \"\", typ: $funcType([$UnsafePointer], [], false)}, {prop: \"SetString\", name: \"SetString\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"TryRecv\", name: \"TryRecv\", pkg: \"\", typ: $funcType([], [Value, $Bool], false)}, {prop: \"TrySend\", name: \"TrySend\", pkg: \"\", typ: $funcType([Value], [$Bool], false)}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: $funcType([], [Type], false)}, {prop: \"Uint\", name: \"Uint\", pkg: \"\", typ: $funcType([], [$Uint64], false)}, {prop: \"UnsafeAddr\", name: \"UnsafeAddr\", pkg: \"\", typ: $funcType([], [$Uintptr], false)}, {prop: \"assignTo\", name: \"assignTo\", pkg: \"reflect\", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: \"Convert\", name: \"Convert\", pkg: \"\", typ: $funcType([Type], [Value], false)}];\n\tflag.methods = [{prop: \"kind\", name: \"kind\", pkg: \"reflect\", typ: $funcType([], [Kind], false)}, {prop: \"mustBe\", name: \"mustBe\", pkg: \"reflect\", typ: $funcType([Kind], [], false)}, {prop: \"mustBeExported\", name: \"mustBeExported\", pkg: \"reflect\", typ: $funcType([], [], false)}, {prop: \"mustBeAssignable\", name: \"mustBeAssignable\", pkg: \"reflect\", typ: $funcType([], [], false)}];\n\tptrType$21.methods = [{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tmapIter.init([{prop: \"t\", name: \"t\", pkg: \"reflect\", typ: Type, tag: \"\"}, {prop: \"m\", name: \"m\", pkg: \"reflect\", typ: ptrType$3, tag: \"\"}, {prop: \"keys\", name: \"keys\", pkg: \"reflect\", typ: ptrType$3, tag: \"\"}, {prop: \"i\", name: \"i\", pkg: \"reflect\", typ: $Int, tag: \"\"}]);\n\tType.init([{prop: \"Align\", name: \"Align\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"AssignableTo\", name: \"AssignableTo\", pkg: \"\", typ: $funcType([Type], [$Bool], false)}, {prop: \"Bits\", name: \"Bits\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"ChanDir\", name: \"ChanDir\", pkg: \"\", typ: $funcType([], [ChanDir], false)}, {prop: \"Comparable\", name: \"Comparable\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"ConvertibleTo\", name: \"ConvertibleTo\", pkg: \"\", typ: $funcType([Type], [$Bool], false)}, {prop: \"Elem\", name: \"Elem\", pkg: \"\", typ: $funcType([], [Type], false)}, {prop: \"Field\", name: \"Field\", pkg: \"\", typ: $funcType([$Int], [StructField], false)}, {prop: \"FieldAlign\", name: \"FieldAlign\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"FieldByIndex\", name: \"FieldByIndex\", pkg: \"\", typ: $funcType([sliceType$11], [StructField], false)}, {prop: \"FieldByName\", name: \"FieldByName\", pkg: \"\", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: \"FieldByNameFunc\", name: \"FieldByNameFunc\", pkg: \"\", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: \"Implements\", name: \"Implements\", pkg: \"\", typ: $funcType([Type], [$Bool], false)}, {prop: \"In\", name: \"In\", pkg: \"\", typ: $funcType([$Int], [Type], false)}, {prop: \"IsVariadic\", name: \"IsVariadic\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Key\", name: \"Key\", pkg: \"\", typ: $funcType([], [Type], false)}, {prop: \"Kind\", name: \"Kind\", pkg: \"\", typ: $funcType([], [Kind], false)}, {prop: \"Len\", name: \"Len\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Method\", name: \"Method\", pkg: \"\", typ: $funcType([$Int], [Method], false)}, {prop: \"MethodByName\", name: \"MethodByName\", pkg: \"\", typ: $funcType([$String], [Method, $Bool], false)}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"NumField\", name: \"NumField\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"NumIn\", name: \"NumIn\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"NumMethod\", name: \"NumMethod\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"NumOut\", name: \"NumOut\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Out\", name: \"Out\", pkg: \"\", typ: $funcType([$Int], [Type], false)}, {prop: \"PkgPath\", name: \"PkgPath\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Size\", name: \"Size\", pkg: \"\", typ: $funcType([], [$Uintptr], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"common\", name: \"common\", pkg: \"reflect\", typ: $funcType([], [ptrType$1], false)}, {prop: \"uncommon\", name: \"uncommon\", pkg: \"reflect\", typ: $funcType([], [ptrType$6], false)}]);\n\trtype.init([{prop: \"size\", name: \"size\", pkg: \"reflect\", typ: $Uintptr, tag: \"\"}, {prop: \"hash\", name: \"hash\", pkg: \"reflect\", typ: $Uint32, tag: \"\"}, {prop: \"_$2\", name: \"_\", pkg: \"reflect\", typ: $Uint8, tag: \"\"}, {prop: \"align\", name: \"align\", pkg: \"reflect\", typ: $Uint8, tag: \"\"}, {prop: \"fieldAlign\", name: \"fieldAlign\", pkg: \"reflect\", typ: $Uint8, tag: \"\"}, {prop: \"kind\", name: \"kind\", pkg: \"reflect\", typ: $Uint8, tag: \"\"}, {prop: \"alg\", name: \"alg\", pkg: \"reflect\", typ: ptrType$4, tag: \"\"}, {prop: \"gc\", name: \"gc\", pkg: \"reflect\", typ: arrayType$1, tag: \"\"}, {prop: \"string\", name: \"string\", pkg: \"reflect\", typ: ptrType$5, tag: \"\"}, {prop: \"uncommonType\", name: \"\", pkg: \"reflect\", typ: ptrType$6, tag: \"\"}, {prop: \"ptrToThis\", name: \"ptrToThis\", pkg: \"reflect\", typ: ptrType$1, tag: \"\"}, {prop: \"zero\", name: \"zero\", pkg: \"reflect\", typ: $UnsafePointer, tag: \"\"}]);\n\ttypeAlg.init([{prop: \"hash\", name: \"hash\", pkg: \"reflect\", typ: funcType$4, tag: \"\"}, {prop: \"equal\", name: \"equal\", pkg: \"reflect\", typ: funcType$5, tag: \"\"}]);\n\tmethod.init([{prop: \"name\", name: \"name\", pkg: \"reflect\", typ: ptrType$5, tag: \"\"}, {prop: \"pkgPath\", name: \"pkgPath\", pkg: \"reflect\", typ: ptrType$5, tag: \"\"}, {prop: \"mtyp\", name: \"mtyp\", pkg: \"reflect\", typ: ptrType$1, tag: \"\"}, {prop: \"typ\", name: \"typ\", pkg: \"reflect\", typ: ptrType$1, tag: \"\"}, {prop: \"ifn\", name: \"ifn\", pkg: \"reflect\", typ: $UnsafePointer, tag: \"\"}, {prop: \"tfn\", name: \"tfn\", pkg: \"reflect\", typ: $UnsafePointer, tag: \"\"}]);\n\tuncommonType.init([{prop: \"name\", name: \"name\", pkg: \"reflect\", typ: ptrType$5, tag: \"\"}, {prop: \"pkgPath\", name: \"pkgPath\", pkg: \"reflect\", typ: ptrType$5, tag: \"\"}, {prop: \"methods\", name: \"methods\", pkg: \"reflect\", typ: sliceType$3, tag: \"\"}]);\n\tarrayType.init([{prop: \"rtype\", name: \"\", pkg: \"reflect\", typ: rtype, tag: \"reflect:\\\"array\\\"\"}, {prop: \"elem\", name: \"elem\", pkg: \"reflect\", typ: ptrType$1, tag: \"\"}, {prop: \"slice\", name: \"slice\", pkg: \"reflect\", typ: ptrType$1, tag: \"\"}, {prop: \"len\", name: \"len\", pkg: \"reflect\", typ: $Uintptr, tag: \"\"}]);\n\tchanType.init([{prop: \"rtype\", name: \"\", pkg: \"reflect\", typ: rtype, tag: \"reflect:\\\"chan\\\"\"}, {prop: \"elem\", name: \"elem\", pkg: \"reflect\", typ: ptrType$1, tag: \"\"}, {prop: \"dir\", name: \"dir\", pkg: \"reflect\", typ: $Uintptr, tag: \"\"}]);\n\tfuncType.init([{prop: \"rtype\", name: \"\", pkg: \"reflect\", typ: rtype, tag: \"reflect:\\\"func\\\"\"}, {prop: \"dotdotdot\", name: \"dotdotdot\", pkg: \"reflect\", typ: $Bool, tag: \"\"}, {prop: \"in$2\", name: \"in\", pkg: \"reflect\", typ: sliceType$4, tag: \"\"}, {prop: \"out\", name: \"out\", pkg: \"reflect\", typ: sliceType$4, tag: \"\"}]);\n\timethod.init([{prop: \"name\", name: \"name\", pkg: \"reflect\", typ: ptrType$5, tag: \"\"}, {prop: \"pkgPath\", name: \"pkgPath\", pkg: \"reflect\", typ: ptrType$5, tag: \"\"}, {prop: \"typ\", name: \"typ\", pkg: \"reflect\", typ: ptrType$1, tag: \"\"}]);\n\tinterfaceType.init([{prop: \"rtype\", name: \"\", pkg: \"reflect\", typ: rtype, tag: \"reflect:\\\"interface\\\"\"}, {prop: \"methods\", name: \"methods\", pkg: \"reflect\", typ: sliceType$5, tag: \"\"}]);\n\tmapType.init([{prop: \"rtype\", name: \"\", pkg: \"reflect\", typ: rtype, tag: \"reflect:\\\"map\\\"\"}, {prop: \"key\", name: \"key\", pkg: \"reflect\", typ: ptrType$1, tag: \"\"}, {prop: \"elem\", name: \"elem\", pkg: \"reflect\", typ: ptrType$1, tag: \"\"}, {prop: \"bucket\", name: \"bucket\", pkg: \"reflect\", typ: ptrType$1, tag: \"\"}, {prop: \"hmap\", name: \"hmap\", pkg: \"reflect\", typ: ptrType$1, tag: \"\"}, {prop: \"keysize\", name: \"keysize\", pkg: \"reflect\", typ: $Uint8, tag: \"\"}, {prop: \"indirectkey\", name: \"indirectkey\", pkg: \"reflect\", typ: $Uint8, tag: \"\"}, {prop: \"valuesize\", name: \"valuesize\", pkg: \"reflect\", typ: $Uint8, tag: \"\"}, {prop: \"indirectvalue\", name: \"indirectvalue\", pkg: \"reflect\", typ: $Uint8, tag: \"\"}, {prop: \"bucketsize\", name: \"bucketsize\", pkg: \"reflect\", typ: $Uint16, tag: \"\"}]);\n\tptrType.init([{prop: \"rtype\", name: \"\", pkg: \"reflect\", typ: rtype, tag: \"reflect:\\\"ptr\\\"\"}, {prop: \"elem\", name: \"elem\", pkg: \"reflect\", typ: ptrType$1, tag: \"\"}]);\n\tsliceType.init([{prop: \"rtype\", name: \"\", pkg: \"reflect\", typ: rtype, tag: \"reflect:\\\"slice\\\"\"}, {prop: \"elem\", name: \"elem\", pkg: \"reflect\", typ: ptrType$1, tag: \"\"}]);\n\tstructField.init([{prop: \"name\", name: \"name\", pkg: \"reflect\", typ: ptrType$5, tag: \"\"}, {prop: \"pkgPath\", name: \"pkgPath\", pkg: \"reflect\", typ: ptrType$5, tag: \"\"}, {prop: \"typ\", name: \"typ\", pkg: \"reflect\", typ: ptrType$1, tag: \"\"}, {prop: \"tag\", name: \"tag\", pkg: \"reflect\", typ: ptrType$5, tag: \"\"}, {prop: \"offset\", name: \"offset\", pkg: \"reflect\", typ: $Uintptr, tag: \"\"}]);\n\tstructType.init([{prop: \"rtype\", name: \"\", pkg: \"reflect\", typ: rtype, tag: \"reflect:\\\"struct\\\"\"}, {prop: \"fields\", name: \"fields\", pkg: \"reflect\", typ: sliceType$6, tag: \"\"}]);\n\tMethod.init([{prop: \"Name\", name: \"Name\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"PkgPath\", name: \"PkgPath\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: Type, tag: \"\"}, {prop: \"Func\", name: \"Func\", pkg: \"\", typ: Value, tag: \"\"}, {prop: \"Index\", name: \"Index\", pkg: \"\", typ: $Int, tag: \"\"}]);\n\tStructField.init([{prop: \"Name\", name: \"Name\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"PkgPath\", name: \"PkgPath\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: Type, tag: \"\"}, {prop: \"Tag\", name: \"Tag\", pkg: \"\", typ: StructTag, tag: \"\"}, {prop: \"Offset\", name: \"Offset\", pkg: \"\", typ: $Uintptr, tag: \"\"}, {prop: \"Index\", name: \"Index\", pkg: \"\", typ: sliceType$11, tag: \"\"}, {prop: \"Anonymous\", name: \"Anonymous\", pkg: \"\", typ: $Bool, tag: \"\"}]);\n\tfieldScan.init([{prop: \"typ\", name: \"typ\", pkg: \"reflect\", typ: ptrType$13, tag: \"\"}, {prop: \"index\", name: \"index\", pkg: \"reflect\", typ: sliceType$11, tag: \"\"}]);\n\tValue.init([{prop: \"typ\", name: \"typ\", pkg: \"reflect\", typ: ptrType$1, tag: \"\"}, {prop: \"ptr\", name: \"ptr\", pkg: \"reflect\", typ: $UnsafePointer, tag: \"\"}, {prop: \"flag\", name: \"\", pkg: \"reflect\", typ: flag, tag: \"\"}]);\n\tValueError.init([{prop: \"Method\", name: \"Method\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Kind\", name: \"Kind\", pkg: \"\", typ: Kind, tag: \"\"}]);\n\tnonEmptyInterface.init([{prop: \"itab\", name: \"itab\", pkg: \"reflect\", typ: ptrType$8, tag: \"\"}, {prop: \"word\", name: \"word\", pkg: \"reflect\", typ: $UnsafePointer, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = strconv.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tinitialized = false;\n\t\tstringPtrMap = new $Map();\n\t\tcallHelper = $assertType($internalize($call, $emptyInterface), funcType$1);\n\t\tselectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);\n\t\tkindNames = new sliceType$2([\"invalid\", \"bool\", \"int\", \"int8\", \"int16\", \"int32\", \"int64\", \"uint\", \"uint8\", \"uint16\", \"uint32\", \"uint64\", \"uintptr\", \"float32\", \"float64\", \"complex64\", \"complex128\", \"array\", \"chan\", \"func\", \"interface\", \"map\", \"ptr\", \"slice\", \"string\", \"struct\", \"unsafe.Pointer\"]);\n\t\tjsObjectPtr = reflectType($jsObjectPtr);\n\t\tuint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);\n\t\t$r = init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"fmt\"] = (function() {\n\tvar $pkg = {}, $init, errors, io, math, os, reflect, strconv, sync, utf8, fmtFlags, fmt, State, Formatter, Stringer, GoStringer, buffer, pp, runeUnreader, scanError, ss, ssave, sliceType, sliceType$1, arrayType, sliceType$2, ptrType, ptrType$1, ptrType$2, ptrType$5, arrayType$1, arrayType$2, ptrType$25, funcType, padZeroBytes, padSpaceBytes, trueBytes, falseBytes, commaSpaceBytes, nilAngleBytes, nilParenBytes, nilBytes, mapBytes, percentBangBytes, missingBytes, badIndexBytes, panicBytes, extraBytes, irparenBytes, bytesBytes, badWidthBytes, badPrecBytes, noVerbBytes, ppFree, intBits, uintptrBits, byteType, space, ssFree, complexError, boolError, _r, _r$1, init, doPrec, newPrinter, Fprintf, Printf, Sprintf, Errorf, Fprint, Print, Sprint, Fprintln, Println, Sprintln, getField, parsenum, intFromArg, parseArgNumber, isSpace, notSpace, indexRune;\n\terrors = $packages[\"errors\"];\n\tio = $packages[\"io\"];\n\tmath = $packages[\"math\"];\n\tos = $packages[\"os\"];\n\treflect = $packages[\"reflect\"];\n\tstrconv = $packages[\"strconv\"];\n\tsync = $packages[\"sync\"];\n\tutf8 = $packages[\"unicode/utf8\"];\n\tfmtFlags = $pkg.fmtFlags = $newType(0, $kindStruct, \"fmt.fmtFlags\", \"fmtFlags\", \"fmt\", function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, unicode_, uniQuote_, zero_, plusV_, sharpV_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.widPresent = false;\n\t\t\tthis.precPresent = false;\n\t\t\tthis.minus = false;\n\t\t\tthis.plus = false;\n\t\t\tthis.sharp = false;\n\t\t\tthis.space = false;\n\t\t\tthis.unicode = false;\n\t\t\tthis.uniQuote = false;\n\t\t\tthis.zero = false;\n\t\t\tthis.plusV = false;\n\t\t\tthis.sharpV = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.widPresent = widPresent_;\n\t\tthis.precPresent = precPresent_;\n\t\tthis.minus = minus_;\n\t\tthis.plus = plus_;\n\t\tthis.sharp = sharp_;\n\t\tthis.space = space_;\n\t\tthis.unicode = unicode_;\n\t\tthis.uniQuote = uniQuote_;\n\t\tthis.zero = zero_;\n\t\tthis.plusV = plusV_;\n\t\tthis.sharpV = sharpV_;\n\t});\n\tfmt = $pkg.fmt = $newType(0, $kindStruct, \"fmt.fmt\", \"fmt\", \"fmt\", function(intbuf_, buf_, wid_, prec_, fmtFlags_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.intbuf = arrayType$2.zero();\n\t\t\tthis.buf = ptrType$1.nil;\n\t\t\tthis.wid = 0;\n\t\t\tthis.prec = 0;\n\t\t\tthis.fmtFlags = new fmtFlags.ptr();\n\t\t\treturn;\n\t\t}\n\t\tthis.intbuf = intbuf_;\n\t\tthis.buf = buf_;\n\t\tthis.wid = wid_;\n\t\tthis.prec = prec_;\n\t\tthis.fmtFlags = fmtFlags_;\n\t});\n\tState = $pkg.State = $newType(8, $kindInterface, \"fmt.State\", \"State\", \"fmt\", null);\n\tFormatter = $pkg.Formatter = $newType(8, $kindInterface, \"fmt.Formatter\", \"Formatter\", \"fmt\", null);\n\tStringer = $pkg.Stringer = $newType(8, $kindInterface, \"fmt.Stringer\", \"Stringer\", \"fmt\", null);\n\tGoStringer = $pkg.GoStringer = $newType(8, $kindInterface, \"fmt.GoStringer\", \"GoStringer\", \"fmt\", null);\n\tbuffer = $pkg.buffer = $newType(12, $kindSlice, \"fmt.buffer\", \"buffer\", \"fmt\", null);\n\tpp = $pkg.pp = $newType(0, $kindStruct, \"fmt.pp\", \"pp\", \"fmt\", function(n_, panicking_, erroring_, buf_, arg_, value_, reordered_, goodArgNum_, runeBuf_, fmt_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.n = 0;\n\t\t\tthis.panicking = false;\n\t\t\tthis.erroring = false;\n\t\t\tthis.buf = buffer.nil;\n\t\t\tthis.arg = $ifaceNil;\n\t\t\tthis.value = new reflect.Value.ptr();\n\t\t\tthis.reordered = false;\n\t\t\tthis.goodArgNum = false;\n\t\t\tthis.runeBuf = arrayType$1.zero();\n\t\t\tthis.fmt = new fmt.ptr();\n\t\t\treturn;\n\t\t}\n\t\tthis.n = n_;\n\t\tthis.panicking = panicking_;\n\t\tthis.erroring = erroring_;\n\t\tthis.buf = buf_;\n\t\tthis.arg = arg_;\n\t\tthis.value = value_;\n\t\tthis.reordered = reordered_;\n\t\tthis.goodArgNum = goodArgNum_;\n\t\tthis.runeBuf = runeBuf_;\n\t\tthis.fmt = fmt_;\n\t});\n\truneUnreader = $pkg.runeUnreader = $newType(8, $kindInterface, \"fmt.runeUnreader\", \"runeUnreader\", \"fmt\", null);\n\tscanError = $pkg.scanError = $newType(0, $kindStruct, \"fmt.scanError\", \"scanError\", \"fmt\", function(err_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.err = $ifaceNil;\n\t\t\treturn;\n\t\t}\n\t\tthis.err = err_;\n\t});\n\tss = $pkg.ss = $newType(0, $kindStruct, \"fmt.ss\", \"ss\", \"fmt\", function(rr_, buf_, peekRune_, prevRune_, count_, atEOF_, ssave_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.rr = $ifaceNil;\n\t\t\tthis.buf = buffer.nil;\n\t\t\tthis.peekRune = 0;\n\t\t\tthis.prevRune = 0;\n\t\t\tthis.count = 0;\n\t\t\tthis.atEOF = false;\n\t\t\tthis.ssave = new ssave.ptr();\n\t\t\treturn;\n\t\t}\n\t\tthis.rr = rr_;\n\t\tthis.buf = buf_;\n\t\tthis.peekRune = peekRune_;\n\t\tthis.prevRune = prevRune_;\n\t\tthis.count = count_;\n\t\tthis.atEOF = atEOF_;\n\t\tthis.ssave = ssave_;\n\t});\n\tssave = $pkg.ssave = $newType(0, $kindStruct, \"fmt.ssave\", \"ssave\", \"fmt\", function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.validSave = false;\n\t\t\tthis.nlIsEnd = false;\n\t\t\tthis.nlIsSpace = false;\n\t\t\tthis.argLimit = 0;\n\t\t\tthis.limit = 0;\n\t\t\tthis.maxWid = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.validSave = validSave_;\n\t\tthis.nlIsEnd = nlIsEnd_;\n\t\tthis.nlIsSpace = nlIsSpace_;\n\t\tthis.argLimit = argLimit_;\n\t\tthis.limit = limit_;\n\t\tthis.maxWid = maxWid_;\n\t});\n\tsliceType = $sliceType($Uint8);\n\tsliceType$1 = $sliceType($emptyInterface);\n\tarrayType = $arrayType($Uint16, 2);\n\tsliceType$2 = $sliceType(arrayType);\n\tptrType = $ptrType(pp);\n\tptrType$1 = $ptrType(buffer);\n\tptrType$2 = $ptrType(reflect.rtype);\n\tptrType$5 = $ptrType(ss);\n\tarrayType$1 = $arrayType($Uint8, 4);\n\tarrayType$2 = $arrayType($Uint8, 65);\n\tptrType$25 = $ptrType(fmt);\n\tfuncType = $funcType([$Int32], [$Bool], false);\n\tinit = function() {\n\t\tvar $ptr, i;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < 65)) { break; }\n\t\t\t((i < 0 || i >= padZeroBytes.$length) ? $throwRuntimeError(\"index out of range\") : padZeroBytes.$array[padZeroBytes.$offset + i] = 48);\n\t\t\t((i < 0 || i >= padSpaceBytes.$length) ? $throwRuntimeError(\"index out of range\") : padSpaceBytes.$array[padSpaceBytes.$offset + i] = 32);\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t};\n\tfmt.ptr.prototype.clearflags = function() {\n\t\tvar $ptr, f;\n\t\tf = this;\n\t\t$copy(f.fmtFlags, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false, false, false), fmtFlags);\n\t};\n\tfmt.prototype.clearflags = function() { return this.$val.clearflags(); };\n\tfmt.ptr.prototype.init = function(buf) {\n\t\tvar $ptr, buf, f;\n\t\tf = this;\n\t\tf.buf = buf;\n\t\tf.clearflags();\n\t};\n\tfmt.prototype.init = function(buf) { return this.$val.init(buf); };\n\tfmt.ptr.prototype.computePadding = function(width) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, f, left, leftWidth, padding, rightWidth, w, width;\n\t\tpadding = sliceType.nil;\n\t\tleftWidth = 0;\n\t\trightWidth = 0;\n\t\tf = this;\n\t\tleft = !f.fmtFlags.minus;\n\t\tw = f.wid;\n\t\tif (w < 0) {\n\t\t\tleft = false;\n\t\t\tw = -w;\n\t\t}\n\t\tw = w - (width) >> 0;\n\t\tif (w > 0) {\n\t\t\tif (left && f.fmtFlags.zero) {\n\t\t\t\t_tmp = padZeroBytes; _tmp$1 = w; _tmp$2 = 0; padding = _tmp; leftWidth = _tmp$1; rightWidth = _tmp$2;\n\t\t\t\treturn [padding, leftWidth, rightWidth];\n\t\t\t}\n\t\t\tif (left) {\n\t\t\t\t_tmp$3 = padSpaceBytes; _tmp$4 = w; _tmp$5 = 0; padding = _tmp$3; leftWidth = _tmp$4; rightWidth = _tmp$5;\n\t\t\t\treturn [padding, leftWidth, rightWidth];\n\t\t\t} else {\n\t\t\t\t_tmp$6 = padSpaceBytes; _tmp$7 = 0; _tmp$8 = w; padding = _tmp$6; leftWidth = _tmp$7; rightWidth = _tmp$8;\n\t\t\t\treturn [padding, leftWidth, rightWidth];\n\t\t\t}\n\t\t}\n\t\treturn [padding, leftWidth, rightWidth];\n\t};\n\tfmt.prototype.computePadding = function(width) { return this.$val.computePadding(width); };\n\tfmt.ptr.prototype.writePadding = function(n, padding) {\n\t\tvar $ptr, f, m, n, padding;\n\t\tf = this;\n\t\twhile (true) {\n\t\t\tif (!(n > 0)) { break; }\n\t\t\tm = n;\n\t\t\tif (m > 65) {\n\t\t\t\tm = 65;\n\t\t\t}\n\t\t\tf.buf.Write($subslice(padding, 0, m));\n\t\t\tn = n - (m) >> 0;\n\t\t}\n\t};\n\tfmt.prototype.writePadding = function(n, padding) { return this.$val.writePadding(n, padding); };\n\tfmt.ptr.prototype.pad = function(b) {\n\t\tvar $ptr, _tuple, b, f, left, padding, right;\n\t\tf = this;\n\t\tif (!f.fmtFlags.widPresent || (f.wid === 0)) {\n\t\t\tf.buf.Write(b);\n\t\t\treturn;\n\t\t}\n\t\t_tuple = f.computePadding(utf8.RuneCount(b)); padding = _tuple[0]; left = _tuple[1]; right = _tuple[2];\n\t\tif (left > 0) {\n\t\t\tf.writePadding(left, padding);\n\t\t}\n\t\tf.buf.Write(b);\n\t\tif (right > 0) {\n\t\t\tf.writePadding(right, padding);\n\t\t}\n\t};\n\tfmt.prototype.pad = function(b) { return this.$val.pad(b); };\n\tfmt.ptr.prototype.padString = function(s) {\n\t\tvar $ptr, _tuple, f, left, padding, right, s;\n\t\tf = this;\n\t\tif (!f.fmtFlags.widPresent || (f.wid === 0)) {\n\t\t\tf.buf.WriteString(s);\n\t\t\treturn;\n\t\t}\n\t\t_tuple = f.computePadding(utf8.RuneCountInString(s)); padding = _tuple[0]; left = _tuple[1]; right = _tuple[2];\n\t\tif (left > 0) {\n\t\t\tf.writePadding(left, padding);\n\t\t}\n\t\tf.buf.WriteString(s);\n\t\tif (right > 0) {\n\t\t\tf.writePadding(right, padding);\n\t\t}\n\t};\n\tfmt.prototype.padString = function(s) { return this.$val.padString(s); };\n\tfmt.ptr.prototype.fmt_boolean = function(v) {\n\t\tvar $ptr, f, v;\n\t\tf = this;\n\t\tif (v) {\n\t\t\tf.pad(trueBytes);\n\t\t} else {\n\t\t\tf.pad(falseBytes);\n\t\t}\n\t};\n\tfmt.prototype.fmt_boolean = function(v) { return this.$val.fmt_boolean(v); };\n\tfmt.ptr.prototype.integer = function(a, base, signedness, digits) {\n\t\tvar $ptr, _ref, _ref$1, a, base, buf, digits, f, i, j, negative, next, prec, runeWidth, signedness, ua, width, width$1, x, x$1, x$2, x$3;\n\t\tf = this;\n\t\tif (f.fmtFlags.precPresent && (f.prec === 0) && (a.$high === 0 && a.$low === 0)) {\n\t\t\treturn;\n\t\t}\n\t\tbuf = $subslice(new sliceType(f.intbuf), 0);\n\t\tif (f.fmtFlags.widPresent) {\n\t\t\twidth = f.wid;\n\t\t\tif ((base.$high === 0 && base.$low === 16) && f.fmtFlags.sharp) {\n\t\t\t\twidth = width + (2) >> 0;\n\t\t\t}\n\t\t\tif (width > 65) {\n\t\t\t\tbuf = $makeSlice(sliceType, width);\n\t\t\t}\n\t\t}\n\t\tnegative = signedness === true && (a.$high < 0 || (a.$high === 0 && a.$low < 0));\n\t\tif (negative) {\n\t\t\ta = new $Int64(-a.$high, -a.$low);\n\t\t}\n\t\tprec = 0;\n\t\tif (f.fmtFlags.precPresent) {\n\t\t\tprec = f.prec;\n\t\t\tf.fmtFlags.zero = false;\n\t\t} else if (f.fmtFlags.zero && f.fmtFlags.widPresent && !f.fmtFlags.minus && f.wid > 0) {\n\t\t\tprec = f.wid;\n\t\t\tif (negative || f.fmtFlags.plus || f.fmtFlags.space) {\n\t\t\t\tprec = prec - (1) >> 0;\n\t\t\t}\n\t\t}\n\t\ti = buf.$length;\n\t\tua = new $Uint64(a.$high, a.$low);\n\t\t_ref = base;\n\t\tif ((_ref.$high === 0 && _ref.$low === 10)) {\n\t\t\twhile (true) {\n\t\t\t\tif (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 10)))) { break; }\n\t\t\t\ti = i - (1) >> 0;\n\t\t\t\tnext = $div64(ua, new $Uint64(0, 10), false);\n\t\t\t\t((i < 0 || i >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + i] = ((x = new $Uint64(0 + ua.$high, 48 + ua.$low), x$1 = $mul64(next, new $Uint64(0, 10)), new $Uint64(x.$high - x$1.$high, x.$low - x$1.$low)).$low << 24 >>> 24));\n\t\t\t\tua = next;\n\t\t\t}\n\t\t} else if ((_ref.$high === 0 && _ref.$low === 16)) {\n\t\t\twhile (true) {\n\t\t\t\tif (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 16)))) { break; }\n\t\t\t\ti = i - (1) >> 0;\n\t\t\t\t((i < 0 || i >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(new $Uint64(ua.$high & 0, (ua.$low & 15) >>> 0))));\n\t\t\t\tua = $shiftRightUint64(ua, (4));\n\t\t\t}\n\t\t} else if ((_ref.$high === 0 && _ref.$low === 8)) {\n\t\t\twhile (true) {\n\t\t\t\tif (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 8)))) { break; }\n\t\t\t\ti = i - (1) >> 0;\n\t\t\t\t((i < 0 || i >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + i] = ((x$2 = new $Uint64(ua.$high & 0, (ua.$low & 7) >>> 0), new $Uint64(0 + x$2.$high, 48 + x$2.$low)).$low << 24 >>> 24));\n\t\t\t\tua = $shiftRightUint64(ua, (3));\n\t\t\t}\n\t\t} else if ((_ref.$high === 0 && _ref.$low === 2)) {\n\t\t\twhile (true) {\n\t\t\t\tif (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 2)))) { break; }\n\t\t\t\ti = i - (1) >> 0;\n\t\t\t\t((i < 0 || i >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + i] = ((x$3 = new $Uint64(ua.$high & 0, (ua.$low & 1) >>> 0), new $Uint64(0 + x$3.$high, 48 + x$3.$low)).$low << 24 >>> 24));\n\t\t\t\tua = $shiftRightUint64(ua, (1));\n\t\t\t}\n\t\t} else {\n\t\t\t$panic(new $String(\"fmt: unknown base; can't happen\"));\n\t\t}\n\t\ti = i - (1) >> 0;\n\t\t((i < 0 || i >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(ua)));\n\t\twhile (true) {\n\t\t\tif (!(i > 0 && prec > (buf.$length - i >> 0))) { break; }\n\t\t\ti = i - (1) >> 0;\n\t\t\t((i < 0 || i >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + i] = 48);\n\t\t}\n\t\tif (f.fmtFlags.sharp) {\n\t\t\t_ref$1 = base;\n\t\t\tif ((_ref$1.$high === 0 && _ref$1.$low === 8)) {\n\t\t\t\tif (!((((i < 0 || i >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + i]) === 48))) {\n\t\t\t\t\ti = i - (1) >> 0;\n\t\t\t\t\t((i < 0 || i >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + i] = 48);\n\t\t\t\t}\n\t\t\t} else if ((_ref$1.$high === 0 && _ref$1.$low === 16)) {\n\t\t\t\ti = i - (1) >> 0;\n\t\t\t\t((i < 0 || i >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + i] = (120 + digits.charCodeAt(10) << 24 >>> 24) - 97 << 24 >>> 24);\n\t\t\t\ti = i - (1) >> 0;\n\t\t\t\t((i < 0 || i >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + i] = 48);\n\t\t\t}\n\t\t}\n\t\tif (f.fmtFlags.unicode) {\n\t\t\ti = i - (1) >> 0;\n\t\t\t((i < 0 || i >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + i] = 43);\n\t\t\ti = i - (1) >> 0;\n\t\t\t((i < 0 || i >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + i] = 85);\n\t\t}\n\t\tif (negative) {\n\t\t\ti = i - (1) >> 0;\n\t\t\t((i < 0 || i >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + i] = 45);\n\t\t} else if (f.fmtFlags.plus) {\n\t\t\ti = i - (1) >> 0;\n\t\t\t((i < 0 || i >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + i] = 43);\n\t\t} else if (f.fmtFlags.space) {\n\t\t\ti = i - (1) >> 0;\n\t\t\t((i < 0 || i >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + i] = 32);\n\t\t}\n\t\tif (f.fmtFlags.unicode && f.fmtFlags.uniQuote && (a.$high > 0 || (a.$high === 0 && a.$low >= 0)) && (a.$high < 0 || (a.$high === 0 && a.$low <= 1114111)) && strconv.IsPrint(((a.$low + ((a.$high >> 31) * 4294967296)) >> 0))) {\n\t\t\truneWidth = utf8.RuneLen(((a.$low + ((a.$high >> 31) * 4294967296)) >> 0));\n\t\t\twidth$1 = (2 + runeWidth >> 0) + 1 >> 0;\n\t\t\t$copySlice($subslice(buf, (i - width$1 >> 0)), $subslice(buf, i));\n\t\t\ti = i - (width$1) >> 0;\n\t\t\tj = buf.$length - width$1 >> 0;\n\t\t\t((j < 0 || j >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + j] = 32);\n\t\t\tj = j + (1) >> 0;\n\t\t\t((j < 0 || j >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + j] = 39);\n\t\t\tj = j + (1) >> 0;\n\t\t\tutf8.EncodeRune($subslice(buf, j), ((a.$low + ((a.$high >> 31) * 4294967296)) >> 0));\n\t\t\tj = j + (runeWidth) >> 0;\n\t\t\t((j < 0 || j >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + j] = 39);\n\t\t}\n\t\tf.pad($subslice(buf, i));\n\t};\n\tfmt.prototype.integer = function(a, base, signedness, digits) { return this.$val.integer(a, base, signedness, digits); };\n\tfmt.ptr.prototype.truncate = function(s) {\n\t\tvar $ptr, _i, _ref, _rune, f, i, n, s;\n\t\tf = this;\n\t\tif (f.fmtFlags.precPresent && f.prec < utf8.RuneCountInString(s)) {\n\t\t\tn = f.prec;\n\t\t\t_ref = s;\n\t\t\t_i = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(_i < _ref.length)) { break; }\n\t\t\t\t_rune = $decodeRune(_ref, _i);\n\t\t\t\ti = _i;\n\t\t\t\tif (n === 0) {\n\t\t\t\t\ts = s.substring(0, i);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tn = n - (1) >> 0;\n\t\t\t\t_i += _rune[1];\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t};\n\tfmt.prototype.truncate = function(s) { return this.$val.truncate(s); };\n\tfmt.ptr.prototype.fmt_s = function(s) {\n\t\tvar $ptr, f, s;\n\t\tf = this;\n\t\ts = f.truncate(s);\n\t\tf.padString(s);\n\t};\n\tfmt.prototype.fmt_s = function(s) { return this.$val.fmt_s(s); };\n\tfmt.ptr.prototype.fmt_sbx = function(s, b, digits) {\n\t\tvar $ptr, b, buf, c, digits, f, i, n, s, x;\n\t\tf = this;\n\t\tn = b.$length;\n\t\tif (b === sliceType.nil) {\n\t\t\tn = s.length;\n\t\t}\n\t\tx = (digits.charCodeAt(10) - 97 << 24 >>> 24) + 120 << 24 >>> 24;\n\t\tbuf = sliceType.nil;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < n)) { break; }\n\t\t\tif (i > 0 && f.fmtFlags.space) {\n\t\t\t\tbuf = $append(buf, 32);\n\t\t\t}\n\t\t\tif (f.fmtFlags.sharp && (f.fmtFlags.space || (i === 0))) {\n\t\t\t\tbuf = $append(buf, 48, x);\n\t\t\t}\n\t\t\tc = 0;\n\t\t\tif (b === sliceType.nil) {\n\t\t\t\tc = s.charCodeAt(i);\n\t\t\t} else {\n\t\t\t\tc = ((i < 0 || i >= b.$length) ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + i]);\n\t\t\t}\n\t\t\tbuf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\tf.pad(buf);\n\t};\n\tfmt.prototype.fmt_sbx = function(s, b, digits) { return this.$val.fmt_sbx(s, b, digits); };\n\tfmt.ptr.prototype.fmt_sx = function(s, digits) {\n\t\tvar $ptr, digits, f, s;\n\t\tf = this;\n\t\tif (f.fmtFlags.precPresent && f.prec < s.length) {\n\t\t\ts = s.substring(0, f.prec);\n\t\t}\n\t\tf.fmt_sbx(s, sliceType.nil, digits);\n\t};\n\tfmt.prototype.fmt_sx = function(s, digits) { return this.$val.fmt_sx(s, digits); };\n\tfmt.ptr.prototype.fmt_bx = function(b, digits) {\n\t\tvar $ptr, b, digits, f;\n\t\tf = this;\n\t\tif (f.fmtFlags.precPresent && f.prec < b.$length) {\n\t\t\tb = $subslice(b, 0, f.prec);\n\t\t}\n\t\tf.fmt_sbx(\"\", b, digits);\n\t};\n\tfmt.prototype.fmt_bx = function(b, digits) { return this.$val.fmt_bx(b, digits); };\n\tfmt.ptr.prototype.fmt_q = function(s) {\n\t\tvar $ptr, f, quoted, s;\n\t\tf = this;\n\t\ts = f.truncate(s);\n\t\tquoted = \"\";\n\t\tif (f.fmtFlags.sharp && strconv.CanBackquote(s)) {\n\t\t\tquoted = \"`\" + s + \"`\";\n\t\t} else {\n\t\t\tif (f.fmtFlags.plus) {\n\t\t\t\tquoted = strconv.QuoteToASCII(s);\n\t\t\t} else {\n\t\t\t\tquoted = strconv.Quote(s);\n\t\t\t}\n\t\t}\n\t\tf.padString(quoted);\n\t};\n\tfmt.prototype.fmt_q = function(s) { return this.$val.fmt_q(s); };\n\tfmt.ptr.prototype.fmt_qc = function(c) {\n\t\tvar $ptr, c, f, quoted;\n\t\tf = this;\n\t\tquoted = sliceType.nil;\n\t\tif (f.fmtFlags.plus) {\n\t\t\tquoted = strconv.AppendQuoteRuneToASCII($subslice(new sliceType(f.intbuf), 0, 0), ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0));\n\t\t} else {\n\t\t\tquoted = strconv.AppendQuoteRune($subslice(new sliceType(f.intbuf), 0, 0), ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0));\n\t\t}\n\t\tf.pad(quoted);\n\t};\n\tfmt.prototype.fmt_qc = function(c) { return this.$val.fmt_qc(c); };\n\tdoPrec = function(f, def) {\n\t\tvar $ptr, def, f;\n\t\tif (f.fmtFlags.precPresent) {\n\t\t\treturn f.prec;\n\t\t}\n\t\treturn def;\n\t};\n\tfmt.ptr.prototype.formatFloat = function(v, verb, prec, n) {\n\t\tvar $ptr, f, n, num, prec, v, verb, $deferred;\n\t\t/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\tf = this;\n\t\tnum = strconv.AppendFloat($subslice(new sliceType(f.intbuf), 0, 1), v, verb, prec, n);\n\t\tif (((1 >= num.$length ? $throwRuntimeError(\"index out of range\") : num.$array[num.$offset + 1]) === 45) || ((1 >= num.$length ? $throwRuntimeError(\"index out of range\") : num.$array[num.$offset + 1]) === 43)) {\n\t\t\tnum = $subslice(num, 1);\n\t\t} else {\n\t\t\t(0 >= num.$length ? $throwRuntimeError(\"index out of range\") : num.$array[num.$offset + 0] = 43);\n\t\t}\n\t\tif (math.IsInf(v, 0)) {\n\t\t\tif (f.fmtFlags.zero) {\n\t\t\t\t$deferred.push([(function() {\n\t\t\t\t\tvar $ptr;\n\t\t\t\t\tf.fmtFlags.zero = true;\n\t\t\t\t}), []]);\n\t\t\t\tf.fmtFlags.zero = false;\n\t\t\t}\n\t\t}\n\t\tif (f.fmtFlags.zero && f.fmtFlags.widPresent && f.wid > num.$length) {\n\t\t\tif (f.fmtFlags.space && v >= 0) {\n\t\t\t\tf.buf.WriteByte(32);\n\t\t\t\tf.wid = f.wid - (1) >> 0;\n\t\t\t} else if (f.fmtFlags.plus || v < 0) {\n\t\t\t\tf.buf.WriteByte((0 >= num.$length ? $throwRuntimeError(\"index out of range\") : num.$array[num.$offset + 0]));\n\t\t\t\tf.wid = f.wid - (1) >> 0;\n\t\t\t}\n\t\t\tf.pad($subslice(num, 1));\n\t\t\treturn;\n\t\t}\n\t\tif (f.fmtFlags.space && ((0 >= num.$length ? $throwRuntimeError(\"index out of range\") : num.$array[num.$offset + 0]) === 43)) {\n\t\t\t(0 >= num.$length ? $throwRuntimeError(\"index out of range\") : num.$array[num.$offset + 0] = 32);\n\t\t\tf.pad(num);\n\t\t\treturn;\n\t\t}\n\t\tif (f.fmtFlags.plus || ((0 >= num.$length ? $throwRuntimeError(\"index out of range\") : num.$array[num.$offset + 0]) === 45) || math.IsInf(v, 0)) {\n\t\t\tf.pad(num);\n\t\t\treturn;\n\t\t}\n\t\tf.pad($subslice(num, 1));\n\t\t/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }\n\t};\n\tfmt.prototype.formatFloat = function(v, verb, prec, n) { return this.$val.formatFloat(v, verb, prec, n); };\n\tfmt.ptr.prototype.fmt_e64 = function(v) {\n\t\tvar $ptr, f, v;\n\t\tf = this;\n\t\tf.formatFloat(v, 101, doPrec(f, 6), 64);\n\t};\n\tfmt.prototype.fmt_e64 = function(v) { return this.$val.fmt_e64(v); };\n\tfmt.ptr.prototype.fmt_E64 = function(v) {\n\t\tvar $ptr, f, v;\n\t\tf = this;\n\t\tf.formatFloat(v, 69, doPrec(f, 6), 64);\n\t};\n\tfmt.prototype.fmt_E64 = function(v) { return this.$val.fmt_E64(v); };\n\tfmt.ptr.prototype.fmt_f64 = function(v) {\n\t\tvar $ptr, f, v;\n\t\tf = this;\n\t\tf.formatFloat(v, 102, doPrec(f, 6), 64);\n\t};\n\tfmt.prototype.fmt_f64 = function(v) { return this.$val.fmt_f64(v); };\n\tfmt.ptr.prototype.fmt_g64 = function(v) {\n\t\tvar $ptr, f, v;\n\t\tf = this;\n\t\tf.formatFloat(v, 103, doPrec(f, -1), 64);\n\t};\n\tfmt.prototype.fmt_g64 = function(v) { return this.$val.fmt_g64(v); };\n\tfmt.ptr.prototype.fmt_G64 = function(v) {\n\t\tvar $ptr, f, v;\n\t\tf = this;\n\t\tf.formatFloat(v, 71, doPrec(f, -1), 64);\n\t};\n\tfmt.prototype.fmt_G64 = function(v) { return this.$val.fmt_G64(v); };\n\tfmt.ptr.prototype.fmt_fb64 = function(v) {\n\t\tvar $ptr, f, v;\n\t\tf = this;\n\t\tf.formatFloat(v, 98, 0, 64);\n\t};\n\tfmt.prototype.fmt_fb64 = function(v) { return this.$val.fmt_fb64(v); };\n\tfmt.ptr.prototype.fmt_e32 = function(v) {\n\t\tvar $ptr, f, v;\n\t\tf = this;\n\t\tf.formatFloat(v, 101, doPrec(f, 6), 32);\n\t};\n\tfmt.prototype.fmt_e32 = function(v) { return this.$val.fmt_e32(v); };\n\tfmt.ptr.prototype.fmt_E32 = function(v) {\n\t\tvar $ptr, f, v;\n\t\tf = this;\n\t\tf.formatFloat(v, 69, doPrec(f, 6), 32);\n\t};\n\tfmt.prototype.fmt_E32 = function(v) { return this.$val.fmt_E32(v); };\n\tfmt.ptr.prototype.fmt_f32 = function(v) {\n\t\tvar $ptr, f, v;\n\t\tf = this;\n\t\tf.formatFloat(v, 102, doPrec(f, 6), 32);\n\t};\n\tfmt.prototype.fmt_f32 = function(v) { return this.$val.fmt_f32(v); };\n\tfmt.ptr.prototype.fmt_g32 = function(v) {\n\t\tvar $ptr, f, v;\n\t\tf = this;\n\t\tf.formatFloat(v, 103, doPrec(f, -1), 32);\n\t};\n\tfmt.prototype.fmt_g32 = function(v) { return this.$val.fmt_g32(v); };\n\tfmt.ptr.prototype.fmt_G32 = function(v) {\n\t\tvar $ptr, f, v;\n\t\tf = this;\n\t\tf.formatFloat(v, 71, doPrec(f, -1), 32);\n\t};\n\tfmt.prototype.fmt_G32 = function(v) { return this.$val.fmt_G32(v); };\n\tfmt.ptr.prototype.fmt_fb32 = function(v) {\n\t\tvar $ptr, f, v;\n\t\tf = this;\n\t\tf.formatFloat(v, 98, 0, 32);\n\t};\n\tfmt.prototype.fmt_fb32 = function(v) { return this.$val.fmt_fb32(v); };\n\tfmt.ptr.prototype.fmt_c64 = function(v, verb) {\n\t\tvar $ptr, f, v, verb;\n\t\tf = this;\n\t\tf.fmt_complex(v.$real, v.$imag, 32, verb);\n\t};\n\tfmt.prototype.fmt_c64 = function(v, verb) { return this.$val.fmt_c64(v, verb); };\n\tfmt.ptr.prototype.fmt_c128 = function(v, verb) {\n\t\tvar $ptr, f, v, verb;\n\t\tf = this;\n\t\tf.fmt_complex(v.$real, v.$imag, 64, verb);\n\t};\n\tfmt.prototype.fmt_c128 = function(v, verb) { return this.$val.fmt_c128(v, verb); };\n\tfmt.ptr.prototype.fmt_complex = function(r, j, size, verb) {\n\t\tvar $ptr, _ref, f, i, j, oldPlus, oldSpace, oldWid, r, size, verb;\n\t\tf = this;\n\t\tf.buf.WriteByte(40);\n\t\toldPlus = f.fmtFlags.plus;\n\t\toldSpace = f.fmtFlags.space;\n\t\toldWid = f.wid;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\t_ref = verb;\n\t\t\tif (_ref === 98) {\n\t\t\t\tf.formatFloat(r, 98, 0, size);\n\t\t\t} else if (_ref === 101) {\n\t\t\t\tf.formatFloat(r, 101, doPrec(f, 6), size);\n\t\t\t} else if (_ref === 69) {\n\t\t\t\tf.formatFloat(r, 69, doPrec(f, 6), size);\n\t\t\t} else if (_ref === 102 || _ref === 70) {\n\t\t\t\tf.formatFloat(r, 102, doPrec(f, 6), size);\n\t\t\t} else if (_ref === 103) {\n\t\t\t\tf.formatFloat(r, 103, doPrec(f, -1), size);\n\t\t\t} else if (_ref === 71) {\n\t\t\t\tf.formatFloat(r, 71, doPrec(f, -1), size);\n\t\t\t}\n\t\t\tif (!((i === 0))) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tf.fmtFlags.plus = true;\n\t\t\tf.fmtFlags.space = false;\n\t\t\tf.wid = oldWid;\n\t\t\tr = j;\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\tf.fmtFlags.space = oldSpace;\n\t\tf.fmtFlags.plus = oldPlus;\n\t\tf.wid = oldWid;\n\t\tf.buf.Write(irparenBytes);\n\t};\n\tfmt.prototype.fmt_complex = function(r, j, size, verb) { return this.$val.fmt_complex(r, j, size, verb); };\n\t$ptrType(buffer).prototype.Write = function(p) {\n\t\tvar $ptr, _tmp, _tmp$1, b, err, n, p;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tb = this;\n\t\tb.$set($appendSlice(b.$get(), p));\n\t\t_tmp = p.$length; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;\n\t\treturn [n, err];\n\t};\n\t$ptrType(buffer).prototype.WriteString = function(s) {\n\t\tvar $ptr, _tmp, _tmp$1, b, err, n, s;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tb = this;\n\t\tb.$set($appendSlice(b.$get(), new buffer($stringToBytes(s))));\n\t\t_tmp = s.length; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;\n\t\treturn [n, err];\n\t};\n\t$ptrType(buffer).prototype.WriteByte = function(c) {\n\t\tvar $ptr, b, c;\n\t\tb = this;\n\t\tb.$set($append(b.$get(), c));\n\t\treturn $ifaceNil;\n\t};\n\t$ptrType(buffer).prototype.WriteRune = function(r) {\n\t\tvar $ptr, b, bp, n, r, w, x;\n\t\tbp = this;\n\t\tif (r < 128) {\n\t\t\tbp.$set($append(bp.$get(), (r << 24 >>> 24)));\n\t\t\treturn $ifaceNil;\n\t\t}\n\t\tb = bp.$get();\n\t\tn = b.$length;\n\t\twhile (true) {\n\t\t\tif (!((n + 4 >> 0) > b.$capacity)) { break; }\n\t\t\tb = $append(b, 0);\n\t\t}\n\t\tw = utf8.EncodeRune((x = $subslice(b, n, (n + 4 >> 0)), $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length)), r);\n\t\tbp.$set($subslice(b, 0, (n + w >> 0)));\n\t\treturn $ifaceNil;\n\t};\n\tnewPrinter = function() {\n\t\tvar $ptr, _r$2, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r$2 = ppFree.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\tp = $assertType(_r$2, ptrType);\n\t\tp.panicking = false;\n\t\tp.erroring = false;\n\t\tp.fmt.init((p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))));\n\t\treturn p;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: newPrinter }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tpp.ptr.prototype.free = function() {\n\t\tvar $ptr, p;\n\t\tp = this;\n\t\tif (p.buf.$capacity > 1024) {\n\t\t\treturn;\n\t\t}\n\t\tp.buf = $subslice(p.buf, 0, 0);\n\t\tp.arg = $ifaceNil;\n\t\tp.value = new reflect.Value.ptr(ptrType$2.nil, 0, 0);\n\t\tppFree.Put(p);\n\t};\n\tpp.prototype.free = function() { return this.$val.free(); };\n\tpp.ptr.prototype.Width = function() {\n\t\tvar $ptr, _tmp, _tmp$1, ok, p, wid;\n\t\twid = 0;\n\t\tok = false;\n\t\tp = this;\n\t\t_tmp = p.fmt.wid; _tmp$1 = p.fmt.fmtFlags.widPresent; wid = _tmp; ok = _tmp$1;\n\t\treturn [wid, ok];\n\t};\n\tpp.prototype.Width = function() { return this.$val.Width(); };\n\tpp.ptr.prototype.Precision = function() {\n\t\tvar $ptr, _tmp, _tmp$1, ok, p, prec;\n\t\tprec = 0;\n\t\tok = false;\n\t\tp = this;\n\t\t_tmp = p.fmt.prec; _tmp$1 = p.fmt.fmtFlags.precPresent; prec = _tmp; ok = _tmp$1;\n\t\treturn [prec, ok];\n\t};\n\tpp.prototype.Precision = function() { return this.$val.Precision(); };\n\tpp.ptr.prototype.Flag = function(b) {\n\t\tvar $ptr, _ref, b, p;\n\t\tp = this;\n\t\t_ref = b;\n\t\tif (_ref === 45) {\n\t\t\treturn p.fmt.fmtFlags.minus;\n\t\t} else if (_ref === 43) {\n\t\t\treturn p.fmt.fmtFlags.plus;\n\t\t} else if (_ref === 35) {\n\t\t\treturn p.fmt.fmtFlags.sharp;\n\t\t} else if (_ref === 32) {\n\t\t\treturn p.fmt.fmtFlags.space;\n\t\t} else if (_ref === 48) {\n\t\t\treturn p.fmt.fmtFlags.zero;\n\t\t}\n\t\treturn false;\n\t};\n\tpp.prototype.Flag = function(b) { return this.$val.Flag(b); };\n\tpp.ptr.prototype.add = function(c) {\n\t\tvar $ptr, c, p;\n\t\tp = this;\n\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(c);\n\t};\n\tpp.prototype.add = function(c) { return this.$val.add(c); };\n\tpp.ptr.prototype.Write = function(b) {\n\t\tvar $ptr, _tuple, b, err, p, ret;\n\t\tret = 0;\n\t\terr = $ifaceNil;\n\t\tp = this;\n\t\t_tuple = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(b); ret = _tuple[0]; err = _tuple[1];\n\t\treturn [ret, err];\n\t};\n\tpp.prototype.Write = function(b) { return this.$val.Write(b); };\n\tFprintf = function(w, format, a) {\n\t\tvar $ptr, _r$2, _r$3, _tuple, a, err, format, n, p, w, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; a = $f.a; err = $f.err; format = $f.format; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\t_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\tp = _r$2;\n\t\t$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t_r$3 = w.Write((x = p.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t_tuple = _r$3; n = _tuple[0]; err = _tuple[1];\n\t\tp.free();\n\t\treturn [n, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Fprintf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.format = format; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Fprintf = Fprintf;\n\tPrintf = function(format, a) {\n\t\tvar $ptr, _r$2, _tuple, a, err, format, n, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; a = $f.a; err = $f.err; format = $f.format; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\t_r$2 = Fprintf(os.Stdout, format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_tuple = _r$2; n = _tuple[0]; err = _tuple[1];\n\t\treturn [n, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Printf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.format = format; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Printf = Printf;\n\tSprintf = function(format, a) {\n\t\tvar $ptr, _r$2, a, format, p, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; a = $f.a; format = $f.format; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\tp = _r$2;\n\t\t$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\ts = $bytesToString(p.buf);\n\t\tp.free();\n\t\treturn s;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Sprintf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.a = a; $f.format = format; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Sprintf = Sprintf;\n\tErrorf = function(format, a) {\n\t\tvar $ptr, _r$2, _r$3, a, format, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; a = $f.a; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r$2 = Sprintf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_r$3 = errors.New(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\treturn _r$3;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Errorf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.a = a; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Errorf = Errorf;\n\tFprint = function(w, a) {\n\t\tvar $ptr, _r$2, _r$3, _tuple, a, err, n, p, w, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\t_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\tp = _r$2;\n\t\t$r = p.doPrint(a, false, false); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t_r$3 = w.Write((x = p.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t_tuple = _r$3; n = _tuple[0]; err = _tuple[1];\n\t\tp.free();\n\t\treturn [n, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Fprint }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Fprint = Fprint;\n\tPrint = function(a) {\n\t\tvar $ptr, _r$2, _tuple, a, err, n, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\t_r$2 = Fprint(os.Stdout, a); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_tuple = _r$2; n = _tuple[0]; err = _tuple[1];\n\t\treturn [n, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Print }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Print = Print;\n\tSprint = function(a) {\n\t\tvar $ptr, _r$2, a, p, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; a = $f.a; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\tp = _r$2;\n\t\t$r = p.doPrint(a, false, false); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\ts = $bytesToString(p.buf);\n\t\tp.free();\n\t\treturn s;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Sprint }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.a = a; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Sprint = Sprint;\n\tFprintln = function(w, a) {\n\t\tvar $ptr, _r$2, _r$3, _tuple, a, err, n, p, w, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\t_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\tp = _r$2;\n\t\t$r = p.doPrint(a, true, true); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t_r$3 = w.Write((x = p.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t_tuple = _r$3; n = _tuple[0]; err = _tuple[1];\n\t\tp.free();\n\t\treturn [n, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Fprintln }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Fprintln = Fprintln;\n\tPrintln = function(a) {\n\t\tvar $ptr, _r$2, _tuple, a, err, n, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\t_r$2 = Fprintln(os.Stdout, a); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_tuple = _r$2; n = _tuple[0]; err = _tuple[1];\n\t\treturn [n, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Println }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Println = Println;\n\tSprintln = function(a) {\n\t\tvar $ptr, _r$2, a, p, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; a = $f.a; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\tp = _r$2;\n\t\t$r = p.doPrint(a, true, true); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\ts = $bytesToString(p.buf);\n\t\tp.free();\n\t\treturn s;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Sprintln }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.a = a; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Sprintln = Sprintln;\n\tgetField = function(v, i) {\n\t\tvar $ptr, _r$2, _r$3, i, v, val, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\t_r$2 = v.Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\tval = _r$2;\n\t\t/* */ if ((val.Kind() === 20) && !val.IsNil()) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if ((val.Kind() === 20) && !val.IsNil()) { */ case 2:\n\t\t\t_r$3 = val.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\tval = _r$3;\n\t\t/* } */ case 3:\n\t\treturn val;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: getField }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tparsenum = function(s, start, end) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, end, isnum, newi, num, s, start;\n\t\tnum = 0;\n\t\tisnum = false;\n\t\tnewi = 0;\n\t\tif (start >= end) {\n\t\t\t_tmp = 0; _tmp$1 = false; _tmp$2 = end; num = _tmp; isnum = _tmp$1; newi = _tmp$2;\n\t\t\treturn [num, isnum, newi];\n\t\t}\n\t\tnewi = start;\n\t\twhile (true) {\n\t\t\tif (!(newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57)) { break; }\n\t\t\tnum = (num * 10 >> 0) + ((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0) >> 0;\n\t\t\tisnum = true;\n\t\t\tnewi = newi + (1) >> 0;\n\t\t}\n\t\treturn [num, isnum, newi];\n\t};\n\tpp.ptr.prototype.unknownType = function(v) {\n\t\tvar $ptr, _r$2, _r$3, p, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\tv = v;\n\t\tif (!v.IsValid()) {\n\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);\n\t\t\treturn;\n\t\t}\n\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);\n\t\t_r$2 = v.Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t_r$3;\n\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.unknownType }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tpp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };\n\tpp.ptr.prototype.badVerb = function(verb) {\n\t\tvar $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, p, verb, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\tp.erroring = true;\n\t\tp.add(37);\n\t\tp.add(33);\n\t\tp.add(verb);\n\t\tp.add(40);\n\t\t/* */ if (!($interfaceIsEqual(p.arg, $ifaceNil))) { $s = 1; continue; }\n\t\t/* */ if (p.value.IsValid()) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (!($interfaceIsEqual(p.arg, $ifaceNil))) { */ case 1:\n\t\t\t_r$2 = reflect.TypeOf(p.arg).String(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t_r$3;\n\t\t\tp.add(61);\n\t\t\t_r$4 = p.printArg(p.arg, 118, 0); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t_r$4;\n\t\t\t$s = 4; continue;\n\t\t/* } else if (p.value.IsValid()) { */ case 2:\n\t\t\t_r$5 = p.value.Type().String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t_r$6 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$5); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_r$6;\n\t\t\tp.add(61);\n\t\t\t_r$7 = p.printValue(p.value, 118, 0); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t_r$7;\n\t\t\t$s = 4; continue;\n\t\t/* } else { */ case 3:\n\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);\n\t\t/* } */ case 4:\n\t\tp.add(41);\n\t\tp.erroring = false;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.badVerb }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tpp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };\n\tpp.ptr.prototype.fmtBool = function(v, verb) {\n\t\tvar $ptr, _ref, p, v, verb, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\t_ref = verb;\n\t\t/* */ if (_ref === 116 || _ref === 118) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (_ref === 116 || _ref === 118) { */ case 1:\n\t\t\tp.fmt.fmt_boolean(v);\n\t\t\t$s = 3; continue;\n\t\t/* } else { */ case 2:\n\t\t\t$r = p.badVerb(verb); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 3:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBool }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tpp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };\n\tpp.ptr.prototype.fmtC = function(c) {\n\t\tvar $ptr, c, p, r, w, x;\n\t\tp = this;\n\t\tr = ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0);\n\t\tif (!((x = new $Int64(0, r), (x.$high === c.$high && x.$low === c.$low)))) {\n\t\t\tr = 65533;\n\t\t}\n\t\tw = utf8.EncodeRune($subslice(new sliceType(p.runeBuf), 0, 4), r);\n\t\tp.fmt.pad($subslice(new sliceType(p.runeBuf), 0, w));\n\t};\n\tpp.prototype.fmtC = function(c) { return this.$val.fmtC(c); };\n\tpp.ptr.prototype.fmtInt64 = function(v, verb) {\n\t\tvar $ptr, _ref, p, v, verb, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\t_ref = verb;\n\t\t/* */ if (_ref === 98) { $s = 1; continue; }\n\t\t/* */ if (_ref === 99) { $s = 2; continue; }\n\t\t/* */ if (_ref === 100 || _ref === 118) { $s = 3; continue; }\n\t\t/* */ if (_ref === 111) { $s = 4; continue; }\n\t\t/* */ if (_ref === 113) { $s = 5; continue; }\n\t\t/* */ if (_ref === 120) { $s = 6; continue; }\n\t\t/* */ if (_ref === 85) { $s = 7; continue; }\n\t\t/* */ if (_ref === 88) { $s = 8; continue; }\n\t\t/* */ $s = 9; continue;\n\t\t/* if (_ref === 98) { */ case 1:\n\t\t\tp.fmt.integer(v, new $Uint64(0, 2), true, \"0123456789abcdef\");\n\t\t\t$s = 10; continue;\n\t\t/* } else if (_ref === 99) { */ case 2:\n\t\t\tp.fmtC(v);\n\t\t\t$s = 10; continue;\n\t\t/* } else if (_ref === 100 || _ref === 118) { */ case 3:\n\t\t\tp.fmt.integer(v, new $Uint64(0, 10), true, \"0123456789abcdef\");\n\t\t\t$s = 10; continue;\n\t\t/* } else if (_ref === 111) { */ case 4:\n\t\t\tp.fmt.integer(v, new $Uint64(0, 8), true, \"0123456789abcdef\");\n\t\t\t$s = 10; continue;\n\t\t/* } else if (_ref === 113) { */ case 5:\n\t\t\t/* */ if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 11; continue; }\n\t\t\t/* */ $s = 12; continue;\n\t\t\t/* if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 11:\n\t\t\t\tp.fmt.fmt_qc(v);\n\t\t\t\t$s = 13; continue;\n\t\t\t/* } else { */ case 12:\n\t\t\t\t$r = p.badVerb(verb); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 13:\n\t\t\t$s = 10; continue;\n\t\t/* } else if (_ref === 120) { */ case 6:\n\t\t\tp.fmt.integer(v, new $Uint64(0, 16), true, \"0123456789abcdef\");\n\t\t\t$s = 10; continue;\n\t\t/* } else if (_ref === 85) { */ case 7:\n\t\t\tp.fmtUnicode(v);\n\t\t\t$s = 10; continue;\n\t\t/* } else if (_ref === 88) { */ case 8:\n\t\t\tp.fmt.integer(v, new $Uint64(0, 16), true, \"0123456789ABCDEF\");\n\t\t\t$s = 10; continue;\n\t\t/* } else { */ case 9:\n\t\t\t$r = p.badVerb(verb); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 10:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtInt64 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tpp.prototype.fmtInt64 = function(v, verb) { return this.$val.fmtInt64(v, verb); };\n\tpp.ptr.prototype.fmt0x64 = function(v, leading0x) {\n\t\tvar $ptr, leading0x, p, sharp, v;\n\t\tp = this;\n\t\tsharp = p.fmt.fmtFlags.sharp;\n\t\tp.fmt.fmtFlags.sharp = leading0x;\n\t\tp.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, \"0123456789abcdef\");\n\t\tp.fmt.fmtFlags.sharp = sharp;\n\t};\n\tpp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };\n\tpp.ptr.prototype.fmtUnicode = function(v) {\n\t\tvar $ptr, p, prec, precPresent, sharp, v;\n\t\tp = this;\n\t\tprecPresent = p.fmt.fmtFlags.precPresent;\n\t\tsharp = p.fmt.fmtFlags.sharp;\n\t\tp.fmt.fmtFlags.sharp = false;\n\t\tprec = p.fmt.prec;\n\t\tif (!precPresent) {\n\t\t\tp.fmt.prec = 4;\n\t\t\tp.fmt.fmtFlags.precPresent = true;\n\t\t}\n\t\tp.fmt.fmtFlags.unicode = true;\n\t\tp.fmt.fmtFlags.uniQuote = sharp;\n\t\tp.fmt.integer(v, new $Uint64(0, 16), false, \"0123456789ABCDEF\");\n\t\tp.fmt.fmtFlags.unicode = false;\n\t\tp.fmt.fmtFlags.uniQuote = false;\n\t\tp.fmt.prec = prec;\n\t\tp.fmt.fmtFlags.precPresent = precPresent;\n\t\tp.fmt.fmtFlags.sharp = sharp;\n\t};\n\tpp.prototype.fmtUnicode = function(v) { return this.$val.fmtUnicode(v); };\n\tpp.ptr.prototype.fmtUint64 = function(v, verb) {\n\t\tvar $ptr, _ref, p, v, verb, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\t_ref = verb;\n\t\t/* */ if (_ref === 98) { $s = 1; continue; }\n\t\t/* */ if (_ref === 99) { $s = 2; continue; }\n\t\t/* */ if (_ref === 100) { $s = 3; continue; }\n\t\t/* */ if (_ref === 118) { $s = 4; continue; }\n\t\t/* */ if (_ref === 111) { $s = 5; continue; }\n\t\t/* */ if (_ref === 113) { $s = 6; continue; }\n\t\t/* */ if (_ref === 120) { $s = 7; continue; }\n\t\t/* */ if (_ref === 88) { $s = 8; continue; }\n\t\t/* */ if (_ref === 85) { $s = 9; continue; }\n\t\t/* */ $s = 10; continue;\n\t\t/* if (_ref === 98) { */ case 1:\n\t\t\tp.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 2), false, \"0123456789abcdef\");\n\t\t\t$s = 11; continue;\n\t\t/* } else if (_ref === 99) { */ case 2:\n\t\t\tp.fmtC(new $Int64(v.$high, v.$low));\n\t\t\t$s = 11; continue;\n\t\t/* } else if (_ref === 100) { */ case 3:\n\t\t\tp.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 10), false, \"0123456789abcdef\");\n\t\t\t$s = 11; continue;\n\t\t/* } else if (_ref === 118) { */ case 4:\n\t\t\tif (p.fmt.fmtFlags.sharpV) {\n\t\t\t\tp.fmt0x64(v, true);\n\t\t\t} else {\n\t\t\t\tp.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 10), false, \"0123456789abcdef\");\n\t\t\t}\n\t\t\t$s = 11; continue;\n\t\t/* } else if (_ref === 111) { */ case 5:\n\t\t\tp.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 8), false, \"0123456789abcdef\");\n\t\t\t$s = 11; continue;\n\t\t/* } else if (_ref === 113) { */ case 6:\n\t\t\t/* */ if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 12; continue; }\n\t\t\t/* */ $s = 13; continue;\n\t\t\t/* if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 12:\n\t\t\t\tp.fmt.fmt_qc(new $Int64(v.$high, v.$low));\n\t\t\t\t$s = 14; continue;\n\t\t\t/* } else { */ case 13:\n\t\t\t\t$r = p.badVerb(verb); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 14:\n\t\t\t$s = 11; continue;\n\t\t/* } else if (_ref === 120) { */ case 7:\n\t\t\tp.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, \"0123456789abcdef\");\n\t\t\t$s = 11; continue;\n\t\t/* } else if (_ref === 88) { */ case 8:\n\t\t\tp.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, \"0123456789ABCDEF\");\n\t\t\t$s = 11; continue;\n\t\t/* } else if (_ref === 85) { */ case 9:\n\t\t\tp.fmtUnicode(new $Int64(v.$high, v.$low));\n\t\t\t$s = 11; continue;\n\t\t/* } else { */ case 10:\n\t\t\t$r = p.badVerb(verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 11:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtUint64 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tpp.prototype.fmtUint64 = function(v, verb) { return this.$val.fmtUint64(v, verb); };\n\tpp.ptr.prototype.fmtFloat32 = function(v, verb) {\n\t\tvar $ptr, _ref, p, v, verb, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\t_ref = verb;\n\t\t/* */ if (_ref === 98) { $s = 1; continue; }\n\t\t/* */ if (_ref === 101) { $s = 2; continue; }\n\t\t/* */ if (_ref === 69) { $s = 3; continue; }\n\t\t/* */ if (_ref === 102 || _ref === 70) { $s = 4; continue; }\n\t\t/* */ if (_ref === 103 || _ref === 118) { $s = 5; continue; }\n\t\t/* */ if (_ref === 71) { $s = 6; continue; }\n\t\t/* */ $s = 7; continue;\n\t\t/* if (_ref === 98) { */ case 1:\n\t\t\tp.fmt.fmt_fb32(v);\n\t\t\t$s = 8; continue;\n\t\t/* } else if (_ref === 101) { */ case 2:\n\t\t\tp.fmt.fmt_e32(v);\n\t\t\t$s = 8; continue;\n\t\t/* } else if (_ref === 69) { */ case 3:\n\t\t\tp.fmt.fmt_E32(v);\n\t\t\t$s = 8; continue;\n\t\t/* } else if (_ref === 102 || _ref === 70) { */ case 4:\n\t\t\tp.fmt.fmt_f32(v);\n\t\t\t$s = 8; continue;\n\t\t/* } else if (_ref === 103 || _ref === 118) { */ case 5:\n\t\t\tp.fmt.fmt_g32(v);\n\t\t\t$s = 8; continue;\n\t\t/* } else if (_ref === 71) { */ case 6:\n\t\t\tp.fmt.fmt_G32(v);\n\t\t\t$s = 8; continue;\n\t\t/* } else { */ case 7:\n\t\t\t$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 8:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat32 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tpp.prototype.fmtFloat32 = function(v, verb) { return this.$val.fmtFloat32(v, verb); };\n\tpp.ptr.prototype.fmtFloat64 = function(v, verb) {\n\t\tvar $ptr, _ref, p, v, verb, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\t_ref = verb;\n\t\t/* */ if (_ref === 98) { $s = 1; continue; }\n\t\t/* */ if (_ref === 101) { $s = 2; continue; }\n\t\t/* */ if (_ref === 69) { $s = 3; continue; }\n\t\t/* */ if (_ref === 102 || _ref === 70) { $s = 4; continue; }\n\t\t/* */ if (_ref === 103 || _ref === 118) { $s = 5; continue; }\n\t\t/* */ if (_ref === 71) { $s = 6; continue; }\n\t\t/* */ $s = 7; continue;\n\t\t/* if (_ref === 98) { */ case 1:\n\t\t\tp.fmt.fmt_fb64(v);\n\t\t\t$s = 8; continue;\n\t\t/* } else if (_ref === 101) { */ case 2:\n\t\t\tp.fmt.fmt_e64(v);\n\t\t\t$s = 8; continue;\n\t\t/* } else if (_ref === 69) { */ case 3:\n\t\t\tp.fmt.fmt_E64(v);\n\t\t\t$s = 8; continue;\n\t\t/* } else if (_ref === 102 || _ref === 70) { */ case 4:\n\t\t\tp.fmt.fmt_f64(v);\n\t\t\t$s = 8; continue;\n\t\t/* } else if (_ref === 103 || _ref === 118) { */ case 5:\n\t\t\tp.fmt.fmt_g64(v);\n\t\t\t$s = 8; continue;\n\t\t/* } else if (_ref === 71) { */ case 6:\n\t\t\tp.fmt.fmt_G64(v);\n\t\t\t$s = 8; continue;\n\t\t/* } else { */ case 7:\n\t\t\t$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 8:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat64 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tpp.prototype.fmtFloat64 = function(v, verb) { return this.$val.fmtFloat64(v, verb); };\n\tpp.ptr.prototype.fmtComplex64 = function(v, verb) {\n\t\tvar $ptr, _ref, p, v, verb, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\t_ref = verb;\n\t\t/* */ if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) { $s = 1; continue; }\n\t\t/* */ if (_ref === 118) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) { */ case 1:\n\t\t\tp.fmt.fmt_c64(v, verb);\n\t\t\t$s = 4; continue;\n\t\t/* } else if (_ref === 118) { */ case 2:\n\t\t\tp.fmt.fmt_c64(v, 103);\n\t\t\t$s = 4; continue;\n\t\t/* } else { */ case 3:\n\t\t\t$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 4:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex64 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tpp.prototype.fmtComplex64 = function(v, verb) { return this.$val.fmtComplex64(v, verb); };\n\tpp.ptr.prototype.fmtComplex128 = function(v, verb) {\n\t\tvar $ptr, _ref, p, v, verb, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\t_ref = verb;\n\t\t/* */ if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) { $s = 1; continue; }\n\t\t/* */ if (_ref === 118) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) { */ case 1:\n\t\t\tp.fmt.fmt_c128(v, verb);\n\t\t\t$s = 4; continue;\n\t\t/* } else if (_ref === 118) { */ case 2:\n\t\t\tp.fmt.fmt_c128(v, 103);\n\t\t\t$s = 4; continue;\n\t\t/* } else { */ case 3:\n\t\t\t$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 4:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex128 }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tpp.prototype.fmtComplex128 = function(v, verb) { return this.$val.fmtComplex128(v, verb); };\n\tpp.ptr.prototype.fmtString = function(v, verb) {\n\t\tvar $ptr, _ref, p, v, verb, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\t_ref = verb;\n\t\t/* */ if (_ref === 118) { $s = 1; continue; }\n\t\t/* */ if (_ref === 115) { $s = 2; continue; }\n\t\t/* */ if (_ref === 120) { $s = 3; continue; }\n\t\t/* */ if (_ref === 88) { $s = 4; continue; }\n\t\t/* */ if (_ref === 113) { $s = 5; continue; }\n\t\t/* */ $s = 6; continue;\n\t\t/* if (_ref === 118) { */ case 1:\n\t\t\tif (p.fmt.fmtFlags.sharpV) {\n\t\t\t\tp.fmt.fmt_q(v);\n\t\t\t} else {\n\t\t\t\tp.fmt.fmt_s(v);\n\t\t\t}\n\t\t\t$s = 7; continue;\n\t\t/* } else if (_ref === 115) { */ case 2:\n\t\t\tp.fmt.fmt_s(v);\n\t\t\t$s = 7; continue;\n\t\t/* } else if (_ref === 120) { */ case 3:\n\t\t\tp.fmt.fmt_sx(v, \"0123456789abcdef\");\n\t\t\t$s = 7; continue;\n\t\t/* } else if (_ref === 88) { */ case 4:\n\t\t\tp.fmt.fmt_sx(v, \"0123456789ABCDEF\");\n\t\t\t$s = 7; continue;\n\t\t/* } else if (_ref === 113) { */ case 5:\n\t\t\tp.fmt.fmt_q(v);\n\t\t\t$s = 7; continue;\n\t\t/* } else { */ case 6:\n\t\t\t$r = p.badVerb(verb); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 7:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtString }; } $f.$ptr = $ptr; $f._ref = _ref; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tpp.prototype.fmtString = function(v, verb) { return this.$val.fmtString(v, verb); };\n\tpp.ptr.prototype.fmtBytes = function(v, verb, typ, depth) {\n\t\tvar $ptr, _i, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, c, depth, i, p, typ, v, verb, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; depth = $f.depth; i = $f.i; p = $f.p; typ = $f.typ; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\t/* */ if ((verb === 118) || (verb === 100)) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if ((verb === 118) || (verb === 100)) { */ case 1:\n\t\t\t/* */ if (p.fmt.fmtFlags.sharpV) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (p.fmt.fmtFlags.sharpV) { */ case 3:\n\t\t\t\t/* */ if (v === sliceType.nil) { $s = 6; continue; }\n\t\t\t\t/* */ $s = 7; continue;\n\t\t\t\t/* if (v === sliceType.nil) { */ case 6:\n\t\t\t\t\t/* */ if ($interfaceIsEqual(typ, $ifaceNil)) { $s = 8; continue; }\n\t\t\t\t\t/* */ $s = 9; continue;\n\t\t\t\t\t/* if ($interfaceIsEqual(typ, $ifaceNil)) { */ case 8:\n\t\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(\"[]byte(nil)\");\n\t\t\t\t\t\t$s = 10; continue;\n\t\t\t\t\t/* } else { */ case 9:\n\t\t\t\t\t\t_r$2 = typ.String(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\t\t\t_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t\t\t\t_r$3;\n\t\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilParenBytes);\n\t\t\t\t\t/* } */ case 10:\n\t\t\t\t\treturn;\n\t\t\t\t/* } */ case 7:\n\t\t\t\t/* */ if ($interfaceIsEqual(typ, $ifaceNil)) { $s = 13; continue; }\n\t\t\t\t/* */ $s = 14; continue;\n\t\t\t\t/* if ($interfaceIsEqual(typ, $ifaceNil)) { */ case 13:\n\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(bytesBytes);\n\t\t\t\t\t$s = 15; continue;\n\t\t\t\t/* } else { */ case 14:\n\t\t\t\t\t_r$4 = typ.String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$5 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$4); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$5;\n\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);\n\t\t\t\t/* } */ case 15:\n\t\t\t\t$s = 5; continue;\n\t\t\t/* } else { */ case 4:\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);\n\t\t\t/* } */ case 5:\n\t\t\t_ref = v;\n\t\t\t_i = 0;\n\t\t\t/* while (true) { */ case 18:\n\t\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 19; continue; }\n\t\t\t\ti = _i;\n\t\t\t\tc = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tif (p.fmt.fmtFlags.sharpV) {\n\t\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_r$6 = p.printArg(new $Uint8(c), 118, depth + 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t\t_r$6;\n\t\t\t\t_i++;\n\t\t\t/* } */ $s = 18; continue; case 19:\n\t\t\tif (p.fmt.fmtFlags.sharpV) {\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);\n\t\t\t} else {\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);\n\t\t\t}\n\t\t\treturn;\n\t\t/* } */ case 2:\n\t\t_ref$1 = verb;\n\t\t/* */ if (_ref$1 === 115) { $s = 21; continue; }\n\t\t/* */ if (_ref$1 === 120) { $s = 22; continue; }\n\t\t/* */ if (_ref$1 === 88) { $s = 23; continue; }\n\t\t/* */ if (_ref$1 === 113) { $s = 24; continue; }\n\t\t/* */ $s = 25; continue;\n\t\t/* if (_ref$1 === 115) { */ case 21:\n\t\t\tp.fmt.fmt_s($bytesToString(v));\n\t\t\t$s = 26; continue;\n\t\t/* } else if (_ref$1 === 120) { */ case 22:\n\t\t\tp.fmt.fmt_bx(v, \"0123456789abcdef\");\n\t\t\t$s = 26; continue;\n\t\t/* } else if (_ref$1 === 88) { */ case 23:\n\t\t\tp.fmt.fmt_bx(v, \"0123456789ABCDEF\");\n\t\t\t$s = 26; continue;\n\t\t/* } else if (_ref$1 === 113) { */ case 24:\n\t\t\tp.fmt.fmt_q($bytesToString(v));\n\t\t\t$s = 26; continue;\n\t\t/* } else { */ case 25:\n\t\t\t$r = p.badVerb(verb); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 26:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBytes }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.depth = depth; $f.i = i; $f.p = p; $f.typ = typ; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tpp.prototype.fmtBytes = function(v, verb, typ, depth) { return this.$val.fmtBytes(v, verb, typ, depth); };\n\tpp.ptr.prototype.fmtPointer = function(value, verb) {\n\t\tvar $ptr, _r$2, _r$3, _ref, _ref$1, p, u, use0x64, value, verb, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; p = $f.p; u = $f.u; use0x64 = $f.use0x64; value = $f.value; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\tvalue = value;\n\t\tuse0x64 = true;\n\t\t_ref = verb;\n\t\t/* */ if (_ref === 112 || _ref === 118) { $s = 1; continue; }\n\t\t/* */ if (_ref === 98 || _ref === 100 || _ref === 111 || _ref === 120 || _ref === 88) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (_ref === 112 || _ref === 118) { */ case 1:\n\t\t\t$s = 4; continue;\n\t\t/* } else if (_ref === 98 || _ref === 100 || _ref === 111 || _ref === 120 || _ref === 88) { */ case 2:\n\t\t\tuse0x64 = false;\n\t\t\t$s = 4; continue;\n\t\t/* } else { */ case 3:\n\t\t\t$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\treturn;\n\t\t/* } */ case 4:\n\t\tu = 0;\n\t\t_ref$1 = value.Kind();\n\t\t/* */ if (_ref$1 === 18 || _ref$1 === 19 || _ref$1 === 21 || _ref$1 === 22 || _ref$1 === 23 || _ref$1 === 26) { $s = 6; continue; }\n\t\t/* */ $s = 7; continue;\n\t\t/* if (_ref$1 === 18 || _ref$1 === 19 || _ref$1 === 21 || _ref$1 === 22 || _ref$1 === 23 || _ref$1 === 26) { */ case 6:\n\t\t\tu = value.Pointer();\n\t\t\t$s = 8; continue;\n\t\t/* } else { */ case 7:\n\t\t\t$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\treturn;\n\t\t/* } */ case 8:\n\t\t/* */ if (p.fmt.fmtFlags.sharpV) { $s = 10; continue; }\n\t\t/* */ if ((verb === 118) && (u === 0)) { $s = 11; continue; }\n\t\t/* */ $s = 12; continue;\n\t\t/* if (p.fmt.fmtFlags.sharpV) { */ case 10:\n\t\t\tp.add(40);\n\t\t\t_r$2 = value.Type().String(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t_r$3;\n\t\t\tp.add(41);\n\t\t\tp.add(40);\n\t\t\tif (u === 0) {\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilBytes);\n\t\t\t} else {\n\t\t\t\tp.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), true);\n\t\t\t}\n\t\t\tp.add(41);\n\t\t\t$s = 13; continue;\n\t\t/* } else if ((verb === 118) && (u === 0)) { */ case 11:\n\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);\n\t\t\t$s = 13; continue;\n\t\t/* } else { */ case 12:\n\t\t\t/* */ if (use0x64) { $s = 16; continue; }\n\t\t\t/* */ $s = 17; continue;\n\t\t\t/* if (use0x64) { */ case 16:\n\t\t\t\tp.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), !p.fmt.fmtFlags.sharp);\n\t\t\t\t$s = 18; continue;\n\t\t\t/* } else { */ case 17:\n\t\t\t\t$r = p.fmtUint64(new $Uint64(0, u.constructor === Number ? u : 1), verb); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 18:\n\t\t/* } */ case 13:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtPointer }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f.p = p; $f.u = u; $f.use0x64 = use0x64; $f.value = value; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tpp.prototype.fmtPointer = function(value, verb) { return this.$val.fmtPointer(value, verb); };\n\tpp.ptr.prototype.catchPanic = function(arg, verb) {\n\t\tvar $ptr, _r$2, _r$3, arg, err, p, v, verb, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; arg = $f.arg; err = $f.err; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\terr = $recover();\n\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:\n\t\t\t_r$2 = reflect.ValueOf(arg); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\tv = _r$2;\n\t\t\t/* */ if ((v.Kind() === 22) && v.IsNil()) { $s = 4; continue; }\n\t\t\t/* */ $s = 5; continue;\n\t\t\t/* if ((v.Kind() === 22) && v.IsNil()) { */ case 4:\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);\n\t\t\t\treturn;\n\t\t\t/* } */ case 5:\n\t\t\tif (p.panicking) {\n\t\t\t\t$panic(err);\n\t\t\t}\n\t\t\tp.fmt.clearflags();\n\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(percentBangBytes);\n\t\t\tp.add(verb);\n\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(panicBytes);\n\t\t\tp.panicking = true;\n\t\t\t_r$3 = p.printArg(err, 118, 0); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t_r$3;\n\t\t\tp.panicking = false;\n\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);\n\t\t/* } */ case 2:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.catchPanic }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.arg = arg; $f.err = err; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tpp.prototype.catchPanic = function(arg, verb) { return this.$val.catchPanic(arg, verb); };\n\tpp.ptr.prototype.clearSpecialFlags = function() {\n\t\tvar $ptr, p, plusV, sharpV;\n\t\tplusV = false;\n\t\tsharpV = false;\n\t\tp = this;\n\t\tplusV = p.fmt.fmtFlags.plusV;\n\t\tif (plusV) {\n\t\t\tp.fmt.fmtFlags.plus = true;\n\t\t\tp.fmt.fmtFlags.plusV = false;\n\t\t}\n\t\tsharpV = p.fmt.fmtFlags.sharpV;\n\t\tif (sharpV) {\n\t\t\tp.fmt.fmtFlags.sharp = true;\n\t\t\tp.fmt.fmtFlags.sharpV = false;\n\t\t}\n\t\treturn [plusV, sharpV];\n\t};\n\tpp.prototype.clearSpecialFlags = function() { return this.$val.clearSpecialFlags(); };\n\tpp.ptr.prototype.restoreSpecialFlags = function(plusV, sharpV) {\n\t\tvar $ptr, p, plusV, sharpV;\n\t\tp = this;\n\t\tif (plusV) {\n\t\t\tp.fmt.fmtFlags.plus = false;\n\t\t\tp.fmt.fmtFlags.plusV = true;\n\t\t}\n\t\tif (sharpV) {\n\t\t\tp.fmt.fmtFlags.sharp = false;\n\t\t\tp.fmt.fmtFlags.sharpV = true;\n\t\t}\n\t};\n\tpp.prototype.restoreSpecialFlags = function(plusV, sharpV) { return this.$val.restoreSpecialFlags(plusV, sharpV); };\n\tpp.ptr.prototype.handleMethods = function(verb, depth) {\n\t\tvar $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, depth, formatter, handled, ok, ok$1, p, stringer, v, v$1, verb, $s, $deferred, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; depth = $f.depth; formatter = $f.formatter; handled = $f.handled; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; stringer = $f.stringer; v = $f.v; v$1 = $f.v$1; verb = $f.verb; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\thandled = false;\n\t\tp = this;\n\t\tif (p.erroring) {\n\t\t\treturn handled;\n\t\t}\n\t\t_tuple = $assertType(p.arg, Formatter, true); formatter = _tuple[0]; ok = _tuple[1];\n\t\t/* */ if (ok) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (ok) { */ case 1:\n\t\t\thandled = true;\n\t\t\t_tuple$1 = p.clearSpecialFlags();\n\t\t\t$deferred.push([$methodVal(p, \"restoreSpecialFlags\"), [_tuple$1[0], _tuple$1[1]]]);\n\t\t\t$deferred.push([$methodVal(p, \"catchPanic\"), [p.arg, verb]]);\n\t\t\t$r = formatter.Format(p, verb); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\treturn handled;\n\t\t/* } */ case 2:\n\t\t/* */ if (p.fmt.fmtFlags.sharpV) { $s = 4; continue; }\n\t\t/* */ $s = 5; continue;\n\t\t/* if (p.fmt.fmtFlags.sharpV) { */ case 4:\n\t\t\t_tuple$2 = $assertType(p.arg, GoStringer, true); stringer = _tuple$2[0]; ok$1 = _tuple$2[1];\n\t\t\t/* */ if (ok$1) { $s = 7; continue; }\n\t\t\t/* */ $s = 8; continue;\n\t\t\t/* if (ok$1) { */ case 7:\n\t\t\t\thandled = true;\n\t\t\t\t$deferred.push([$methodVal(p, \"catchPanic\"), [p.arg, verb]]);\n\t\t\t\t_r$2 = stringer.GoString(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\t$r = p.fmt.fmt_s(_r$2); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\treturn handled;\n\t\t\t/* } */ case 8:\n\t\t\t$s = 6; continue;\n\t\t/* } else { */ case 5:\n\t\t\t_ref = verb;\n\t\t\t/* */ if (_ref === 118 || _ref === 115 || _ref === 120 || _ref === 88 || _ref === 113) { $s = 11; continue; }\n\t\t\t/* */ $s = 12; continue;\n\t\t\t/* if (_ref === 118 || _ref === 115 || _ref === 120 || _ref === 88 || _ref === 113) { */ case 11:\n\t\t\t\t_ref$1 = p.arg;\n\t\t\t\t/* */ if ($assertType(_ref$1, $error, true)[1]) { $s = 13; continue; }\n\t\t\t\t/* */ if ($assertType(_ref$1, Stringer, true)[1]) { $s = 14; continue; }\n\t\t\t\t/* */ $s = 15; continue;\n\t\t\t\t/* if ($assertType(_ref$1, $error, true)[1]) { */ case 13:\n\t\t\t\t\tv = _ref$1;\n\t\t\t\t\thandled = true;\n\t\t\t\t\t$deferred.push([$methodVal(p, \"catchPanic\"), [p.arg, verb]]);\n\t\t\t\t\t_r$3 = v.Error(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$4 = p.printArg(new $String(_r$3), verb, depth); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$4;\n\t\t\t\t\treturn handled;\n\t\t\t\t\t$s = 15; continue;\n\t\t\t\t/* } else if ($assertType(_ref$1, Stringer, true)[1]) { */ case 14:\n\t\t\t\t\tv$1 = _ref$1;\n\t\t\t\t\thandled = true;\n\t\t\t\t\t$deferred.push([$methodVal(p, \"catchPanic\"), [p.arg, verb]]);\n\t\t\t\t\t_r$5 = v$1.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$6 = p.printArg(new $String(_r$5), verb, depth); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$6;\n\t\t\t\t\treturn handled;\n\t\t\t\t/* } */ case 15:\n\t\t\t/* } */ case 12:\n\t\t/* } */ case 6:\n\t\thandled = false;\n\t\treturn handled;\n\t\t/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  handled; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: pp.ptr.prototype.handleMethods }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.depth = depth; $f.formatter = formatter; $f.handled = handled; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.stringer = stringer; $f.v = v; $f.v$1 = v$1; $f.verb = verb; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }\n\t};\n\tpp.prototype.handleMethods = function(verb, depth) { return this.$val.handleMethods(verb, depth); };\n\tpp.ptr.prototype.printArg = function(arg, verb, depth) {\n\t\tvar $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _ref$1, arg, depth, f, f$1, f$10, f$11, f$12, f$13, f$14, f$15, f$16, f$17, f$18, f$2, f$3, f$4, f$5, f$6, f$7, f$8, f$9, handled, p, verb, wasString, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _ref$1 = $f._ref$1; arg = $f.arg; depth = $f.depth; f = $f.f; f$1 = $f.f$1; f$10 = $f.f$10; f$11 = $f.f$11; f$12 = $f.f$12; f$13 = $f.f$13; f$14 = $f.f$14; f$15 = $f.f$15; f$16 = $f.f$16; f$17 = $f.f$17; f$18 = $f.f$18; f$2 = $f.f$2; f$3 = $f.f$3; f$4 = $f.f$4; f$5 = $f.f$5; f$6 = $f.f$6; f$7 = $f.f$7; f$8 = $f.f$8; f$9 = $f.f$9; handled = $f.handled; p = $f.p; verb = $f.verb; wasString = $f.wasString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\twasString = false;\n\t\tp = this;\n\t\tp.arg = arg;\n\t\tp.value = new reflect.Value.ptr(ptrType$2.nil, 0, 0);\n\t\t/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 1:\n\t\t\t/* */ if ((verb === 84) || (verb === 118)) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if ((verb === 84) || (verb === 118)) { */ case 3:\n\t\t\t\tp.fmt.pad(nilAngleBytes);\n\t\t\t\t$s = 5; continue;\n\t\t\t/* } else { */ case 4:\n\t\t\t\t$r = p.badVerb(verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 5:\n\t\t\twasString = false;\n\t\t\treturn wasString;\n\t\t/* } */ case 2:\n\t\t_ref = verb;\n\t\t/* */ if (_ref === 84) { $s = 7; continue; }\n\t\t/* */ if (_ref === 112) { $s = 8; continue; }\n\t\t/* */ $s = 9; continue;\n\t\t/* if (_ref === 84) { */ case 7:\n\t\t\t_r$2 = reflect.TypeOf(arg).String(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t_r$3 = p.printArg(new $String(_r$2), 115, 0); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t_r$3;\n\t\t\twasString = false;\n\t\t\treturn wasString;\n\t\t\t$s = 9; continue;\n\t\t/* } else if (_ref === 112) { */ case 8:\n\t\t\t_r$4 = reflect.ValueOf(arg); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t$r = p.fmtPointer(_r$4, verb); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\twasString = false;\n\t\t\treturn wasString;\n\t\t/* } */ case 9:\n\t\t_ref$1 = arg;\n\t\t/* */ if ($assertType(_ref$1, $Bool, true)[1]) { $s = 14; continue; }\n\t\t/* */ if ($assertType(_ref$1, $Float32, true)[1]) { $s = 15; continue; }\n\t\t/* */ if ($assertType(_ref$1, $Float64, true)[1]) { $s = 16; continue; }\n\t\t/* */ if ($assertType(_ref$1, $Complex64, true)[1]) { $s = 17; continue; }\n\t\t/* */ if ($assertType(_ref$1, $Complex128, true)[1]) { $s = 18; continue; }\n\t\t/* */ if ($assertType(_ref$1, $Int, true)[1]) { $s = 19; continue; }\n\t\t/* */ if ($assertType(_ref$1, $Int8, true)[1]) { $s = 20; continue; }\n\t\t/* */ if ($assertType(_ref$1, $Int16, true)[1]) { $s = 21; continue; }\n\t\t/* */ if ($assertType(_ref$1, $Int32, true)[1]) { $s = 22; continue; }\n\t\t/* */ if ($assertType(_ref$1, $Int64, true)[1]) { $s = 23; continue; }\n\t\t/* */ if ($assertType(_ref$1, $Uint, true)[1]) { $s = 24; continue; }\n\t\t/* */ if ($assertType(_ref$1, $Uint8, true)[1]) { $s = 25; continue; }\n\t\t/* */ if ($assertType(_ref$1, $Uint16, true)[1]) { $s = 26; continue; }\n\t\t/* */ if ($assertType(_ref$1, $Uint32, true)[1]) { $s = 27; continue; }\n\t\t/* */ if ($assertType(_ref$1, $Uint64, true)[1]) { $s = 28; continue; }\n\t\t/* */ if ($assertType(_ref$1, $Uintptr, true)[1]) { $s = 29; continue; }\n\t\t/* */ if ($assertType(_ref$1, $String, true)[1]) { $s = 30; continue; }\n\t\t/* */ if ($assertType(_ref$1, sliceType, true)[1]) { $s = 31; continue; }\n\t\t/* */ $s = 32; continue;\n\t\t/* if ($assertType(_ref$1, $Bool, true)[1]) { */ case 14:\n\t\t\tf = _ref$1.$val;\n\t\t\t$r = p.fmtBool(f, verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 33; continue;\n\t\t/* } else if ($assertType(_ref$1, $Float32, true)[1]) { */ case 15:\n\t\t\tf$1 = _ref$1.$val;\n\t\t\t$r = p.fmtFloat32(f$1, verb); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 33; continue;\n\t\t/* } else if ($assertType(_ref$1, $Float64, true)[1]) { */ case 16:\n\t\t\tf$2 = _ref$1.$val;\n\t\t\t$r = p.fmtFloat64(f$2, verb); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 33; continue;\n\t\t/* } else if ($assertType(_ref$1, $Complex64, true)[1]) { */ case 17:\n\t\t\tf$3 = _ref$1.$val;\n\t\t\t$r = p.fmtComplex64(f$3, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 33; continue;\n\t\t/* } else if ($assertType(_ref$1, $Complex128, true)[1]) { */ case 18:\n\t\t\tf$4 = _ref$1.$val;\n\t\t\t$r = p.fmtComplex128(f$4, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 33; continue;\n\t\t/* } else if ($assertType(_ref$1, $Int, true)[1]) { */ case 19:\n\t\t\tf$5 = _ref$1.$val;\n\t\t\t$r = p.fmtInt64(new $Int64(0, f$5), verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 33; continue;\n\t\t/* } else if ($assertType(_ref$1, $Int8, true)[1]) { */ case 20:\n\t\t\tf$6 = _ref$1.$val;\n\t\t\t$r = p.fmtInt64(new $Int64(0, f$6), verb); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 33; continue;\n\t\t/* } else if ($assertType(_ref$1, $Int16, true)[1]) { */ case 21:\n\t\t\tf$7 = _ref$1.$val;\n\t\t\t$r = p.fmtInt64(new $Int64(0, f$7), verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 33; continue;\n\t\t/* } else if ($assertType(_ref$1, $Int32, true)[1]) { */ case 22:\n\t\t\tf$8 = _ref$1.$val;\n\t\t\t$r = p.fmtInt64(new $Int64(0, f$8), verb); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 33; continue;\n\t\t/* } else if ($assertType(_ref$1, $Int64, true)[1]) { */ case 23:\n\t\t\tf$9 = _ref$1.$val;\n\t\t\t$r = p.fmtInt64(f$9, verb); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 33; continue;\n\t\t/* } else if ($assertType(_ref$1, $Uint, true)[1]) { */ case 24:\n\t\t\tf$10 = _ref$1.$val;\n\t\t\t$r = p.fmtUint64(new $Uint64(0, f$10), verb); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 33; continue;\n\t\t/* } else if ($assertType(_ref$1, $Uint8, true)[1]) { */ case 25:\n\t\t\tf$11 = _ref$1.$val;\n\t\t\t$r = p.fmtUint64(new $Uint64(0, f$11), verb); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 33; continue;\n\t\t/* } else if ($assertType(_ref$1, $Uint16, true)[1]) { */ case 26:\n\t\t\tf$12 = _ref$1.$val;\n\t\t\t$r = p.fmtUint64(new $Uint64(0, f$12), verb); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 33; continue;\n\t\t/* } else if ($assertType(_ref$1, $Uint32, true)[1]) { */ case 27:\n\t\t\tf$13 = _ref$1.$val;\n\t\t\t$r = p.fmtUint64(new $Uint64(0, f$13), verb); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 33; continue;\n\t\t/* } else if ($assertType(_ref$1, $Uint64, true)[1]) { */ case 28:\n\t\t\tf$14 = _ref$1.$val;\n\t\t\t$r = p.fmtUint64(f$14, verb); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 33; continue;\n\t\t/* } else if ($assertType(_ref$1, $Uintptr, true)[1]) { */ case 29:\n\t\t\tf$15 = _ref$1.$val;\n\t\t\t$r = p.fmtUint64(new $Uint64(0, f$15.constructor === Number ? f$15 : 1), verb); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 33; continue;\n\t\t/* } else if ($assertType(_ref$1, $String, true)[1]) { */ case 30:\n\t\t\tf$16 = _ref$1.$val;\n\t\t\t$r = p.fmtString(f$16, verb); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\twasString = (verb === 115) || (verb === 118);\n\t\t\t$s = 33; continue;\n\t\t/* } else if ($assertType(_ref$1, sliceType, true)[1]) { */ case 31:\n\t\t\tf$17 = _ref$1.$val;\n\t\t\t$r = p.fmtBytes(f$17, verb, $ifaceNil, depth); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\twasString = verb === 115;\n\t\t\t$s = 33; continue;\n\t\t/* } else { */ case 32:\n\t\t\tf$18 = _ref$1;\n\t\t\t_r$5 = p.handleMethods(verb, depth); /* */ $s = 52; case 52: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\thandled = _r$5;\n\t\t\t/* */ if (handled) { $s = 53; continue; }\n\t\t\t/* */ $s = 54; continue;\n\t\t\t/* if (handled) { */ case 53:\n\t\t\t\twasString = false;\n\t\t\t\treturn wasString;\n\t\t\t/* } */ case 54:\n\t\t\t_r$6 = reflect.ValueOf(arg); /* */ $s = 55; case 55: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_r$7 = p.printReflectValue(_r$6, verb, depth); /* */ $s = 56; case 56: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\twasString = _r$7;\n\t\t\treturn wasString;\n\t\t/* } */ case 33:\n\t\tp.arg = $ifaceNil;\n\t\treturn wasString;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printArg }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._ref$1 = _ref$1; $f.arg = arg; $f.depth = depth; $f.f = f; $f.f$1 = f$1; $f.f$10 = f$10; $f.f$11 = f$11; $f.f$12 = f$12; $f.f$13 = f$13; $f.f$14 = f$14; $f.f$15 = f$15; $f.f$16 = f$16; $f.f$17 = f$17; $f.f$18 = f$18; $f.f$2 = f$2; $f.f$3 = f$3; $f.f$4 = f$4; $f.f$5 = f$5; $f.f$6 = f$6; $f.f$7 = f$7; $f.f$8 = f$8; $f.f$9 = f$9; $f.handled = handled; $f.p = p; $f.verb = verb; $f.wasString = wasString; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tpp.prototype.printArg = function(arg, verb, depth) { return this.$val.printArg(arg, verb, depth); };\n\tpp.ptr.prototype.printValue = function(value, verb, depth) {\n\t\tvar $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, depth, handled, p, value, verb, wasString, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; depth = $f.depth; handled = $f.handled; p = $f.p; value = $f.value; verb = $f.verb; wasString = $f.wasString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\twasString = false;\n\t\tp = this;\n\t\tvalue = value;\n\t\t/* */ if (!value.IsValid()) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!value.IsValid()) { */ case 1:\n\t\t\t/* */ if ((verb === 84) || (verb === 118)) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if ((verb === 84) || (verb === 118)) { */ case 3:\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);\n\t\t\t\t$s = 5; continue;\n\t\t\t/* } else { */ case 4:\n\t\t\t\t$r = p.badVerb(verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 5:\n\t\t\twasString = false;\n\t\t\treturn wasString;\n\t\t/* } */ case 2:\n\t\t_ref = verb;\n\t\t/* */ if (_ref === 84) { $s = 7; continue; }\n\t\t/* */ if (_ref === 112) { $s = 8; continue; }\n\t\t/* */ $s = 9; continue;\n\t\t/* if (_ref === 84) { */ case 7:\n\t\t\t_r$2 = value.Type().String(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t_r$3 = p.printArg(new $String(_r$2), 115, 0); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t_r$3;\n\t\t\twasString = false;\n\t\t\treturn wasString;\n\t\t\t$s = 9; continue;\n\t\t/* } else if (_ref === 112) { */ case 8:\n\t\t\t$r = p.fmtPointer(value, verb); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\twasString = false;\n\t\t\treturn wasString;\n\t\t/* } */ case 9:\n\t\tp.arg = $ifaceNil;\n\t\t/* */ if (value.CanInterface()) { $s = 13; continue; }\n\t\t/* */ $s = 14; continue;\n\t\t/* if (value.CanInterface()) { */ case 13:\n\t\t\t_r$4 = value.Interface(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\tp.arg = _r$4;\n\t\t/* } */ case 14:\n\t\t_r$5 = p.handleMethods(verb, depth); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\thandled = _r$5;\n\t\t/* */ if (handled) { $s = 17; continue; }\n\t\t/* */ $s = 18; continue;\n\t\t/* if (handled) { */ case 17:\n\t\t\twasString = false;\n\t\t\treturn wasString;\n\t\t/* } */ case 18:\n\t\t_r$6 = p.printReflectValue(value, verb, depth); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\twasString = _r$6;\n\t\treturn wasString;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printValue }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f.depth = depth; $f.handled = handled; $f.p = p; $f.value = value; $f.verb = verb; $f.wasString = wasString; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tpp.prototype.printValue = function(value, verb, depth) { return this.$val.printValue(value, verb, depth); };\n\tpp.ptr.prototype.printReflectValue = function(value, verb, depth) {\n\t\tvar $ptr, _i, _i$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _v, a, bytes, depth, f, f$1, i, i$1, i$2, i$3, key, keys, oldValue, p, t, typ, v, v$1, value, value$1, verb, wasString, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _v = $f._v; a = $f.a; bytes = $f.bytes; depth = $f.depth; f = $f.f; f$1 = $f.f$1; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; key = $f.key; keys = $f.keys; oldValue = $f.oldValue; p = $f.p; t = $f.t; typ = $f.typ; v = $f.v; v$1 = $f.v$1; value = $f.value; value$1 = $f.value$1; verb = $f.verb; wasString = $f.wasString; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\twasString = false;\n\t\tp = this;\n\t\tvalue = value;\n\t\toldValue = p.value;\n\t\tp.value = value;\n\t\tf = value;\n\t\t_ref = f.Kind();\n\t\t/* */ if (_ref === 1) { $s = 1; continue; }\n\t\t/* */ if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { $s = 2; continue; }\n\t\t/* */ if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { $s = 3; continue; }\n\t\t/* */ if (_ref === 13 || _ref === 14) { $s = 4; continue; }\n\t\t/* */ if (_ref === 15 || _ref === 16) { $s = 5; continue; }\n\t\t/* */ if (_ref === 24) { $s = 6; continue; }\n\t\t/* */ if (_ref === 21) { $s = 7; continue; }\n\t\t/* */ if (_ref === 25) { $s = 8; continue; }\n\t\t/* */ if (_ref === 20) { $s = 9; continue; }\n\t\t/* */ if (_ref === 17 || _ref === 23) { $s = 10; continue; }\n\t\t/* */ if (_ref === 22) { $s = 11; continue; }\n\t\t/* */ if (_ref === 18 || _ref === 19 || _ref === 26) { $s = 12; continue; }\n\t\t/* */ $s = 13; continue;\n\t\t/* switch (0) { default: if (_ref === 1) { */ case 1:\n\t\t\t$r = p.fmtBool(f.Bool(), verb); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 14; continue;\n\t\t/* } else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { */ case 2:\n\t\t\t$r = p.fmtInt64(f.Int(), verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 14; continue;\n\t\t/* } else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { */ case 3:\n\t\t\t$r = p.fmtUint64(f.Uint(), verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 14; continue;\n\t\t/* } else if (_ref === 13 || _ref === 14) { */ case 4:\n\t\t\t_r$2 = f.Type().Size(); /* */ $s = 21; case 21: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t/* */ if (_r$2 === 4) { $s = 18; continue; }\n\t\t\t/* */ $s = 19; continue;\n\t\t\t/* if (_r$2 === 4) { */ case 18:\n\t\t\t\t$r = p.fmtFloat32($fround(f.Float()), verb); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 20; continue;\n\t\t\t/* } else { */ case 19:\n\t\t\t\t$r = p.fmtFloat64(f.Float(), verb); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 20:\n\t\t\t$s = 14; continue;\n\t\t/* } else if (_ref === 15 || _ref === 16) { */ case 5:\n\t\t\t_r$3 = f.Type().Size(); /* */ $s = 27; case 27: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t/* */ if (_r$3 === 8) { $s = 24; continue; }\n\t\t\t/* */ $s = 25; continue;\n\t\t\t/* if (_r$3 === 8) { */ case 24:\n\t\t\t\t$r = p.fmtComplex64((x = f.Complex(), new $Complex64(x.$real, x.$imag)), verb); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 26; continue;\n\t\t\t/* } else { */ case 25:\n\t\t\t\t$r = p.fmtComplex128(f.Complex(), verb); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 26:\n\t\t\t$s = 14; continue;\n\t\t/* } else if (_ref === 24) { */ case 6:\n\t\t\t_r$4 = f.String(); /* */ $s = 30; case 30: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t$r = p.fmtString(_r$4, verb); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 14; continue;\n\t\t/* } else if (_ref === 21) { */ case 7:\n\t\t\t/* */ if (p.fmt.fmtFlags.sharpV) { $s = 32; continue; }\n\t\t\t/* */ $s = 33; continue;\n\t\t\t/* if (p.fmt.fmtFlags.sharpV) { */ case 32:\n\t\t\t\t_r$5 = f.Type().String(); /* */ $s = 35; case 35: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t\t_r$6 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$5); /* */ $s = 36; case 36: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t\t_r$6;\n\t\t\t\tif (f.IsNil()) {\n\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(\"(nil)\");\n\t\t\t\t\t/* break; */ $s = 14; continue;\n\t\t\t\t}\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);\n\t\t\t\t$s = 34; continue;\n\t\t\t/* } else { */ case 33:\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(mapBytes);\n\t\t\t/* } */ case 34:\n\t\t\t_r$7 = f.MapKeys(); /* */ $s = 37; case 37: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\tkeys = _r$7;\n\t\t\t_ref$1 = keys;\n\t\t\t_i = 0;\n\t\t\t/* while (true) { */ case 38:\n\t\t\t\t/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 39; continue; }\n\t\t\t\ti = _i;\n\t\t\t\tkey = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError(\"index out of range\") : _ref$1.$array[_ref$1.$offset + _i]);\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tif (p.fmt.fmtFlags.sharpV) {\n\t\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_r$8 = p.printValue(key, verb, depth + 1 >> 0); /* */ $s = 40; case 40: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t\t_r$8;\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);\n\t\t\t\t_r$9 = f.MapIndex(key); /* */ $s = 41; case 41: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\t\t_r$10 = p.printValue(_r$9, verb, depth + 1 >> 0); /* */ $s = 42; case 42: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\t\t_r$10;\n\t\t\t\t_i++;\n\t\t\t/* } */ $s = 38; continue; case 39:\n\t\t\tif (p.fmt.fmtFlags.sharpV) {\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);\n\t\t\t} else {\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);\n\t\t\t}\n\t\t\t$s = 14; continue;\n\t\t/* } else if (_ref === 25) { */ case 8:\n\t\t\t/* */ if (p.fmt.fmtFlags.sharpV) { $s = 43; continue; }\n\t\t\t/* */ $s = 44; continue;\n\t\t\t/* if (p.fmt.fmtFlags.sharpV) { */ case 43:\n\t\t\t\t_r$11 = value.Type().String(); /* */ $s = 45; case 45: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t\t\t_r$12 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$11); /* */ $s = 46; case 46: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\t\t\t_r$12;\n\t\t\t/* } */ case 44:\n\t\t\tp.add(123);\n\t\t\tv = f;\n\t\t\tt = v.Type();\n\t\t\ti$1 = 0;\n\t\t\t/* while (true) { */ case 47:\n\t\t\t\t/* if (!(i$1 < v.NumField())) { break; } */ if(!(i$1 < v.NumField())) { $s = 48; continue; }\n\t\t\t\tif (i$1 > 0) {\n\t\t\t\t\tif (p.fmt.fmtFlags.sharpV) {\n\t\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/* */ if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { $s = 49; continue; }\n\t\t\t\t/* */ $s = 50; continue;\n\t\t\t\t/* if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { */ case 49:\n\t\t\t\t\t_r$13 = t.Field(i$1); /* */ $s = 51; case 51: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }\n\t\t\t\t\tf$1 = $clone(_r$13, reflect.StructField);\n\t\t\t\t\t/* */ if (!(f$1.Name === \"\")) { $s = 52; continue; }\n\t\t\t\t\t/* */ $s = 53; continue;\n\t\t\t\t\t/* if (!(f$1.Name === \"\")) { */ case 52:\n\t\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(f$1.Name);\n\t\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);\n\t\t\t\t\t/* } */ case 53:\n\t\t\t\t/* } */ case 50:\n\t\t\t\t_r$14 = getField(v, i$1); /* */ $s = 54; case 54: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }\n\t\t\t\t_r$15 = p.printValue(_r$14, verb, depth + 1 >> 0); /* */ $s = 55; case 55: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }\n\t\t\t\t_r$15;\n\t\t\t\ti$1 = i$1 + (1) >> 0;\n\t\t\t/* } */ $s = 47; continue; case 48:\n\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);\n\t\t\t$s = 14; continue;\n\t\t/* } else if (_ref === 20) { */ case 9:\n\t\t\t_r$16 = f.Elem(); /* */ $s = 56; case 56: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }\n\t\t\tvalue$1 = _r$16;\n\t\t\t/* */ if (!value$1.IsValid()) { $s = 57; continue; }\n\t\t\t/* */ $s = 58; continue;\n\t\t\t/* if (!value$1.IsValid()) { */ case 57:\n\t\t\t\t/* */ if (p.fmt.fmtFlags.sharpV) { $s = 60; continue; }\n\t\t\t\t/* */ $s = 61; continue;\n\t\t\t\t/* if (p.fmt.fmtFlags.sharpV) { */ case 60:\n\t\t\t\t\t_r$17 = f.Type().String(); /* */ $s = 63; case 63: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$18 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$17); /* */ $s = 64; case 64: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$18;\n\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilParenBytes);\n\t\t\t\t\t$s = 62; continue;\n\t\t\t\t/* } else { */ case 61:\n\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);\n\t\t\t\t/* } */ case 62:\n\t\t\t\t$s = 59; continue;\n\t\t\t/* } else { */ case 58:\n\t\t\t\t_r$19 = p.printValue(value$1, verb, depth + 1 >> 0); /* */ $s = 65; case 65: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }\n\t\t\t\twasString = _r$19;\n\t\t\t/* } */ case 59:\n\t\t\t$s = 14; continue;\n\t\t/* } else if (_ref === 17 || _ref === 23) { */ case 10:\n\t\t\ttyp = f.Type();\n\t\t\t_r$20 = typ.Elem(); /* */ $s = 69; case 69: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }\n\t\t\t_r$21 = _r$20.Kind(); /* */ $s = 70; case 70: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }\n\t\t\tif (!(_r$21 === 8)) { _v = false; $s = 68; continue s; }\n\t\t\t_r$22 = typ.Elem(); /* */ $s = 71; case 71: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }\n\t\t\t_v = $interfaceIsEqual(_r$22, byteType) || (verb === 115) || (verb === 113) || (verb === 120); case 68:\n\t\t\t/* */ if (_v) { $s = 66; continue; }\n\t\t\t/* */ $s = 67; continue;\n\t\t\t/* if (_v) { */ case 66:\n\t\t\t\tbytes = sliceType.nil;\n\t\t\t\t/* */ if (f.Kind() === 23) { $s = 72; continue; }\n\t\t\t\t/* */ if (f.CanAddr()) { $s = 73; continue; }\n\t\t\t\t/* */ $s = 74; continue;\n\t\t\t\t/* if (f.Kind() === 23) { */ case 72:\n\t\t\t\t\t_r$23 = f.Bytes(); /* */ $s = 76; case 76: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }\n\t\t\t\t\tbytes = _r$23;\n\t\t\t\t\t$s = 75; continue;\n\t\t\t\t/* } else if (f.CanAddr()) { */ case 73:\n\t\t\t\t\t_r$24 = f.Slice(0, f.Len()); /* */ $s = 77; case 77: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$25 = _r$24.Bytes(); /* */ $s = 78; case 78: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }\n\t\t\t\t\tbytes = _r$25;\n\t\t\t\t\t$s = 75; continue;\n\t\t\t\t/* } else { */ case 74:\n\t\t\t\t\tbytes = $makeSlice(sliceType, f.Len());\n\t\t\t\t\t_ref$2 = bytes;\n\t\t\t\t\t_i$1 = 0;\n\t\t\t\t\t/* while (true) { */ case 79:\n\t\t\t\t\t\t/* if (!(_i$1 < _ref$2.$length)) { break; } */ if(!(_i$1 < _ref$2.$length)) { $s = 80; continue; }\n\t\t\t\t\t\ti$2 = _i$1;\n\t\t\t\t\t\t_r$26 = f.Index(i$2); /* */ $s = 81; case 81: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }\n\t\t\t\t\t\t_r$27 = _r$26.Uint(); /* */ $s = 82; case 82: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }\n\t\t\t\t\t\t((i$2 < 0 || i$2 >= bytes.$length) ? $throwRuntimeError(\"index out of range\") : bytes.$array[bytes.$offset + i$2] = (_r$27.$low << 24 >>> 24));\n\t\t\t\t\t\t_i$1++;\n\t\t\t\t\t/* } */ $s = 79; continue; case 80:\n\t\t\t\t/* } */ case 75:\n\t\t\t\t$r = p.fmtBytes(bytes, verb, typ, depth); /* */ $s = 83; case 83: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\twasString = verb === 115;\n\t\t\t\t/* break; */ $s = 14; continue;\n\t\t\t/* } */ case 67:\n\t\t\t/* */ if (p.fmt.fmtFlags.sharpV) { $s = 84; continue; }\n\t\t\t/* */ $s = 85; continue;\n\t\t\t/* if (p.fmt.fmtFlags.sharpV) { */ case 84:\n\t\t\t\t_r$28 = value.Type().String(); /* */ $s = 87; case 87: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }\n\t\t\t\t_r$29 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$28); /* */ $s = 88; case 88: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }\n\t\t\t\t_r$29;\n\t\t\t\tif ((f.Kind() === 23) && f.IsNil()) {\n\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(\"(nil)\");\n\t\t\t\t\t/* break; */ $s = 14; continue;\n\t\t\t\t}\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);\n\t\t\t\t$s = 86; continue;\n\t\t\t/* } else { */ case 85:\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);\n\t\t\t/* } */ case 86:\n\t\t\ti$3 = 0;\n\t\t\t/* while (true) { */ case 89:\n\t\t\t\t/* if (!(i$3 < f.Len())) { break; } */ if(!(i$3 < f.Len())) { $s = 90; continue; }\n\t\t\t\tif (i$3 > 0) {\n\t\t\t\t\tif (p.fmt.fmtFlags.sharpV) {\n\t\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_r$30 = f.Index(i$3); /* */ $s = 91; case 91: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }\n\t\t\t\t_r$31 = p.printValue(_r$30, verb, depth + 1 >> 0); /* */ $s = 92; case 92: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }\n\t\t\t\t_r$31;\n\t\t\t\ti$3 = i$3 + (1) >> 0;\n\t\t\t/* } */ $s = 89; continue; case 90:\n\t\t\tif (p.fmt.fmtFlags.sharpV) {\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);\n\t\t\t} else {\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);\n\t\t\t}\n\t\t\t$s = 14; continue;\n\t\t/* } else if (_ref === 22) { */ case 11:\n\t\t\tv$1 = f.Pointer();\n\t\t\t/* */ if (!((v$1 === 0)) && (depth === 0)) { $s = 93; continue; }\n\t\t\t/* */ $s = 94; continue;\n\t\t\t/* if (!((v$1 === 0)) && (depth === 0)) { */ case 93:\n\t\t\t\t_r$32 = f.Elem(); /* */ $s = 95; case 95: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }\n\t\t\t\ta = _r$32;\n\t\t\t\t_ref$3 = a.Kind();\n\t\t\t\t/* */ if (_ref$3 === 17 || _ref$3 === 23) { $s = 96; continue; }\n\t\t\t\t/* */ if (_ref$3 === 25) { $s = 97; continue; }\n\t\t\t\t/* */ if (_ref$3 === 21) { $s = 98; continue; }\n\t\t\t\t/* */ $s = 99; continue;\n\t\t\t\t/* if (_ref$3 === 17 || _ref$3 === 23) { */ case 96:\n\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);\n\t\t\t\t\t_r$33 = p.printValue(a, verb, depth + 1 >> 0); /* */ $s = 100; case 100: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$33;\n\t\t\t\t\t/* break BigSwitch; */ $s = 14; continue s;\n\t\t\t\t\t$s = 99; continue;\n\t\t\t\t/* } else if (_ref$3 === 25) { */ case 97:\n\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);\n\t\t\t\t\t_r$34 = p.printValue(a, verb, depth + 1 >> 0); /* */ $s = 101; case 101: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$34;\n\t\t\t\t\t/* break BigSwitch; */ $s = 14; continue s;\n\t\t\t\t\t$s = 99; continue;\n\t\t\t\t/* } else if (_ref$3 === 21) { */ case 98:\n\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);\n\t\t\t\t\t_r$35 = p.printValue(a, verb, depth + 1 >> 0); /* */ $s = 102; case 102: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$35;\n\t\t\t\t\t/* break BigSwitch; */ $s = 14; continue s;\n\t\t\t\t/* } */ case 99:\n\t\t\t/* } */ case 94:\n\t\t\t$r = p.fmtPointer(value, verb); /* */ $s = 103; case 103: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 14; continue;\n\t\t/* } else if (_ref === 18 || _ref === 19 || _ref === 26) { */ case 12:\n\t\t\t$r = p.fmtPointer(value, verb); /* */ $s = 104; case 104: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 14; continue;\n\t\t/* } else { */ case 13:\n\t\t\t$r = p.unknownType(f); /* */ $s = 105; case 105: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } } */ case 14:\n\t\tp.value = oldValue;\n\t\twasString = wasString;\n\t\treturn wasString;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printReflectValue }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._v = _v; $f.a = a; $f.bytes = bytes; $f.depth = depth; $f.f = f; $f.f$1 = f$1; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.key = key; $f.keys = keys; $f.oldValue = oldValue; $f.p = p; $f.t = t; $f.typ = typ; $f.v = v; $f.v$1 = v$1; $f.value = value; $f.value$1 = value$1; $f.verb = verb; $f.wasString = wasString; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tpp.prototype.printReflectValue = function(value, verb, depth) { return this.$val.printReflectValue(value, verb, depth); };\n\tintFromArg = function(a, argNum) {\n\t\tvar $ptr, _tuple, a, argNum, isInt, newArgNum, num;\n\t\tnum = 0;\n\t\tisInt = false;\n\t\tnewArgNum = 0;\n\t\tnewArgNum = argNum;\n\t\tif (argNum < a.$length) {\n\t\t\t_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError(\"index out of range\") : a.$array[a.$offset + argNum]), $Int, true); num = _tuple[0]; isInt = _tuple[1];\n\t\t\tnewArgNum = argNum + 1 >> 0;\n\t\t}\n\t\treturn [num, isInt, newArgNum];\n\t};\n\tparseArgNumber = function(format) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, format, i, index, newi, ok, ok$1, wid, width;\n\t\tindex = 0;\n\t\twid = 0;\n\t\tok = false;\n\t\ti = 1;\n\t\twhile (true) {\n\t\t\tif (!(i < format.length)) { break; }\n\t\t\tif (format.charCodeAt(i) === 93) {\n\t\t\t\t_tuple = parsenum(format, 1, i); width = _tuple[0]; ok$1 = _tuple[1]; newi = _tuple[2];\n\t\t\t\tif (!ok$1 || !((newi === i))) {\n\t\t\t\t\t_tmp = 0; _tmp$1 = i + 1 >> 0; _tmp$2 = false; index = _tmp; wid = _tmp$1; ok = _tmp$2;\n\t\t\t\t\treturn [index, wid, ok];\n\t\t\t\t}\n\t\t\t\t_tmp$3 = width - 1 >> 0; _tmp$4 = i + 1 >> 0; _tmp$5 = true; index = _tmp$3; wid = _tmp$4; ok = _tmp$5;\n\t\t\t\treturn [index, wid, ok];\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\t_tmp$6 = 0; _tmp$7 = 1; _tmp$8 = false; index = _tmp$6; wid = _tmp$7; ok = _tmp$8;\n\t\treturn [index, wid, ok];\n\t};\n\tpp.ptr.prototype.argNumber = function(argNum, format, i, numArgs) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, argNum, format, found, i, index, newArgNum, newi, numArgs, ok, p, wid;\n\t\tnewArgNum = 0;\n\t\tnewi = 0;\n\t\tfound = false;\n\t\tp = this;\n\t\tif (format.length <= i || !((format.charCodeAt(i) === 91))) {\n\t\t\t_tmp = argNum; _tmp$1 = i; _tmp$2 = false; newArgNum = _tmp; newi = _tmp$1; found = _tmp$2;\n\t\t\treturn [newArgNum, newi, found];\n\t\t}\n\t\tp.reordered = true;\n\t\t_tuple = parseArgNumber(format.substring(i)); index = _tuple[0]; wid = _tuple[1]; ok = _tuple[2];\n\t\tif (ok && 0 <= index && index < numArgs) {\n\t\t\t_tmp$3 = index; _tmp$4 = i + wid >> 0; _tmp$5 = true; newArgNum = _tmp$3; newi = _tmp$4; found = _tmp$5;\n\t\t\treturn [newArgNum, newi, found];\n\t\t}\n\t\tp.goodArgNum = false;\n\t\t_tmp$6 = argNum; _tmp$7 = i + wid >> 0; _tmp$8 = true; newArgNum = _tmp$6; newi = _tmp$7; found = _tmp$8;\n\t\treturn [newArgNum, newi, found];\n\t};\n\tpp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };\n\tpp.ptr.prototype.doPrintf = function(format, a) {\n\t\tvar $ptr, _r$2, _r$3, _r$4, _r$5, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, arg$1, argNum, c, end, format, i, lasti, p, w, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; a = $f.a; afterIndex = $f.afterIndex; arg = $f.arg; arg$1 = $f.arg$1; argNum = $f.argNum; c = $f.c; end = $f.end; format = $f.format; i = $f.i; lasti = $f.lasti; p = $f.p; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\tend = format.length;\n\t\targNum = 0;\n\t\tafterIndex = false;\n\t\tp.reordered = false;\n\t\ti = 0;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 2; continue; }\n\t\t\tp.goodArgNum = true;\n\t\t\tlasti = i;\n\t\t\twhile (true) {\n\t\t\t\tif (!(i < end && !((format.charCodeAt(i) === 37)))) { break; }\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t\tif (i > lasti) {\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(format.substring(lasti, i));\n\t\t\t}\n\t\t\tif (i >= end) {\n\t\t\t\t/* break; */ $s = 2; continue;\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t\tp.fmt.clearflags();\n\t\t\tF:\n\t\t\twhile (true) {\n\t\t\t\tif (!(i < end)) { break; }\n\t\t\t\t_ref = format.charCodeAt(i);\n\t\t\t\tif (_ref === 35) {\n\t\t\t\t\tp.fmt.fmtFlags.sharp = true;\n\t\t\t\t} else if (_ref === 48) {\n\t\t\t\t\tp.fmt.fmtFlags.zero = true;\n\t\t\t\t} else if (_ref === 43) {\n\t\t\t\t\tp.fmt.fmtFlags.plus = true;\n\t\t\t\t} else if (_ref === 45) {\n\t\t\t\t\tp.fmt.fmtFlags.minus = true;\n\t\t\t\t} else if (_ref === 32) {\n\t\t\t\t\tp.fmt.fmtFlags.space = true;\n\t\t\t\t} else {\n\t\t\t\t\tbreak F;\n\t\t\t\t}\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t\t_tuple = p.argNumber(argNum, format, i, a.$length); argNum = _tuple[0]; i = _tuple[1]; afterIndex = _tuple[2];\n\t\t\tif (i < end && (format.charCodeAt(i) === 42)) {\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t_tuple$1 = intFromArg(a, argNum); p.fmt.wid = _tuple$1[0]; p.fmt.fmtFlags.widPresent = _tuple$1[1]; argNum = _tuple$1[2];\n\t\t\t\tif (!p.fmt.fmtFlags.widPresent) {\n\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(badWidthBytes);\n\t\t\t\t}\n\t\t\t\tafterIndex = false;\n\t\t\t} else {\n\t\t\t\t_tuple$2 = parsenum(format, i, end); p.fmt.wid = _tuple$2[0]; p.fmt.fmtFlags.widPresent = _tuple$2[1]; i = _tuple$2[2];\n\t\t\t\tif (afterIndex && p.fmt.fmtFlags.widPresent) {\n\t\t\t\t\tp.goodArgNum = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) {\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t\tif (afterIndex) {\n\t\t\t\t\tp.goodArgNum = false;\n\t\t\t\t}\n\t\t\t\t_tuple$3 = p.argNumber(argNum, format, i, a.$length); argNum = _tuple$3[0]; i = _tuple$3[1]; afterIndex = _tuple$3[2];\n\t\t\t\tif (format.charCodeAt(i) === 42) {\n\t\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t\t_tuple$4 = intFromArg(a, argNum); p.fmt.prec = _tuple$4[0]; p.fmt.fmtFlags.precPresent = _tuple$4[1]; argNum = _tuple$4[2];\n\t\t\t\t\tif (!p.fmt.fmtFlags.precPresent) {\n\t\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(badPrecBytes);\n\t\t\t\t\t}\n\t\t\t\t\tafterIndex = false;\n\t\t\t\t} else {\n\t\t\t\t\t_tuple$5 = parsenum(format, i, end); p.fmt.prec = _tuple$5[0]; p.fmt.fmtFlags.precPresent = _tuple$5[1]; i = _tuple$5[2];\n\t\t\t\t\tif (!p.fmt.fmtFlags.precPresent) {\n\t\t\t\t\t\tp.fmt.prec = 0;\n\t\t\t\t\t\tp.fmt.fmtFlags.precPresent = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!afterIndex) {\n\t\t\t\t_tuple$6 = p.argNumber(argNum, format, i, a.$length); argNum = _tuple$6[0]; i = _tuple$6[1]; afterIndex = _tuple$6[2];\n\t\t\t}\n\t\t\t/* */ if (i >= end) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (i >= end) { */ case 3:\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(noVerbBytes);\n\t\t\t\t/* continue; */ $s = 1; continue;\n\t\t\t/* } */ case 4:\n\t\t\t_tuple$7 = utf8.DecodeRuneInString(format.substring(i)); c = _tuple$7[0]; w = _tuple$7[1];\n\t\t\ti = i + (w) >> 0;\n\t\t\t/* */ if (c === 37) { $s = 5; continue; }\n\t\t\t/* */ $s = 6; continue;\n\t\t\t/* if (c === 37) { */ case 5:\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(37);\n\t\t\t\t/* continue; */ $s = 1; continue;\n\t\t\t/* } */ case 6:\n\t\t\t/* */ if (!p.goodArgNum) { $s = 7; continue; }\n\t\t\t/* */ if (argNum >= a.$length) { $s = 8; continue; }\n\t\t\t/* */ $s = 9; continue;\n\t\t\t/* if (!p.goodArgNum) { */ case 7:\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(percentBangBytes);\n\t\t\t\tp.add(c);\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(badIndexBytes);\n\t\t\t\t/* continue; */ $s = 1; continue;\n\t\t\t\t$s = 9; continue;\n\t\t\t/* } else if (argNum >= a.$length) { */ case 8:\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(percentBangBytes);\n\t\t\t\tp.add(c);\n\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(missingBytes);\n\t\t\t\t/* continue; */ $s = 1; continue;\n\t\t\t/* } */ case 9:\n\t\t\targ = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError(\"index out of range\") : a.$array[a.$offset + argNum]);\n\t\t\targNum = argNum + (1) >> 0;\n\t\t\tif (c === 118) {\n\t\t\t\tif (p.fmt.fmtFlags.sharp) {\n\t\t\t\t\tp.fmt.fmtFlags.sharp = false;\n\t\t\t\t\tp.fmt.fmtFlags.sharpV = true;\n\t\t\t\t}\n\t\t\t\tif (p.fmt.fmtFlags.plus) {\n\t\t\t\t\tp.fmt.fmtFlags.plus = false;\n\t\t\t\t\tp.fmt.fmtFlags.plusV = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_r$2 = p.printArg(arg, c, 0); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t_r$2;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\t/* */ if (!p.reordered && argNum < a.$length) { $s = 11; continue; }\n\t\t/* */ $s = 12; continue;\n\t\t/* if (!p.reordered && argNum < a.$length) { */ case 11:\n\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(extraBytes);\n\t\t\t/* while (true) { */ case 13:\n\t\t\t\t/* if (!(argNum < a.$length)) { break; } */ if(!(argNum < a.$length)) { $s = 14; continue; }\n\t\t\t\targ$1 = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError(\"index out of range\") : a.$array[a.$offset + argNum]);\n\t\t\t\t/* */ if (!($interfaceIsEqual(arg$1, $ifaceNil))) { $s = 15; continue; }\n\t\t\t\t/* */ $s = 16; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(arg$1, $ifaceNil))) { */ case 15:\n\t\t\t\t\t_r$3 = reflect.TypeOf(arg$1).String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$4 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$3); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$4;\n\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);\n\t\t\t\t/* } */ case 16:\n\t\t\t\t_r$5 = p.printArg(arg$1, 118, 0); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t\t_r$5;\n\t\t\t\tif ((argNum + 1 >> 0) < a.$length) {\n\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);\n\t\t\t\t}\n\t\t\t\targNum = argNum + (1) >> 0;\n\t\t\t/* } */ $s = 13; continue; case 14:\n\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);\n\t\t/* } */ case 12:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.a = a; $f.afterIndex = afterIndex; $f.arg = arg; $f.arg$1 = arg$1; $f.argNum = argNum; $f.c = c; $f.end = end; $f.format = format; $f.i = i; $f.lasti = lasti; $f.p = p; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tpp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };\n\tpp.ptr.prototype.doPrint = function(a, addspace, addnewline) {\n\t\tvar $ptr, _r$2, _r$3, _v, a, addnewline, addspace, arg, argNum, isString, p, prevString, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _v = $f._v; a = $f.a; addnewline = $f.addnewline; addspace = $f.addspace; arg = $f.arg; argNum = $f.argNum; isString = $f.isString; p = $f.p; prevString = $f.prevString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\tprevString = false;\n\t\targNum = 0;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(argNum < a.$length)) { break; } */ if(!(argNum < a.$length)) { $s = 2; continue; }\n\t\t\tp.fmt.clearflags();\n\t\t\targ = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError(\"index out of range\") : a.$array[a.$offset + argNum]);\n\t\t\t/* */ if (argNum > 0) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (argNum > 0) { */ case 3:\n\t\t\t\tif (!(!($interfaceIsEqual(arg, $ifaceNil)))) { _v = false; $s = 5; continue s; }\n\t\t\t\t_r$2 = reflect.TypeOf(arg).Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\t_v = _r$2 === 24; case 5:\n\t\t\t\tisString = _v;\n\t\t\t\tif (addspace || !isString && !prevString) {\n\t\t\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);\n\t\t\t\t}\n\t\t\t/* } */ case 4:\n\t\t\t_r$3 = p.printArg(arg, 118, 0); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\tprevString = _r$3;\n\t\t\targNum = argNum + (1) >> 0;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\tif (addnewline) {\n\t\t\t(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(10);\n\t\t}\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrint }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._v = _v; $f.a = a; $f.addnewline = addnewline; $f.addspace = addspace; $f.arg = arg; $f.argNum = argNum; $f.isString = isString; $f.p = p; $f.prevString = prevString; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tpp.prototype.doPrint = function(a, addspace, addnewline) { return this.$val.doPrint(a, addspace, addnewline); };\n\tss.ptr.prototype.Read = function(buf) {\n\t\tvar $ptr, _tmp, _tmp$1, buf, err, n, s;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\ts = this;\n\t\t_tmp = 0; _tmp$1 = errors.New(\"ScanState's Read should not be called. Use ReadRune\"); n = _tmp; err = _tmp$1;\n\t\treturn [n, err];\n\t};\n\tss.prototype.Read = function(buf) { return this.$val.Read(buf); };\n\tss.ptr.prototype.ReadRune = function() {\n\t\tvar $ptr, _r$2, _tuple, err, r, s, size, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tr = 0;\n\t\tsize = 0;\n\t\terr = $ifaceNil;\n\t\ts = this;\n\t\tif (s.peekRune >= 0) {\n\t\t\ts.count = s.count + (1) >> 0;\n\t\t\tr = s.peekRune;\n\t\t\tsize = utf8.RuneLen(r);\n\t\t\ts.prevRune = r;\n\t\t\ts.peekRune = -1;\n\t\t\treturn [r, size, err];\n\t\t}\n\t\tif (s.atEOF || s.ssave.nlIsEnd && (s.prevRune === 10) || s.count >= s.ssave.argLimit) {\n\t\t\terr = io.EOF;\n\t\t\treturn [r, size, err];\n\t\t}\n\t\t_r$2 = s.rr.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_tuple = _r$2; r = _tuple[0]; size = _tuple[1]; err = _tuple[2];\n\t\tif ($interfaceIsEqual(err, $ifaceNil)) {\n\t\t\ts.count = s.count + (1) >> 0;\n\t\t\ts.prevRune = r;\n\t\t} else if ($interfaceIsEqual(err, io.EOF)) {\n\t\t\ts.atEOF = true;\n\t\t}\n\t\treturn [r, size, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.ReadRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tss.prototype.ReadRune = function() { return this.$val.ReadRune(); };\n\tss.ptr.prototype.Width = function() {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, ok, s, wid;\n\t\twid = 0;\n\t\tok = false;\n\t\ts = this;\n\t\tif (s.ssave.maxWid === 1073741824) {\n\t\t\t_tmp = 0; _tmp$1 = false; wid = _tmp; ok = _tmp$1;\n\t\t\treturn [wid, ok];\n\t\t}\n\t\t_tmp$2 = s.ssave.maxWid; _tmp$3 = true; wid = _tmp$2; ok = _tmp$3;\n\t\treturn [wid, ok];\n\t};\n\tss.prototype.Width = function() { return this.$val.Width(); };\n\tss.ptr.prototype.getRune = function() {\n\t\tvar $ptr, _r$2, _tuple, err, r, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tr = 0;\n\t\ts = this;\n\t\t_r$2 = s.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_tuple = _r$2; r = _tuple[0]; err = _tuple[2];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\tif ($interfaceIsEqual(err, io.EOF)) {\n\t\t\t\tr = -1;\n\t\t\t\treturn r;\n\t\t\t}\n\t\t\ts.error(err);\n\t\t}\n\t\treturn r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.getRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tss.prototype.getRune = function() { return this.$val.getRune(); };\n\tss.ptr.prototype.UnreadRune = function() {\n\t\tvar $ptr, _r$2, _tuple, ok, s, u, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; ok = $f.ok; s = $f.s; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ts = this;\n\t\t_tuple = $assertType(s.rr, runeUnreader, true); u = _tuple[0]; ok = _tuple[1];\n\t\t/* */ if (ok) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (ok) { */ case 1:\n\t\t\t_r$2 = u.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t_r$2;\n\t\t\t$s = 3; continue;\n\t\t/* } else { */ case 2:\n\t\t\ts.peekRune = s.prevRune;\n\t\t/* } */ case 3:\n\t\ts.prevRune = -1;\n\t\ts.count = s.count - (1) >> 0;\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.UnreadRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.ok = ok; $f.s = s; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };\n\tss.ptr.prototype.error = function(err) {\n\t\tvar $ptr, err, s, x;\n\t\ts = this;\n\t\t$panic((x = new scanError.ptr(err), new x.constructor.elem(x)));\n\t};\n\tss.prototype.error = function(err) { return this.$val.error(err); };\n\tss.ptr.prototype.errorString = function(err) {\n\t\tvar $ptr, err, s, x;\n\t\ts = this;\n\t\t$panic((x = new scanError.ptr(errors.New(err)), new x.constructor.elem(x)));\n\t};\n\tss.prototype.errorString = function(err) { return this.$val.errorString(err); };\n\tss.ptr.prototype.Token = function(skipSpace, f) {\n\t\tvar $ptr, _r$2, err, f, s, skipSpace, tok, $s, $deferred, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; err = $f.err; f = $f.f; s = $f.s; skipSpace = $f.skipSpace; tok = $f.tok; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\terr = [err];\n\t\ttok = sliceType.nil;\n\t\terr[0] = $ifaceNil;\n\t\ts = this;\n\t\t$deferred.push([(function(err) { return function() {\n\t\t\tvar $ptr, _tuple, e, ok, se;\n\t\t\te = $recover();\n\t\t\tif (!($interfaceIsEqual(e, $ifaceNil))) {\n\t\t\t\t_tuple = $assertType(e, scanError, true); se = $clone(_tuple[0], scanError); ok = _tuple[1];\n\t\t\t\tif (ok) {\n\t\t\t\t\terr[0] = se.err;\n\t\t\t\t} else {\n\t\t\t\t\t$panic(e);\n\t\t\t\t}\n\t\t\t}\n\t\t}; })(err), []]);\n\t\tif (f === $throwNilPointerError) {\n\t\t\tf = notSpace;\n\t\t}\n\t\ts.buf = $subslice(s.buf, 0, 0);\n\t\t_r$2 = s.token(skipSpace, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\ttok = _r$2;\n\t\treturn [tok, err[0]];\n\t\t/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tok, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ss.ptr.prototype.Token }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.err = err; $f.f = f; $f.s = s; $f.skipSpace = skipSpace; $f.tok = tok; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }\n\t};\n\tss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };\n\tisSpace = function(r) {\n\t\tvar $ptr, _i, _ref, r, rng, rx;\n\t\tif (r >= 65536) {\n\t\t\treturn false;\n\t\t}\n\t\trx = (r << 16 >>> 16);\n\t\t_ref = space;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\trng = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]), arrayType);\n\t\t\tif (rx < rng[0]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (rx <= rng[1]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t_i++;\n\t\t}\n\t\treturn false;\n\t};\n\tnotSpace = function(r) {\n\t\tvar $ptr, r;\n\t\treturn !isSpace(r);\n\t};\n\tss.ptr.prototype.SkipSpace = function() {\n\t\tvar $ptr, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ts = this;\n\t\t$r = s.skipSpace(false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.SkipSpace }; } $f.$ptr = $ptr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };\n\tss.ptr.prototype.free = function(old) {\n\t\tvar $ptr, old, s;\n\t\ts = this;\n\t\told = $clone(old, ssave);\n\t\tif (old.validSave) {\n\t\t\t$copy(s.ssave, old, ssave);\n\t\t\treturn;\n\t\t}\n\t\tif (s.buf.$capacity > 1024) {\n\t\t\treturn;\n\t\t}\n\t\ts.buf = $subslice(s.buf, 0, 0);\n\t\ts.rr = $ifaceNil;\n\t\tssFree.Put(s);\n\t};\n\tss.prototype.free = function(old) { return this.$val.free(old); };\n\tss.ptr.prototype.skipSpace = function(stopAtNewline) {\n\t\tvar $ptr, _r$2, _r$3, _r$4, _v, r, s, stopAtNewline, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _v = $f._v; r = $f.r; s = $f.s; stopAtNewline = $f.stopAtNewline; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ts = this;\n\t\t/* while (true) { */ case 1:\n\t\t\t_r$2 = s.getRune(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\tr = _r$2;\n\t\t\tif (r === -1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!(r === 13)) { _v = false; $s = 6; continue s; }\n\t\t\t_r$3 = s.peek(\"\\n\"); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t_v = _r$3; case 6:\n\t\t\t/* */ if (_v) { $s = 4; continue; }\n\t\t\t/* */ $s = 5; continue;\n\t\t\t/* if (_v) { */ case 4:\n\t\t\t\t/* continue; */ $s = 1; continue;\n\t\t\t/* } */ case 5:\n\t\t\t/* */ if (r === 10) { $s = 8; continue; }\n\t\t\t/* */ $s = 9; continue;\n\t\t\t/* if (r === 10) { */ case 8:\n\t\t\t\tif (stopAtNewline) {\n\t\t\t\t\t/* break; */ $s = 2; continue;\n\t\t\t\t}\n\t\t\t\tif (s.ssave.nlIsSpace) {\n\t\t\t\t\t/* continue; */ $s = 1; continue;\n\t\t\t\t}\n\t\t\t\ts.errorString(\"unexpected newline\");\n\t\t\t\treturn;\n\t\t\t/* } */ case 9:\n\t\t\t/* */ if (!isSpace(r)) { $s = 10; continue; }\n\t\t\t/* */ $s = 11; continue;\n\t\t\t/* if (!isSpace(r)) { */ case 10:\n\t\t\t\t_r$4 = s.UnreadRune(); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t\t_r$4;\n\t\t\t\t/* break; */ $s = 2; continue;\n\t\t\t/* } */ case 11:\n\t\t/* } */ $s = 1; continue; case 2:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.skipSpace }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._v = _v; $f.r = r; $f.s = s; $f.stopAtNewline = stopAtNewline; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tss.prototype.skipSpace = function(stopAtNewline) { return this.$val.skipSpace(stopAtNewline); };\n\tss.ptr.prototype.token = function(skipSpace, f) {\n\t\tvar $ptr, _r$2, _r$3, _r$4, f, r, s, skipSpace, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; f = $f.f; r = $f.r; s = $f.s; skipSpace = $f.skipSpace; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ts = this;\n\t\t/* */ if (skipSpace) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (skipSpace) { */ case 1:\n\t\t\t$r = s.skipSpace(false); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 2:\n\t\t/* while (true) { */ case 4:\n\t\t\t_r$2 = s.getRune(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\tr = _r$2;\n\t\t\tif (r === -1) {\n\t\t\t\t/* break; */ $s = 5; continue;\n\t\t\t}\n\t\t\t_r$3 = f(r); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t/* */ if (!_r$3) { $s = 7; continue; }\n\t\t\t/* */ $s = 8; continue;\n\t\t\t/* if (!_r$3) { */ case 7:\n\t\t\t\t_r$4 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t\t_r$4;\n\t\t\t\t/* break; */ $s = 5; continue;\n\t\t\t/* } */ case 8:\n\t\t\t(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r);\n\t\t/* } */ $s = 4; continue; case 5:\n\t\treturn (x = s.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.token }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.f = f; $f.r = r; $f.s = s; $f.skipSpace = skipSpace; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };\n\tindexRune = function(s, r) {\n\t\tvar $ptr, _i, _ref, _rune, c, i, r, s;\n\t\t_ref = s;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.length)) { break; }\n\t\t\t_rune = $decodeRune(_ref, _i);\n\t\t\ti = _i;\n\t\t\tc = _rune[0];\n\t\t\tif (c === r) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t\t_i += _rune[1];\n\t\t}\n\t\treturn -1;\n\t};\n\tss.ptr.prototype.peek = function(ok) {\n\t\tvar $ptr, _r$2, _r$3, ok, r, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; ok = $f.ok; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ts = this;\n\t\t_r$2 = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\tr = _r$2;\n\t\t/* */ if (!((r === -1))) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (!((r === -1))) { */ case 2:\n\t\t\t_r$3 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t_r$3;\n\t\t/* } */ case 3:\n\t\treturn indexRune(ok, r) >= 0;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.peek }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.ok = ok; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tss.prototype.peek = function(ok) { return this.$val.peek(ok); };\n\tptrType$25.methods = [{prop: \"clearflags\", name: \"clearflags\", pkg: \"fmt\", typ: $funcType([], [], false)}, {prop: \"init\", name: \"init\", pkg: \"fmt\", typ: $funcType([ptrType$1], [], false)}, {prop: \"computePadding\", name: \"computePadding\", pkg: \"fmt\", typ: $funcType([$Int], [sliceType, $Int, $Int], false)}, {prop: \"writePadding\", name: \"writePadding\", pkg: \"fmt\", typ: $funcType([$Int, sliceType], [], false)}, {prop: \"pad\", name: \"pad\", pkg: \"fmt\", typ: $funcType([sliceType], [], false)}, {prop: \"padString\", name: \"padString\", pkg: \"fmt\", typ: $funcType([$String], [], false)}, {prop: \"fmt_boolean\", name: \"fmt_boolean\", pkg: \"fmt\", typ: $funcType([$Bool], [], false)}, {prop: \"integer\", name: \"integer\", pkg: \"fmt\", typ: $funcType([$Int64, $Uint64, $Bool, $String], [], false)}, {prop: \"truncate\", name: \"truncate\", pkg: \"fmt\", typ: $funcType([$String], [$String], false)}, {prop: \"fmt_s\", name: \"fmt_s\", pkg: \"fmt\", typ: $funcType([$String], [], false)}, {prop: \"fmt_sbx\", name: \"fmt_sbx\", pkg: \"fmt\", typ: $funcType([$String, sliceType, $String], [], false)}, {prop: \"fmt_sx\", name: \"fmt_sx\", pkg: \"fmt\", typ: $funcType([$String, $String], [], false)}, {prop: \"fmt_bx\", name: \"fmt_bx\", pkg: \"fmt\", typ: $funcType([sliceType, $String], [], false)}, {prop: \"fmt_q\", name: \"fmt_q\", pkg: \"fmt\", typ: $funcType([$String], [], false)}, {prop: \"fmt_qc\", name: \"fmt_qc\", pkg: \"fmt\", typ: $funcType([$Int64], [], false)}, {prop: \"formatFloat\", name: \"formatFloat\", pkg: \"fmt\", typ: $funcType([$Float64, $Uint8, $Int, $Int], [], false)}, {prop: \"fmt_e64\", name: \"fmt_e64\", pkg: \"fmt\", typ: $funcType([$Float64], [], false)}, {prop: \"fmt_E64\", name: \"fmt_E64\", pkg: \"fmt\", typ: $funcType([$Float64], [], false)}, {prop: \"fmt_f64\", name: \"fmt_f64\", pkg: \"fmt\", typ: $funcType([$Float64], [], false)}, {prop: \"fmt_g64\", name: \"fmt_g64\", pkg: \"fmt\", typ: $funcType([$Float64], [], false)}, {prop: \"fmt_G64\", name: \"fmt_G64\", pkg: \"fmt\", typ: $funcType([$Float64], [], false)}, {prop: \"fmt_fb64\", name: \"fmt_fb64\", pkg: \"fmt\", typ: $funcType([$Float64], [], false)}, {prop: \"fmt_e32\", name: \"fmt_e32\", pkg: \"fmt\", typ: $funcType([$Float32], [], false)}, {prop: \"fmt_E32\", name: \"fmt_E32\", pkg: \"fmt\", typ: $funcType([$Float32], [], false)}, {prop: \"fmt_f32\", name: \"fmt_f32\", pkg: \"fmt\", typ: $funcType([$Float32], [], false)}, {prop: \"fmt_g32\", name: \"fmt_g32\", pkg: \"fmt\", typ: $funcType([$Float32], [], false)}, {prop: \"fmt_G32\", name: \"fmt_G32\", pkg: \"fmt\", typ: $funcType([$Float32], [], false)}, {prop: \"fmt_fb32\", name: \"fmt_fb32\", pkg: \"fmt\", typ: $funcType([$Float32], [], false)}, {prop: \"fmt_c64\", name: \"fmt_c64\", pkg: \"fmt\", typ: $funcType([$Complex64, $Int32], [], false)}, {prop: \"fmt_c128\", name: \"fmt_c128\", pkg: \"fmt\", typ: $funcType([$Complex128, $Int32], [], false)}, {prop: \"fmt_complex\", name: \"fmt_complex\", pkg: \"fmt\", typ: $funcType([$Float64, $Float64, $Int, $Int32], [], false)}];\n\tptrType$1.methods = [{prop: \"Write\", name: \"Write\", pkg: \"\", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: \"WriteString\", name: \"WriteString\", pkg: \"\", typ: $funcType([$String], [$Int, $error], false)}, {prop: \"WriteByte\", name: \"WriteByte\", pkg: \"\", typ: $funcType([$Uint8], [$error], false)}, {prop: \"WriteRune\", name: \"WriteRune\", pkg: \"\", typ: $funcType([$Int32], [$error], false)}];\n\tptrType.methods = [{prop: \"free\", name: \"free\", pkg: \"fmt\", typ: $funcType([], [], false)}, {prop: \"Width\", name: \"Width\", pkg: \"\", typ: $funcType([], [$Int, $Bool], false)}, {prop: \"Precision\", name: \"Precision\", pkg: \"\", typ: $funcType([], [$Int, $Bool], false)}, {prop: \"Flag\", name: \"Flag\", pkg: \"\", typ: $funcType([$Int], [$Bool], false)}, {prop: \"add\", name: \"add\", pkg: \"fmt\", typ: $funcType([$Int32], [], false)}, {prop: \"Write\", name: \"Write\", pkg: \"\", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: \"unknownType\", name: \"unknownType\", pkg: \"fmt\", typ: $funcType([reflect.Value], [], false)}, {prop: \"badVerb\", name: \"badVerb\", pkg: \"fmt\", typ: $funcType([$Int32], [], false)}, {prop: \"fmtBool\", name: \"fmtBool\", pkg: \"fmt\", typ: $funcType([$Bool, $Int32], [], false)}, {prop: \"fmtC\", name: \"fmtC\", pkg: \"fmt\", typ: $funcType([$Int64], [], false)}, {prop: \"fmtInt64\", name: \"fmtInt64\", pkg: \"fmt\", typ: $funcType([$Int64, $Int32], [], false)}, {prop: \"fmt0x64\", name: \"fmt0x64\", pkg: \"fmt\", typ: $funcType([$Uint64, $Bool], [], false)}, {prop: \"fmtUnicode\", name: \"fmtUnicode\", pkg: \"fmt\", typ: $funcType([$Int64], [], false)}, {prop: \"fmtUint64\", name: \"fmtUint64\", pkg: \"fmt\", typ: $funcType([$Uint64, $Int32], [], false)}, {prop: \"fmtFloat32\", name: \"fmtFloat32\", pkg: \"fmt\", typ: $funcType([$Float32, $Int32], [], false)}, {prop: \"fmtFloat64\", name: \"fmtFloat64\", pkg: \"fmt\", typ: $funcType([$Float64, $Int32], [], false)}, {prop: \"fmtComplex64\", name: \"fmtComplex64\", pkg: \"fmt\", typ: $funcType([$Complex64, $Int32], [], false)}, {prop: \"fmtComplex128\", name: \"fmtComplex128\", pkg: \"fmt\", typ: $funcType([$Complex128, $Int32], [], false)}, {prop: \"fmtString\", name: \"fmtString\", pkg: \"fmt\", typ: $funcType([$String, $Int32], [], false)}, {prop: \"fmtBytes\", name: \"fmtBytes\", pkg: \"fmt\", typ: $funcType([sliceType, $Int32, reflect.Type, $Int], [], false)}, {prop: \"fmtPointer\", name: \"fmtPointer\", pkg: \"fmt\", typ: $funcType([reflect.Value, $Int32], [], false)}, {prop: \"catchPanic\", name: \"catchPanic\", pkg: \"fmt\", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: \"clearSpecialFlags\", name: \"clearSpecialFlags\", pkg: \"fmt\", typ: $funcType([], [$Bool, $Bool], false)}, {prop: \"restoreSpecialFlags\", name: \"restoreSpecialFlags\", pkg: \"fmt\", typ: $funcType([$Bool, $Bool], [], false)}, {prop: \"handleMethods\", name: \"handleMethods\", pkg: \"fmt\", typ: $funcType([$Int32, $Int], [$Bool], false)}, {prop: \"printArg\", name: \"printArg\", pkg: \"fmt\", typ: $funcType([$emptyInterface, $Int32, $Int], [$Bool], false)}, {prop: \"printValue\", name: \"printValue\", pkg: \"fmt\", typ: $funcType([reflect.Value, $Int32, $Int], [$Bool], false)}, {prop: \"printReflectValue\", name: \"printReflectValue\", pkg: \"fmt\", typ: $funcType([reflect.Value, $Int32, $Int], [$Bool], false)}, {prop: \"argNumber\", name: \"argNumber\", pkg: \"fmt\", typ: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: \"doPrintf\", name: \"doPrintf\", pkg: \"fmt\", typ: $funcType([$String, sliceType$1], [], false)}, {prop: \"doPrint\", name: \"doPrint\", pkg: \"fmt\", typ: $funcType([sliceType$1, $Bool, $Bool], [], false)}];\n\tptrType$5.methods = [{prop: \"Read\", name: \"Read\", pkg: \"\", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: \"ReadRune\", name: \"ReadRune\", pkg: \"\", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: \"Width\", name: \"Width\", pkg: \"\", typ: $funcType([], [$Int, $Bool], false)}, {prop: \"getRune\", name: \"getRune\", pkg: \"fmt\", typ: $funcType([], [$Int32], false)}, {prop: \"mustReadRune\", name: \"mustReadRune\", pkg: \"fmt\", typ: $funcType([], [$Int32], false)}, {prop: \"UnreadRune\", name: \"UnreadRune\", pkg: \"\", typ: $funcType([], [$error], false)}, {prop: \"error\", name: \"error\", pkg: \"fmt\", typ: $funcType([$error], [], false)}, {prop: \"errorString\", name: \"errorString\", pkg: \"fmt\", typ: $funcType([$String], [], false)}, {prop: \"Token\", name: \"Token\", pkg: \"\", typ: $funcType([$Bool, funcType], [sliceType, $error], false)}, {prop: \"SkipSpace\", name: \"SkipSpace\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"free\", name: \"free\", pkg: \"fmt\", typ: $funcType([ssave], [], false)}, {prop: \"skipSpace\", name: \"skipSpace\", pkg: \"fmt\", typ: $funcType([$Bool], [], false)}, {prop: \"token\", name: \"token\", pkg: \"fmt\", typ: $funcType([$Bool, funcType], [sliceType], false)}, {prop: \"consume\", name: \"consume\", pkg: \"fmt\", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: \"peek\", name: \"peek\", pkg: \"fmt\", typ: $funcType([$String], [$Bool], false)}, {prop: \"notEOF\", name: \"notEOF\", pkg: \"fmt\", typ: $funcType([], [], false)}, {prop: \"accept\", name: \"accept\", pkg: \"fmt\", typ: $funcType([$String], [$Bool], false)}, {prop: \"okVerb\", name: \"okVerb\", pkg: \"fmt\", typ: $funcType([$Int32, $String, $String], [$Bool], false)}, {prop: \"scanBool\", name: \"scanBool\", pkg: \"fmt\", typ: $funcType([$Int32], [$Bool], false)}, {prop: \"getBase\", name: \"getBase\", pkg: \"fmt\", typ: $funcType([$Int32], [$Int, $String], false)}, {prop: \"scanNumber\", name: \"scanNumber\", pkg: \"fmt\", typ: $funcType([$String, $Bool], [$String], false)}, {prop: \"scanRune\", name: \"scanRune\", pkg: \"fmt\", typ: $funcType([$Int], [$Int64], false)}, {prop: \"scanBasePrefix\", name: \"scanBasePrefix\", pkg: \"fmt\", typ: $funcType([], [$Int, $String, $Bool], false)}, {prop: \"scanInt\", name: \"scanInt\", pkg: \"fmt\", typ: $funcType([$Int32, $Int], [$Int64], false)}, {prop: \"scanUint\", name: \"scanUint\", pkg: \"fmt\", typ: $funcType([$Int32, $Int], [$Uint64], false)}, {prop: \"floatToken\", name: \"floatToken\", pkg: \"fmt\", typ: $funcType([], [$String], false)}, {prop: \"complexTokens\", name: \"complexTokens\", pkg: \"fmt\", typ: $funcType([], [$String, $String], false)}, {prop: \"convertFloat\", name: \"convertFloat\", pkg: \"fmt\", typ: $funcType([$String, $Int], [$Float64], false)}, {prop: \"scanComplex\", name: \"scanComplex\", pkg: \"fmt\", typ: $funcType([$Int32, $Int], [$Complex128], false)}, {prop: \"convertString\", name: \"convertString\", pkg: \"fmt\", typ: $funcType([$Int32], [$String], false)}, {prop: \"quotedString\", name: \"quotedString\", pkg: \"fmt\", typ: $funcType([], [$String], false)}, {prop: \"hexDigit\", name: \"hexDigit\", pkg: \"fmt\", typ: $funcType([$Int32], [$Int], false)}, {prop: \"hexByte\", name: \"hexByte\", pkg: \"fmt\", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: \"hexString\", name: \"hexString\", pkg: \"fmt\", typ: $funcType([], [$String], false)}, {prop: \"scanOne\", name: \"scanOne\", pkg: \"fmt\", typ: $funcType([$Int32, $emptyInterface], [], false)}, {prop: \"doScan\", name: \"doScan\", pkg: \"fmt\", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: \"advance\", name: \"advance\", pkg: \"fmt\", typ: $funcType([$String], [$Int], false)}, {prop: \"doScanf\", name: \"doScanf\", pkg: \"fmt\", typ: $funcType([$String, sliceType$1], [$Int, $error], false)}];\n\tfmtFlags.init([{prop: \"widPresent\", name: \"widPresent\", pkg: \"fmt\", typ: $Bool, tag: \"\"}, {prop: \"precPresent\", name: \"precPresent\", pkg: \"fmt\", typ: $Bool, tag: \"\"}, {prop: \"minus\", name: \"minus\", pkg: \"fmt\", typ: $Bool, tag: \"\"}, {prop: \"plus\", name: \"plus\", pkg: \"fmt\", typ: $Bool, tag: \"\"}, {prop: \"sharp\", name: \"sharp\", pkg: \"fmt\", typ: $Bool, tag: \"\"}, {prop: \"space\", name: \"space\", pkg: \"fmt\", typ: $Bool, tag: \"\"}, {prop: \"unicode\", name: \"unicode\", pkg: \"fmt\", typ: $Bool, tag: \"\"}, {prop: \"uniQuote\", name: \"uniQuote\", pkg: \"fmt\", typ: $Bool, tag: \"\"}, {prop: \"zero\", name: \"zero\", pkg: \"fmt\", typ: $Bool, tag: \"\"}, {prop: \"plusV\", name: \"plusV\", pkg: \"fmt\", typ: $Bool, tag: \"\"}, {prop: \"sharpV\", name: \"sharpV\", pkg: \"fmt\", typ: $Bool, tag: \"\"}]);\n\tfmt.init([{prop: \"intbuf\", name: \"intbuf\", pkg: \"fmt\", typ: arrayType$2, tag: \"\"}, {prop: \"buf\", name: \"buf\", pkg: \"fmt\", typ: ptrType$1, tag: \"\"}, {prop: \"wid\", name: \"wid\", pkg: \"fmt\", typ: $Int, tag: \"\"}, {prop: \"prec\", name: \"prec\", pkg: \"fmt\", typ: $Int, tag: \"\"}, {prop: \"fmtFlags\", name: \"\", pkg: \"fmt\", typ: fmtFlags, tag: \"\"}]);\n\tState.init([{prop: \"Flag\", name: \"Flag\", pkg: \"\", typ: $funcType([$Int], [$Bool], false)}, {prop: \"Precision\", name: \"Precision\", pkg: \"\", typ: $funcType([], [$Int, $Bool], false)}, {prop: \"Width\", name: \"Width\", pkg: \"\", typ: $funcType([], [$Int, $Bool], false)}, {prop: \"Write\", name: \"Write\", pkg: \"\", typ: $funcType([sliceType], [$Int, $error], false)}]);\n\tFormatter.init([{prop: \"Format\", name: \"Format\", pkg: \"\", typ: $funcType([State, $Int32], [], false)}]);\n\tStringer.init([{prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}]);\n\tGoStringer.init([{prop: \"GoString\", name: \"GoString\", pkg: \"\", typ: $funcType([], [$String], false)}]);\n\tbuffer.init($Uint8);\n\tpp.init([{prop: \"n\", name: \"n\", pkg: \"fmt\", typ: $Int, tag: \"\"}, {prop: \"panicking\", name: \"panicking\", pkg: \"fmt\", typ: $Bool, tag: \"\"}, {prop: \"erroring\", name: \"erroring\", pkg: \"fmt\", typ: $Bool, tag: \"\"}, {prop: \"buf\", name: \"buf\", pkg: \"fmt\", typ: buffer, tag: \"\"}, {prop: \"arg\", name: \"arg\", pkg: \"fmt\", typ: $emptyInterface, tag: \"\"}, {prop: \"value\", name: \"value\", pkg: \"fmt\", typ: reflect.Value, tag: \"\"}, {prop: \"reordered\", name: \"reordered\", pkg: \"fmt\", typ: $Bool, tag: \"\"}, {prop: \"goodArgNum\", name: \"goodArgNum\", pkg: \"fmt\", typ: $Bool, tag: \"\"}, {prop: \"runeBuf\", name: \"runeBuf\", pkg: \"fmt\", typ: arrayType$1, tag: \"\"}, {prop: \"fmt\", name: \"fmt\", pkg: \"fmt\", typ: fmt, tag: \"\"}]);\n\truneUnreader.init([{prop: \"UnreadRune\", name: \"UnreadRune\", pkg: \"\", typ: $funcType([], [$error], false)}]);\n\tscanError.init([{prop: \"err\", name: \"err\", pkg: \"fmt\", typ: $error, tag: \"\"}]);\n\tss.init([{prop: \"rr\", name: \"rr\", pkg: \"fmt\", typ: io.RuneReader, tag: \"\"}, {prop: \"buf\", name: \"buf\", pkg: \"fmt\", typ: buffer, tag: \"\"}, {prop: \"peekRune\", name: \"peekRune\", pkg: \"fmt\", typ: $Int32, tag: \"\"}, {prop: \"prevRune\", name: \"prevRune\", pkg: \"fmt\", typ: $Int32, tag: \"\"}, {prop: \"count\", name: \"count\", pkg: \"fmt\", typ: $Int, tag: \"\"}, {prop: \"atEOF\", name: \"atEOF\", pkg: \"fmt\", typ: $Bool, tag: \"\"}, {prop: \"ssave\", name: \"\", pkg: \"fmt\", typ: ssave, tag: \"\"}]);\n\tssave.init([{prop: \"validSave\", name: \"validSave\", pkg: \"fmt\", typ: $Bool, tag: \"\"}, {prop: \"nlIsEnd\", name: \"nlIsEnd\", pkg: \"fmt\", typ: $Bool, tag: \"\"}, {prop: \"nlIsSpace\", name: \"nlIsSpace\", pkg: \"fmt\", typ: $Bool, tag: \"\"}, {prop: \"argLimit\", name: \"argLimit\", pkg: \"fmt\", typ: $Int, tag: \"\"}, {prop: \"limit\", name: \"limit\", pkg: \"fmt\", typ: $Int, tag: \"\"}, {prop: \"maxWid\", name: \"maxWid\", pkg: \"fmt\", typ: $Int, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = reflect.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tpadZeroBytes = $makeSlice(sliceType, 65);\n\t\tpadSpaceBytes = $makeSlice(sliceType, 65);\n\t\ttrueBytes = new sliceType($stringToBytes(\"true\"));\n\t\tfalseBytes = new sliceType($stringToBytes(\"false\"));\n\t\tcommaSpaceBytes = new sliceType($stringToBytes(\", \"));\n\t\tnilAngleBytes = new sliceType($stringToBytes(\"<nil>\"));\n\t\tnilParenBytes = new sliceType($stringToBytes(\"(nil)\"));\n\t\tnilBytes = new sliceType($stringToBytes(\"nil\"));\n\t\tmapBytes = new sliceType($stringToBytes(\"map[\"));\n\t\tpercentBangBytes = new sliceType($stringToBytes(\"%!\"));\n\t\tmissingBytes = new sliceType($stringToBytes(\"(MISSING)\"));\n\t\tbadIndexBytes = new sliceType($stringToBytes(\"(BADINDEX)\"));\n\t\tpanicBytes = new sliceType($stringToBytes(\"(PANIC=\"));\n\t\textraBytes = new sliceType($stringToBytes(\"%!(EXTRA \"));\n\t\tirparenBytes = new sliceType($stringToBytes(\"i)\"));\n\t\tbytesBytes = new sliceType($stringToBytes(\"[]byte{\"));\n\t\tbadWidthBytes = new sliceType($stringToBytes(\"%!(BADWIDTH)\"));\n\t\tbadPrecBytes = new sliceType($stringToBytes(\"%!(BADPREC)\"));\n\t\tnoVerbBytes = new sliceType($stringToBytes(\"%!(NOVERB)\"));\n\t\tppFree = new sync.Pool.ptr(0, 0, sliceType$1.nil, (function() {\n\t\t\tvar $ptr;\n\t\t\treturn new pp.ptr();\n\t\t}));\n\t\t_r = reflect.TypeOf(new $Int(0)).Bits(); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tintBits = _r;\n\t\t_r$1 = reflect.TypeOf(new $Uintptr(0)).Bits(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\tuintptrBits = _r$1;\n\t\tbyteType = reflect.TypeOf(new $Uint8(0));\n\t\tspace = new sliceType$2([$toNativeArray($kindUint16, [9, 13]), $toNativeArray($kindUint16, [32, 32]), $toNativeArray($kindUint16, [133, 133]), $toNativeArray($kindUint16, [160, 160]), $toNativeArray($kindUint16, [5760, 5760]), $toNativeArray($kindUint16, [8192, 8202]), $toNativeArray($kindUint16, [8232, 8233]), $toNativeArray($kindUint16, [8239, 8239]), $toNativeArray($kindUint16, [8287, 8287]), $toNativeArray($kindUint16, [12288, 12288])]);\n\t\tssFree = new sync.Pool.ptr(0, 0, sliceType$1.nil, (function() {\n\t\t\tvar $ptr;\n\t\t\treturn new ss.ptr();\n\t\t}));\n\t\tcomplexError = errors.New(\"syntax error scanning complex number\");\n\t\tboolError = errors.New(\"syntax error scanning boolean\");\n\t\tinit();\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"encoding/binary\"] = (function() {\n\tvar $pkg = {}, $init, errors, io, math, reflect, ByteOrder, littleEndian, decoder, encoder, arrayType, sliceType, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, sliceType$6, sliceType$7, ptrType$8, ptrType$9, overflow, Read, Write, dataSize, sizeof, intDataSize;\n\terrors = $packages[\"errors\"];\n\tio = $packages[\"io\"];\n\tmath = $packages[\"math\"];\n\treflect = $packages[\"reflect\"];\n\tByteOrder = $pkg.ByteOrder = $newType(8, $kindInterface, \"binary.ByteOrder\", \"ByteOrder\", \"encoding/binary\", null);\n\tlittleEndian = $pkg.littleEndian = $newType(0, $kindStruct, \"binary.littleEndian\", \"littleEndian\", \"encoding/binary\", function() {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\treturn;\n\t\t}\n\t});\n\tdecoder = $pkg.decoder = $newType(0, $kindStruct, \"binary.decoder\", \"decoder\", \"encoding/binary\", function(order_, buf_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.order = $ifaceNil;\n\t\t\tthis.buf = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.order = order_;\n\t\tthis.buf = buf_;\n\t});\n\tencoder = $pkg.encoder = $newType(0, $kindStruct, \"binary.encoder\", \"encoder\", \"encoding/binary\", function(order_, buf_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.order = $ifaceNil;\n\t\t\tthis.buf = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.order = order_;\n\t\tthis.buf = buf_;\n\t});\n\tarrayType = $arrayType($Uint8, 8);\n\tsliceType = $sliceType($Uint8);\n\tptrType = $ptrType($Int8);\n\tptrType$1 = $ptrType($Uint8);\n\tptrType$2 = $ptrType($Int16);\n\tptrType$3 = $ptrType($Uint16);\n\tptrType$4 = $ptrType($Int32);\n\tptrType$5 = $ptrType($Uint32);\n\tptrType$6 = $ptrType($Int64);\n\tptrType$7 = $ptrType($Uint64);\n\tsliceType$1 = $sliceType($Int8);\n\tsliceType$2 = $sliceType($Int16);\n\tsliceType$3 = $sliceType($Uint16);\n\tsliceType$4 = $sliceType($Int32);\n\tsliceType$5 = $sliceType($Uint32);\n\tsliceType$6 = $sliceType($Int64);\n\tsliceType$7 = $sliceType($Uint64);\n\tptrType$8 = $ptrType(decoder);\n\tptrType$9 = $ptrType(encoder);\n\tlittleEndian.ptr.prototype.Uint16 = function(b) {\n\t\tvar $ptr, b;\n\t\treturn (((0 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 0]) << 16 >>> 16) | (((1 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 1]) << 16 >>> 16) << 8 << 16 >>> 16)) >>> 0;\n\t};\n\tlittleEndian.prototype.Uint16 = function(b) { return this.$val.Uint16(b); };\n\tlittleEndian.ptr.prototype.PutUint16 = function(b, v) {\n\t\tvar $ptr, b, v;\n\t\t(0 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 0] = (v << 24 >>> 24));\n\t\t(1 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 1] = ((v >>> 8 << 16 >>> 16) << 24 >>> 24));\n\t};\n\tlittleEndian.prototype.PutUint16 = function(b, v) { return this.$val.PutUint16(b, v); };\n\tlittleEndian.ptr.prototype.Uint32 = function(b) {\n\t\tvar $ptr, b;\n\t\treturn (((((((0 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 0]) >>> 0) | (((1 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 1]) >>> 0) << 8 >>> 0)) >>> 0) | (((2 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 2]) >>> 0) << 16 >>> 0)) >>> 0) | (((3 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 3]) >>> 0) << 24 >>> 0)) >>> 0;\n\t};\n\tlittleEndian.prototype.Uint32 = function(b) { return this.$val.Uint32(b); };\n\tlittleEndian.ptr.prototype.PutUint32 = function(b, v) {\n\t\tvar $ptr, b, v;\n\t\t(0 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 0] = (v << 24 >>> 24));\n\t\t(1 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 1] = ((v >>> 8 >>> 0) << 24 >>> 24));\n\t\t(2 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 2] = ((v >>> 16 >>> 0) << 24 >>> 24));\n\t\t(3 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 3] = ((v >>> 24 >>> 0) << 24 >>> 24));\n\t};\n\tlittleEndian.prototype.PutUint32 = function(b, v) { return this.$val.PutUint32(b, v); };\n\tlittleEndian.ptr.prototype.Uint64 = function(b) {\n\t\tvar $ptr, b, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;\n\t\treturn (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new $Uint64(0, (0 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 0])), x$7 = $shiftLeft64(new $Uint64(0, (1 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 1])), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64(new $Uint64(0, (2 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 2])), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64(new $Uint64(0, (3 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 3])), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64(new $Uint64(0, (4 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 4])), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64(new $Uint64(0, (5 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 5])), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64(new $Uint64(0, (6 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 6])), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64(new $Uint64(0, (7 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 7])), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));\n\t};\n\tlittleEndian.prototype.Uint64 = function(b) { return this.$val.Uint64(b); };\n\tlittleEndian.ptr.prototype.PutUint64 = function(b, v) {\n\t\tvar $ptr, b, v;\n\t\t(0 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 0] = (v.$low << 24 >>> 24));\n\t\t(1 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 1] = ($shiftRightUint64(v, 8).$low << 24 >>> 24));\n\t\t(2 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 2] = ($shiftRightUint64(v, 16).$low << 24 >>> 24));\n\t\t(3 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 3] = ($shiftRightUint64(v, 24).$low << 24 >>> 24));\n\t\t(4 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 4] = ($shiftRightUint64(v, 32).$low << 24 >>> 24));\n\t\t(5 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 5] = ($shiftRightUint64(v, 40).$low << 24 >>> 24));\n\t\t(6 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 6] = ($shiftRightUint64(v, 48).$low << 24 >>> 24));\n\t\t(7 >= b.$length ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + 7] = ($shiftRightUint64(v, 56).$low << 24 >>> 24));\n\t};\n\tlittleEndian.prototype.PutUint64 = function(b, v) { return this.$val.PutUint64(b, v); };\n\tlittleEndian.ptr.prototype.String = function() {\n\t\tvar $ptr;\n\t\treturn \"LittleEndian\";\n\t};\n\tlittleEndian.prototype.String = function() { return this.$val.String(); };\n\tlittleEndian.ptr.prototype.GoString = function() {\n\t\tvar $ptr;\n\t\treturn \"binary.LittleEndian\";\n\t};\n\tlittleEndian.prototype.GoString = function() { return this.$val.GoString(); };\n\tRead = function(r, order, data) {\n\t\tvar $ptr, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _i$6, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _ref$7, _ref$8, _tuple, _tuple$1, b, bs, d, data, data$1, data$10, data$11, data$12, data$13, data$14, data$15, data$16, data$2, data$3, data$4, data$5, data$6, data$7, data$8, data$9, err, err$1, i, i$1, i$2, i$3, i$4, i$5, i$6, n, order, r, size, v, x, x$1, x$2, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _i$6 = $f._i$6; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _ref$7 = $f._ref$7; _ref$8 = $f._ref$8; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; bs = $f.bs; d = $f.d; data = $f.data; data$1 = $f.data$1; data$10 = $f.data$10; data$11 = $f.data$11; data$12 = $f.data$12; data$13 = $f.data$13; data$14 = $f.data$14; data$15 = $f.data$15; data$16 = $f.data$16; data$2 = $f.data$2; data$3 = $f.data$3; data$4 = $f.data$4; data$5 = $f.data$5; data$6 = $f.data$6; data$7 = $f.data$7; data$8 = $f.data$8; data$9 = $f.data$9; err = $f.err; err$1 = $f.err$1; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; i$5 = $f.i$5; i$6 = $f.i$6; n = $f.n; order = $f.order; r = $f.r; size = $f.size; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = intDataSize(data);\n\t\t/* */ if (!((n === 0))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!((n === 0))) { */ case 1:\n\t\t\tb = $clone(arrayType.zero(), arrayType);\n\t\t\tbs = sliceType.nil;\n\t\t\tif (n > 8) {\n\t\t\t\tbs = $makeSlice(sliceType, n);\n\t\t\t} else {\n\t\t\t\tbs = $subslice(new sliceType(b), 0, n);\n\t\t\t}\n\t\t\t_r = io.ReadFull(r, bs); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t_tuple = _r; err = _tuple[1];\n\t\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }\n\t\t\t/* */ $s = 5; continue;\n\t\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:\n\t\t\t\treturn err;\n\t\t\t/* } */ case 5:\n\t\t\t_ref = data;\n\t\t\t/* */ if ($assertType(_ref, ptrType, true)[1]) { $s = 6; continue; }\n\t\t\t/* */ if ($assertType(_ref, ptrType$1, true)[1]) { $s = 7; continue; }\n\t\t\t/* */ if ($assertType(_ref, ptrType$2, true)[1]) { $s = 8; continue; }\n\t\t\t/* */ if ($assertType(_ref, ptrType$3, true)[1]) { $s = 9; continue; }\n\t\t\t/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 10; continue; }\n\t\t\t/* */ if ($assertType(_ref, ptrType$5, true)[1]) { $s = 11; continue; }\n\t\t\t/* */ if ($assertType(_ref, ptrType$6, true)[1]) { $s = 12; continue; }\n\t\t\t/* */ if ($assertType(_ref, ptrType$7, true)[1]) { $s = 13; continue; }\n\t\t\t/* */ if ($assertType(_ref, sliceType$1, true)[1]) { $s = 14; continue; }\n\t\t\t/* */ if ($assertType(_ref, sliceType, true)[1]) { $s = 15; continue; }\n\t\t\t/* */ if ($assertType(_ref, sliceType$2, true)[1]) { $s = 16; continue; }\n\t\t\t/* */ if ($assertType(_ref, sliceType$3, true)[1]) { $s = 17; continue; }\n\t\t\t/* */ if ($assertType(_ref, sliceType$4, true)[1]) { $s = 18; continue; }\n\t\t\t/* */ if ($assertType(_ref, sliceType$5, true)[1]) { $s = 19; continue; }\n\t\t\t/* */ if ($assertType(_ref, sliceType$6, true)[1]) { $s = 20; continue; }\n\t\t\t/* */ if ($assertType(_ref, sliceType$7, true)[1]) { $s = 21; continue; }\n\t\t\t/* */ $s = 22; continue;\n\t\t\t/* if ($assertType(_ref, ptrType, true)[1]) { */ case 6:\n\t\t\t\tdata$1 = _ref.$val;\n\t\t\t\tdata$1.$set((b[0] << 24 >> 24));\n\t\t\t\t$s = 22; continue;\n\t\t\t/* } else if ($assertType(_ref, ptrType$1, true)[1]) { */ case 7:\n\t\t\t\tdata$2 = _ref.$val;\n\t\t\t\tdata$2.$set(b[0]);\n\t\t\t\t$s = 22; continue;\n\t\t\t/* } else if ($assertType(_ref, ptrType$2, true)[1]) { */ case 8:\n\t\t\t\tdata$3 = _ref.$val;\n\t\t\t\t_r$1 = order.Uint16(bs); /* */ $s = 23; case 23: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t\tdata$3.$set((_r$1 << 16 >> 16));\n\t\t\t\t$s = 22; continue;\n\t\t\t/* } else if ($assertType(_ref, ptrType$3, true)[1]) { */ case 9:\n\t\t\t\tdata$4 = _ref.$val;\n\t\t\t\t_r$2 = order.Uint16(bs); /* */ $s = 24; case 24: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\tdata$4.$set(_r$2);\n\t\t\t\t$s = 22; continue;\n\t\t\t/* } else if ($assertType(_ref, ptrType$4, true)[1]) { */ case 10:\n\t\t\t\tdata$5 = _ref.$val;\n\t\t\t\t_r$3 = order.Uint32(bs); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t\tdata$5.$set((_r$3 >> 0));\n\t\t\t\t$s = 22; continue;\n\t\t\t/* } else if ($assertType(_ref, ptrType$5, true)[1]) { */ case 11:\n\t\t\t\tdata$6 = _ref.$val;\n\t\t\t\t_r$4 = order.Uint32(bs); /* */ $s = 26; case 26: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t\tdata$6.$set(_r$4);\n\t\t\t\t$s = 22; continue;\n\t\t\t/* } else if ($assertType(_ref, ptrType$6, true)[1]) { */ case 12:\n\t\t\t\tdata$7 = _ref.$val;\n\t\t\t\t_r$5 = order.Uint64(bs); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t\tdata$7.$set((x = _r$5, new $Int64(x.$high, x.$low)));\n\t\t\t\t$s = 22; continue;\n\t\t\t/* } else if ($assertType(_ref, ptrType$7, true)[1]) { */ case 13:\n\t\t\t\tdata$8 = _ref.$val;\n\t\t\t\t_r$6 = order.Uint64(bs); /* */ $s = 28; case 28: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t\tdata$8.$set(_r$6);\n\t\t\t\t$s = 22; continue;\n\t\t\t/* } else if ($assertType(_ref, sliceType$1, true)[1]) { */ case 14:\n\t\t\t\tdata$9 = _ref.$val;\n\t\t\t\t_ref$1 = bs;\n\t\t\t\t_i = 0;\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!(_i < _ref$1.$length)) { break; }\n\t\t\t\t\ti = _i;\n\t\t\t\t\tx$1 = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError(\"index out of range\") : _ref$1.$array[_ref$1.$offset + _i]);\n\t\t\t\t\t((i < 0 || i >= data$9.$length) ? $throwRuntimeError(\"index out of range\") : data$9.$array[data$9.$offset + i] = (x$1 << 24 >> 24));\n\t\t\t\t\t_i++;\n\t\t\t\t}\n\t\t\t\t$s = 22; continue;\n\t\t\t/* } else if ($assertType(_ref, sliceType, true)[1]) { */ case 15:\n\t\t\t\tdata$10 = _ref.$val;\n\t\t\t\t$copySlice(data$10, bs);\n\t\t\t\t$s = 22; continue;\n\t\t\t/* } else if ($assertType(_ref, sliceType$2, true)[1]) { */ case 16:\n\t\t\t\tdata$11 = _ref.$val;\n\t\t\t\t_ref$2 = data$11;\n\t\t\t\t_i$1 = 0;\n\t\t\t\t/* while (true) { */ case 29:\n\t\t\t\t\t/* if (!(_i$1 < _ref$2.$length)) { break; } */ if(!(_i$1 < _ref$2.$length)) { $s = 30; continue; }\n\t\t\t\t\ti$1 = _i$1;\n\t\t\t\t\t_r$7 = order.Uint16($subslice(bs, (2 * i$1 >> 0))); /* */ $s = 31; case 31: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t\t\t((i$1 < 0 || i$1 >= data$11.$length) ? $throwRuntimeError(\"index out of range\") : data$11.$array[data$11.$offset + i$1] = (_r$7 << 16 >> 16));\n\t\t\t\t\t_i$1++;\n\t\t\t\t/* } */ $s = 29; continue; case 30:\n\t\t\t\t$s = 22; continue;\n\t\t\t/* } else if ($assertType(_ref, sliceType$3, true)[1]) { */ case 17:\n\t\t\t\tdata$12 = _ref.$val;\n\t\t\t\t_ref$3 = data$12;\n\t\t\t\t_i$2 = 0;\n\t\t\t\t/* while (true) { */ case 32:\n\t\t\t\t\t/* if (!(_i$2 < _ref$3.$length)) { break; } */ if(!(_i$2 < _ref$3.$length)) { $s = 33; continue; }\n\t\t\t\t\ti$2 = _i$2;\n\t\t\t\t\t_r$8 = order.Uint16($subslice(bs, (2 * i$2 >> 0))); /* */ $s = 34; case 34: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t\t\t((i$2 < 0 || i$2 >= data$12.$length) ? $throwRuntimeError(\"index out of range\") : data$12.$array[data$12.$offset + i$2] = _r$8);\n\t\t\t\t\t_i$2++;\n\t\t\t\t/* } */ $s = 32; continue; case 33:\n\t\t\t\t$s = 22; continue;\n\t\t\t/* } else if ($assertType(_ref, sliceType$4, true)[1]) { */ case 18:\n\t\t\t\tdata$13 = _ref.$val;\n\t\t\t\t_ref$4 = data$13;\n\t\t\t\t_i$3 = 0;\n\t\t\t\t/* while (true) { */ case 35:\n\t\t\t\t\t/* if (!(_i$3 < _ref$4.$length)) { break; } */ if(!(_i$3 < _ref$4.$length)) { $s = 36; continue; }\n\t\t\t\t\ti$3 = _i$3;\n\t\t\t\t\t_r$9 = order.Uint32($subslice(bs, (4 * i$3 >> 0))); /* */ $s = 37; case 37: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\t\t\t((i$3 < 0 || i$3 >= data$13.$length) ? $throwRuntimeError(\"index out of range\") : data$13.$array[data$13.$offset + i$3] = (_r$9 >> 0));\n\t\t\t\t\t_i$3++;\n\t\t\t\t/* } */ $s = 35; continue; case 36:\n\t\t\t\t$s = 22; continue;\n\t\t\t/* } else if ($assertType(_ref, sliceType$5, true)[1]) { */ case 19:\n\t\t\t\tdata$14 = _ref.$val;\n\t\t\t\t_ref$5 = data$14;\n\t\t\t\t_i$4 = 0;\n\t\t\t\t/* while (true) { */ case 38:\n\t\t\t\t\t/* if (!(_i$4 < _ref$5.$length)) { break; } */ if(!(_i$4 < _ref$5.$length)) { $s = 39; continue; }\n\t\t\t\t\ti$4 = _i$4;\n\t\t\t\t\t_r$10 = order.Uint32($subslice(bs, (4 * i$4 >> 0))); /* */ $s = 40; case 40: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\t\t\t((i$4 < 0 || i$4 >= data$14.$length) ? $throwRuntimeError(\"index out of range\") : data$14.$array[data$14.$offset + i$4] = _r$10);\n\t\t\t\t\t_i$4++;\n\t\t\t\t/* } */ $s = 38; continue; case 39:\n\t\t\t\t$s = 22; continue;\n\t\t\t/* } else if ($assertType(_ref, sliceType$6, true)[1]) { */ case 20:\n\t\t\t\tdata$15 = _ref.$val;\n\t\t\t\t_ref$6 = data$15;\n\t\t\t\t_i$5 = 0;\n\t\t\t\t/* while (true) { */ case 41:\n\t\t\t\t\t/* if (!(_i$5 < _ref$6.$length)) { break; } */ if(!(_i$5 < _ref$6.$length)) { $s = 42; continue; }\n\t\t\t\t\ti$5 = _i$5;\n\t\t\t\t\t_r$11 = order.Uint64($subslice(bs, (8 * i$5 >> 0))); /* */ $s = 43; case 43: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t\t\t\t((i$5 < 0 || i$5 >= data$15.$length) ? $throwRuntimeError(\"index out of range\") : data$15.$array[data$15.$offset + i$5] = (x$2 = _r$11, new $Int64(x$2.$high, x$2.$low)));\n\t\t\t\t\t_i$5++;\n\t\t\t\t/* } */ $s = 41; continue; case 42:\n\t\t\t\t$s = 22; continue;\n\t\t\t/* } else if ($assertType(_ref, sliceType$7, true)[1]) { */ case 21:\n\t\t\t\tdata$16 = _ref.$val;\n\t\t\t\t_ref$7 = data$16;\n\t\t\t\t_i$6 = 0;\n\t\t\t\t/* while (true) { */ case 44:\n\t\t\t\t\t/* if (!(_i$6 < _ref$7.$length)) { break; } */ if(!(_i$6 < _ref$7.$length)) { $s = 45; continue; }\n\t\t\t\t\ti$6 = _i$6;\n\t\t\t\t\t_r$12 = order.Uint64($subslice(bs, (8 * i$6 >> 0))); /* */ $s = 46; case 46: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\t\t\t\t((i$6 < 0 || i$6 >= data$16.$length) ? $throwRuntimeError(\"index out of range\") : data$16.$array[data$16.$offset + i$6] = _r$12);\n\t\t\t\t\t_i$6++;\n\t\t\t\t/* } */ $s = 44; continue; case 45:\n\t\t\t/* } */ case 22:\n\t\t\treturn $ifaceNil;\n\t\t/* } */ case 2:\n\t\t_r$13 = reflect.ValueOf(data); /* */ $s = 47; case 47: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }\n\t\tv = _r$13;\n\t\tsize = -1;\n\t\t_ref$8 = v.Kind();\n\t\t/* */ if (_ref$8 === 22) { $s = 48; continue; }\n\t\t/* */ if (_ref$8 === 23) { $s = 49; continue; }\n\t\t/* */ $s = 50; continue;\n\t\t/* if (_ref$8 === 22) { */ case 48:\n\t\t\t_r$14 = v.Elem(); /* */ $s = 51; case 51: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }\n\t\t\tv = _r$14;\n\t\t\t_r$15 = dataSize(v); /* */ $s = 52; case 52: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }\n\t\t\tsize = _r$15;\n\t\t\t$s = 50; continue;\n\t\t/* } else if (_ref$8 === 23) { */ case 49:\n\t\t\t_r$16 = dataSize(v); /* */ $s = 53; case 53: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }\n\t\t\tsize = _r$16;\n\t\t/* } */ case 50:\n\t\t/* */ if (size < 0) { $s = 54; continue; }\n\t\t/* */ $s = 55; continue;\n\t\t/* if (size < 0) { */ case 54:\n\t\t\t_r$17 = reflect.TypeOf(data).String(); /* */ $s = 56; case 56: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }\n\t\t\t_r$18 = errors.New(\"binary.Read: invalid type \" + _r$17); /* */ $s = 57; case 57: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }\n\t\t\treturn _r$18;\n\t\t/* } */ case 55:\n\t\td = new decoder.ptr(order, $makeSlice(sliceType, size));\n\t\t_r$19 = io.ReadFull(r, d.buf); /* */ $s = 58; case 58: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r$19; err$1 = _tuple$1[1];\n\t\t/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 59; continue; }\n\t\t/* */ $s = 60; continue;\n\t\t/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 59:\n\t\t\treturn err$1;\n\t\t/* } */ case 60:\n\t\t$r = d.value(v); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Read }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._i$6 = _i$6; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._ref$7 = _ref$7; $f._ref$8 = _ref$8; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.bs = bs; $f.d = d; $f.data = data; $f.data$1 = data$1; $f.data$10 = data$10; $f.data$11 = data$11; $f.data$12 = data$12; $f.data$13 = data$13; $f.data$14 = data$14; $f.data$15 = data$15; $f.data$16 = data$16; $f.data$2 = data$2; $f.data$3 = data$3; $f.data$4 = data$4; $f.data$5 = data$5; $f.data$6 = data$6; $f.data$7 = data$7; $f.data$8 = data$8; $f.data$9 = data$9; $f.err = err; $f.err$1 = err$1; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.i$5 = i$5; $f.i$6 = i$6; $f.n = n; $f.order = order; $f.r = r; $f.size = size; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Read = Read;\n\tWrite = function(w, order, data) {\n\t\tvar $ptr, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _i$6, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _ref$7, _tuple, _tuple$1, b, bs, buf, data, e, err, err$1, i, i$1, i$2, i$3, i$4, i$5, i$6, n, order, size, v, v$1, v$10, v$11, v$12, v$13, v$14, v$15, v$16, v$17, v$18, v$19, v$2, v$20, v$21, v$22, v$23, v$24, v$3, v$4, v$5, v$6, v$7, v$8, v$9, w, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _i$6 = $f._i$6; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; _ref$7 = $f._ref$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; bs = $f.bs; buf = $f.buf; data = $f.data; e = $f.e; err = $f.err; err$1 = $f.err$1; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; i$5 = $f.i$5; i$6 = $f.i$6; n = $f.n; order = $f.order; size = $f.size; v = $f.v; v$1 = $f.v$1; v$10 = $f.v$10; v$11 = $f.v$11; v$12 = $f.v$12; v$13 = $f.v$13; v$14 = $f.v$14; v$15 = $f.v$15; v$16 = $f.v$16; v$17 = $f.v$17; v$18 = $f.v$18; v$19 = $f.v$19; v$2 = $f.v$2; v$20 = $f.v$20; v$21 = $f.v$21; v$22 = $f.v$22; v$23 = $f.v$23; v$24 = $f.v$24; v$3 = $f.v$3; v$4 = $f.v$4; v$5 = $f.v$5; v$6 = $f.v$6; v$7 = $f.v$7; v$8 = $f.v$8; v$9 = $f.v$9; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = intDataSize(data);\n\t\t/* */ if (!((n === 0))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!((n === 0))) { */ case 1:\n\t\t\tb = $clone(arrayType.zero(), arrayType);\n\t\t\tbs = sliceType.nil;\n\t\t\tif (n > 8) {\n\t\t\t\tbs = $makeSlice(sliceType, n);\n\t\t\t} else {\n\t\t\t\tbs = $subslice(new sliceType(b), 0, n);\n\t\t\t}\n\t\t\t_ref = data;\n\t\t\t/* */ if ($assertType(_ref, ptrType, true)[1]) { $s = 3; continue; }\n\t\t\t/* */ if ($assertType(_ref, $Int8, true)[1]) { $s = 4; continue; }\n\t\t\t/* */ if ($assertType(_ref, sliceType$1, true)[1]) { $s = 5; continue; }\n\t\t\t/* */ if ($assertType(_ref, ptrType$1, true)[1]) { $s = 6; continue; }\n\t\t\t/* */ if ($assertType(_ref, $Uint8, true)[1]) { $s = 7; continue; }\n\t\t\t/* */ if ($assertType(_ref, sliceType, true)[1]) { $s = 8; continue; }\n\t\t\t/* */ if ($assertType(_ref, ptrType$2, true)[1]) { $s = 9; continue; }\n\t\t\t/* */ if ($assertType(_ref, $Int16, true)[1]) { $s = 10; continue; }\n\t\t\t/* */ if ($assertType(_ref, sliceType$2, true)[1]) { $s = 11; continue; }\n\t\t\t/* */ if ($assertType(_ref, ptrType$3, true)[1]) { $s = 12; continue; }\n\t\t\t/* */ if ($assertType(_ref, $Uint16, true)[1]) { $s = 13; continue; }\n\t\t\t/* */ if ($assertType(_ref, sliceType$3, true)[1]) { $s = 14; continue; }\n\t\t\t/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 15; continue; }\n\t\t\t/* */ if ($assertType(_ref, $Int32, true)[1]) { $s = 16; continue; }\n\t\t\t/* */ if ($assertType(_ref, sliceType$4, true)[1]) { $s = 17; continue; }\n\t\t\t/* */ if ($assertType(_ref, ptrType$5, true)[1]) { $s = 18; continue; }\n\t\t\t/* */ if ($assertType(_ref, $Uint32, true)[1]) { $s = 19; continue; }\n\t\t\t/* */ if ($assertType(_ref, sliceType$5, true)[1]) { $s = 20; continue; }\n\t\t\t/* */ if ($assertType(_ref, ptrType$6, true)[1]) { $s = 21; continue; }\n\t\t\t/* */ if ($assertType(_ref, $Int64, true)[1]) { $s = 22; continue; }\n\t\t\t/* */ if ($assertType(_ref, sliceType$6, true)[1]) { $s = 23; continue; }\n\t\t\t/* */ if ($assertType(_ref, ptrType$7, true)[1]) { $s = 24; continue; }\n\t\t\t/* */ if ($assertType(_ref, $Uint64, true)[1]) { $s = 25; continue; }\n\t\t\t/* */ if ($assertType(_ref, sliceType$7, true)[1]) { $s = 26; continue; }\n\t\t\t/* */ $s = 27; continue;\n\t\t\t/* if ($assertType(_ref, ptrType, true)[1]) { */ case 3:\n\t\t\t\tv = _ref.$val;\n\t\t\t\tbs = $subslice(new sliceType(b), 0, 1);\n\t\t\t\tb[0] = (v.$get() << 24 >>> 24);\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, $Int8, true)[1]) { */ case 4:\n\t\t\t\tv$1 = _ref.$val;\n\t\t\t\tbs = $subslice(new sliceType(b), 0, 1);\n\t\t\t\tb[0] = (v$1 << 24 >>> 24);\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, sliceType$1, true)[1]) { */ case 5:\n\t\t\t\tv$2 = _ref.$val;\n\t\t\t\t_ref$1 = v$2;\n\t\t\t\t_i = 0;\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!(_i < _ref$1.$length)) { break; }\n\t\t\t\t\ti = _i;\n\t\t\t\t\tx = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError(\"index out of range\") : _ref$1.$array[_ref$1.$offset + _i]);\n\t\t\t\t\t((i < 0 || i >= bs.$length) ? $throwRuntimeError(\"index out of range\") : bs.$array[bs.$offset + i] = (x << 24 >>> 24));\n\t\t\t\t\t_i++;\n\t\t\t\t}\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, ptrType$1, true)[1]) { */ case 6:\n\t\t\t\tv$3 = _ref.$val;\n\t\t\t\tbs = $subslice(new sliceType(b), 0, 1);\n\t\t\t\tb[0] = v$3.$get();\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, $Uint8, true)[1]) { */ case 7:\n\t\t\t\tv$4 = _ref.$val;\n\t\t\t\tbs = $subslice(new sliceType(b), 0, 1);\n\t\t\t\tb[0] = v$4;\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, sliceType, true)[1]) { */ case 8:\n\t\t\t\tv$5 = _ref.$val;\n\t\t\t\tbs = v$5;\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, ptrType$2, true)[1]) { */ case 9:\n\t\t\t\tv$6 = _ref.$val;\n\t\t\t\tbs = $subslice(new sliceType(b), 0, 2);\n\t\t\t\t$r = order.PutUint16(bs, (v$6.$get() << 16 >>> 16)); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, $Int16, true)[1]) { */ case 10:\n\t\t\t\tv$7 = _ref.$val;\n\t\t\t\tbs = $subslice(new sliceType(b), 0, 2);\n\t\t\t\t$r = order.PutUint16(bs, (v$7 << 16 >>> 16)); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, sliceType$2, true)[1]) { */ case 11:\n\t\t\t\tv$8 = _ref.$val;\n\t\t\t\t_ref$2 = v$8;\n\t\t\t\t_i$1 = 0;\n\t\t\t\t/* while (true) { */ case 30:\n\t\t\t\t\t/* if (!(_i$1 < _ref$2.$length)) { break; } */ if(!(_i$1 < _ref$2.$length)) { $s = 31; continue; }\n\t\t\t\t\ti$1 = _i$1;\n\t\t\t\t\tx$1 = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError(\"index out of range\") : _ref$2.$array[_ref$2.$offset + _i$1]);\n\t\t\t\t\t$r = order.PutUint16($subslice(bs, (2 * i$1 >> 0)), (x$1 << 16 >>> 16)); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t_i$1++;\n\t\t\t\t/* } */ $s = 30; continue; case 31:\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, ptrType$3, true)[1]) { */ case 12:\n\t\t\t\tv$9 = _ref.$val;\n\t\t\t\tbs = $subslice(new sliceType(b), 0, 2);\n\t\t\t\t$r = order.PutUint16(bs, v$9.$get()); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, $Uint16, true)[1]) { */ case 13:\n\t\t\t\tv$10 = _ref.$val;\n\t\t\t\tbs = $subslice(new sliceType(b), 0, 2);\n\t\t\t\t$r = order.PutUint16(bs, v$10); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, sliceType$3, true)[1]) { */ case 14:\n\t\t\t\tv$11 = _ref.$val;\n\t\t\t\t_ref$3 = v$11;\n\t\t\t\t_i$2 = 0;\n\t\t\t\t/* while (true) { */ case 35:\n\t\t\t\t\t/* if (!(_i$2 < _ref$3.$length)) { break; } */ if(!(_i$2 < _ref$3.$length)) { $s = 36; continue; }\n\t\t\t\t\ti$2 = _i$2;\n\t\t\t\t\tx$2 = ((_i$2 < 0 || _i$2 >= _ref$3.$length) ? $throwRuntimeError(\"index out of range\") : _ref$3.$array[_ref$3.$offset + _i$2]);\n\t\t\t\t\t$r = order.PutUint16($subslice(bs, (2 * i$2 >> 0)), x$2); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t_i$2++;\n\t\t\t\t/* } */ $s = 35; continue; case 36:\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, ptrType$4, true)[1]) { */ case 15:\n\t\t\t\tv$12 = _ref.$val;\n\t\t\t\tbs = $subslice(new sliceType(b), 0, 4);\n\t\t\t\t$r = order.PutUint32(bs, (v$12.$get() >>> 0)); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, $Int32, true)[1]) { */ case 16:\n\t\t\t\tv$13 = _ref.$val;\n\t\t\t\tbs = $subslice(new sliceType(b), 0, 4);\n\t\t\t\t$r = order.PutUint32(bs, (v$13 >>> 0)); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, sliceType$4, true)[1]) { */ case 17:\n\t\t\t\tv$14 = _ref.$val;\n\t\t\t\t_ref$4 = v$14;\n\t\t\t\t_i$3 = 0;\n\t\t\t\t/* while (true) { */ case 40:\n\t\t\t\t\t/* if (!(_i$3 < _ref$4.$length)) { break; } */ if(!(_i$3 < _ref$4.$length)) { $s = 41; continue; }\n\t\t\t\t\ti$3 = _i$3;\n\t\t\t\t\tx$3 = ((_i$3 < 0 || _i$3 >= _ref$4.$length) ? $throwRuntimeError(\"index out of range\") : _ref$4.$array[_ref$4.$offset + _i$3]);\n\t\t\t\t\t$r = order.PutUint32($subslice(bs, (4 * i$3 >> 0)), (x$3 >>> 0)); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t_i$3++;\n\t\t\t\t/* } */ $s = 40; continue; case 41:\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, ptrType$5, true)[1]) { */ case 18:\n\t\t\t\tv$15 = _ref.$val;\n\t\t\t\tbs = $subslice(new sliceType(b), 0, 4);\n\t\t\t\t$r = order.PutUint32(bs, v$15.$get()); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, $Uint32, true)[1]) { */ case 19:\n\t\t\t\tv$16 = _ref.$val;\n\t\t\t\tbs = $subslice(new sliceType(b), 0, 4);\n\t\t\t\t$r = order.PutUint32(bs, v$16); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, sliceType$5, true)[1]) { */ case 20:\n\t\t\t\tv$17 = _ref.$val;\n\t\t\t\t_ref$5 = v$17;\n\t\t\t\t_i$4 = 0;\n\t\t\t\t/* while (true) { */ case 45:\n\t\t\t\t\t/* if (!(_i$4 < _ref$5.$length)) { break; } */ if(!(_i$4 < _ref$5.$length)) { $s = 46; continue; }\n\t\t\t\t\ti$4 = _i$4;\n\t\t\t\t\tx$4 = ((_i$4 < 0 || _i$4 >= _ref$5.$length) ? $throwRuntimeError(\"index out of range\") : _ref$5.$array[_ref$5.$offset + _i$4]);\n\t\t\t\t\t$r = order.PutUint32($subslice(bs, (4 * i$4 >> 0)), x$4); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t_i$4++;\n\t\t\t\t/* } */ $s = 45; continue; case 46:\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, ptrType$6, true)[1]) { */ case 21:\n\t\t\t\tv$18 = _ref.$val;\n\t\t\t\tbs = $subslice(new sliceType(b), 0, 8);\n\t\t\t\t$r = order.PutUint64(bs, (x$5 = v$18.$get(), new $Uint64(x$5.$high, x$5.$low))); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, $Int64, true)[1]) { */ case 22:\n\t\t\t\tv$19 = _ref.$val;\n\t\t\t\tbs = $subslice(new sliceType(b), 0, 8);\n\t\t\t\t$r = order.PutUint64(bs, new $Uint64(v$19.$high, v$19.$low)); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, sliceType$6, true)[1]) { */ case 23:\n\t\t\t\tv$20 = _ref.$val;\n\t\t\t\t_ref$6 = v$20;\n\t\t\t\t_i$5 = 0;\n\t\t\t\t/* while (true) { */ case 50:\n\t\t\t\t\t/* if (!(_i$5 < _ref$6.$length)) { break; } */ if(!(_i$5 < _ref$6.$length)) { $s = 51; continue; }\n\t\t\t\t\ti$5 = _i$5;\n\t\t\t\t\tx$6 = ((_i$5 < 0 || _i$5 >= _ref$6.$length) ? $throwRuntimeError(\"index out of range\") : _ref$6.$array[_ref$6.$offset + _i$5]);\n\t\t\t\t\t$r = order.PutUint64($subslice(bs, (8 * i$5 >> 0)), new $Uint64(x$6.$high, x$6.$low)); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t_i$5++;\n\t\t\t\t/* } */ $s = 50; continue; case 51:\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, ptrType$7, true)[1]) { */ case 24:\n\t\t\t\tv$21 = _ref.$val;\n\t\t\t\tbs = $subslice(new sliceType(b), 0, 8);\n\t\t\t\t$r = order.PutUint64(bs, v$21.$get()); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, $Uint64, true)[1]) { */ case 25:\n\t\t\t\tv$22 = _ref.$val;\n\t\t\t\tbs = $subslice(new sliceType(b), 0, 8);\n\t\t\t\t$r = order.PutUint64(bs, v$22); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 27; continue;\n\t\t\t/* } else if ($assertType(_ref, sliceType$7, true)[1]) { */ case 26:\n\t\t\t\tv$23 = _ref.$val;\n\t\t\t\t_ref$7 = v$23;\n\t\t\t\t_i$6 = 0;\n\t\t\t\t/* while (true) { */ case 55:\n\t\t\t\t\t/* if (!(_i$6 < _ref$7.$length)) { break; } */ if(!(_i$6 < _ref$7.$length)) { $s = 56; continue; }\n\t\t\t\t\ti$6 = _i$6;\n\t\t\t\t\tx$7 = ((_i$6 < 0 || _i$6 >= _ref$7.$length) ? $throwRuntimeError(\"index out of range\") : _ref$7.$array[_ref$7.$offset + _i$6]);\n\t\t\t\t\t$r = order.PutUint64($subslice(bs, (8 * i$6 >> 0)), x$7); /* */ $s = 57; case 57: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t_i$6++;\n\t\t\t\t/* } */ $s = 55; continue; case 56:\n\t\t\t/* } */ case 27:\n\t\t\t_r = w.Write(bs); /* */ $s = 58; case 58: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t_tuple = _r; err = _tuple[1];\n\t\t\treturn err;\n\t\t/* } */ case 2:\n\t\t_r$1 = reflect.ValueOf(data); /* */ $s = 59; case 59: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_r$2 = reflect.Indirect(_r$1); /* */ $s = 60; case 60: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\tv$24 = _r$2;\n\t\t_r$3 = dataSize(v$24); /* */ $s = 61; case 61: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\tsize = _r$3;\n\t\t/* */ if (size < 0) { $s = 62; continue; }\n\t\t/* */ $s = 63; continue;\n\t\t/* if (size < 0) { */ case 62:\n\t\t\t_r$4 = reflect.TypeOf(data).String(); /* */ $s = 64; case 64: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t_r$5 = errors.New(\"binary.Write: invalid type \" + _r$4); /* */ $s = 65; case 65: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\treturn _r$5;\n\t\t/* } */ case 63:\n\t\tbuf = $makeSlice(sliceType, size);\n\t\te = new encoder.ptr(order, buf);\n\t\t$r = e.value(v$24); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t_r$6 = w.Write(buf); /* */ $s = 67; case 67: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r$6; err$1 = _tuple$1[1];\n\t\treturn err$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Write }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._i$6 = _i$6; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f._ref$7 = _ref$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.bs = bs; $f.buf = buf; $f.data = data; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.i$5 = i$5; $f.i$6 = i$6; $f.n = n; $f.order = order; $f.size = size; $f.v = v; $f.v$1 = v$1; $f.v$10 = v$10; $f.v$11 = v$11; $f.v$12 = v$12; $f.v$13 = v$13; $f.v$14 = v$14; $f.v$15 = v$15; $f.v$16 = v$16; $f.v$17 = v$17; $f.v$18 = v$18; $f.v$19 = v$19; $f.v$2 = v$2; $f.v$20 = v$20; $f.v$21 = v$21; $f.v$22 = v$22; $f.v$23 = v$23; $f.v$24 = v$24; $f.v$3 = v$3; $f.v$4 = v$4; $f.v$5 = v$5; $f.v$6 = v$6; $f.v$7 = v$7; $f.v$8 = v$8; $f.v$9 = v$9; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Write = Write;\n\tdataSize = function(v) {\n\t\tvar $ptr, _r, _r$1, _r$2, s, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\t/* */ if (v.Kind() === 23) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (v.Kind() === 23) { */ case 1:\n\t\t\t_r = v.Type().Elem(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t_r$1 = sizeof(_r); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\ts = _r$1;\n\t\t\t/* */ if (s >= 0) { $s = 5; continue; }\n\t\t\t/* */ $s = 6; continue;\n\t\t\t/* if (s >= 0) { */ case 5:\n\t\t\t\treturn s * v.Len() >> 0;\n\t\t\t/* } */ case 6:\n\t\t\treturn -1;\n\t\t/* } */ case 2:\n\t\t_r$2 = sizeof(v.Type()); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\treturn _r$2;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dataSize }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tsizeof = function(t) {\n\t\tvar $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _tmp, _tmp$1, i, n, s, s$1, sum, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; i = $f.i; n = $f.n; s = $f.s; s$1 = $f.s$1; sum = $f.sum; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = t.Kind(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_ref = _r;\n\t\t/* */ if (_ref === 17) { $s = 2; continue; }\n\t\t/* */ if (_ref === 25) { $s = 3; continue; }\n\t\t/* */ if (_ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6 || _ref === 13 || _ref === 14 || _ref === 15 || _ref === 16) { $s = 4; continue; }\n\t\t/* */ $s = 5; continue;\n\t\t/* if (_ref === 17) { */ case 2:\n\t\t\t_r$1 = t.Elem(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t_r$2 = sizeof(_r$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\ts = _r$2;\n\t\t\t/* */ if (s >= 0) { $s = 8; continue; }\n\t\t\t/* */ $s = 9; continue;\n\t\t\t/* if (s >= 0) { */ case 8:\n\t\t\t\t_r$3 = t.Len(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t\treturn s * _r$3 >> 0;\n\t\t\t/* } */ case 9:\n\t\t\t$s = 5; continue;\n\t\t/* } else if (_ref === 25) { */ case 3:\n\t\t\tsum = 0;\n\t\t\t_r$4 = t.NumField(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t_tmp = 0; _tmp$1 = _r$4; i = _tmp; n = _tmp$1;\n\t\t\t/* while (true) { */ case 12:\n\t\t\t\t/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 13; continue; }\n\t\t\t\t_r$5 = t.Field(i); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t\t_r$6 = sizeof(_r$5.Type); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t\ts$1 = _r$6;\n\t\t\t\tif (s$1 < 0) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tsum = sum + (s$1) >> 0;\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t/* } */ $s = 12; continue; case 13:\n\t\t\treturn sum;\n\t\t\t$s = 5; continue;\n\t\t/* } else if (_ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6 || _ref === 13 || _ref === 14 || _ref === 15 || _ref === 16) { */ case 4:\n\t\t\t_r$7 = t.Size(); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\treturn (_r$7 >> 0);\n\t\t/* } */ case 5:\n\t\treturn -1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: sizeof }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.i = i; $f.n = n; $f.s = s; $f.s$1 = s$1; $f.sum = sum; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecoder.ptr.prototype.uint8 = function() {\n\t\tvar $ptr, d, x, x$1;\n\t\td = this;\n\t\tx$1 = (x = d.buf, (0 >= x.$length ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + 0]));\n\t\td.buf = $subslice(d.buf, 1);\n\t\treturn x$1;\n\t};\n\tdecoder.prototype.uint8 = function() { return this.$val.uint8(); };\n\tencoder.ptr.prototype.uint8 = function(x) {\n\t\tvar $ptr, e, x, x$1;\n\t\te = this;\n\t\t(x$1 = e.buf, (0 >= x$1.$length ? $throwRuntimeError(\"index out of range\") : x$1.$array[x$1.$offset + 0] = x));\n\t\te.buf = $subslice(e.buf, 1);\n\t};\n\tencoder.prototype.uint8 = function(x) { return this.$val.uint8(x); };\n\tdecoder.ptr.prototype.uint16 = function() {\n\t\tvar $ptr, _r, d, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; d = $f.d; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\t_r = d.order.Uint16($subslice(d.buf, 0, 2)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tx = _r;\n\t\td.buf = $subslice(d.buf, 2);\n\t\treturn x;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.uint16 }; } $f.$ptr = $ptr; $f._r = _r; $f.d = d; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecoder.prototype.uint16 = function() { return this.$val.uint16(); };\n\tencoder.ptr.prototype.uint16 = function(x) {\n\t\tvar $ptr, e, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; e = $f.e; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\te = this;\n\t\t$r = e.order.PutUint16($subslice(e.buf, 0, 2), x); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\te.buf = $subslice(e.buf, 2);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.uint16 }; } $f.$ptr = $ptr; $f.e = e; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tencoder.prototype.uint16 = function(x) { return this.$val.uint16(x); };\n\tdecoder.ptr.prototype.uint32 = function() {\n\t\tvar $ptr, _r, d, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; d = $f.d; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\t_r = d.order.Uint32($subslice(d.buf, 0, 4)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tx = _r;\n\t\td.buf = $subslice(d.buf, 4);\n\t\treturn x;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.uint32 }; } $f.$ptr = $ptr; $f._r = _r; $f.d = d; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecoder.prototype.uint32 = function() { return this.$val.uint32(); };\n\tencoder.ptr.prototype.uint32 = function(x) {\n\t\tvar $ptr, e, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; e = $f.e; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\te = this;\n\t\t$r = e.order.PutUint32($subslice(e.buf, 0, 4), x); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\te.buf = $subslice(e.buf, 4);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.uint32 }; } $f.$ptr = $ptr; $f.e = e; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tencoder.prototype.uint32 = function(x) { return this.$val.uint32(x); };\n\tdecoder.ptr.prototype.uint64 = function() {\n\t\tvar $ptr, _r, d, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; d = $f.d; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\t_r = d.order.Uint64($subslice(d.buf, 0, 8)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tx = _r;\n\t\td.buf = $subslice(d.buf, 8);\n\t\treturn x;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.uint64 }; } $f.$ptr = $ptr; $f._r = _r; $f.d = d; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecoder.prototype.uint64 = function() { return this.$val.uint64(); };\n\tencoder.ptr.prototype.uint64 = function(x) {\n\t\tvar $ptr, e, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; e = $f.e; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\te = this;\n\t\t$r = e.order.PutUint64($subslice(e.buf, 0, 8), x); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\te.buf = $subslice(e.buf, 8);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.uint64 }; } $f.$ptr = $ptr; $f.e = e; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tencoder.prototype.uint64 = function(x) { return this.$val.uint64(x); };\n\tdecoder.ptr.prototype.int8 = function() {\n\t\tvar $ptr, d;\n\t\td = this;\n\t\treturn (d.uint8() << 24 >> 24);\n\t};\n\tdecoder.prototype.int8 = function() { return this.$val.int8(); };\n\tencoder.ptr.prototype.int8 = function(x) {\n\t\tvar $ptr, e, x;\n\t\te = this;\n\t\te.uint8((x << 24 >>> 24));\n\t};\n\tencoder.prototype.int8 = function(x) { return this.$val.int8(x); };\n\tdecoder.ptr.prototype.int16 = function() {\n\t\tvar $ptr, _r, d, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\t_r = d.uint16(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn (_r << 16 >> 16);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.int16 }; } $f.$ptr = $ptr; $f._r = _r; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecoder.prototype.int16 = function() { return this.$val.int16(); };\n\tencoder.ptr.prototype.int16 = function(x) {\n\t\tvar $ptr, e, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; e = $f.e; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\te = this;\n\t\t$r = e.uint16((x << 16 >>> 16)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.int16 }; } $f.$ptr = $ptr; $f.e = e; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tencoder.prototype.int16 = function(x) { return this.$val.int16(x); };\n\tdecoder.ptr.prototype.int32 = function() {\n\t\tvar $ptr, _r, d, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\t_r = d.uint32(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn (_r >> 0);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.int32 }; } $f.$ptr = $ptr; $f._r = _r; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecoder.prototype.int32 = function() { return this.$val.int32(); };\n\tencoder.ptr.prototype.int32 = function(x) {\n\t\tvar $ptr, e, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; e = $f.e; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\te = this;\n\t\t$r = e.uint32((x >>> 0)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.int32 }; } $f.$ptr = $ptr; $f.e = e; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tencoder.prototype.int32 = function(x) { return this.$val.int32(x); };\n\tdecoder.ptr.prototype.int64 = function() {\n\t\tvar $ptr, _r, d, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; d = $f.d; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\t_r = d.uint64(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn (x = _r, new $Int64(x.$high, x.$low));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.int64 }; } $f.$ptr = $ptr; $f._r = _r; $f.d = d; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecoder.prototype.int64 = function() { return this.$val.int64(); };\n\tencoder.ptr.prototype.int64 = function(x) {\n\t\tvar $ptr, e, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; e = $f.e; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\te = this;\n\t\t$r = e.uint64(new $Uint64(x.$high, x.$low)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.int64 }; } $f.$ptr = $ptr; $f.e = e; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tencoder.prototype.int64 = function(x) { return this.$val.int64(x); };\n\tdecoder.ptr.prototype.value = function(v) {\n\t\tvar $ptr, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _v, d, i, i$1, i$2, l, l$1, l$2, t, v, v$1, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _v = $f._v; d = $f.d; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; l = $f.l; l$1 = $f.l$1; l$2 = $f.l$2; t = $f.t; v = $f.v; v$1 = $f.v$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\tv = v;\n\t\t_ref = v.Kind();\n\t\t/* */ if (_ref === 17) { $s = 1; continue; }\n\t\t/* */ if (_ref === 25) { $s = 2; continue; }\n\t\t/* */ if (_ref === 23) { $s = 3; continue; }\n\t\t/* */ if (_ref === 3) { $s = 4; continue; }\n\t\t/* */ if (_ref === 4) { $s = 5; continue; }\n\t\t/* */ if (_ref === 5) { $s = 6; continue; }\n\t\t/* */ if (_ref === 6) { $s = 7; continue; }\n\t\t/* */ if (_ref === 8) { $s = 8; continue; }\n\t\t/* */ if (_ref === 9) { $s = 9; continue; }\n\t\t/* */ if (_ref === 10) { $s = 10; continue; }\n\t\t/* */ if (_ref === 11) { $s = 11; continue; }\n\t\t/* */ if (_ref === 13) { $s = 12; continue; }\n\t\t/* */ if (_ref === 14) { $s = 13; continue; }\n\t\t/* */ if (_ref === 15) { $s = 14; continue; }\n\t\t/* */ if (_ref === 16) { $s = 15; continue; }\n\t\t/* */ $s = 16; continue;\n\t\t/* if (_ref === 17) { */ case 1:\n\t\t\tl = v.Len();\n\t\t\ti = 0;\n\t\t\t/* while (true) { */ case 17:\n\t\t\t\t/* if (!(i < l)) { break; } */ if(!(i < l)) { $s = 18; continue; }\n\t\t\t\t_r = v.Index(i); /* */ $s = 19; case 19: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t\t$r = d.value(_r); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t/* } */ $s = 17; continue; case 18:\n\t\t\t$s = 16; continue;\n\t\t/* } else if (_ref === 25) { */ case 2:\n\t\t\tt = v.Type();\n\t\t\tl$1 = v.NumField();\n\t\t\ti$1 = 0;\n\t\t\t/* while (true) { */ case 21:\n\t\t\t\t/* if (!(i$1 < l$1)) { break; } */ if(!(i$1 < l$1)) { $s = 22; continue; }\n\t\t\t\t_r$1 = v.Field(i$1); /* */ $s = 23; case 23: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t\tv$1 = _r$1;\n\t\t\t\tif (v$1.CanSet()) { _v = true; $s = 27; continue s; }\n\t\t\t\t_r$2 = t.Field(i$1); /* */ $s = 28; case 28: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\t_v = !(_r$2.Name === \"_\"); case 27:\n\t\t\t\t/* */ if (_v) { $s = 24; continue; }\n\t\t\t\t/* */ $s = 25; continue;\n\t\t\t\t/* if (_v) { */ case 24:\n\t\t\t\t\t$r = d.value(v$1); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t$s = 26; continue;\n\t\t\t\t/* } else { */ case 25:\n\t\t\t\t\t$r = d.skip(v$1); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t/* } */ case 26:\n\t\t\t\ti$1 = i$1 + (1) >> 0;\n\t\t\t/* } */ $s = 21; continue; case 22:\n\t\t\t$s = 16; continue;\n\t\t/* } else if (_ref === 23) { */ case 3:\n\t\t\tl$2 = v.Len();\n\t\t\ti$2 = 0;\n\t\t\t/* while (true) { */ case 31:\n\t\t\t\t/* if (!(i$2 < l$2)) { break; } */ if(!(i$2 < l$2)) { $s = 32; continue; }\n\t\t\t\t_r$3 = v.Index(i$2); /* */ $s = 33; case 33: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t\t$r = d.value(_r$3); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\ti$2 = i$2 + (1) >> 0;\n\t\t\t/* } */ $s = 31; continue; case 32:\n\t\t\t$s = 16; continue;\n\t\t/* } else if (_ref === 3) { */ case 4:\n\t\t\tv.SetInt(new $Int64(0, d.int8()));\n\t\t\t$s = 16; continue;\n\t\t/* } else if (_ref === 4) { */ case 5:\n\t\t\t_r$4 = d.int16(); /* */ $s = 35; case 35: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t$r = v.SetInt(new $Int64(0, _r$4)); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 16; continue;\n\t\t/* } else if (_ref === 5) { */ case 6:\n\t\t\t_r$5 = d.int32(); /* */ $s = 37; case 37: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t$r = v.SetInt(new $Int64(0, _r$5)); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 16; continue;\n\t\t/* } else if (_ref === 6) { */ case 7:\n\t\t\t_r$6 = d.int64(); /* */ $s = 39; case 39: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t$r = v.SetInt(_r$6); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 16; continue;\n\t\t/* } else if (_ref === 8) { */ case 8:\n\t\t\tv.SetUint(new $Uint64(0, d.uint8()));\n\t\t\t$s = 16; continue;\n\t\t/* } else if (_ref === 9) { */ case 9:\n\t\t\t_r$7 = d.uint16(); /* */ $s = 41; case 41: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t$r = v.SetUint(new $Uint64(0, _r$7)); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 16; continue;\n\t\t/* } else if (_ref === 10) { */ case 10:\n\t\t\t_r$8 = d.uint32(); /* */ $s = 43; case 43: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t$r = v.SetUint(new $Uint64(0, _r$8)); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 16; continue;\n\t\t/* } else if (_ref === 11) { */ case 11:\n\t\t\t_r$9 = d.uint64(); /* */ $s = 45; case 45: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\t$r = v.SetUint(_r$9); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 16; continue;\n\t\t/* } else if (_ref === 13) { */ case 12:\n\t\t\t_r$10 = d.uint32(); /* */ $s = 47; case 47: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\t_r$11 = math.Float32frombits(_r$10); /* */ $s = 48; case 48: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t\t$r = v.SetFloat(_r$11); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 16; continue;\n\t\t/* } else if (_ref === 14) { */ case 13:\n\t\t\t_r$12 = d.uint64(); /* */ $s = 50; case 50: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\t\t_r$13 = math.Float64frombits(_r$12); /* */ $s = 51; case 51: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }\n\t\t\t$r = v.SetFloat(_r$13); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 16; continue;\n\t\t/* } else if (_ref === 15) { */ case 14:\n\t\t\t_r$14 = d.uint32(); /* */ $s = 53; case 53: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }\n\t\t\t_r$15 = math.Float32frombits(_r$14); /* */ $s = 54; case 54: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }\n\t\t\t_r$16 = d.uint32(); /* */ $s = 55; case 55: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }\n\t\t\t_r$17 = math.Float32frombits(_r$16); /* */ $s = 56; case 56: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }\n\t\t\t$r = v.SetComplex(new $Complex128(_r$15, _r$17)); /* */ $s = 57; case 57: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 16; continue;\n\t\t/* } else if (_ref === 16) { */ case 15:\n\t\t\t_r$18 = d.uint64(); /* */ $s = 58; case 58: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }\n\t\t\t_r$19 = math.Float64frombits(_r$18); /* */ $s = 59; case 59: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }\n\t\t\t_r$20 = d.uint64(); /* */ $s = 60; case 60: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }\n\t\t\t_r$21 = math.Float64frombits(_r$20); /* */ $s = 61; case 61: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }\n\t\t\t$r = v.SetComplex(new $Complex128(_r$19, _r$21)); /* */ $s = 62; case 62: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 16:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.value }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._v = _v; $f.d = d; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.l = l; $f.l$1 = l$1; $f.l$2 = l$2; $f.t = t; $f.v = v; $f.v$1 = v$1; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecoder.prototype.value = function(v) { return this.$val.value(v); };\n\tencoder.ptr.prototype.value = function(v) {\n\t\tvar $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _v, e, i, i$1, i$2, l, l$1, l$2, t, v, v$1, x, x$1, x$2, x$3, x$4, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _v = $f._v; e = $f.e; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; l = $f.l; l$1 = $f.l$1; l$2 = $f.l$2; t = $f.t; v = $f.v; v$1 = $f.v$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\te = this;\n\t\tv = v;\n\t\t_ref = v.Kind();\n\t\t/* */ if (_ref === 17) { $s = 1; continue; }\n\t\t/* */ if (_ref === 25) { $s = 2; continue; }\n\t\t/* */ if (_ref === 23) { $s = 3; continue; }\n\t\t/* */ if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { $s = 4; continue; }\n\t\t/* */ if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { $s = 5; continue; }\n\t\t/* */ if (_ref === 13 || _ref === 14) { $s = 6; continue; }\n\t\t/* */ if (_ref === 15 || _ref === 16) { $s = 7; continue; }\n\t\t/* */ $s = 8; continue;\n\t\t/* if (_ref === 17) { */ case 1:\n\t\t\tl = v.Len();\n\t\t\ti = 0;\n\t\t\t/* while (true) { */ case 9:\n\t\t\t\t/* if (!(i < l)) { break; } */ if(!(i < l)) { $s = 10; continue; }\n\t\t\t\t_r = v.Index(i); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t\t$r = e.value(_r); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t/* } */ $s = 9; continue; case 10:\n\t\t\t$s = 8; continue;\n\t\t/* } else if (_ref === 25) { */ case 2:\n\t\t\tt = v.Type();\n\t\t\tl$1 = v.NumField();\n\t\t\ti$1 = 0;\n\t\t\t/* while (true) { */ case 13:\n\t\t\t\t/* if (!(i$1 < l$1)) { break; } */ if(!(i$1 < l$1)) { $s = 14; continue; }\n\t\t\t\t_r$1 = v.Field(i$1); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t\tv$1 = _r$1;\n\t\t\t\tif (v$1.CanSet()) { _v = true; $s = 19; continue s; }\n\t\t\t\t_r$2 = t.Field(i$1); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\t_v = !(_r$2.Name === \"_\"); case 19:\n\t\t\t\t/* */ if (_v) { $s = 16; continue; }\n\t\t\t\t/* */ $s = 17; continue;\n\t\t\t\t/* if (_v) { */ case 16:\n\t\t\t\t\t$r = e.value(v$1); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t$s = 18; continue;\n\t\t\t\t/* } else { */ case 17:\n\t\t\t\t\t$r = e.skip(v$1); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t/* } */ case 18:\n\t\t\t\ti$1 = i$1 + (1) >> 0;\n\t\t\t/* } */ $s = 13; continue; case 14:\n\t\t\t$s = 8; continue;\n\t\t/* } else if (_ref === 23) { */ case 3:\n\t\t\tl$2 = v.Len();\n\t\t\ti$2 = 0;\n\t\t\t/* while (true) { */ case 23:\n\t\t\t\t/* if (!(i$2 < l$2)) { break; } */ if(!(i$2 < l$2)) { $s = 24; continue; }\n\t\t\t\t_r$3 = v.Index(i$2); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t\t$r = e.value(_r$3); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\ti$2 = i$2 + (1) >> 0;\n\t\t\t/* } */ $s = 23; continue; case 24:\n\t\t\t$s = 8; continue;\n\t\t/* } else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) { */ case 4:\n\t\t\t_r$4 = v.Type().Kind(); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t_ref$1 = _r$4;\n\t\t\t/* */ if (_ref$1 === 3) { $s = 28; continue; }\n\t\t\t/* */ if (_ref$1 === 4) { $s = 29; continue; }\n\t\t\t/* */ if (_ref$1 === 5) { $s = 30; continue; }\n\t\t\t/* */ if (_ref$1 === 6) { $s = 31; continue; }\n\t\t\t/* */ $s = 32; continue;\n\t\t\t/* if (_ref$1 === 3) { */ case 28:\n\t\t\t\te.int8(((x = v.Int(), x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24));\n\t\t\t\t$s = 32; continue;\n\t\t\t/* } else if (_ref$1 === 4) { */ case 29:\n\t\t\t\t$r = e.int16(((x$1 = v.Int(), x$1.$low + ((x$1.$high >> 31) * 4294967296)) << 16 >> 16)); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 32; continue;\n\t\t\t/* } else if (_ref$1 === 5) { */ case 30:\n\t\t\t\t$r = e.int32(((x$2 = v.Int(), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0)); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 32; continue;\n\t\t\t/* } else if (_ref$1 === 6) { */ case 31:\n\t\t\t\t$r = e.int64(v.Int()); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 32:\n\t\t\t$s = 8; continue;\n\t\t/* } else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) { */ case 5:\n\t\t\t_r$5 = v.Type().Kind(); /* */ $s = 36; case 36: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t_ref$2 = _r$5;\n\t\t\t/* */ if (_ref$2 === 8) { $s = 37; continue; }\n\t\t\t/* */ if (_ref$2 === 9) { $s = 38; continue; }\n\t\t\t/* */ if (_ref$2 === 10) { $s = 39; continue; }\n\t\t\t/* */ if (_ref$2 === 11) { $s = 40; continue; }\n\t\t\t/* */ $s = 41; continue;\n\t\t\t/* if (_ref$2 === 8) { */ case 37:\n\t\t\t\te.uint8((v.Uint().$low << 24 >>> 24));\n\t\t\t\t$s = 41; continue;\n\t\t\t/* } else if (_ref$2 === 9) { */ case 38:\n\t\t\t\t$r = e.uint16((v.Uint().$low << 16 >>> 16)); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 41; continue;\n\t\t\t/* } else if (_ref$2 === 10) { */ case 39:\n\t\t\t\t$r = e.uint32((v.Uint().$low >>> 0)); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 41; continue;\n\t\t\t/* } else if (_ref$2 === 11) { */ case 40:\n\t\t\t\t$r = e.uint64(v.Uint()); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 41:\n\t\t\t$s = 8; continue;\n\t\t/* } else if (_ref === 13 || _ref === 14) { */ case 6:\n\t\t\t_r$6 = v.Type().Kind(); /* */ $s = 45; case 45: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_ref$3 = _r$6;\n\t\t\t/* */ if (_ref$3 === 13) { $s = 46; continue; }\n\t\t\t/* */ if (_ref$3 === 14) { $s = 47; continue; }\n\t\t\t/* */ $s = 48; continue;\n\t\t\t/* if (_ref$3 === 13) { */ case 46:\n\t\t\t\t$r = e.uint32(math.Float32bits($fround(v.Float()))); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 48; continue;\n\t\t\t/* } else if (_ref$3 === 14) { */ case 47:\n\t\t\t\t$r = e.uint64(math.Float64bits(v.Float())); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 48:\n\t\t\t$s = 8; continue;\n\t\t/* } else if (_ref === 15 || _ref === 16) { */ case 7:\n\t\t\t_r$7 = v.Type().Kind(); /* */ $s = 51; case 51: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t_ref$4 = _r$7;\n\t\t\t/* */ if (_ref$4 === 15) { $s = 52; continue; }\n\t\t\t/* */ if (_ref$4 === 16) { $s = 53; continue; }\n\t\t\t/* */ $s = 54; continue;\n\t\t\t/* if (_ref$4 === 15) { */ case 52:\n\t\t\t\tx$3 = v.Complex();\n\t\t\t\t$r = e.uint32(math.Float32bits($fround(x$3.$real))); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$r = e.uint32(math.Float32bits($fround(x$3.$imag))); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 54; continue;\n\t\t\t/* } else if (_ref$4 === 16) { */ case 53:\n\t\t\t\tx$4 = v.Complex();\n\t\t\t\t$r = e.uint64(math.Float64bits(x$4.$real)); /* */ $s = 57; case 57: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$r = e.uint64(math.Float64bits(x$4.$imag)); /* */ $s = 58; case 58: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 54:\n\t\t/* } */ case 8:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.value }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._v = _v; $f.e = e; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.l = l; $f.l$1 = l$1; $f.l$2 = l$2; $f.t = t; $f.v = v; $f.v$1 = v$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tencoder.prototype.value = function(v) { return this.$val.value(v); };\n\tdecoder.ptr.prototype.skip = function(v) {\n\t\tvar $ptr, _r, d, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; d = $f.d; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\tv = v;\n\t\t_r = dataSize(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\td.buf = $subslice(d.buf, _r);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.skip }; } $f.$ptr = $ptr; $f._r = _r; $f.d = d; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecoder.prototype.skip = function(v) { return this.$val.skip(v); };\n\tencoder.ptr.prototype.skip = function(v) {\n\t\tvar $ptr, _i, _r, _ref, e, i, n, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; e = $f.e; i = $f.i; n = $f.n; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\te = this;\n\t\tv = v;\n\t\t_r = dataSize(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tn = _r;\n\t\t_ref = $subslice(e.buf, 0, n);\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\t(x = e.buf, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i] = 0));\n\t\t\t_i++;\n\t\t}\n\t\te.buf = $subslice(e.buf, n);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.skip }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.e = e; $f.i = i; $f.n = n; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tencoder.prototype.skip = function(v) { return this.$val.skip(v); };\n\tintDataSize = function(data) {\n\t\tvar $ptr, _ref, data, data$1, data$10, data$11, data$12, data$2, data$3, data$4, data$5, data$6, data$7, data$8, data$9;\n\t\t_ref = data;\n\t\tif ($assertType(_ref, $Int8, true)[1] || $assertType(_ref, ptrType, true)[1] || $assertType(_ref, ptrType$1, true)[1]) {\n\t\t\tdata$1 = _ref;\n\t\t\treturn 1;\n\t\t} else if ($assertType(_ref, sliceType$1, true)[1]) {\n\t\t\tdata$2 = _ref.$val;\n\t\t\treturn data$2.$length;\n\t\t} else if ($assertType(_ref, sliceType, true)[1]) {\n\t\t\tdata$3 = _ref.$val;\n\t\t\treturn data$3.$length;\n\t\t} else if ($assertType(_ref, $Int16, true)[1] || $assertType(_ref, ptrType$2, true)[1] || $assertType(_ref, ptrType$3, true)[1]) {\n\t\t\tdata$4 = _ref;\n\t\t\treturn 2;\n\t\t} else if ($assertType(_ref, sliceType$2, true)[1]) {\n\t\t\tdata$5 = _ref.$val;\n\t\t\treturn 2 * data$5.$length >> 0;\n\t\t} else if ($assertType(_ref, sliceType$3, true)[1]) {\n\t\t\tdata$6 = _ref.$val;\n\t\t\treturn 2 * data$6.$length >> 0;\n\t\t} else if ($assertType(_ref, $Int32, true)[1] || $assertType(_ref, ptrType$4, true)[1] || $assertType(_ref, ptrType$5, true)[1]) {\n\t\t\tdata$7 = _ref;\n\t\t\treturn 4;\n\t\t} else if ($assertType(_ref, sliceType$4, true)[1]) {\n\t\t\tdata$8 = _ref.$val;\n\t\t\treturn 4 * data$8.$length >> 0;\n\t\t} else if ($assertType(_ref, sliceType$5, true)[1]) {\n\t\t\tdata$9 = _ref.$val;\n\t\t\treturn 4 * data$9.$length >> 0;\n\t\t} else if ($assertType(_ref, $Int64, true)[1] || $assertType(_ref, ptrType$6, true)[1] || $assertType(_ref, ptrType$7, true)[1]) {\n\t\t\tdata$10 = _ref;\n\t\t\treturn 8;\n\t\t} else if ($assertType(_ref, sliceType$6, true)[1]) {\n\t\t\tdata$11 = _ref.$val;\n\t\t\treturn 8 * data$11.$length >> 0;\n\t\t} else if ($assertType(_ref, sliceType$7, true)[1]) {\n\t\t\tdata$12 = _ref.$val;\n\t\t\treturn 8 * data$12.$length >> 0;\n\t\t}\n\t\treturn 0;\n\t};\n\tlittleEndian.methods = [{prop: \"Uint16\", name: \"Uint16\", pkg: \"\", typ: $funcType([sliceType], [$Uint16], false)}, {prop: \"PutUint16\", name: \"PutUint16\", pkg: \"\", typ: $funcType([sliceType, $Uint16], [], false)}, {prop: \"Uint32\", name: \"Uint32\", pkg: \"\", typ: $funcType([sliceType], [$Uint32], false)}, {prop: \"PutUint32\", name: \"PutUint32\", pkg: \"\", typ: $funcType([sliceType, $Uint32], [], false)}, {prop: \"Uint64\", name: \"Uint64\", pkg: \"\", typ: $funcType([sliceType], [$Uint64], false)}, {prop: \"PutUint64\", name: \"PutUint64\", pkg: \"\", typ: $funcType([sliceType, $Uint64], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GoString\", name: \"GoString\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$8.methods = [{prop: \"uint8\", name: \"uint8\", pkg: \"encoding/binary\", typ: $funcType([], [$Uint8], false)}, {prop: \"uint16\", name: \"uint16\", pkg: \"encoding/binary\", typ: $funcType([], [$Uint16], false)}, {prop: \"uint32\", name: \"uint32\", pkg: \"encoding/binary\", typ: $funcType([], [$Uint32], false)}, {prop: \"uint64\", name: \"uint64\", pkg: \"encoding/binary\", typ: $funcType([], [$Uint64], false)}, {prop: \"int8\", name: \"int8\", pkg: \"encoding/binary\", typ: $funcType([], [$Int8], false)}, {prop: \"int16\", name: \"int16\", pkg: \"encoding/binary\", typ: $funcType([], [$Int16], false)}, {prop: \"int32\", name: \"int32\", pkg: \"encoding/binary\", typ: $funcType([], [$Int32], false)}, {prop: \"int64\", name: \"int64\", pkg: \"encoding/binary\", typ: $funcType([], [$Int64], false)}, {prop: \"value\", name: \"value\", pkg: \"encoding/binary\", typ: $funcType([reflect.Value], [], false)}, {prop: \"skip\", name: \"skip\", pkg: \"encoding/binary\", typ: $funcType([reflect.Value], [], false)}];\n\tptrType$9.methods = [{prop: \"uint8\", name: \"uint8\", pkg: \"encoding/binary\", typ: $funcType([$Uint8], [], false)}, {prop: \"uint16\", name: \"uint16\", pkg: \"encoding/binary\", typ: $funcType([$Uint16], [], false)}, {prop: \"uint32\", name: \"uint32\", pkg: \"encoding/binary\", typ: $funcType([$Uint32], [], false)}, {prop: \"uint64\", name: \"uint64\", pkg: \"encoding/binary\", typ: $funcType([$Uint64], [], false)}, {prop: \"int8\", name: \"int8\", pkg: \"encoding/binary\", typ: $funcType([$Int8], [], false)}, {prop: \"int16\", name: \"int16\", pkg: \"encoding/binary\", typ: $funcType([$Int16], [], false)}, {prop: \"int32\", name: \"int32\", pkg: \"encoding/binary\", typ: $funcType([$Int32], [], false)}, {prop: \"int64\", name: \"int64\", pkg: \"encoding/binary\", typ: $funcType([$Int64], [], false)}, {prop: \"value\", name: \"value\", pkg: \"encoding/binary\", typ: $funcType([reflect.Value], [], false)}, {prop: \"skip\", name: \"skip\", pkg: \"encoding/binary\", typ: $funcType([reflect.Value], [], false)}];\n\tByteOrder.init([{prop: \"PutUint16\", name: \"PutUint16\", pkg: \"\", typ: $funcType([sliceType, $Uint16], [], false)}, {prop: \"PutUint32\", name: \"PutUint32\", pkg: \"\", typ: $funcType([sliceType, $Uint32], [], false)}, {prop: \"PutUint64\", name: \"PutUint64\", pkg: \"\", typ: $funcType([sliceType, $Uint64], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Uint16\", name: \"Uint16\", pkg: \"\", typ: $funcType([sliceType], [$Uint16], false)}, {prop: \"Uint32\", name: \"Uint32\", pkg: \"\", typ: $funcType([sliceType], [$Uint32], false)}, {prop: \"Uint64\", name: \"Uint64\", pkg: \"\", typ: $funcType([sliceType], [$Uint64], false)}]);\n\tlittleEndian.init([]);\n\tdecoder.init([{prop: \"order\", name: \"order\", pkg: \"encoding/binary\", typ: ByteOrder, tag: \"\"}, {prop: \"buf\", name: \"buf\", pkg: \"encoding/binary\", typ: sliceType, tag: \"\"}]);\n\tencoder.init([{prop: \"order\", name: \"order\", pkg: \"encoding/binary\", typ: ByteOrder, tag: \"\"}, {prop: \"buf\", name: \"buf\", pkg: \"encoding/binary\", typ: sliceType, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = reflect.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$pkg.LittleEndian = new littleEndian.ptr();\n\t\toverflow = errors.New(\"binary: varint overflows a 64-bit integer\");\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"bufio\"] = (function() {\n\tvar $pkg = {}, $init, bytes, errors, io, utf8, Writer, sliceType, ptrType$1, errNegativeRead, errNegativeWrite, NewWriterSize, NewWriter;\n\tbytes = $packages[\"bytes\"];\n\terrors = $packages[\"errors\"];\n\tio = $packages[\"io\"];\n\tutf8 = $packages[\"unicode/utf8\"];\n\tWriter = $pkg.Writer = $newType(0, $kindStruct, \"bufio.Writer\", \"Writer\", \"bufio\", function(err_, buf_, n_, wr_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.err = $ifaceNil;\n\t\t\tthis.buf = sliceType.nil;\n\t\t\tthis.n = 0;\n\t\t\tthis.wr = $ifaceNil;\n\t\t\treturn;\n\t\t}\n\t\tthis.err = err_;\n\t\tthis.buf = buf_;\n\t\tthis.n = n_;\n\t\tthis.wr = wr_;\n\t});\n\tsliceType = $sliceType($Uint8);\n\tptrType$1 = $ptrType(Writer);\n\tNewWriterSize = function(w, size) {\n\t\tvar $ptr, _tuple, b, ok, size, w;\n\t\t_tuple = $assertType(w, ptrType$1, true); b = _tuple[0]; ok = _tuple[1];\n\t\tif (ok && b.buf.$length >= size) {\n\t\t\treturn b;\n\t\t}\n\t\tif (size <= 0) {\n\t\t\tsize = 4096;\n\t\t}\n\t\treturn new Writer.ptr($ifaceNil, $makeSlice(sliceType, size), 0, w);\n\t};\n\t$pkg.NewWriterSize = NewWriterSize;\n\tNewWriter = function(w) {\n\t\tvar $ptr, w;\n\t\treturn NewWriterSize(w, 4096);\n\t};\n\t$pkg.NewWriter = NewWriter;\n\tWriter.ptr.prototype.Reset = function(w) {\n\t\tvar $ptr, b, w;\n\t\tb = this;\n\t\tb.err = $ifaceNil;\n\t\tb.n = 0;\n\t\tb.wr = w;\n\t};\n\tWriter.prototype.Reset = function(w) { return this.$val.Reset(w); };\n\tWriter.ptr.prototype.Flush = function() {\n\t\tvar $ptr, _r, b, err, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tb = this;\n\t\t_r = b.flush(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\terr = _r;\n\t\treturn err;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Flush }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tWriter.prototype.Flush = function() { return this.$val.Flush(); };\n\tWriter.ptr.prototype.flush = function() {\n\t\tvar $ptr, _r, _tuple, b, err, n, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tb = this;\n\t\tif (!($interfaceIsEqual(b.err, $ifaceNil))) {\n\t\t\treturn b.err;\n\t\t}\n\t\tif (b.n === 0) {\n\t\t\treturn $ifaceNil;\n\t\t}\n\t\t_r = b.wr.Write($subslice(b.buf, 0, b.n)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; n = _tuple[0]; err = _tuple[1];\n\t\tif (n < b.n && $interfaceIsEqual(err, $ifaceNil)) {\n\t\t\terr = io.ErrShortWrite;\n\t\t}\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\tif (n > 0 && n < b.n) {\n\t\t\t\t$copySlice($subslice(b.buf, 0, (b.n - n >> 0)), $subslice(b.buf, n, b.n));\n\t\t\t}\n\t\t\tb.n = b.n - (n) >> 0;\n\t\t\tb.err = err;\n\t\t\treturn err;\n\t\t}\n\t\tb.n = 0;\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.flush }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tWriter.prototype.flush = function() { return this.$val.flush(); };\n\tWriter.ptr.prototype.Available = function() {\n\t\tvar $ptr, b;\n\t\tb = this;\n\t\treturn b.buf.$length - b.n >> 0;\n\t};\n\tWriter.prototype.Available = function() { return this.$val.Available(); };\n\tWriter.ptr.prototype.Buffered = function() {\n\t\tvar $ptr, b;\n\t\tb = this;\n\t\treturn b.n;\n\t};\n\tWriter.prototype.Buffered = function() { return this.$val.Buffered(); };\n\tWriter.ptr.prototype.Write = function(p) {\n\t\tvar $ptr, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, err, n, n$1, nn, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; n$1 = $f.n$1; nn = $f.nn; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tnn = 0;\n\t\terr = $ifaceNil;\n\t\tb = this;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(p.$length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!(p.$length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }\n\t\t\tn = 0;\n\t\t\t/* */ if (b.Buffered() === 0) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (b.Buffered() === 0) { */ case 3:\n\t\t\t\t_r = b.wr.Write(p); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t\t_tuple = _r; n = _tuple[0]; b.err = _tuple[1];\n\t\t\t\t$s = 5; continue;\n\t\t\t/* } else { */ case 4:\n\t\t\t\tn = $copySlice($subslice(b.buf, b.n), p);\n\t\t\t\tb.n = b.n + (n) >> 0;\n\t\t\t\t_r$1 = b.flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t\t_r$1;\n\t\t\t/* } */ case 5:\n\t\t\tnn = nn + (n) >> 0;\n\t\t\tp = $subslice(p, n);\n\t\t/* } */ $s = 1; continue; case 2:\n\t\tif (!($interfaceIsEqual(b.err, $ifaceNil))) {\n\t\t\t_tmp = nn; _tmp$1 = b.err; nn = _tmp; err = _tmp$1;\n\t\t\treturn [nn, err];\n\t\t}\n\t\tn$1 = $copySlice($subslice(b.buf, b.n), p);\n\t\tb.n = b.n + (n$1) >> 0;\n\t\tnn = nn + (n$1) >> 0;\n\t\t_tmp$2 = nn; _tmp$3 = $ifaceNil; nn = _tmp$2; err = _tmp$3;\n\t\treturn [nn, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Write }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.n$1 = n$1; $f.nn = nn; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tWriter.prototype.Write = function(p) { return this.$val.Write(p); };\n\tWriter.ptr.prototype.WriteByte = function(c) {\n\t\tvar $ptr, _r, _v, b, c, x, x$1, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; b = $f.b; c = $f.c; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tb = this;\n\t\tif (!($interfaceIsEqual(b.err, $ifaceNil))) {\n\t\t\treturn b.err;\n\t\t}\n\t\tif (!(b.Available() <= 0)) { _v = false; $s = 3; continue s; }\n\t\t_r = b.flush(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_v = !($interfaceIsEqual(_r, $ifaceNil)); case 3:\n\t\t/* */ if (_v) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (_v) { */ case 1:\n\t\t\treturn b.err;\n\t\t/* } */ case 2:\n\t\t(x = b.buf, x$1 = b.n, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + x$1] = c));\n\t\tb.n = b.n + (1) >> 0;\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.WriteByte }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.b = b; $f.c = c; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tWriter.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };\n\tWriter.ptr.prototype.WriteRune = function(r) {\n\t\tvar $ptr, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, b, err, n, r, size, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; r = $f.r; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tsize = 0;\n\t\terr = $ifaceNil;\n\t\tb = this;\n\t\t/* */ if (r < 128) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (r < 128) { */ case 1:\n\t\t\t_r = b.WriteByte((r << 24 >>> 24)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\terr = _r;\n\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\t_tmp = 0; _tmp$1 = err; size = _tmp; err = _tmp$1;\n\t\t\t\treturn [size, err];\n\t\t\t}\n\t\t\t_tmp$2 = 1; _tmp$3 = $ifaceNil; size = _tmp$2; err = _tmp$3;\n\t\t\treturn [size, err];\n\t\t/* } */ case 2:\n\t\tif (!($interfaceIsEqual(b.err, $ifaceNil))) {\n\t\t\t_tmp$4 = 0; _tmp$5 = b.err; size = _tmp$4; err = _tmp$5;\n\t\t\treturn [size, err];\n\t\t}\n\t\tn = b.Available();\n\t\t/* */ if (n < 4) { $s = 4; continue; }\n\t\t/* */ $s = 5; continue;\n\t\t/* if (n < 4) { */ case 4:\n\t\t\t_r$1 = b.flush(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t_r$1;\n\t\t\t/* */ if (!($interfaceIsEqual(b.err, $ifaceNil))) { $s = 7; continue; }\n\t\t\t/* */ $s = 8; continue;\n\t\t\t/* if (!($interfaceIsEqual(b.err, $ifaceNil))) { */ case 7:\n\t\t\t\t_tmp$6 = 0; _tmp$7 = b.err; size = _tmp$6; err = _tmp$7;\n\t\t\t\treturn [size, err];\n\t\t\t/* } */ case 8:\n\t\t\tn = b.Available();\n\t\t\t/* */ if (n < 4) { $s = 9; continue; }\n\t\t\t/* */ $s = 10; continue;\n\t\t\t/* if (n < 4) { */ case 9:\n\t\t\t\t_r$2 = b.WriteString($encodeRune(r)); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\t_tuple = _r$2; size = _tuple[0]; err = _tuple[1];\n\t\t\t\treturn [size, err];\n\t\t\t/* } */ case 10:\n\t\t/* } */ case 5:\n\t\tsize = utf8.EncodeRune($subslice(b.buf, b.n), r);\n\t\tb.n = b.n + (size) >> 0;\n\t\t_tmp$8 = size; _tmp$9 = $ifaceNil; size = _tmp$8; err = _tmp$9;\n\t\treturn [size, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.WriteRune }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.r = r; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tWriter.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };\n\tWriter.ptr.prototype.WriteString = function(s) {\n\t\tvar $ptr, _r, b, n, n$1, nn, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; n = $f.n; n$1 = $f.n$1; nn = $f.nn; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tb = this;\n\t\tnn = 0;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(s.length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!(s.length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }\n\t\t\tn = $copyString($subslice(b.buf, b.n), s);\n\t\t\tb.n = b.n + (n) >> 0;\n\t\t\tnn = nn + (n) >> 0;\n\t\t\ts = s.substring(n);\n\t\t\t_r = b.flush(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t_r;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\tif (!($interfaceIsEqual(b.err, $ifaceNil))) {\n\t\t\treturn [nn, b.err];\n\t\t}\n\t\tn$1 = $copyString($subslice(b.buf, b.n), s);\n\t\tb.n = b.n + (n$1) >> 0;\n\t\tnn = nn + (n$1) >> 0;\n\t\treturn [nn, $ifaceNil];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.n = n; $f.n$1 = n$1; $f.nn = nn; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tWriter.prototype.WriteString = function(s) { return this.$val.WriteString(s); };\n\tWriter.ptr.prototype.ReadFrom = function(r) {\n\t\tvar $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, b, err, err1, m, n, nr, ok, r, w, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; err = $f.err; err1 = $f.err1; m = $f.m; n = $f.n; nr = $f.nr; ok = $f.ok; r = $f.r; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = new $Int64(0, 0);\n\t\terr = $ifaceNil;\n\t\tb = this;\n\t\t/* */ if (b.Buffered() === 0) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (b.Buffered() === 0) { */ case 1:\n\t\t\t_tuple = $assertType(b.wr, io.ReaderFrom, true); w = _tuple[0]; ok = _tuple[1];\n\t\t\t/* */ if (ok) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (ok) { */ case 3:\n\t\t\t\t_r = w.ReadFrom(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$1 = _r; n = _tuple$1[0]; err = _tuple$1[1];\n\t\t\t\treturn [n, err];\n\t\t\t/* } */ case 4:\n\t\t/* } */ case 2:\n\t\tm = 0;\n\t\t/* while (true) { */ case 6:\n\t\t\t/* */ if (b.Available() === 0) { $s = 8; continue; }\n\t\t\t/* */ $s = 9; continue;\n\t\t\t/* if (b.Available() === 0) { */ case 8:\n\t\t\t\t_r$1 = b.flush(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t\terr1 = _r$1;\n\t\t\t\t/* */ if (!($interfaceIsEqual(err1, $ifaceNil))) { $s = 11; continue; }\n\t\t\t\t/* */ $s = 12; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err1, $ifaceNil))) { */ case 11:\n\t\t\t\t\t_tmp = n; _tmp$1 = err1; n = _tmp; err = _tmp$1;\n\t\t\t\t\treturn [n, err];\n\t\t\t\t/* } */ case 12:\n\t\t\t/* } */ case 9:\n\t\t\tnr = 0;\n\t\t\t/* while (true) { */ case 13:\n\t\t\t\t/* if (!(nr < 100)) { break; } */ if(!(nr < 100)) { $s = 14; continue; }\n\t\t\t\t_r$2 = r.Read($subslice(b.buf, b.n)); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$2 = _r$2; m = _tuple$2[0]; err = _tuple$2[1];\n\t\t\t\tif (!((m === 0)) || !($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\t\t/* break; */ $s = 14; continue;\n\t\t\t\t}\n\t\t\t\tnr = nr + (1) >> 0;\n\t\t\t/* } */ $s = 13; continue; case 14:\n\t\t\tif (nr === 100) {\n\t\t\t\t_tmp$2 = n; _tmp$3 = io.ErrNoProgress; n = _tmp$2; err = _tmp$3;\n\t\t\t\treturn [n, err];\n\t\t\t}\n\t\t\tb.n = b.n + (m) >> 0;\n\t\t\tn = (x = new $Int64(0, m), new $Int64(n.$high + x.$high, n.$low + x.$low));\n\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\t/* break; */ $s = 7; continue;\n\t\t\t}\n\t\t/* } */ $s = 6; continue; case 7:\n\t\t/* */ if ($interfaceIsEqual(err, io.EOF)) { $s = 16; continue; }\n\t\t/* */ $s = 17; continue;\n\t\t/* if ($interfaceIsEqual(err, io.EOF)) { */ case 16:\n\t\t\t/* */ if (b.Available() === 0) { $s = 18; continue; }\n\t\t\t/* */ $s = 19; continue;\n\t\t\t/* if (b.Available() === 0) { */ case 18:\n\t\t\t\t_r$3 = b.flush(); /* */ $s = 21; case 21: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t\terr = _r$3;\n\t\t\t\t$s = 20; continue;\n\t\t\t/* } else { */ case 19:\n\t\t\t\terr = $ifaceNil;\n\t\t\t/* } */ case 20:\n\t\t/* } */ case 17:\n\t\t_tmp$4 = n; _tmp$5 = err; n = _tmp$4; err = _tmp$5;\n\t\treturn [n, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.ReadFrom }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.err = err; $f.err1 = err1; $f.m = m; $f.n = n; $f.nr = nr; $f.ok = ok; $f.r = r; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tWriter.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };\n\tptrType$1.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([io.Writer], [], false)}, {prop: \"Flush\", name: \"Flush\", pkg: \"\", typ: $funcType([], [$error], false)}, {prop: \"flush\", name: \"flush\", pkg: \"bufio\", typ: $funcType([], [$error], false)}, {prop: \"Available\", name: \"Available\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Buffered\", name: \"Buffered\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Write\", name: \"Write\", pkg: \"\", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: \"WriteByte\", name: \"WriteByte\", pkg: \"\", typ: $funcType([$Uint8], [$error], false)}, {prop: \"WriteRune\", name: \"WriteRune\", pkg: \"\", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: \"WriteString\", name: \"WriteString\", pkg: \"\", typ: $funcType([$String], [$Int, $error], false)}, {prop: \"ReadFrom\", name: \"ReadFrom\", pkg: \"\", typ: $funcType([io.Reader], [$Int64, $error], false)}];\n\tWriter.init([{prop: \"err\", name: \"err\", pkg: \"bufio\", typ: $error, tag: \"\"}, {prop: \"buf\", name: \"buf\", pkg: \"bufio\", typ: sliceType, tag: \"\"}, {prop: \"n\", name: \"n\", pkg: \"bufio\", typ: $Int, tag: \"\"}, {prop: \"wr\", name: \"wr\", pkg: \"bufio\", typ: io.Writer, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$pkg.ErrInvalidUnreadByte = errors.New(\"bufio: invalid use of UnreadByte\");\n\t\t$pkg.ErrInvalidUnreadRune = errors.New(\"bufio: invalid use of UnreadRune\");\n\t\t$pkg.ErrBufferFull = errors.New(\"bufio: buffer full\");\n\t\t$pkg.ErrNegativeCount = errors.New(\"bufio: negative count\");\n\t\terrNegativeRead = errors.New(\"bufio: reader returned negative count from Read\");\n\t\terrNegativeWrite = errors.New(\"bufio: writer returned negative count from Write\");\n\t\t$pkg.ErrTooLong = errors.New(\"bufio.Scanner: token too long\");\n\t\t$pkg.ErrNegativeAdvance = errors.New(\"bufio.Scanner: SplitFunc returns negative advance count\");\n\t\t$pkg.ErrAdvanceTooFar = errors.New(\"bufio.Scanner: SplitFunc returns advance count beyond input\");\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"encoding\"] = (function() {\n\tvar $pkg = {}, $init, TextMarshaler, TextUnmarshaler, sliceType;\n\tTextMarshaler = $pkg.TextMarshaler = $newType(8, $kindInterface, \"encoding.TextMarshaler\", \"TextMarshaler\", \"encoding\", null);\n\tTextUnmarshaler = $pkg.TextUnmarshaler = $newType(8, $kindInterface, \"encoding.TextUnmarshaler\", \"TextUnmarshaler\", \"encoding\", null);\n\tsliceType = $sliceType($Uint8);\n\tTextMarshaler.init([{prop: \"MarshalText\", name: \"MarshalText\", pkg: \"\", typ: $funcType([], [sliceType, $error], false)}]);\n\tTextUnmarshaler.init([{prop: \"UnmarshalText\", name: \"UnmarshalText\", pkg: \"\", typ: $funcType([sliceType], [$error], false)}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"encoding/base64\"] = (function() {\n\tvar $pkg = {}, $init, bytes, io, strconv, strings, Encoding, CorruptInputError, sliceType, ptrType, arrayType$2, arrayType$4, removeNewlinesMapper, NewEncoding;\n\tbytes = $packages[\"bytes\"];\n\tio = $packages[\"io\"];\n\tstrconv = $packages[\"strconv\"];\n\tstrings = $packages[\"strings\"];\n\tEncoding = $pkg.Encoding = $newType(0, $kindStruct, \"base64.Encoding\", \"Encoding\", \"encoding/base64\", function(encode_, decodeMap_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.encode = \"\";\n\t\t\tthis.decodeMap = arrayType$4.zero();\n\t\t\treturn;\n\t\t}\n\t\tthis.encode = encode_;\n\t\tthis.decodeMap = decodeMap_;\n\t});\n\tCorruptInputError = $pkg.CorruptInputError = $newType(8, $kindInt64, \"base64.CorruptInputError\", \"CorruptInputError\", \"encoding/base64\", null);\n\tsliceType = $sliceType($Uint8);\n\tptrType = $ptrType(Encoding);\n\tarrayType$2 = $arrayType($Uint8, 4);\n\tarrayType$4 = $arrayType($Uint8, 256);\n\tNewEncoding = function(encoder$1) {\n\t\tvar $ptr, e, encoder$1, i, i$1, x, x$1, x$2;\n\t\te = new Encoding.ptr();\n\t\te.encode = encoder$1;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < 256)) { break; }\n\t\t\t(x = e.decodeMap, ((i < 0 || i >= x.length) ? $throwRuntimeError(\"index out of range\") : x[i] = 255));\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\ti$1 = 0;\n\t\twhile (true) {\n\t\t\tif (!(i$1 < encoder$1.length)) { break; }\n\t\t\t(x$1 = e.decodeMap, x$2 = encoder$1.charCodeAt(i$1), ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError(\"index out of range\") : x$1[x$2] = (i$1 << 24 >>> 24)));\n\t\t\ti$1 = i$1 + (1) >> 0;\n\t\t}\n\t\treturn e;\n\t};\n\t$pkg.NewEncoding = NewEncoding;\n\tEncoding.ptr.prototype.Encode = function(dst, src) {\n\t\tvar $ptr, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, b0, b1, b2, b3, dst, enc, src;\n\t\tenc = this;\n\t\tif (src.$length === 0) {\n\t\t\treturn;\n\t\t}\n\t\twhile (true) {\n\t\t\tif (!(src.$length > 0)) { break; }\n\t\t\t_tmp = 0; _tmp$1 = 0; _tmp$2 = 0; _tmp$3 = 0; b0 = _tmp; b1 = _tmp$1; b2 = _tmp$2; b3 = _tmp$3;\n\t\t\t_ref = src.$length;\n\t\t\tif (_ref === 2) {\n\t\t\t\tb2 = (b2 | ((((((1 >= src.$length ? $throwRuntimeError(\"index out of range\") : src.$array[src.$offset + 1]) << 2 << 24 >>> 24)) & 63) >>> 0))) >>> 0;\n\t\t\t\tb1 = (1 >= src.$length ? $throwRuntimeError(\"index out of range\") : src.$array[src.$offset + 1]) >>> 4 << 24 >>> 24;\n\t\t\t\tb1 = (b1 | ((((((0 >= src.$length ? $throwRuntimeError(\"index out of range\") : src.$array[src.$offset + 0]) << 4 << 24 >>> 24)) & 63) >>> 0))) >>> 0;\n\t\t\t\tb0 = (0 >= src.$length ? $throwRuntimeError(\"index out of range\") : src.$array[src.$offset + 0]) >>> 2 << 24 >>> 24;\n\t\t\t} else if (_ref === 1) {\n\t\t\t\tb1 = (b1 | ((((((0 >= src.$length ? $throwRuntimeError(\"index out of range\") : src.$array[src.$offset + 0]) << 4 << 24 >>> 24)) & 63) >>> 0))) >>> 0;\n\t\t\t\tb0 = (0 >= src.$length ? $throwRuntimeError(\"index out of range\") : src.$array[src.$offset + 0]) >>> 2 << 24 >>> 24;\n\t\t\t} else {\n\t\t\t\tb3 = ((2 >= src.$length ? $throwRuntimeError(\"index out of range\") : src.$array[src.$offset + 2]) & 63) >>> 0;\n\t\t\t\tb2 = (2 >= src.$length ? $throwRuntimeError(\"index out of range\") : src.$array[src.$offset + 2]) >>> 6 << 24 >>> 24;\n\t\t\t\tb2 = (b2 | ((((((1 >= src.$length ? $throwRuntimeError(\"index out of range\") : src.$array[src.$offset + 1]) << 2 << 24 >>> 24)) & 63) >>> 0))) >>> 0;\n\t\t\t\tb1 = (1 >= src.$length ? $throwRuntimeError(\"index out of range\") : src.$array[src.$offset + 1]) >>> 4 << 24 >>> 24;\n\t\t\t\tb1 = (b1 | ((((((0 >= src.$length ? $throwRuntimeError(\"index out of range\") : src.$array[src.$offset + 0]) << 4 << 24 >>> 24)) & 63) >>> 0))) >>> 0;\n\t\t\t\tb0 = (0 >= src.$length ? $throwRuntimeError(\"index out of range\") : src.$array[src.$offset + 0]) >>> 2 << 24 >>> 24;\n\t\t\t}\n\t\t\t(0 >= dst.$length ? $throwRuntimeError(\"index out of range\") : dst.$array[dst.$offset + 0] = enc.encode.charCodeAt(b0));\n\t\t\t(1 >= dst.$length ? $throwRuntimeError(\"index out of range\") : dst.$array[dst.$offset + 1] = enc.encode.charCodeAt(b1));\n\t\t\t(2 >= dst.$length ? $throwRuntimeError(\"index out of range\") : dst.$array[dst.$offset + 2] = enc.encode.charCodeAt(b2));\n\t\t\t(3 >= dst.$length ? $throwRuntimeError(\"index out of range\") : dst.$array[dst.$offset + 3] = enc.encode.charCodeAt(b3));\n\t\t\tif (src.$length < 3) {\n\t\t\t\t(3 >= dst.$length ? $throwRuntimeError(\"index out of range\") : dst.$array[dst.$offset + 3] = 61);\n\t\t\t\tif (src.$length < 2) {\n\t\t\t\t\t(2 >= dst.$length ? $throwRuntimeError(\"index out of range\") : dst.$array[dst.$offset + 2] = 61);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tsrc = $subslice(src, 3);\n\t\t\tdst = $subslice(dst, 4);\n\t\t}\n\t};\n\tEncoding.prototype.Encode = function(dst, src) { return this.$val.Encode(dst, src); };\n\tEncoding.ptr.prototype.EncodeToString = function(src) {\n\t\tvar $ptr, buf, enc, src;\n\t\tenc = this;\n\t\tbuf = $makeSlice(sliceType, enc.EncodedLen(src.$length));\n\t\tenc.Encode(buf, src);\n\t\treturn $bytesToString(buf);\n\t};\n\tEncoding.prototype.EncodeToString = function(src) { return this.$val.EncodeToString(src); };\n\tEncoding.ptr.prototype.EncodedLen = function(n) {\n\t\tvar $ptr, _q, enc, n;\n\t\tenc = this;\n\t\treturn (_q = ((n + 2 >> 0)) / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\")) * 4 >> 0;\n\t};\n\tEncoding.prototype.EncodedLen = function(n) { return this.$val.EncodedLen(n); };\n\tCorruptInputError.prototype.Error = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn \"illegal base64 data at input byte \" + strconv.FormatInt(new $Int64(e.$high, e.$low), 10);\n\t};\n\t$ptrType(CorruptInputError).prototype.Error = function() { return this.$get().Error(); };\n\tEncoding.ptr.prototype.decode = function(dst, src) {\n\t\tvar $ptr, _i, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, dbuf, dlen, dst, enc, end, err, in$1, j, n, olen, src, x;\n\t\tn = 0;\n\t\tend = false;\n\t\terr = $ifaceNil;\n\t\tenc = this;\n\t\tolen = src.$length;\n\t\twhile (true) {\n\t\t\tif (!(src.$length > 0 && !end)) { break; }\n\t\t\tdbuf = $clone(arrayType$2.zero(), arrayType$2);\n\t\t\tdlen = 4;\n\t\t\t_ref = dbuf;\n\t\t\t_i = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(_i < 4)) { break; }\n\t\t\t\tj = _i;\n\t\t\t\tif (src.$length === 0) {\n\t\t\t\t\t_tmp = n; _tmp$1 = false; _tmp$2 = new CorruptInputError(0, ((olen - src.$length >> 0) - j >> 0)); n = _tmp; end = _tmp$1; err = _tmp$2;\n\t\t\t\t\treturn [n, end, err];\n\t\t\t\t}\n\t\t\t\tin$1 = (0 >= src.$length ? $throwRuntimeError(\"index out of range\") : src.$array[src.$offset + 0]);\n\t\t\t\tsrc = $subslice(src, 1);\n\t\t\t\tif (in$1 === 61) {\n\t\t\t\t\t_ref$1 = j;\n\t\t\t\t\tif (_ref$1 === 0 || _ref$1 === 1) {\n\t\t\t\t\t\t_tmp$3 = n; _tmp$4 = false; _tmp$5 = new CorruptInputError(0, ((olen - src.$length >> 0) - 1 >> 0)); n = _tmp$3; end = _tmp$4; err = _tmp$5;\n\t\t\t\t\t\treturn [n, end, err];\n\t\t\t\t\t} else if (_ref$1 === 2) {\n\t\t\t\t\t\tif (src.$length === 0) {\n\t\t\t\t\t\t\t_tmp$6 = n; _tmp$7 = false; _tmp$8 = new CorruptInputError(0, olen); n = _tmp$6; end = _tmp$7; err = _tmp$8;\n\t\t\t\t\t\t\treturn [n, end, err];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!(((0 >= src.$length ? $throwRuntimeError(\"index out of range\") : src.$array[src.$offset + 0]) === 61))) {\n\t\t\t\t\t\t\t_tmp$9 = n; _tmp$10 = false; _tmp$11 = new CorruptInputError(0, ((olen - src.$length >> 0) - 1 >> 0)); n = _tmp$9; end = _tmp$10; err = _tmp$11;\n\t\t\t\t\t\t\treturn [n, end, err];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsrc = $subslice(src, 1);\n\t\t\t\t\t}\n\t\t\t\t\tif (src.$length > 0) {\n\t\t\t\t\t\terr = new CorruptInputError(0, (olen - src.$length >> 0));\n\t\t\t\t\t}\n\t\t\t\t\t_tmp$12 = j; _tmp$13 = true; dlen = _tmp$12; end = _tmp$13;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t((j < 0 || j >= dbuf.length) ? $throwRuntimeError(\"index out of range\") : dbuf[j] = (x = enc.decodeMap, ((in$1 < 0 || in$1 >= x.length) ? $throwRuntimeError(\"index out of range\") : x[in$1])));\n\t\t\t\tif (((j < 0 || j >= dbuf.length) ? $throwRuntimeError(\"index out of range\") : dbuf[j]) === 255) {\n\t\t\t\t\t_tmp$14 = n; _tmp$15 = false; _tmp$16 = new CorruptInputError(0, ((olen - src.$length >> 0) - 1 >> 0)); n = _tmp$14; end = _tmp$15; err = _tmp$16;\n\t\t\t\t\treturn [n, end, err];\n\t\t\t\t}\n\t\t\t\t_i++;\n\t\t\t}\n\t\t\t_ref$2 = dlen;\n\t\t\tif (_ref$2 === 4) {\n\t\t\t\t(2 >= dst.$length ? $throwRuntimeError(\"index out of range\") : dst.$array[dst.$offset + 2] = ((dbuf[2] << 6 << 24 >>> 24) | dbuf[3]) >>> 0);\n\t\t\t\t(1 >= dst.$length ? $throwRuntimeError(\"index out of range\") : dst.$array[dst.$offset + 1] = ((dbuf[1] << 4 << 24 >>> 24) | (dbuf[2] >>> 2 << 24 >>> 24)) >>> 0);\n\t\t\t\t(0 >= dst.$length ? $throwRuntimeError(\"index out of range\") : dst.$array[dst.$offset + 0] = ((dbuf[0] << 2 << 24 >>> 24) | (dbuf[1] >>> 4 << 24 >>> 24)) >>> 0);\n\t\t\t} else if (_ref$2 === 3) {\n\t\t\t\t(1 >= dst.$length ? $throwRuntimeError(\"index out of range\") : dst.$array[dst.$offset + 1] = ((dbuf[1] << 4 << 24 >>> 24) | (dbuf[2] >>> 2 << 24 >>> 24)) >>> 0);\n\t\t\t\t(0 >= dst.$length ? $throwRuntimeError(\"index out of range\") : dst.$array[dst.$offset + 0] = ((dbuf[0] << 2 << 24 >>> 24) | (dbuf[1] >>> 4 << 24 >>> 24)) >>> 0);\n\t\t\t} else if (_ref$2 === 2) {\n\t\t\t\t(0 >= dst.$length ? $throwRuntimeError(\"index out of range\") : dst.$array[dst.$offset + 0] = ((dbuf[0] << 2 << 24 >>> 24) | (dbuf[1] >>> 4 << 24 >>> 24)) >>> 0);\n\t\t\t}\n\t\t\tdst = $subslice(dst, 3);\n\t\t\tn = n + ((dlen - 1 >> 0)) >> 0;\n\t\t}\n\t\t_tmp$17 = n; _tmp$18 = end; _tmp$19 = err; n = _tmp$17; end = _tmp$18; err = _tmp$19;\n\t\treturn [n, end, err];\n\t};\n\tEncoding.prototype.decode = function(dst, src) { return this.$val.decode(dst, src); };\n\tEncoding.ptr.prototype.Decode = function(dst, src) {\n\t\tvar $ptr, _r, _tuple, dst, enc, err, n, src, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; dst = $f.dst; enc = $f.enc; err = $f.err; n = $f.n; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tenc = this;\n\t\t_r = bytes.Map(removeNewlinesMapper, src); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tsrc = _r;\n\t\t_tuple = enc.decode(dst, src); n = _tuple[0]; err = _tuple[2];\n\t\treturn [n, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Encoding.ptr.prototype.Decode }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.dst = dst; $f.enc = enc; $f.err = err; $f.n = n; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tEncoding.prototype.Decode = function(dst, src) { return this.$val.Decode(dst, src); };\n\tEncoding.ptr.prototype.DecodeString = function(s) {\n\t\tvar $ptr, _r, _tuple, dbuf, enc, err, n, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; dbuf = $f.dbuf; enc = $f.enc; err = $f.err; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tenc = this;\n\t\t_r = strings.Map(removeNewlinesMapper, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\ts = _r;\n\t\tdbuf = $makeSlice(sliceType, enc.DecodedLen(s.length));\n\t\t_tuple = enc.decode(dbuf, new sliceType($stringToBytes(s))); n = _tuple[0]; err = _tuple[2];\n\t\treturn [$subslice(dbuf, 0, n), err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Encoding.ptr.prototype.DecodeString }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.dbuf = dbuf; $f.enc = enc; $f.err = err; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tEncoding.prototype.DecodeString = function(s) { return this.$val.DecodeString(s); };\n\tEncoding.ptr.prototype.DecodedLen = function(n) {\n\t\tvar $ptr, _q, enc, n;\n\t\tenc = this;\n\t\treturn (_q = n / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\")) * 3 >> 0;\n\t};\n\tEncoding.prototype.DecodedLen = function(n) { return this.$val.DecodedLen(n); };\n\tptrType.methods = [{prop: \"Encode\", name: \"Encode\", pkg: \"\", typ: $funcType([sliceType, sliceType], [], false)}, {prop: \"EncodeToString\", name: \"EncodeToString\", pkg: \"\", typ: $funcType([sliceType], [$String], false)}, {prop: \"EncodedLen\", name: \"EncodedLen\", pkg: \"\", typ: $funcType([$Int], [$Int], false)}, {prop: \"decode\", name: \"decode\", pkg: \"encoding/base64\", typ: $funcType([sliceType, sliceType], [$Int, $Bool, $error], false)}, {prop: \"Decode\", name: \"Decode\", pkg: \"\", typ: $funcType([sliceType, sliceType], [$Int, $error], false)}, {prop: \"DecodeString\", name: \"DecodeString\", pkg: \"\", typ: $funcType([$String], [sliceType, $error], false)}, {prop: \"DecodedLen\", name: \"DecodedLen\", pkg: \"\", typ: $funcType([$Int], [$Int], false)}];\n\tCorruptInputError.methods = [{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tEncoding.init([{prop: \"encode\", name: \"encode\", pkg: \"encoding/base64\", typ: $String, tag: \"\"}, {prop: \"decodeMap\", name: \"decodeMap\", pkg: \"encoding/base64\", typ: arrayType$4, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = strconv.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = strings.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$pkg.StdEncoding = NewEncoding(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");\n\t\t$pkg.URLEncoding = NewEncoding(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\");\n\t\tremoveNewlinesMapper = (function(r) {\n\t\t\tvar $ptr, r;\n\t\t\tif ((r === 13) || (r === 10)) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\treturn r;\n\t\t});\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"sort\"] = (function() {\n\tvar $pkg = {}, $init, IntSlice, StringSlice, sliceType, sliceType$2, Search, SearchInts, SearchStrings, min, insertionSort, siftDown, heapSort, medianOfThree, swapRange, doPivot, quickSort, Sort, Ints, Strings;\n\tIntSlice = $pkg.IntSlice = $newType(12, $kindSlice, \"sort.IntSlice\", \"IntSlice\", \"sort\", null);\n\tStringSlice = $pkg.StringSlice = $newType(12, $kindSlice, \"sort.StringSlice\", \"StringSlice\", \"sort\", null);\n\tsliceType = $sliceType($Int);\n\tsliceType$2 = $sliceType($String);\n\tSearch = function(n, f) {\n\t\tvar $ptr, _q, _r, _tmp, _tmp$1, f, h, i, j, n, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; f = $f.f; h = $f.h; i = $f.i; j = $f.j; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_tmp = 0; _tmp$1 = n; i = _tmp; j = _tmp$1;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(i < j)) { break; } */ if(!(i < j)) { $s = 2; continue; }\n\t\t\th = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\")) >> 0;\n\t\t\t_r = f(h); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t/* */ if (!_r) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (!_r) { */ case 3:\n\t\t\t\ti = h + 1 >> 0;\n\t\t\t\t$s = 5; continue;\n\t\t\t/* } else { */ case 4:\n\t\t\t\tj = h;\n\t\t\t/* } */ case 5:\n\t\t/* } */ $s = 1; continue; case 2:\n\t\treturn i;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Search }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.f = f; $f.h = h; $f.i = i; $f.j = j; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Search = Search;\n\tSearchInts = function(a, x) {\n\t\tvar $ptr, _r, a, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ta = [a];\n\t\tx = [x];\n\t\t_r = Search(a[0].$length, (function(a, x) { return function(i) {\n\t\t\tvar $ptr, i;\n\t\t\treturn ((i < 0 || i >= a[0].$length) ? $throwRuntimeError(\"index out of range\") : a[0].$array[a[0].$offset + i]) >= x[0];\n\t\t}; })(a, x)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: SearchInts }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.SearchInts = SearchInts;\n\tSearchStrings = function(a, x) {\n\t\tvar $ptr, _r, a, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ta = [a];\n\t\tx = [x];\n\t\t_r = Search(a[0].$length, (function(a, x) { return function(i) {\n\t\t\tvar $ptr, i;\n\t\t\treturn ((i < 0 || i >= a[0].$length) ? $throwRuntimeError(\"index out of range\") : a[0].$array[a[0].$offset + i]) >= x[0];\n\t\t}; })(a, x)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: SearchStrings }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.SearchStrings = SearchStrings;\n\tIntSlice.prototype.Search = function(x) {\n\t\tvar $ptr, _r, p, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\t_r = SearchInts($subslice(new sliceType(p.$array), p.$offset, p.$offset + p.$length), x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: IntSlice.prototype.Search }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$ptrType(IntSlice).prototype.Search = function(x) { return this.$get().Search(x); };\n\tStringSlice.pro" +
	"totype.Search = function(x) {\n\t\tvar $ptr, _r, p, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\t_r = SearchStrings($subslice(new sliceType$2(p.$array), p.$offset, p.$offset + p.$length), x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: StringSlice.prototype.Search }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$ptrType(StringSlice).prototype.Search = function(x) { return this.$get().Search(x); };\n\tmin = function(a, b) {\n\t\tvar $ptr, a, b;\n\t\tif (a < b) {\n\t\t\treturn a;\n\t\t}\n\t\treturn b;\n\t};\n\tinsertionSort = function(data, a, b) {\n\t\tvar $ptr, _r, _v, a, b, data, i, j, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; a = $f.a; b = $f.b; data = $f.data; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ti = a + 1 >> 0;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }\n\t\t\tj = i;\n\t\t\t/* while (true) { */ case 3:\n\t\t\t\tif (!(j > a)) { _v = false; $s = 5; continue s; }\n\t\t\t\t_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t\t_v = _r; case 5:\n\t\t\t\t/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }\n\t\t\t\t$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\tj = j - (1) >> 0;\n\t\t\t/* } */ $s = 3; continue; case 4:\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: insertionSort }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tsiftDown = function(data, lo, hi, first) {\n\t\tvar $ptr, _r, _r$1, _v, child, data, first, hi, lo, root, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; child = $f.child; data = $f.data; first = $f.first; hi = $f.hi; lo = $f.lo; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\troot = lo;\n\t\t/* while (true) { */ case 1:\n\t\t\tchild = (2 * root >> 0) + 1 >> 0;\n\t\t\tif (child >= hi) {\n\t\t\t\t/* break; */ $s = 2; continue;\n\t\t\t}\n\t\t\tif (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }\n\t\t\t_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t_v = _r; case 5:\n\t\t\t/* */ if (_v) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (_v) { */ case 3:\n\t\t\t\tchild = child + (1) >> 0;\n\t\t\t/* } */ case 4:\n\t\t\t_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t/* */ if (!_r$1) { $s = 7; continue; }\n\t\t\t/* */ $s = 8; continue;\n\t\t\t/* if (!_r$1) { */ case 7:\n\t\t\t\treturn;\n\t\t\t/* } */ case 8:\n\t\t\t$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\troot = child;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: siftDown }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.child = child; $f.data = data; $f.first = first; $f.hi = hi; $f.lo = lo; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\theapSort = function(data, a, b) {\n\t\tvar $ptr, _q, a, b, data, first, hi, i, i$1, lo, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; a = $f.a; b = $f.b; data = $f.data; first = $f.first; hi = $f.hi; i = $f.i; i$1 = $f.i$1; lo = $f.lo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tfirst = a;\n\t\tlo = 0;\n\t\thi = b - a >> 0;\n\t\ti = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }\n\t\t\t$r = siftDown(data, i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\ti = i - (1) >> 0;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\ti$1 = hi - 1 >> 0;\n\t\t/* while (true) { */ case 4:\n\t\t\t/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }\n\t\t\t$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$r = siftDown(data, lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\ti$1 = i$1 - (1) >> 0;\n\t\t/* } */ $s = 4; continue; case 5:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: heapSort }; } $f.$ptr = $ptr; $f._q = _q; $f.a = a; $f.b = b; $f.data = data; $f.first = first; $f.hi = hi; $f.i = i; $f.i$1 = i$1; $f.lo = lo; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tmedianOfThree = function(data, a, b, c) {\n\t\tvar $ptr, _r, _r$1, _r$2, a, b, c, data, m0, m1, m2, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; a = $f.a; b = $f.b; c = $f.c; data = $f.data; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm0 = b;\n\t\tm1 = a;\n\t\tm2 = c;\n\t\t_r = data.Less(m1, m0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t/* */ if (_r) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (_r) { */ case 1:\n\t\t\t$r = data.Swap(m1, m0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 2:\n\t\t_r$1 = data.Less(m2, m1); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t/* */ if (_r$1) { $s = 5; continue; }\n\t\t/* */ $s = 6; continue;\n\t\t/* if (_r$1) { */ case 5:\n\t\t\t$r = data.Swap(m2, m1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 6:\n\t\t_r$2 = data.Less(m1, m0); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t/* */ if (_r$2) { $s = 9; continue; }\n\t\t/* */ $s = 10; continue;\n\t\t/* if (_r$2) { */ case 9:\n\t\t\t$r = data.Swap(m1, m0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 10:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: medianOfThree }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.a = a; $f.b = b; $f.c = c; $f.data = data; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tswapRange = function(data, a, b, n) {\n\t\tvar $ptr, a, b, data, i, n, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; a = $f.a; b = $f.b; data = $f.data; i = $f.i; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ti = 0;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }\n\t\t\t$r = data.Swap(a + i >> 0, b + i >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: swapRange }; } $f.$ptr = $ptr; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdoPivot = function(data, lo, hi) {\n\t\tvar $ptr, _q, _q$1, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a, b, c, d, data, hi, lo, m, midhi, midlo, n, pivot, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; a = $f.a; b = $f.b; c = $f.c; d = $f.d; data = $f.data; hi = $f.hi; lo = $f.lo; m = $f.m; midhi = $f.midhi; midlo = $f.midlo; n = $f.n; pivot = $f.pivot; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tmidlo = 0;\n\t\tmidhi = 0;\n\t\tm = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\")) >> 0;\n\t\t/* */ if ((hi - lo >> 0) > 40) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if ((hi - lo >> 0) > 40) { */ case 1:\n\t\t\ts = (_q$1 = ((hi - lo >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t\t$r = medianOfThree(data, lo, lo + s >> 0, lo + (2 * s >> 0) >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$r = medianOfThree(data, m, m - s >> 0, m + s >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$r = medianOfThree(data, hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - (2 * s >> 0) >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 2:\n\t\t$r = medianOfThree(data, lo, m, hi - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tpivot = lo;\n\t\t_tmp = lo + 1 >> 0; _tmp$1 = lo + 1 >> 0; _tmp$2 = hi; _tmp$3 = hi; a = _tmp; b = _tmp$1; c = _tmp$2; d = _tmp$3;\n\t\t/* while (true) { */ case 7:\n\t\t\t/* while (true) { */ case 9:\n\t\t\t\t/* if (!(b < c)) { break; } */ if(!(b < c)) { $s = 10; continue; }\n\t\t\t\t_r = data.Less(b, pivot); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t\t/* */ if (_r) { $s = 11; continue; }\n\t\t\t\t_r$1 = data.Less(pivot, b); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t\t/* */ if (!_r$1) { $s = 12; continue; }\n\t\t\t\t/* */ $s = 13; continue;\n\t\t\t\t/* if (_r) { */ case 11:\n\t\t\t\t\tb = b + (1) >> 0;\n\t\t\t\t\t$s = 14; continue;\n\t\t\t\t/* } else if (!_r$1) { */ case 12:\n\t\t\t\t\t$r = data.Swap(a, b); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\ta = a + (1) >> 0;\n\t\t\t\t\tb = b + (1) >> 0;\n\t\t\t\t\t$s = 14; continue;\n\t\t\t\t/* } else { */ case 13:\n\t\t\t\t\t/* break; */ $s = 10; continue;\n\t\t\t\t/* } */ case 14:\n\t\t\t/* } */ $s = 9; continue; case 10:\n\t\t\t/* while (true) { */ case 18:\n\t\t\t\t/* if (!(b < c)) { break; } */ if(!(b < c)) { $s = 19; continue; }\n\t\t\t\t_r$2 = data.Less(pivot, c - 1 >> 0); /* */ $s = 24; case 24: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\t/* */ if (_r$2) { $s = 20; continue; }\n\t\t\t\t_r$3 = data.Less(c - 1 >> 0, pivot); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t\t/* */ if (!_r$3) { $s = 21; continue; }\n\t\t\t\t/* */ $s = 22; continue;\n\t\t\t\t/* if (_r$2) { */ case 20:\n\t\t\t\t\tc = c - (1) >> 0;\n\t\t\t\t\t$s = 23; continue;\n\t\t\t\t/* } else if (!_r$3) { */ case 21:\n\t\t\t\t\t$r = data.Swap(c - 1 >> 0, d - 1 >> 0); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\tc = c - (1) >> 0;\n\t\t\t\t\td = d - (1) >> 0;\n\t\t\t\t\t$s = 23; continue;\n\t\t\t\t/* } else { */ case 22:\n\t\t\t\t\t/* break; */ $s = 19; continue;\n\t\t\t\t/* } */ case 23:\n\t\t\t/* } */ $s = 18; continue; case 19:\n\t\t\tif (b >= c) {\n\t\t\t\t/* break; */ $s = 8; continue;\n\t\t\t}\n\t\t\t$r = data.Swap(b, c - 1 >> 0); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\tb = b + (1) >> 0;\n\t\t\tc = c - (1) >> 0;\n\t\t/* } */ $s = 7; continue; case 8:\n\t\tn = min(b - a >> 0, a - lo >> 0);\n\t\t$r = swapRange(data, lo, b - n >> 0, n); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tn = min(hi - d >> 0, d - c >> 0);\n\t\t$r = swapRange(data, c, hi - n >> 0, n); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t_tmp$4 = (lo + b >> 0) - a >> 0; _tmp$5 = hi - ((d - c >> 0)) >> 0; midlo = _tmp$4; midhi = _tmp$5;\n\t\treturn [midlo, midhi];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: doPivot }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.a = a; $f.b = b; $f.c = c; $f.d = d; $f.data = data; $f.hi = hi; $f.lo = lo; $f.m = m; $f.midhi = midhi; $f.midlo = midlo; $f.n = n; $f.pivot = pivot; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tquickSort = function(data, a, b, maxDepth) {\n\t\tvar $ptr, _r, _tuple, a, b, data, maxDepth, mhi, mlo, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; b = $f.b; data = $f.data; maxDepth = $f.maxDepth; mhi = $f.mhi; mlo = $f.mlo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!((b - a >> 0) > 7)) { break; } */ if(!((b - a >> 0) > 7)) { $s = 2; continue; }\n\t\t\t/* */ if (maxDepth === 0) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (maxDepth === 0) { */ case 3:\n\t\t\t\t$r = heapSort(data, a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\treturn;\n\t\t\t/* } */ case 4:\n\t\t\tmaxDepth = maxDepth - (1) >> 0;\n\t\t\t_r = doPivot(data, a, b); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t_tuple = _r; mlo = _tuple[0]; mhi = _tuple[1];\n\t\t\t/* */ if ((mlo - a >> 0) < (b - mhi >> 0)) { $s = 7; continue; }\n\t\t\t/* */ $s = 8; continue;\n\t\t\t/* if ((mlo - a >> 0) < (b - mhi >> 0)) { */ case 7:\n\t\t\t\t$r = quickSort(data, a, mlo, maxDepth); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\ta = mhi;\n\t\t\t\t$s = 9; continue;\n\t\t\t/* } else { */ case 8:\n\t\t\t\t$r = quickSort(data, mhi, b, maxDepth); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\tb = mlo;\n\t\t\t/* } */ case 9:\n\t\t/* } */ $s = 1; continue; case 2:\n\t\t/* */ if ((b - a >> 0) > 1) { $s = 12; continue; }\n\t\t/* */ $s = 13; continue;\n\t\t/* if ((b - a >> 0) > 1) { */ case 12:\n\t\t\t$r = insertionSort(data, a, b); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 13:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: quickSort }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.data = data; $f.maxDepth = maxDepth; $f.mhi = mhi; $f.mlo = mlo; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tSort = function(data) {\n\t\tvar $ptr, _r, data, i, maxDepth, n, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; data = $f.data; i = $f.i; maxDepth = $f.maxDepth; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tn = _r;\n\t\tmaxDepth = 0;\n\t\ti = n;\n\t\twhile (true) {\n\t\t\tif (!(i > 0)) { break; }\n\t\t\tmaxDepth = maxDepth + (1) >> 0;\n\t\t\ti = (i >> $min((1), 31)) >> 0;\n\t\t}\n\t\tmaxDepth = maxDepth * (2) >> 0;\n\t\t$r = quickSort(data, 0, n, maxDepth); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Sort }; } $f.$ptr = $ptr; $f._r = _r; $f.data = data; $f.i = i; $f.maxDepth = maxDepth; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Sort = Sort;\n\tIntSlice.prototype.Len = function() {\n\t\tvar $ptr, p;\n\t\tp = this;\n\t\treturn p.$length;\n\t};\n\t$ptrType(IntSlice).prototype.Len = function() { return this.$get().Len(); };\n\tIntSlice.prototype.Less = function(i, j) {\n\t\tvar $ptr, i, j, p;\n\t\tp = this;\n\t\treturn ((i < 0 || i >= p.$length) ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + i]) < ((j < 0 || j >= p.$length) ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + j]);\n\t};\n\t$ptrType(IntSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };\n\tIntSlice.prototype.Swap = function(i, j) {\n\t\tvar $ptr, _tmp, _tmp$1, i, j, p;\n\t\tp = this;\n\t\t_tmp = ((j < 0 || j >= p.$length) ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + j]); _tmp$1 = ((i < 0 || i >= p.$length) ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + i]); ((i < 0 || i >= p.$length) ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + i] = _tmp); ((j < 0 || j >= p.$length) ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + j] = _tmp$1);\n\t};\n\t$ptrType(IntSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };\n\tIntSlice.prototype.Sort = function() {\n\t\tvar $ptr, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\t$r = Sort(p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: IntSlice.prototype.Sort }; } $f.$ptr = $ptr; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$ptrType(IntSlice).prototype.Sort = function() { return this.$get().Sort(); };\n\tStringSlice.prototype.Len = function() {\n\t\tvar $ptr, p;\n\t\tp = this;\n\t\treturn p.$length;\n\t};\n\t$ptrType(StringSlice).prototype.Len = function() { return this.$get().Len(); };\n\tStringSlice.prototype.Less = function(i, j) {\n\t\tvar $ptr, i, j, p;\n\t\tp = this;\n\t\treturn ((i < 0 || i >= p.$length) ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + i]) < ((j < 0 || j >= p.$length) ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + j]);\n\t};\n\t$ptrType(StringSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };\n\tStringSlice.prototype.Swap = function(i, j) {\n\t\tvar $ptr, _tmp, _tmp$1, i, j, p;\n\t\tp = this;\n\t\t_tmp = ((j < 0 || j >= p.$length) ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + j]); _tmp$1 = ((i < 0 || i >= p.$length) ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + i]); ((i < 0 || i >= p.$length) ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + i] = _tmp); ((j < 0 || j >= p.$length) ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + j] = _tmp$1);\n\t};\n\t$ptrType(StringSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };\n\tStringSlice.prototype.Sort = function() {\n\t\tvar $ptr, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\t$r = Sort(p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: StringSlice.prototype.Sort }; } $f.$ptr = $ptr; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$ptrType(StringSlice).prototype.Sort = function() { return this.$get().Sort(); };\n\tInts = function(a) {\n\t\tvar $ptr, a, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; a = $f.a; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = Sort($subslice(new IntSlice(a.$array), a.$offset, a.$offset + a.$length)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Ints }; } $f.$ptr = $ptr; $f.a = a; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Ints = Ints;\n\tStrings = function(a) {\n\t\tvar $ptr, a, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; a = $f.a; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = Sort($subslice(new StringSlice(a.$array), a.$offset, a.$offset + a.$length)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Strings }; } $f.$ptr = $ptr; $f.a = a; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Strings = Strings;\n\tIntSlice.methods = [{prop: \"Search\", name: \"Search\", pkg: \"\", typ: $funcType([$Int], [$Int], false)}, {prop: \"Len\", name: \"Len\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Less\", name: \"Less\", pkg: \"\", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: \"Swap\", name: \"Swap\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"Sort\", name: \"Sort\", pkg: \"\", typ: $funcType([], [], false)}];\n\tStringSlice.methods = [{prop: \"Search\", name: \"Search\", pkg: \"\", typ: $funcType([$String], [$Int], false)}, {prop: \"Len\", name: \"Len\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Less\", name: \"Less\", pkg: \"\", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: \"Swap\", name: \"Swap\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"Sort\", name: \"Sort\", pkg: \"\", typ: $funcType([], [], false)}];\n\tIntSlice.init($Int);\n\tStringSlice.init($String);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"unicode/utf16\"] = (function() {\n\tvar $pkg = {}, $init, IsSurrogate, DecodeRune;\n\tIsSurrogate = function(r) {\n\t\tvar $ptr, r;\n\t\treturn 55296 <= r && r < 57344;\n\t};\n\t$pkg.IsSurrogate = IsSurrogate;\n\tDecodeRune = function(r1, r2) {\n\t\tvar $ptr, r1, r2;\n\t\tif (55296 <= r1 && r1 < 56320 && 56320 <= r2 && r2 < 57344) {\n\t\t\treturn ((((r1 - 55296 >> 0)) << 10 >> 0) | ((r2 - 56320 >> 0))) + 65536 >> 0;\n\t\t}\n\t\treturn 65533;\n\t};\n\t$pkg.DecodeRune = DecodeRune;\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"encoding/json\"] = (function() {\n\tvar $pkg = {}, $init, bytes, encoding, base64, errors, fmt, nosync, io, math, reflect, runtime, sort, strconv, strings, unicode, utf16, utf8, Unmarshaler, UnmarshalTypeError, InvalidUnmarshalError, Number, decodeState, unquotedValue, Marshaler, field, byName, byIndex, SyntaxError, scanner, tagOptions, sliceType, mapType$1, structType$1, sliceType$1, ptrType, ptrType$1, ptrType$2, mapType$2, ptrType$3, sliceType$2, sliceType$4, ptrType$6, ptrType$8, ptrType$9, funcType, ptrType$20, ptrType$21, funcType$1, errPhase, nullLiteral, numberType, byteSliceType, marshalerType, textMarshalerType, fieldCache, _r, _r$1, Unmarshal, getu4, unquote, unquoteBytes, isValidTag, fillField, typeFields, dominantField, cachedTypeFields, foldFunc, equalFoldRight, asciiEqualFold, simpleLetterEqualFold, checkValid, nextValue, isSpace, stateBeginValueOrEmpty, stateBeginValue, stateBeginStringOrEmpty, stateBeginString, stateEndValue, stateEndTop, stateInString, stateInStringEsc, stateInStringEscU, stateInStringEscU1, stateInStringEscU12, stateInStringEscU123, stateNeg, state1, state0, stateDot, stateDot0, stateE, stateESign, stateE0, stateT, stateTr, stateTru, stateF, stateFa, stateFal, stateFals, stateN, stateNu, stateNul, stateError, quoteChar, stateRedo, parseTag;\n\tbytes = $packages[\"bytes\"];\n\tencoding = $packages[\"encoding\"];\n\tbase64 = $packages[\"encoding/base64\"];\n\terrors = $packages[\"errors\"];\n\tfmt = $packages[\"fmt\"];\n\tnosync = $packages[\"github.com/gopherjs/gopherjs/nosync\"];\n\tio = $packages[\"io\"];\n\tmath = $packages[\"math\"];\n\treflect = $packages[\"reflect\"];\n\truntime = $packages[\"runtime\"];\n\tsort = $packages[\"sort\"];\n\tstrconv = $packages[\"strconv\"];\n\tstrings = $packages[\"strings\"];\n\tunicode = $packages[\"unicode\"];\n\tutf16 = $packages[\"unicode/utf16\"];\n\tutf8 = $packages[\"unicode/utf8\"];\n\tUnmarshaler = $pkg.Unmarshaler = $newType(8, $kindInterface, \"json.Unmarshaler\", \"Unmarshaler\", \"encoding/json\", null);\n\tUnmarshalTypeError = $pkg.UnmarshalTypeError = $newType(0, $kindStruct, \"json.UnmarshalTypeError\", \"UnmarshalTypeError\", \"encoding/json\", function(Value_, Type_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Value = \"\";\n\t\t\tthis.Type = $ifaceNil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Value = Value_;\n\t\tthis.Type = Type_;\n\t});\n\tInvalidUnmarshalError = $pkg.InvalidUnmarshalError = $newType(0, $kindStruct, \"json.InvalidUnmarshalError\", \"InvalidUnmarshalError\", \"encoding/json\", function(Type_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Type = $ifaceNil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Type = Type_;\n\t});\n\tNumber = $pkg.Number = $newType(8, $kindString, \"json.Number\", \"Number\", \"encoding/json\", null);\n\tdecodeState = $pkg.decodeState = $newType(0, $kindStruct, \"json.decodeState\", \"decodeState\", \"encoding/json\", function(data_, off_, scan_, nextscan_, savedError_, useNumber_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.data = sliceType$1.nil;\n\t\t\tthis.off = 0;\n\t\t\tthis.scan = new scanner.ptr();\n\t\t\tthis.nextscan = new scanner.ptr();\n\t\t\tthis.savedError = $ifaceNil;\n\t\t\tthis.useNumber = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.data = data_;\n\t\tthis.off = off_;\n\t\tthis.scan = scan_;\n\t\tthis.nextscan = nextscan_;\n\t\tthis.savedError = savedError_;\n\t\tthis.useNumber = useNumber_;\n\t});\n\tunquotedValue = $pkg.unquotedValue = $newType(0, $kindStruct, \"json.unquotedValue\", \"unquotedValue\", \"encoding/json\", function() {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\treturn;\n\t\t}\n\t});\n\tMarshaler = $pkg.Marshaler = $newType(8, $kindInterface, \"json.Marshaler\", \"Marshaler\", \"encoding/json\", null);\n\tfield = $pkg.field = $newType(0, $kindStruct, \"json.field\", \"field\", \"encoding/json\", function(name_, nameBytes_, equalFold_, tag_, index_, typ_, omitEmpty_, quoted_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.name = \"\";\n\t\t\tthis.nameBytes = sliceType$1.nil;\n\t\t\tthis.equalFold = $throwNilPointerError;\n\t\t\tthis.tag = false;\n\t\t\tthis.index = sliceType$4.nil;\n\t\t\tthis.typ = $ifaceNil;\n\t\t\tthis.omitEmpty = false;\n\t\t\tthis.quoted = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.name = name_;\n\t\tthis.nameBytes = nameBytes_;\n\t\tthis.equalFold = equalFold_;\n\t\tthis.tag = tag_;\n\t\tthis.index = index_;\n\t\tthis.typ = typ_;\n\t\tthis.omitEmpty = omitEmpty_;\n\t\tthis.quoted = quoted_;\n\t});\n\tbyName = $pkg.byName = $newType(12, $kindSlice, \"json.byName\", \"byName\", \"encoding/json\", null);\n\tbyIndex = $pkg.byIndex = $newType(12, $kindSlice, \"json.byIndex\", \"byIndex\", \"encoding/json\", null);\n\tSyntaxError = $pkg.SyntaxError = $newType(0, $kindStruct, \"json.SyntaxError\", \"SyntaxError\", \"encoding/json\", function(msg_, Offset_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.msg = \"\";\n\t\t\tthis.Offset = new $Int64(0, 0);\n\t\t\treturn;\n\t\t}\n\t\tthis.msg = msg_;\n\t\tthis.Offset = Offset_;\n\t});\n\tscanner = $pkg.scanner = $newType(0, $kindStruct, \"json.scanner\", \"scanner\", \"encoding/json\", function(step_, endTop_, parseState_, err_, redo_, redoCode_, redoState_, bytes_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.step = $throwNilPointerError;\n\t\t\tthis.endTop = false;\n\t\t\tthis.parseState = sliceType$4.nil;\n\t\t\tthis.err = $ifaceNil;\n\t\t\tthis.redo = false;\n\t\t\tthis.redoCode = 0;\n\t\t\tthis.redoState = $throwNilPointerError;\n\t\t\tthis.bytes = new $Int64(0, 0);\n\t\t\treturn;\n\t\t}\n\t\tthis.step = step_;\n\t\tthis.endTop = endTop_;\n\t\tthis.parseState = parseState_;\n\t\tthis.err = err_;\n\t\tthis.redo = redo_;\n\t\tthis.redoCode = redoCode_;\n\t\tthis.redoState = redoState_;\n\t\tthis.bytes = bytes_;\n\t});\n\ttagOptions = $pkg.tagOptions = $newType(8, $kindString, \"json.tagOptions\", \"tagOptions\", \"encoding/json\", null);\n\tsliceType = $sliceType(field);\n\tmapType$1 = $mapType(reflect.Type, sliceType);\n\tstructType$1 = $structType([{prop: \"RWMutex\", name: \"\", pkg: \"\", typ: nosync.RWMutex, tag: \"\"}, {prop: \"m\", name: \"m\", pkg: \"encoding/json\", typ: mapType$1, tag: \"\"}]);\n\tsliceType$1 = $sliceType($Uint8);\n\tptrType = $ptrType(Marshaler);\n\tptrType$1 = $ptrType(encoding.TextMarshaler);\n\tptrType$2 = $ptrType(reflect.rtype);\n\tmapType$2 = $mapType($String, $emptyInterface);\n\tptrType$3 = $ptrType(field);\n\tsliceType$2 = $sliceType($emptyInterface);\n\tsliceType$4 = $sliceType($Int);\n\tptrType$6 = $ptrType(UnmarshalTypeError);\n\tptrType$8 = $ptrType(InvalidUnmarshalError);\n\tptrType$9 = $ptrType(decodeState);\n\tfuncType = $funcType([sliceType$1, sliceType$1], [$Bool], false);\n\tptrType$20 = $ptrType(SyntaxError);\n\tptrType$21 = $ptrType(scanner);\n\tfuncType$1 = $funcType([ptrType$21, $Int], [$Int], false);\n\tUnmarshal = function(data, v) {\n\t\tvar $ptr, _r$2, _r$3, d, data, err, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; d = $f.d; data = $f.data; err = $f.err; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = $clone(new decodeState.ptr(), decodeState);\n\t\t_r$2 = checkValid(data, d.scan); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\terr = _r$2;\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\td.init(data);\n\t\t_r$3 = d.unmarshal(v); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\treturn _r$3;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Unmarshal }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.d = d; $f.data = data; $f.err = err; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Unmarshal = Unmarshal;\n\tUnmarshalTypeError.ptr.prototype.Error = function() {\n\t\tvar $ptr, _r$2, e, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\te = this;\n\t\t_r$2 = e.Type.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\treturn \"json: cannot unmarshal \" + e.Value + \" into Go value of type \" + _r$2;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: UnmarshalTypeError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tUnmarshalTypeError.prototype.Error = function() { return this.$val.Error(); };\n\tInvalidUnmarshalError.ptr.prototype.Error = function() {\n\t\tvar $ptr, _r$2, _r$3, _r$4, e, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\te = this;\n\t\tif ($interfaceIsEqual(e.Type, $ifaceNil)) {\n\t\t\treturn \"json: Unmarshal(nil)\";\n\t\t}\n\t\t_r$2 = e.Type.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t/* */ if (!((_r$2 === 22))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!((_r$2 === 22))) { */ case 1:\n\t\t\t_r$3 = e.Type.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\treturn \"json: Unmarshal(non-pointer \" + _r$3 + \")\";\n\t\t/* } */ case 2:\n\t\t_r$4 = e.Type.String(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\treturn \"json: Unmarshal(nil \" + _r$4 + \")\";\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: InvalidUnmarshalError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tInvalidUnmarshalError.prototype.Error = function() { return this.$val.Error(); };\n\tdecodeState.ptr.prototype.unmarshal = function(v) {\n\t\tvar $ptr, _r$2, d, err, rv, v, $s, $deferred, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; d = $f.d; err = $f.err; rv = $f.rv; v = $f.v; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\terr = [err];\n\t\terr[0] = $ifaceNil;\n\t\td = this;\n\t\t$deferred.push([(function(err) { return function() {\n\t\t\tvar $ptr, _tuple, ok, r;\n\t\t\tr = $recover();\n\t\t\tif (!($interfaceIsEqual(r, $ifaceNil))) {\n\t\t\t\t_tuple = $assertType(r, runtime.Error, true); ok = _tuple[1];\n\t\t\t\tif (ok) {\n\t\t\t\t\t$panic(r);\n\t\t\t\t}\n\t\t\t\terr[0] = $assertType(r, $error);\n\t\t\t}\n\t\t}; })(err), []]);\n\t\t_r$2 = reflect.ValueOf(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\trv = _r$2;\n\t\tif (!((rv.Kind() === 22)) || rv.IsNil()) {\n\t\t\terr[0] = new InvalidUnmarshalError.ptr(reflect.TypeOf(v));\n\t\t\treturn err[0];\n\t\t}\n\t\td.scan.reset();\n\t\t$r = d.value(rv); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\terr[0] = d.savedError;\n\t\treturn err[0];\n\t\t/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.unmarshal }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.d = d; $f.err = err; $f.rv = rv; $f.v = v; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }\n\t};\n\tdecodeState.prototype.unmarshal = function(v) { return this.$val.unmarshal(v); };\n\tNumber.prototype.String = function() {\n\t\tvar $ptr, n;\n\t\tn = this.$val;\n\t\treturn n;\n\t};\n\t$ptrType(Number).prototype.String = function() { return new Number(this.$get()).String(); };\n\tNumber.prototype.Float64 = function() {\n\t\tvar $ptr, n;\n\t\tn = this.$val;\n\t\treturn strconv.ParseFloat(n, 64);\n\t};\n\t$ptrType(Number).prototype.Float64 = function() { return new Number(this.$get()).Float64(); };\n\tNumber.prototype.Int64 = function() {\n\t\tvar $ptr, n;\n\t\tn = this.$val;\n\t\treturn strconv.ParseInt(n, 10, 64);\n\t};\n\t$ptrType(Number).prototype.Int64 = function() { return new Number(this.$get()).Int64(); };\n\tdecodeState.ptr.prototype.init = function(data) {\n\t\tvar $ptr, d, data;\n\t\td = this;\n\t\td.data = data;\n\t\td.off = 0;\n\t\td.savedError = $ifaceNil;\n\t\treturn d;\n\t};\n\tdecodeState.prototype.init = function(data) { return this.$val.init(data); };\n\tdecodeState.ptr.prototype.error = function(err) {\n\t\tvar $ptr, d, err;\n\t\td = this;\n\t\t$panic(err);\n\t};\n\tdecodeState.prototype.error = function(err) { return this.$val.error(err); };\n\tdecodeState.ptr.prototype.saveError = function(err) {\n\t\tvar $ptr, d, err;\n\t\td = this;\n\t\tif ($interfaceIsEqual(d.savedError, $ifaceNil)) {\n\t\t\td.savedError = err;\n\t\t}\n\t};\n\tdecodeState.prototype.saveError = function(err) { return this.$val.saveError(err); };\n\tdecodeState.ptr.prototype.next = function() {\n\t\tvar $ptr, _r$2, _r$3, _r$4, _tuple, c, d, err, item, rest, x, x$1, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; c = $f.c; d = $f.d; err = $f.err; item = $f.item; rest = $f.rest; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\tc = (x = d.data, x$1 = d.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + x$1]));\n\t\t_r$2 = nextValue($subslice(d.data, d.off), d.nextscan); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_tuple = _r$2; item = _tuple[0]; rest = _tuple[1]; err = _tuple[2];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\td.error(err);\n\t\t}\n\t\td.off = d.data.$length - rest.$length >> 0;\n\t\t/* */ if (c === 123) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (c === 123) { */ case 2:\n\t\t\t_r$3 = d.scan.step(d.scan, 125); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t_r$3;\n\t\t\t$s = 4; continue;\n\t\t/* } else { */ case 3:\n\t\t\t_r$4 = d.scan.step(d.scan, 93); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t_r$4;\n\t\t/* } */ case 4:\n\t\treturn item;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.next }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.c = c; $f.d = d; $f.err = err; $f.item = item; $f.rest = rest; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecodeState.prototype.next = function() { return this.$val.next(); };\n\tdecodeState.ptr.prototype.scanWhile = function(op) {\n\t\tvar $ptr, _r$2, _r$3, c, d, newOp, op, x, x$1, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; c = $f.c; d = $f.d; newOp = $f.newOp; op = $f.op; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\tnewOp = 0;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* */ if (d.off >= d.data.$length) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (d.off >= d.data.$length) { */ case 3:\n\t\t\t\t_r$2 = d.scan.eof(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\tnewOp = _r$2;\n\t\t\t\td.off = d.data.$length + 1 >> 0;\n\t\t\t\t$s = 5; continue;\n\t\t\t/* } else { */ case 4:\n\t\t\t\tc = ((x = d.data, x$1 = d.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + x$1])) >> 0);\n\t\t\t\td.off = d.off + (1) >> 0;\n\t\t\t\t_r$3 = d.scan.step(d.scan, c); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t\tnewOp = _r$3;\n\t\t\t/* } */ case 5:\n\t\t\tif (!((newOp === op))) {\n\t\t\t\t/* break; */ $s = 2; continue;\n\t\t\t}\n\t\t/* } */ $s = 1; continue; case 2:\n\t\treturn newOp;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.scanWhile }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.c = c; $f.d = d; $f.newOp = newOp; $f.op = op; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecodeState.prototype.scanWhile = function(op) { return this.$val.scanWhile(op); };\n\tdecodeState.ptr.prototype.value = function(v) {\n\t\tvar $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, d, err, n, op, rest, v, x, x$1, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; d = $f.d; err = $f.err; n = $f.n; op = $f.op; rest = $f.rest; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\tv = v;\n\t\t/* */ if (!v.IsValid()) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!v.IsValid()) { */ case 1:\n\t\t\t_r$2 = nextValue($subslice(d.data, d.off), d.nextscan); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t_tuple = _r$2; rest = _tuple[1]; err = _tuple[2];\n\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\td.error(err);\n\t\t\t}\n\t\t\td.off = d.data.$length - rest.$length >> 0;\n\t\t\tif (d.scan.redo) {\n\t\t\t\td.scan.redo = false;\n\t\t\t\td.scan.step = stateBeginValue;\n\t\t\t}\n\t\t\t_r$3 = d.scan.step(d.scan, 34); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t_r$3;\n\t\t\t_r$4 = d.scan.step(d.scan, 34); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t_r$4;\n\t\t\tn = d.scan.parseState.$length;\n\t\t\t/* */ if (n > 0 && ((x = d.scan.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + x$1])) === 0)) { $s = 6; continue; }\n\t\t\t/* */ $s = 7; continue;\n\t\t\t/* if (n > 0 && ((x = d.scan.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + x$1])) === 0)) { */ case 6:\n\t\t\t\t_r$5 = d.scan.step(d.scan, 58); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t\t_r$5;\n\t\t\t\t_r$6 = d.scan.step(d.scan, 34); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t\t_r$6;\n\t\t\t\t_r$7 = d.scan.step(d.scan, 34); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t\t_r$7;\n\t\t\t\t_r$8 = d.scan.step(d.scan, 125); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t\t_r$8;\n\t\t\t/* } */ case 7:\n\t\t\treturn;\n\t\t/* } */ case 2:\n\t\t_r$9 = d.scanWhile(9); /* */ $s = 12; case 12: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\top = _r$9;\n\t\t_ref = op;\n\t\t/* */ if (_ref === 6) { $s = 13; continue; }\n\t\t/* */ if (_ref === 2) { $s = 14; continue; }\n\t\t/* */ if (_ref === 1) { $s = 15; continue; }\n\t\t/* */ $s = 16; continue;\n\t\t/* if (_ref === 6) { */ case 13:\n\t\t\t$r = d.array(v); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 17; continue;\n\t\t/* } else if (_ref === 2) { */ case 14:\n\t\t\t$r = d.object(v); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 17; continue;\n\t\t/* } else if (_ref === 1) { */ case 15:\n\t\t\t$r = d.literal(v); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 17; continue;\n\t\t/* } else { */ case 16:\n\t\t\td.error(errPhase);\n\t\t/* } */ case 17:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.value }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.n = n; $f.op = op; $f.rest = rest; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecodeState.prototype.value = function(v) { return this.$val.value(v); };\n\tdecodeState.ptr.prototype.valueQuoted = function() {\n\t\tvar $ptr, _r$2, _r$3, _ref, _ref$1, d, op, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; d = $f.d; op = $f.op; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\t_r$2 = d.scanWhile(9); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\top = _r$2;\n\t\t_ref = op;\n\t\t/* */ if (_ref === 6) { $s = 2; continue; }\n\t\t/* */ if (_ref === 2) { $s = 3; continue; }\n\t\t/* */ if (_ref === 1) { $s = 4; continue; }\n\t\t/* */ $s = 5; continue;\n\t\t/* if (_ref === 6) { */ case 2:\n\t\t\t$r = d.array(new reflect.Value.ptr(ptrType$2.nil, 0, 0)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 6; continue;\n\t\t/* } else if (_ref === 2) { */ case 3:\n\t\t\t$r = d.object(new reflect.Value.ptr(ptrType$2.nil, 0, 0)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 6; continue;\n\t\t/* } else if (_ref === 1) { */ case 4:\n\t\t\t_r$3 = d.literalInterface(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t_ref$1 = _r$3;\n\t\t\t/* */ if (_ref$1 === $ifaceNil || $assertType(_ref$1, $String, true)[1]) { $s = 10; continue; }\n\t\t\t/* */ $s = 11; continue;\n\t\t\t/* if (_ref$1 === $ifaceNil || $assertType(_ref$1, $String, true)[1]) { */ case 10:\n\t\t\t\tv = _ref$1;\n\t\t\t\treturn v;\n\t\t\t/* } */ case 11:\n\t\t\t$s = 6; continue;\n\t\t/* } else { */ case 5:\n\t\t\td.error(errPhase);\n\t\t/* } */ case 6:\n\t\treturn (x = new unquotedValue.ptr(), new x.constructor.elem(x));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.valueQuoted }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f.d = d; $f.op = op; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecodeState.prototype.valueQuoted = function() { return this.$val.valueQuoted(); };\n\tdecodeState.ptr.prototype.indirect = function(v, decodingNull) {\n\t\tvar $ptr, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _v, _v$1, _v$2, d, decodingNull, e, ok, ok$1, u, u$1, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; d = $f.d; decodingNull = $f.decodingNull; e = $f.e; ok = $f.ok; ok$1 = $f.ok$1; u = $f.u; u$1 = $f.u$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\tv = v;\n\t\tif (!(!((v.Kind() === 22)))) { _v = false; $s = 3; continue s; }\n\t\t_r$2 = v.Type().Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_v = !(_r$2 === \"\"); case 3:\n\t\t/* */ if (_v && v.CanAddr()) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (_v && v.CanAddr()) { */ case 1:\n\t\t\tv = v.Addr();\n\t\t/* } */ case 2:\n\t\t/* while (true) { */ case 5:\n\t\t\t/* */ if ((v.Kind() === 20) && !v.IsNil()) { $s = 7; continue; }\n\t\t\t/* */ $s = 8; continue;\n\t\t\t/* if ((v.Kind() === 20) && !v.IsNil()) { */ case 7:\n\t\t\t\t_r$3 = v.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t\te = _r$3;\n\t\t\t\tif (!((e.Kind() === 22) && !e.IsNil())) { _v$1 = false; $s = 12; continue s; }\n\t\t\t\tif (!decodingNull) { _v$2 = true; $s = 13; continue s; }\n\t\t\t\t_r$4 = e.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t\t_r$5 = _r$4.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t\t_v$2 = _r$5 === 22; case 13:\n\t\t\t\t_v$1 = _v$2; case 12:\n\t\t\t\t/* */ if (_v$1) { $s = 10; continue; }\n\t\t\t\t/* */ $s = 11; continue;\n\t\t\t\t/* if (_v$1) { */ case 10:\n\t\t\t\t\tv = e;\n\t\t\t\t\t/* continue; */ $s = 5; continue;\n\t\t\t\t/* } */ case 11:\n\t\t\t/* } */ case 8:\n\t\t\tif (!((v.Kind() === 22))) {\n\t\t\t\t/* break; */ $s = 6; continue;\n\t\t\t}\n\t\t\t_r$6 = v.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_r$7 = _r$6.Kind(); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t/* */ if (!((_r$7 === 22)) && decodingNull && v.CanSet()) { $s = 16; continue; }\n\t\t\t/* */ $s = 17; continue;\n\t\t\t/* if (!((_r$7 === 22)) && decodingNull && v.CanSet()) { */ case 16:\n\t\t\t\t/* break; */ $s = 6; continue;\n\t\t\t/* } */ case 17:\n\t\t\t/* */ if (v.IsNil()) { $s = 20; continue; }\n\t\t\t/* */ $s = 21; continue;\n\t\t\t/* if (v.IsNil()) { */ case 20:\n\t\t\t\t_r$8 = v.Type().Elem(); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t\t_r$9 = reflect.New(_r$8); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\t\t$r = v.Set(_r$9); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 21:\n\t\t\t_r$10 = v.Type().NumMethod(); /* */ $s = 27; case 27: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\t/* */ if (_r$10 > 0) { $s = 25; continue; }\n\t\t\t/* */ $s = 26; continue;\n\t\t\t/* if (_r$10 > 0) { */ case 25:\n\t\t\t\t_r$11 = v.Interface(); /* */ $s = 28; case 28: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t\t\t_tuple = $assertType(_r$11, Unmarshaler, true); u = _tuple[0]; ok = _tuple[1];\n\t\t\t\t/* */ if (ok) { $s = 29; continue; }\n\t\t\t\t/* */ $s = 30; continue;\n\t\t\t\t/* if (ok) { */ case 29:\n\t\t\t\t\treturn [u, $ifaceNil, new reflect.Value.ptr(ptrType$2.nil, 0, 0)];\n\t\t\t\t/* } */ case 30:\n\t\t\t\t_r$12 = v.Interface(); /* */ $s = 31; case 31: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$1 = $assertType(_r$12, encoding.TextUnmarshaler, true); u$1 = _tuple$1[0]; ok$1 = _tuple$1[1];\n\t\t\t\t/* */ if (ok$1) { $s = 32; continue; }\n\t\t\t\t/* */ $s = 33; continue;\n\t\t\t\t/* if (ok$1) { */ case 32:\n\t\t\t\t\treturn [$ifaceNil, u$1, new reflect.Value.ptr(ptrType$2.nil, 0, 0)];\n\t\t\t\t/* } */ case 33:\n\t\t\t/* } */ case 26:\n\t\t\t_r$13 = v.Elem(); /* */ $s = 34; case 34: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }\n\t\t\tv = _r$13;\n\t\t/* } */ $s = 5; continue; case 6:\n\t\treturn [$ifaceNil, $ifaceNil, v];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.indirect }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.d = d; $f.decodingNull = decodingNull; $f.e = e; $f.ok = ok; $f.ok$1 = ok$1; $f.u = u; $f.u$1 = u$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecodeState.prototype.indirect = function(v, decodingNull) { return this.$val.indirect(v, decodingNull); };\n\tdecodeState.ptr.prototype.array = function(v) {\n\t\tvar $ptr, _q, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, d, err, i, newcap, newv, op, pv, u, ut, v, z, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; d = $f.d; err = $f.err; i = $f.i; newcap = $f.newcap; newv = $f.newv; op = $f.op; pv = $f.pv; u = $f.u; ut = $f.ut; v = $f.v; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\tv = v;\n\t\t_r$2 = d.indirect(v, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_tuple = _r$2; u = _tuple[0]; ut = _tuple[1]; pv = _tuple[2];\n\t\t/* */ if (!($interfaceIsEqual(u, $ifaceNil))) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (!($interfaceIsEqual(u, $ifaceNil))) { */ case 2:\n\t\t\td.off = d.off - (1) >> 0;\n\t\t\t_r$3 = d.next(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t_r$4 = u.UnmarshalJSON(_r$3); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\terr = _r$4;\n\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\td.error(err);\n\t\t\t}\n\t\t\treturn;\n\t\t/* } */ case 3:\n\t\t/* */ if (!($interfaceIsEqual(ut, $ifaceNil))) { $s = 6; continue; }\n\t\t/* */ $s = 7; continue;\n\t\t/* if (!($interfaceIsEqual(ut, $ifaceNil))) { */ case 6:\n\t\t\td.saveError(new UnmarshalTypeError.ptr(\"array\", v.Type()));\n\t\t\td.off = d.off - (1) >> 0;\n\t\t\t_r$5 = d.next(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t_r$5;\n\t\t\treturn;\n\t\t/* } */ case 7:\n\t\tv = pv;\n\t\t_ref = v.Kind();\n\t\t/* */ if (_ref === 20) { $s = 9; continue; }\n\t\t/* */ if (_ref === 17) { $s = 10; continue; }\n\t\t/* */ if (_ref === 23) { $s = 11; continue; }\n\t\t/* */ $s = 12; continue;\n\t\t/* switch (0) { default: if (_ref === 20) { */ case 9:\n\t\t\t/* */ if (v.NumMethod() === 0) { $s = 14; continue; }\n\t\t\t/* */ $s = 15; continue;\n\t\t\t/* if (v.NumMethod() === 0) { */ case 14:\n\t\t\t\t_r$6 = d.arrayInterface(); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t\t_r$7 = reflect.ValueOf(_r$6); /* */ $s = 17; case 17: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t\t$r = v.Set(_r$7); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\treturn;\n\t\t\t/* } */ case 15:\n\t\t\td.saveError(new UnmarshalTypeError.ptr(\"array\", v.Type()));\n\t\t\td.off = d.off - (1) >> 0;\n\t\t\t_r$8 = d.next(); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t_r$8;\n\t\t\treturn;\n\t\t\t$s = 13; continue;\n\t\t/* } else if (_ref === 17) { */ case 10:\n\t\t\t$s = 13; continue;\n\t\t/* } else if (_ref === 23) { */ case 11:\n\t\t\t/* break; */ $s = 13; continue;\n\t\t\t$s = 13; continue;\n\t\t/* } else { */ case 12:\n\t\t\td.saveError(new UnmarshalTypeError.ptr(\"array\", v.Type()));\n\t\t\td.off = d.off - (1) >> 0;\n\t\t\t_r$9 = d.next(); /* */ $s = 20; case 20: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\t_r$9;\n\t\t\treturn;\n\t\t/* } } */ case 13:\n\t\ti = 0;\n\t\t/* while (true) { */ case 21:\n\t\t\t_r$10 = d.scanWhile(9); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\top = _r$10;\n\t\t\tif (op === 8) {\n\t\t\t\t/* break; */ $s = 22; continue;\n\t\t\t}\n\t\t\td.off = d.off - (1) >> 0;\n\t\t\td.scan.undo(op);\n\t\t\t/* */ if (v.Kind() === 23) { $s = 24; continue; }\n\t\t\t/* */ $s = 25; continue;\n\t\t\t/* if (v.Kind() === 23) { */ case 24:\n\t\t\t\t/* */ if (i >= v.Cap()) { $s = 26; continue; }\n\t\t\t\t/* */ $s = 27; continue;\n\t\t\t\t/* if (i >= v.Cap()) { */ case 26:\n\t\t\t\t\tnewcap = v.Cap() + (_q = v.Cap() / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\")) >> 0;\n\t\t\t\t\tif (newcap < 4) {\n\t\t\t\t\t\tnewcap = 4;\n\t\t\t\t\t}\n\t\t\t\t\t_r$11 = reflect.MakeSlice(v.Type(), v.Len(), newcap); /* */ $s = 28; case 28: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t\t\t\tnewv = _r$11;\n\t\t\t\t\t_r$12 = reflect.Copy(newv, v); /* */ $s = 29; case 29: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$12;\n\t\t\t\t\t$r = v.Set(newv); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t/* } */ case 27:\n\t\t\t\tif (i >= v.Len()) {\n\t\t\t\t\tv.SetLen(i + 1 >> 0);\n\t\t\t\t}\n\t\t\t/* } */ case 25:\n\t\t\t/* */ if (i < v.Len()) { $s = 31; continue; }\n\t\t\t/* */ $s = 32; continue;\n\t\t\t/* if (i < v.Len()) { */ case 31:\n\t\t\t\t_r$13 = v.Index(i); /* */ $s = 34; case 34: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }\n\t\t\t\t$r = d.value(_r$13); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 33; continue;\n\t\t\t/* } else { */ case 32:\n\t\t\t\t$r = d.value(new reflect.Value.ptr(ptrType$2.nil, 0, 0)); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 33:\n\t\t\ti = i + (1) >> 0;\n\t\t\t_r$14 = d.scanWhile(9); /* */ $s = 37; case 37: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }\n\t\t\top = _r$14;\n\t\t\tif (op === 8) {\n\t\t\t\t/* break; */ $s = 22; continue;\n\t\t\t}\n\t\t\tif (!((op === 7))) {\n\t\t\t\td.error(errPhase);\n\t\t\t}\n\t\t/* } */ $s = 21; continue; case 22:\n\t\t/* */ if (i < v.Len()) { $s = 38; continue; }\n\t\t/* */ $s = 39; continue;\n\t\t/* if (i < v.Len()) { */ case 38:\n\t\t\t/* */ if (v.Kind() === 17) { $s = 40; continue; }\n\t\t\t/* */ $s = 41; continue;\n\t\t\t/* if (v.Kind() === 17) { */ case 40:\n\t\t\t\t_r$15 = v.Type().Elem(); /* */ $s = 43; case 43: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }\n\t\t\t\t_r$16 = reflect.Zero(_r$15); /* */ $s = 44; case 44: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }\n\t\t\t\tz = _r$16;\n\t\t\t\t/* while (true) { */ case 45:\n\t\t\t\t\t/* if (!(i < v.Len())) { break; } */ if(!(i < v.Len())) { $s = 46; continue; }\n\t\t\t\t\t_r$17 = v.Index(i); /* */ $s = 47; case 47: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }\n\t\t\t\t\t$r = _r$17.Set(z); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t/* } */ $s = 45; continue; case 46:\n\t\t\t\t$s = 42; continue;\n\t\t\t/* } else { */ case 41:\n\t\t\t\tv.SetLen(i);\n\t\t\t/* } */ case 42:\n\t\t/* } */ case 39:\n\t\t/* */ if ((i === 0) && (v.Kind() === 23)) { $s = 49; continue; }\n\t\t/* */ $s = 50; continue;\n\t\t/* if ((i === 0) && (v.Kind() === 23)) { */ case 49:\n\t\t\t_r$18 = reflect.MakeSlice(v.Type(), 0, 0); /* */ $s = 51; case 51: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }\n\t\t\t$r = v.Set(_r$18); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 50:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.array }; } $f.$ptr = $ptr; $f._q = _q; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.i = i; $f.newcap = newcap; $f.newv = newv; $f.op = op; $f.pv = pv; $f.u = u; $f.ut = ut; $f.v = v; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecodeState.prototype.array = function(v) { return this.$val.array(v); };\n\tdecodeState.ptr.prototype.object = function(v) {\n\t\tvar $ptr, _i, _i$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _tuple, _tuple$1, _v, d, destring, elemType, err, f, ff, fields, i, i$1, item, key, kv, mapElem, ok, op, pv, qv, qv$1, qv$2, start, subv, t, u, ut, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; d = $f.d; destring = $f.destring; elemType = $f.elemType; err = $f.err; f = $f.f; ff = $f.ff; fields = $f.fields; i = $f.i; i$1 = $f.i$1; item = $f.item; key = $f.key; kv = $f.kv; mapElem = $f.mapElem; ok = $f.ok; op = $f.op; pv = $f.pv; qv = $f.qv; qv$1 = $f.qv$1; qv$2 = $f.qv$2; start = $f.start; subv = $f.subv; t = $f.t; u = $f.u; ut = $f.ut; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\tv = v;\n\t\t_r$2 = d.indirect(v, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_tuple = _r$2; u = _tuple[0]; ut = _tuple[1]; pv = _tuple[2];\n\t\t/* */ if (!($interfaceIsEqual(u, $ifaceNil))) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (!($interfaceIsEqual(u, $ifaceNil))) { */ case 2:\n\t\t\td.off = d.off - (1) >> 0;\n\t\t\t_r$3 = d.next(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t_r$4 = u.UnmarshalJSON(_r$3); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\terr = _r$4;\n\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\td.error(err);\n\t\t\t}\n\t\t\treturn;\n\t\t/* } */ case 3:\n\t\t/* */ if (!($interfaceIsEqual(ut, $ifaceNil))) { $s = 6; continue; }\n\t\t/* */ $s = 7; continue;\n\t\t/* if (!($interfaceIsEqual(ut, $ifaceNil))) { */ case 6:\n\t\t\td.saveError(new UnmarshalTypeError.ptr(\"object\", v.Type()));\n\t\t\td.off = d.off - (1) >> 0;\n\t\t\t_r$5 = d.next(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t_r$5;\n\t\t\treturn;\n\t\t/* } */ case 7:\n\t\tv = pv;\n\t\t/* */ if ((v.Kind() === 20) && (v.NumMethod() === 0)) { $s = 9; continue; }\n\t\t/* */ $s = 10; continue;\n\t\t/* if ((v.Kind() === 20) && (v.NumMethod() === 0)) { */ case 9:\n\t\t\t_r$6 = d.objectInterface(); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_r$7 = reflect.ValueOf(new mapType$2(_r$6)); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t$r = v.Set(_r$7); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\treturn;\n\t\t/* } */ case 10:\n\t\t_ref = v.Kind();\n\t\t/* */ if (_ref === 21) { $s = 14; continue; }\n\t\t/* */ if (_ref === 25) { $s = 15; continue; }\n\t\t/* */ $s = 16; continue;\n\t\t/* if (_ref === 21) { */ case 14:\n\t\t\tt = v.Type();\n\t\t\t_r$8 = t.Key(); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t_r$9 = _r$8.Kind(); /* */ $s = 21; case 21: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\t/* */ if (!((_r$9 === 24))) { $s = 18; continue; }\n\t\t\t/* */ $s = 19; continue;\n\t\t\t/* if (!((_r$9 === 24))) { */ case 18:\n\t\t\t\td.saveError(new UnmarshalTypeError.ptr(\"object\", v.Type()));\n\t\t\t\td.off = d.off - (1) >> 0;\n\t\t\t\t_r$10 = d.next(); /* */ $s = 22; case 22: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\t\t_r$10;\n\t\t\t\treturn;\n\t\t\t/* } */ case 19:\n\t\t\t/* */ if (v.IsNil()) { $s = 23; continue; }\n\t\t\t/* */ $s = 24; continue;\n\t\t\t/* if (v.IsNil()) { */ case 23:\n\t\t\t\t_r$11 = reflect.MakeMap(t); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t\t\t$r = v.Set(_r$11); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 24:\n\t\t\t$s = 17; continue;\n\t\t/* } else if (_ref === 25) { */ case 15:\n\t\t\t$s = 17; continue;\n\t\t/* } else { */ case 16:\n\t\t\td.saveError(new UnmarshalTypeError.ptr(\"object\", v.Type()));\n\t\t\td.off = d.off - (1) >> 0;\n\t\t\t_r$12 = d.next(); /* */ $s = 27; case 27: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\t\t_r$12;\n\t\t\treturn;\n\t\t/* } */ case 17:\n\t\tmapElem = new reflect.Value.ptr();\n\t\t/* while (true) { */ case 28:\n\t\t\t_r$13 = d.scanWhile(9); /* */ $s = 30; case 30: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }\n\t\t\top = _r$13;\n\t\t\tif (op === 5) {\n\t\t\t\t/* break; */ $s = 29; continue;\n\t\t\t}\n\t\t\tif (!((op === 1))) {\n\t\t\t\td.error(errPhase);\n\t\t\t}\n\t\t\tstart = d.off - 1 >> 0;\n\t\t\t_r$14 = d.scanWhile(0); /* */ $s = 31; case 31: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }\n\t\t\top = _r$14;\n\t\t\titem = $subslice(d.data, start, (d.off - 1 >> 0));\n\t\t\t_tuple$1 = unquoteBytes(item); key = _tuple$1[0]; ok = _tuple$1[1];\n\t\t\tif (!ok) {\n\t\t\t\td.error(errPhase);\n\t\t\t}\n\t\t\tsubv = new reflect.Value.ptr();\n\t\t\tdestring = false;\n\t\t\t/* */ if (v.Kind() === 21) { $s = 32; continue; }\n\t\t\t/* */ $s = 33; continue;\n\t\t\t/* if (v.Kind() === 21) { */ case 32:\n\t\t\t\t_r$15 = v.Type().Elem(); /* */ $s = 35; case 35: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }\n\t\t\t\telemType = _r$15;\n\t\t\t\t/* */ if (!mapElem.IsValid()) { $s = 36; continue; }\n\t\t\t\t/* */ $s = 37; continue;\n\t\t\t\t/* if (!mapElem.IsValid()) { */ case 36:\n\t\t\t\t\t_r$16 = reflect.New(elemType); /* */ $s = 39; case 39: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$17 = _r$16.Elem(); /* */ $s = 40; case 40: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }\n\t\t\t\t\tmapElem = _r$17;\n\t\t\t\t\t$s = 38; continue;\n\t\t\t\t/* } else { */ case 37:\n\t\t\t\t\t_r$18 = reflect.Zero(elemType); /* */ $s = 41; case 41: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }\n\t\t\t\t\t$r = mapElem.Set(_r$18); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t/* } */ case 38:\n\t\t\t\tsubv = mapElem;\n\t\t\t\t$s = 34; continue;\n\t\t\t/* } else { */ case 33:\n\t\t\t\tf = ptrType$3.nil;\n\t\t\t\t_r$19 = cachedTypeFields(v.Type()); /* */ $s = 43; case 43: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }\n\t\t\t\tfields = _r$19;\n\t\t\t\t_ref$1 = fields;\n\t\t\t\t_i = 0;\n\t\t\t\t/* while (true) { */ case 44:\n\t\t\t\t\t/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 45; continue; }\n\t\t\t\t\ti = _i;\n\t\t\t\t\tff = ((i < 0 || i >= fields.$length) ? $throwRuntimeError(\"index out of range\") : fields.$array[fields.$offset + i]);\n\t\t\t\t\tif (bytes.Equal(ff.nameBytes, key)) {\n\t\t\t\t\t\tf = ff;\n\t\t\t\t\t\t/* break; */ $s = 45; continue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!(f === ptrType$3.nil)) { _v = false; $s = 48; continue s; }\n\t\t\t\t\t_r$20 = ff.equalFold(ff.nameBytes, key); /* */ $s = 49; case 49: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }\n\t\t\t\t\t_v = _r$20; case 48:\n\t\t\t\t\t/* */ if (_v) { $s = 46; continue; }\n\t\t\t\t\t/* */ $s = 47; continue;\n\t\t\t\t\t/* if (_v) { */ case 46:\n\t\t\t\t\t\tf = ff;\n\t\t\t\t\t/* } */ case 47:\n\t\t\t\t\t_i++;\n\t\t\t\t/* } */ $s = 44; continue; case 45:\n\t\t\t\t/* */ if (!(f === ptrType$3.nil)) { $s = 50; continue; }\n\t\t\t\t/* */ $s = 51; continue;\n\t\t\t\t/* if (!(f === ptrType$3.nil)) { */ case 50:\n\t\t\t\t\tsubv = v;\n\t\t\t\t\tdestring = f.quoted;\n\t\t\t\t\t_ref$2 = f.index;\n\t\t\t\t\t_i$1 = 0;\n\t\t\t\t\t/* while (true) { */ case 52:\n\t\t\t\t\t\t/* if (!(_i$1 < _ref$2.$length)) { break; } */ if(!(_i$1 < _ref$2.$length)) { $s = 53; continue; }\n\t\t\t\t\t\ti$1 = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError(\"index out of range\") : _ref$2.$array[_ref$2.$offset + _i$1]);\n\t\t\t\t\t\t/* */ if (subv.Kind() === 22) { $s = 54; continue; }\n\t\t\t\t\t\t/* */ $s = 55; continue;\n\t\t\t\t\t\t/* if (subv.Kind() === 22) { */ case 54:\n\t\t\t\t\t\t\t/* */ if (subv.IsNil()) { $s = 56; continue; }\n\t\t\t\t\t\t\t/* */ $s = 57; continue;\n\t\t\t\t\t\t\t/* if (subv.IsNil()) { */ case 56:\n\t\t\t\t\t\t\t\t_r$21 = subv.Type().Elem(); /* */ $s = 58; case 58: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }\n\t\t\t\t\t\t\t\t_r$22 = reflect.New(_r$21); /* */ $s = 59; case 59: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }\n\t\t\t\t\t\t\t\t$r = subv.Set(_r$22); /* */ $s = 60; case 60: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t\t\t/* } */ case 57:\n\t\t\t\t\t\t\t_r$23 = subv.Elem(); /* */ $s = 61; case 61: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }\n\t\t\t\t\t\t\tsubv = _r$23;\n\t\t\t\t\t\t/* } */ case 55:\n\t\t\t\t\t\t_r$24 = subv.Field(i$1); /* */ $s = 62; case 62: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }\n\t\t\t\t\t\tsubv = _r$24;\n\t\t\t\t\t\t_i$1++;\n\t\t\t\t\t/* } */ $s = 52; continue; case 53:\n\t\t\t\t/* } */ case 51:\n\t\t\t/* } */ case 34:\n\t\t\t/* */ if (op === 9) { $s = 63; continue; }\n\t\t\t/* */ $s = 64; continue;\n\t\t\t/* if (op === 9) { */ case 63:\n\t\t\t\t_r$25 = d.scanWhile(9); /* */ $s = 65; case 65: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }\n\t\t\t\top = _r$25;\n\t\t\t/* } */ case 64:\n\t\t\tif (!((op === 3))) {\n\t\t\t\td.error(errPhase);\n\t\t\t}\n\t\t\t/* */ if (destring) { $s = 66; continue; }\n\t\t\t/* */ $s = 67; continue;\n\t\t\t/* if (destring) { */ case 66:\n\t\t\t\t_r$26 = d.valueQuoted(); /* */ $s = 69; case 69: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }\n\t\t\t\t_ref$3 = _r$26;\n\t\t\t\t/* */ if (_ref$3 === $ifaceNil) { $s = 70; continue; }\n\t\t\t\t/* */ if ($assertType(_ref$3, $String, true)[1]) { $s = 71; continue; }\n\t\t\t\t/* */ $s = 72; continue;\n\t\t\t\t/* if (_ref$3 === $ifaceNil) { */ case 70:\n\t\t\t\t\tqv = _ref$3;\n\t\t\t\t\t$r = d.literalStore(nullLiteral, subv, false); /* */ $s = 74; case 74: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t$s = 73; continue;\n\t\t\t\t/* } else if ($assertType(_ref$3, $String, true)[1]) { */ case 71:\n\t\t\t\t\tqv$1 = _ref$3.$val;\n\t\t\t\t\t$r = d.literalStore(new sliceType$1($stringToBytes(qv$1)), subv, true); /* */ $s = 75; case 75: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t$s = 73; continue;\n\t\t\t\t/* } else { */ case 72:\n\t\t\t\t\tqv$2 = _ref$3;\n\t\t\t\t\t_r$27 = fmt.Errorf(\"json: invalid use of ,string struct tag, trying to unmarshal unquoted value into %v\", new sliceType$2([item, v.Type()])); /* */ $s = 76; case 76: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }\n\t\t\t\t\t$r = d.saveError(_r$27); /* */ $s = 77; case 77: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t/* } */ case 73:\n\t\t\t\t$s = 68; continue;\n\t\t\t/* } else { */ case 67:\n\t\t\t\t$r = d.value(subv); /* */ $s = 78; case 78: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 68:\n\t\t\t/* */ if (v.Kind() === 21) { $s = 79; continue; }\n\t\t\t/* */ $s = 80; continue;\n\t\t\t/* if (v.Kind() === 21) { */ case 79:\n\t\t\t\t_r$28 = reflect.ValueOf(key); /* */ $s = 81; case 81: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }\n\t\t\t\t_r$29 = v.Type().Key(); /* */ $s = 82; case 82: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }\n\t\t\t\t_r$30 = _r$28.Convert(_r$29); /* */ $s = 83; case 83: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }\n\t\t\t\tkv = _r$30;\n\t\t\t\t$r = v.SetMapIndex(kv, subv); /* */ $s = 84; case 84: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 80:\n\t\t\t_r$31 = d.scanWhile(9); /* */ $s = 85; case 85: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }\n\t\t\top = _r$31;\n\t\t\tif (op === 5) {\n\t\t\t\t/* break; */ $s = 29; continue;\n\t\t\t}\n\t\t\tif (!((op === 4))) {\n\t\t\t\td.error(errPhase);\n\t\t\t}\n\t\t/* } */ $s = 28; continue; case 29:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.object }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f.d = d; $f.destring = destring; $f.elemType = elemType; $f.err = err; $f.f = f; $f.ff = ff; $f.fields = fields; $f.i = i; $f.i$1 = i$1; $f.item = item; $f.key = key; $f.kv = kv; $f.mapElem = mapElem; $f.ok = ok; $f.op = op; $f.pv = pv; $f.qv = qv; $f.qv$1 = qv$1; $f.qv$2 = qv$2; $f.start = start; $f.subv = subv; $f.t = t; $f.u = u; $f.ut = ut; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecodeState.prototype.object = function(v) { return this.$val.object(v); };\n\tdecodeState.ptr.prototype.literal = function(v) {\n\t\tvar $ptr, _r$2, d, op, start, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; d = $f.d; op = $f.op; start = $f.start; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\tv = v;\n\t\tstart = d.off - 1 >> 0;\n\t\t_r$2 = d.scanWhile(0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\top = _r$2;\n\t\td.off = d.off - (1) >> 0;\n\t\td.scan.undo(op);\n\t\t$r = d.literalStore($subslice(d.data, start, d.off), v, false); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.literal }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.d = d; $f.op = op; $f.start = start; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecodeState.prototype.literal = function(v) { return this.$val.literal(v); };\n\tdecodeState.ptr.prototype.convertNumber = function(s) {\n\t\tvar $ptr, _tuple, d, err, f, s;\n\t\td = this;\n\t\tif (d.useNumber) {\n\t\t\treturn [new Number(s), $ifaceNil];\n\t\t}\n\t\t_tuple = strconv.ParseFloat(s, 64); f = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn [$ifaceNil, new UnmarshalTypeError.ptr(\"number \" + s, reflect.TypeOf(new $Float64(0)))];\n\t\t}\n\t\treturn [new $Float64(f), $ifaceNil];\n\t};\n\tdecodeState.prototype.convertNumber = function(s) { return this.$val.convertNumber(s); };\n\tdecodeState.ptr.prototype.literalStore = function(item, v, fromQuoted) {\n\t\tvar $ptr, _arg, _arg$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, b, c, d, err, err$1, err$2, err$3, err$4, err$5, err$6, fromQuoted, item, n, n$1, n$2, n$3, n$4, ok, ok$1, pv, s, s$1, s$2, u, ut, v, value, wantptr, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; b = $f.b; c = $f.c; d = $f.d; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; fromQuoted = $f.fromQuoted; item = $f.item; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; n$3 = $f.n$3; n$4 = $f.n$4; ok = $f.ok; ok$1 = $f.ok$1; pv = $f.pv; s = $f.s; s$1 = $f.s$1; s$2 = $f.s$2; u = $f.u; ut = $f.ut; v = $f.v; value = $f.value; wantptr = $f.wantptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\tv = v;\n\t\t/* */ if (item.$length === 0) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (item.$length === 0) { */ case 1:\n\t\t\t_r$2 = fmt.Errorf(\"json: invalid use of ,string struct tag, trying to unmarshal %q into %v\", new sliceType$2([item, v.Type()])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t$r = d.saveError(_r$2); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\treturn;\n\t\t/* } */ case 2:\n\t\twantptr = (0 >= item.$length ? $throwRuntimeError(\"index out of range\") : item.$array[item.$offset + 0]) === 110;\n\t\t_r$3 = d.indirect(v, wantptr); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t_tuple = _r$3; u = _tuple[0]; ut = _tuple[1]; pv = _tuple[2];\n\t\t/* */ if (!($interfaceIsEqual(u, $ifaceNil))) { $s = 6; continue; }\n\t\t/* */ $s = 7; continue;\n\t\t/* if (!($interfaceIsEqual(u, $ifaceNil))) { */ case 6:\n\t\t\t_r$4 = u.UnmarshalJSON(item); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\terr = _r$4;\n\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\td.error(err);\n\t\t\t}\n\t\t\treturn;\n\t\t/* } */ case 7:\n\t\t/* */ if (!($interfaceIsEqual(ut, $ifaceNil))) { $s = 9; continue; }\n\t\t/* */ $s = 10; continue;\n\t\t/* if (!($interfaceIsEqual(ut, $ifaceNil))) { */ case 9:\n\t\t\t/* */ if (!(((0 >= item.$length ? $throwRuntimeError(\"index out of range\") : item.$array[item.$offset + 0]) === 34))) { $s = 11; continue; }\n\t\t\t/* */ $s = 12; continue;\n\t\t\t/* if (!(((0 >= item.$length ? $throwRuntimeError(\"index out of range\") : item.$array[item.$offset + 0]) === 34))) { */ case 11:\n\t\t\t\t/* */ if (fromQuoted) { $s = 13; continue; }\n\t\t\t\t/* */ $s = 14; continue;\n\t\t\t\t/* if (fromQuoted) { */ case 13:\n\t\t\t\t\t_r$5 = fmt.Errorf(\"json: invalid use of ,string struct tag, trying to unmarshal %q into %v\", new sliceType$2([item, v.Type()])); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t\t\t$r = d.saveError(_r$5); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t$s = 15; continue;\n\t\t\t\t/* } else { */ case 14:\n\t\t\t\t\td.saveError(new UnmarshalTypeError.ptr(\"string\", v.Type()));\n\t\t\t\t/* } */ case 15:\n\t\t\t/* } */ case 12:\n\t\t\t_tuple$1 = unquoteBytes(item); s = _tuple$1[0]; ok = _tuple$1[1];\n\t\t\t/* */ if (!ok) { $s = 18; continue; }\n\t\t\t/* */ $s = 19; continue;\n\t\t\t/* if (!ok) { */ case 18:\n\t\t\t\t/* */ if (fromQuoted) { $s = 20; continue; }\n\t\t\t\t/* */ $s = 21; continue;\n\t\t\t\t/* if (fromQuoted) { */ case 20:\n\t\t\t\t\t_r$6 = fmt.Errorf(\"json: invalid use of ,string struct tag, trying to unmarshal %q into %v\", new sliceType$2([item, v.Type()])); /* */ $s = 23; case 23: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t\t\t$r = d.error(_r$6); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t$s = 22; continue;\n\t\t\t\t/* } else { */ case 21:\n\t\t\t\t\td.error(errPhase);\n\t\t\t\t/* } */ case 22:\n\t\t\t/* } */ case 19:\n\t\t\t_r$7 = ut.UnmarshalText(s); /* */ $s = 25; case 25: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\terr$1 = _r$7;\n\t\t\tif (!($interfaceIsEqual(err$1, $ifaceNil))) {\n\t\t\t\td.error(err$1);\n\t\t\t}\n\t\t\treturn;\n\t\t/* } */ case 10:\n\t\tv = pv;\n\t\tc = (0 >= item.$length ? $throwRuntimeError(\"index out of range\") : item.$array[item.$offset + 0]);\n\t\t_ref = c;\n\t\t/* */ if (_ref === 110) { $s = 26; continue; }\n\t\t/* */ if (_ref === 116 || _ref === 102) { $s = 27; continue; }\n\t\t/* */ if (_ref === 34) { $s = 28; continue; }\n\t\t/* */ $s = 29; continue;\n\t\t/* if (_ref === 110) { */ case 26:\n\t\t\t_ref$1 = v.Kind();\n\t\t\t/* */ if (_ref$1 === 20 || _ref$1 === 22 || _ref$1 === 21 || _ref$1 === 23) { $s = 31; continue; }\n\t\t\t/* */ $s = 32; continue;\n\t\t\t/* if (_ref$1 === 20 || _ref$1 === 22 || _ref$1 === 21 || _ref$1 === 23) { */ case 31:\n\t\t\t\t_r$8 = reflect.Zero(v.Type()); /* */ $s = 33; case 33: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t\t$r = v.Set(_r$8); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 32:\n\t\t\t$s = 30; continue;\n\t\t/* } else if (_ref === 116 || _ref === 102) { */ case 27:\n\t\t\tvalue = c === 116;\n\t\t\t_ref$2 = v.Kind();\n\t\t\t/* */ if (_ref$2 === 1) { $s = 35; continue; }\n\t\t\t/* */ if (_ref$2 === 20) { $s = 36; continue; }\n\t\t\t/* */ $s = 37; continue;\n\t\t\t/* if (_ref$2 === 1) { */ case 35:\n\t\t\t\tv.SetBool(value);\n\t\t\t\t$s = 38; continue;\n\t\t\t/* } else if (_ref$2 === 20) { */ case 36:\n\t\t\t\t/* */ if (v.NumMethod() === 0) { $s = 39; continue; }\n\t\t\t\t/* */ $s = 40; continue;\n\t\t\t\t/* if (v.NumMethod() === 0) { */ case 39:\n\t\t\t\t\t_r$9 = reflect.ValueOf(new $Bool(value)); /* */ $s = 42; case 42: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\t\t\t$r = v.Set(_r$9); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t$s = 41; continue;\n\t\t\t\t/* } else { */ case 40:\n\t\t\t\t\td.saveError(new UnmarshalTypeError.ptr(\"bool\", v.Type()));\n\t\t\t\t/* } */ case 41:\n\t\t\t\t$s = 38; continue;\n\t\t\t/* } else { */ case 37:\n\t\t\t\t/* */ if (fromQuoted) { $s = 44; continue; }\n\t\t\t\t/* */ $s = 45; continue;\n\t\t\t\t/* if (fromQuoted) { */ case 44:\n\t\t\t\t\t_r$10 = fmt.Errorf(\"json: invalid use of ,string struct tag, trying to unmarshal %q into %v\", new sliceType$2([item, v.Type()])); /* */ $s = 47; case 47: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\t\t\t$r = d.saveError(_r$10); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t$s = 46; continue;\n\t\t\t\t/* } else { */ case 45:\n\t\t\t\t\td.saveError(new UnmarshalTypeError.ptr(\"bool\", v.Type()));\n\t\t\t\t/* } */ case 46:\n\t\t\t/* } */ case 38:\n\t\t\t$s = 30; continue;\n\t\t/* } else if (_ref === 34) { */ case 28:\n\t\t\t_tuple$2 = unquoteBytes(item); s$1 = _tuple$2[0]; ok$1 = _tuple$2[1];\n\t\t\t/* */ if (!ok$1) { $s = 49; continue; }\n\t\t\t/* */ $s = 50; continue;\n\t\t\t/* if (!ok$1) { */ case 49:\n\t\t\t\t/* */ if (fromQuoted) { $s = 51; continue; }\n\t\t\t\t/* */ $s = 52; continue;\n\t\t\t\t/* if (fromQuoted) { */ case 51:\n\t\t\t\t\t_r$11 = fmt.Errorf(\"json: invalid use of ,string struct tag, trying to unmarshal %q into %v\", new sliceType$2([item, v.Type()])); /* */ $s = 54; case 54: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t\t\t\t$r = d.error(_r$11); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t$s = 53; continue;\n\t\t\t\t/* } else { */ case 52:\n\t\t\t\t\td.error(errPhase);\n\t\t\t\t/* } */ case 53:\n\t\t\t/* } */ case 50:\n\t\t\t_ref$3 = v.Kind();\n\t\t\t/* */ if (_ref$3 === 23) { $s = 56; continue; }\n\t\t\t/* */ if (_ref$3 === 24) { $s = 57; continue; }\n\t\t\t/* */ if (_ref$3 === 20) { $s = 58; continue; }\n\t\t\t/* */ $s = 59; continue;\n\t\t\t/* switch (0) { default: if (_ref$3 === 23) { */ case 56:\n\t\t\t\tif (!($interfaceIsEqual(v.Type(), byteSliceType))) {\n\t\t\t\t\td.saveError(new UnmarshalTypeError.ptr(\"string\", v.Type()));\n\t\t\t\t\t/* break; */ $s = 60; continue;\n\t\t\t\t}\n\t\t\t\tb = $makeSlice(sliceType$1, base64.StdEncoding.DecodedLen(s$1.$length));\n\t\t\t\t_r$12 = base64.StdEncoding.Decode(b, s$1); /* */ $s = 61; case 61: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$3 = _r$12; n = _tuple$3[0]; err$2 = _tuple$3[1];\n\t\t\t\tif (!($interfaceIsEqual(err$2, $ifaceNil))) {\n\t\t\t\t\td.saveError(err$2);\n\t\t\t\t\t/* break; */ $s = 60; continue;\n\t\t\t\t}\n\t\t\t\t_r$13 = reflect.ValueOf($subslice(b, 0, n)); /* */ $s = 62; case 62: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }\n\t\t\t\t$r = v.Set(_r$13); /* */ $s = 63; case 63: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 60; continue;\n\t\t\t/* } else if (_ref$3 === 24) { */ case 57:\n\t\t\t\tv.SetString($bytesToString(s$1));\n\t\t\t\t$s = 60; continue;\n\t\t\t/* } else if (_ref$3 === 20) { */ case 58:\n\t\t\t\t/* */ if (v.NumMethod() === 0) { $s = 64; continue; }\n\t\t\t\t/* */ $s = 65; continue;\n\t\t\t\t/* if (v.NumMethod() === 0) { */ case 64:\n\t\t\t\t\t_r$14 = reflect.ValueOf(new $String($bytesToString(s$1))); /* */ $s = 67; case 67: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }\n\t\t\t\t\t$r = v.Set(_r$14); /* */ $s = 68; case 68: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t$s = 66; continue;\n\t\t\t\t/* } else { */ case 65:\n\t\t\t\t\td.saveError(new UnmarshalTypeError.ptr(\"string\", v.Type()));\n\t\t\t\t/* } */ case 66:\n\t\t\t\t$s = 60; continue;\n\t\t\t/* } else { */ case 59:\n\t\t\t\td.saveError(new UnmarshalTypeError.ptr(\"string\", v.Type()));\n\t\t\t/* } } */ case 60:\n\t\t\t$s = 30; continue;\n\t\t/* } else { */ case 29:\n\t\t\t/* */ if (!((c === 45)) && (c < 48 || c > 57)) { $s = 69; continue; }\n\t\t\t/* */ $s = 70; continue;\n\t\t\t/* if (!((c === 45)) && (c < 48 || c > 57)) { */ case 69:\n\t\t\t\t/* */ if (fromQuoted) { $s = 71; continue; }\n\t\t\t\t/* */ $s = 72; continue;\n\t\t\t\t/* if (fromQuoted) { */ case 71:\n\t\t\t\t\t_r$15 = fmt.Errorf(\"json: invalid use of ,string struct tag, trying to unmarshal %q into %v\", new sliceType$2([item, v.Type()])); /* */ $s = 74; case 74: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }\n\t\t\t\t\t$r = d.error(_r$15); /* */ $s = 75; case 75: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t$s = 73; continue;\n\t\t\t\t/* } else { */ case 72:\n\t\t\t\t\td.error(errPhase);\n\t\t\t\t/* } */ case 73:\n\t\t\t/* } */ case 70:\n\t\t\ts$2 = $bytesToString(item);\n\t\t\t_ref$4 = v.Kind();\n\t\t\t/* */ if (_ref$4 === 20) { $s = 76; continue; }\n\t\t\t/* */ if (_ref$4 === 2 || _ref$4 === 3 || _ref$4 === 4 || _ref$4 === 5 || _ref$4 === 6) { $s = 77; continue; }\n\t\t\t/* */ if (_ref$4 === 7 || _ref$4 === 8 || _ref$4 === 9 || _ref$4 === 10 || _ref$4 === 11 || _ref$4 === 12) { $s = 78; continue; }\n\t\t\t/* */ if (_ref$4 === 13 || _ref$4 === 14) { $s = 79; continue; }\n\t\t\t/* */ $s = 80; continue;\n\t\t\t/* switch (0) { default: if (_ref$4 === 20) { */ case 76:\n\t\t\t\t_tuple$4 = d.convertNumber(s$2); n$1 = _tuple$4[0]; err$3 = _tuple$4[1];\n\t\t\t\tif (!($interfaceIsEqual(err$3, $ifaceNil))) {\n\t\t\t\t\td.saveError(err$3);\n\t\t\t\t\t/* break; */ $s = 81; continue;\n\t\t\t\t}\n\t\t\t\tif (!((v.NumMethod() === 0))) {\n\t\t\t\t\td.saveError(new UnmarshalTypeError.ptr(\"number\", v.Type()));\n\t\t\t\t\t/* break; */ $s = 81; continue;\n\t\t\t\t}\n\t\t\t\t_r$16 = reflect.ValueOf(n$1); /* */ $s = 82; case 82: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }\n\t\t\t\t$r = v.Set(_r$16); /* */ $s = 83; case 83: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 81; continue;\n\t\t\t/* } else if (_ref$4 === 2 || _ref$4 === 3 || _ref$4 === 4 || _ref$4 === 5 || _ref$4 === 6) { */ case 77:\n\t\t\t\t_tuple$5 = strconv.ParseInt(s$2, 10, 64); n$2 = _tuple$5[0]; err$4 = _tuple$5[1];\n\t\t\t\tif (!($interfaceIsEqual(err$4, $ifaceNil)) || v.OverflowInt(n$2)) {\n\t\t\t\t\td.saveError(new UnmarshalTypeError.ptr(\"number \" + s$2, v.Type()));\n\t\t\t\t\t/* break; */ $s = 81; continue;\n\t\t\t\t}\n\t\t\t\tv.SetInt(n$2);\n\t\t\t\t$s = 81; continue;\n\t\t\t/* } else if (_ref$4 === 7 || _ref$4 === 8 || _ref$4 === 9 || _ref$4 === 10 || _ref$4 === 11 || _ref$4 === 12) { */ case 78:\n\t\t\t\t_tuple$6 = strconv.ParseUint(s$2, 10, 64); n$3 = _tuple$6[0]; err$5 = _tuple$6[1];\n\t\t\t\tif (!($interfaceIsEqual(err$5, $ifaceNil)) || v.OverflowUint(n$3)) {\n\t\t\t\t\td.saveError(new UnmarshalTypeError.ptr(\"number \" + s$2, v.Type()));\n\t\t\t\t\t/* break; */ $s = 81; continue;\n\t\t\t\t}\n\t\t\t\tv.SetUint(n$3);\n\t\t\t\t$s = 81; continue;\n\t\t\t/* } else if (_ref$4 === 13 || _ref$4 === 14) { */ case 79:\n\t\t\t\t_arg = s$2;\n\t\t\t\t_r$17 = v.Type().Bits(); /* */ $s = 84; case 84: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }\n\t\t\t\t_arg$1 = _r$17;\n\t\t\t\t_r$18 = strconv.ParseFloat(_arg, _arg$1); /* */ $s = 85; case 85: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$7 = _r$18; n$4 = _tuple$7[0]; err$6 = _tuple$7[1];\n\t\t\t\tif (!($interfaceIsEqual(err$6, $ifaceNil)) || v.OverflowFloat(n$4)) {\n\t\t\t\t\td.saveError(new UnmarshalTypeError.ptr(\"number \" + s$2, v.Type()));\n\t\t\t\t\t/* break; */ $s = 81; continue;\n\t\t\t\t}\n\t\t\t\tv.SetFloat(n$4);\n\t\t\t\t$s = 81; continue;\n\t\t\t/* } else { */ case 80:\n\t\t\t\tif ((v.Kind() === 24) && $interfaceIsEqual(v.Type(), numberType)) {\n\t\t\t\t\tv.SetString(s$2);\n\t\t\t\t\t/* break; */ $s = 81; continue;\n\t\t\t\t}\n\t\t\t\t/* */ if (fromQuoted) { $s = 86; continue; }\n\t\t\t\t/* */ $s = 87; continue;\n\t\t\t\t/* if (fromQuoted) { */ case 86:\n\t\t\t\t\t_r$19 = fmt.Errorf(\"json: invalid use of ,string struct tag, trying to unmarshal %q into %v\", new sliceType$2([item, v.Type()])); /* */ $s = 89; case 89: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }\n\t\t\t\t\t$r = d.error(_r$19); /* */ $s = 90; case 90: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t$s = 88; continue;\n\t\t\t\t/* } else { */ case 87:\n\t\t\t\t\td.error(new UnmarshalTypeError.ptr(\"number\", v.Type()));\n\t\t\t\t/* } */ case 88:\n\t\t\t/* } } */ case 81:\n\t\t/* } */ case 30:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.literalStore }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.b = b; $f.c = c; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.fromQuoted = fromQuoted; $f.item = item; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.n$3 = n$3; $f.n$4 = n$4; $f.ok = ok; $f.ok$1 = ok$1; $f.pv = pv; $f.s = s; $f.s$1 = s$1; $f.s$2 = s$2; $f.u = u; $f.ut = ut; $f.v = v; $f.value = value; $f.wantptr = wantptr; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecodeState.prototype.literalStore = function(item, v, fromQuoted) { return this.$val.literalStore(item, v, fromQuoted); };\n\tdecodeState.ptr.prototype.valueInterface = function() {\n\t\tvar $ptr, _r$2, _r$3, _r$4, _r$5, _ref, d, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\t_r$2 = d.scanWhile(9); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_ref = _r$2;\n\t\t/* */ if (_ref === 6) { $s = 2; continue; }\n\t\t/* */ if (_ref === 2) { $s = 3; continue; }\n\t\t/* */ if (_ref === 1) { $s = 4; continue; }\n\t\t/* */ $s = 5; continue;\n\t\t/* if (_ref === 6) { */ case 2:\n\t\t\t_r$3 = d.arrayInterface(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\treturn _r$3;\n\t\t\t$s = 6; continue;\n\t\t/* } else if (_ref === 2) { */ case 3:\n\t\t\t_r$4 = d.objectInterface(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\treturn new mapType$2(_r$4);\n\t\t\t$s = 6; continue;\n\t\t/* } else if (_ref === 1) { */ case 4:\n\t\t\t_r$5 = d.literalInterface(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\treturn _r$5;\n\t\t\t$s = 6; continue;\n\t\t/* } else { */ case 5:\n\t\t\td.error(errPhase);\n\t\t\t$panic(new $String(\"unreachable\"));\n\t\t/* } */ case 6:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.valueInterface }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecodeState.prototype.valueInterface = function() { return this.$val.valueInterface(); };\n\tdecodeState.ptr.prototype.arrayInterface = function() {\n\t\tvar $ptr, _r$2, _r$3, _r$4, d, op, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; d = $f.d; op = $f.op; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\tv = $makeSlice(sliceType$2, 0);\n\t\t/* while (true) { */ case 1:\n\t\t\t_r$2 = d.scanWhile(9); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\top = _r$2;\n\t\t\tif (op === 8) {\n\t\t\t\t/* break; */ $s = 2; continue;\n\t\t\t}\n\t\t\td.off = d.off - (1) >> 0;\n\t\t\td.scan.undo(op);\n\t\t\t_r$3 = d.valueInterface(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\tv = $append(v, _r$3);\n\t\t\t_r$4 = d.scanWhile(9); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\top = _r$4;\n\t\t\tif (op === 8) {\n\t\t\t\t/* break; */ $s = 2; continue;\n\t\t\t}\n\t\t\tif (!((op === 7))) {\n\t\t\t\td.error(errPhase);\n\t\t\t}\n\t\t/* } */ $s = 1; continue; case 2:\n\t\treturn v;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.arrayInterface }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.d = d; $f.op = op; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecodeState.prototype.arrayInterface = function() { return this.$val.arrayInterface(); };\n\tdecodeState.ptr.prototype.objectInterface = function() {\n\t\tvar $ptr, _key, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, d, item, key, m, ok, op, start, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; d = $f.d; item = $f.item; key = $f.key; m = $f.m; ok = $f.ok; op = $f.op; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\tm = new $Map();\n\t\t/* while (true) { */ case 1:\n\t\t\t_r$2 = d.scanWhile(9); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\top = _r$2;\n\t\t\tif (op === 5) {\n\t\t\t\t/* break; */ $s = 2; continue;\n\t\t\t}\n\t\t\tif (!((op === 1))) {\n\t\t\t\td.error(errPhase);\n\t\t\t}\n\t\t\tstart = d.off - 1 >> 0;\n\t\t\t_r$3 = d.scanWhile(0); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\top = _r$3;\n\t\t\titem = $subslice(d.data, start, (d.off - 1 >> 0));\n\t\t\t_tuple = unquote(item); key = _tuple[0]; ok = _tuple[1];\n\t\t\tif (!ok) {\n\t\t\t\td.error(errPhase);\n\t\t\t}\n\t\t\t/* */ if (op === 9) { $s = 5; continue; }\n\t\t\t/* */ $s = 6; continue;\n\t\t\t/* if (op === 9) { */ case 5:\n\t\t\t\t_r$4 = d.scanWhile(9); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t\top = _r$4;\n\t\t\t/* } */ case 6:\n\t\t\tif (!((op === 3))) {\n\t\t\t\td.error(errPhase);\n\t\t\t}\n\t\t\t_r$5 = d.valueInterface(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t_key = key; (m || $throwRuntimeError(\"assignment to entry in nil map\"))[_key] = { k: _key, v: _r$5 };\n\t\t\t_r$6 = d.scanWhile(9); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\top = _r$6;\n\t\t\tif (op === 5) {\n\t\t\t\t/* break; */ $s = 2; continue;\n\t\t\t}\n\t\t\tif (!((op === 4))) {\n\t\t\t\td.error(errPhase);\n\t\t\t}\n\t\t/* } */ $s = 1; continue; case 2:\n\t\treturn m;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.objectInterface }; } $f.$ptr = $ptr; $f._key = _key; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.d = d; $f.item = item; $f.key = key; $f.m = m; $f.ok = ok; $f.op = op; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecodeState.prototype.objectInterface = function() { return this.$val.objectInterface(); };\n\tdecodeState.ptr.prototype.literalInterface = function() {\n\t\tvar $ptr, _r$2, _ref, _tuple, _tuple$1, c, d, err, item, n, ok, op, s, start, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; d = $f.d; err = $f.err; item = $f.item; n = $f.n; ok = $f.ok; op = $f.op; s = $f.s; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = this;\n\t\tstart = d.off - 1 >> 0;\n\t\t_r$2 = d.scanWhile(0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\top = _r$2;\n\t\td.off = d.off - (1) >> 0;\n\t\td.scan.undo(op);\n\t\titem = $subslice(d.data, start, d.off);\n\t\tc = (0 >= item.$length ? $throwRuntimeError(\"index out of range\") : item.$array[item.$offset + 0]);\n\t\t_ref = c;\n\t\tif (_ref === 110) {\n\t\t\treturn $ifaceNil;\n\t\t} else if (_ref === 116 || _ref === 102) {\n\t\t\treturn new $Bool((c === 116));\n\t\t} else if (_ref === 34) {\n\t\t\t_tuple = unquote(item); s = _tuple[0]; ok = _tuple[1];\n\t\t\tif (!ok) {\n\t\t\t\td.error(errPhase);\n\t\t\t}\n\t\t\treturn new $String(s);\n\t\t} else {\n\t\t\tif (!((c === 45)) && (c < 48 || c > 57)) {\n\t\t\t\td.error(errPhase);\n\t\t\t}\n\t\t\t_tuple$1 = d.convertNumber($bytesToString(item)); n = _tuple$1[0]; err = _tuple$1[1];\n\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\td.saveError(err);\n\t\t\t}\n\t\t\treturn n;\n\t\t}\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.literalInterface }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.d = d; $f.err = err; $f.item = item; $f.n = n; $f.ok = ok; $f.op = op; $f.s = s; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdecodeState.prototype.literalInterface = function() { return this.$val.literalInterface(); };\n\tgetu4 = function(s) {\n\t\tvar $ptr, _tuple, err, r, s;\n\t\tif (s.$length < 6 || !(((0 >= s.$length ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + 0]) === 92)) || !(((1 >= s.$length ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + 1]) === 117))) {\n\t\t\treturn -1;\n\t\t}\n\t\t_tuple = strconv.ParseUint($bytesToString($subslice(s, 2, 6)), 16, 64); r = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn (r.$low >> 0);\n\t};\n\tunquote = function(s) {\n\t\tvar $ptr, _tuple, ok, s, t;\n\t\tt = \"\";\n\t\tok = false;\n\t\t_tuple = unquoteBytes(s); s = _tuple[0]; ok = _tuple[1];\n\t\tt = $bytesToString(s);\n\t\treturn [t, ok];\n\t};\n\tunquoteBytes = function(s) {\n\t\tvar $ptr, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, b, c, c$1, dec, nb, ok, r, rr, rr$1, rr$2, rr1, s, size, size$1, t, w, x;\n\t\tt = sliceType$1.nil;\n\t\tok = false;\n\t\tif (s.$length < 2 || !(((0 >= s.$length ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + 0]) === 34)) || !(((x = s.$length - 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + x])) === 34))) {\n\t\t\treturn [t, ok];\n\t\t}\n\t\ts = $subslice(s, 1, (s.$length - 1 >> 0));\n\t\tr = 0;\n\t\twhile (true) {\n\t\t\tif (!(r < s.$length)) { break; }\n\t\t\tc = ((r < 0 || r >= s.$length) ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + r]);\n\t\t\tif ((c === 92) || (c === 34) || c < 32) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (c < 128) {\n\t\t\t\tr = r + (1) >> 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t_tuple = utf8.DecodeRune($subslice(s, r)); rr = _tuple[0]; size = _tuple[1];\n\t\t\tif ((rr === 65533) && (size === 1)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tr = r + (size) >> 0;\n\t\t}\n\t\tif (r === s.$length) {\n\t\t\t_tmp = s; _tmp$1 = true; t = _tmp; ok = _tmp$1;\n\t\t\treturn [t, ok];\n\t\t}\n\t\tb = $makeSlice(sliceType$1, (s.$length + 8 >> 0));\n\t\tw = $copySlice(b, $subslice(s, 0, r));\n\t\twhile (true) {\n\t\t\tif (!(r < s.$length)) { break; }\n\t\t\tif (w >= (b.$length - 8 >> 0)) {\n\t\t\t\tnb = $makeSlice(sliceType$1, (((b.$length + 4 >> 0)) * 2 >> 0));\n\t\t\t\t$copySlice(nb, $subslice(b, 0, w));\n\t\t\t\tb = nb;\n\t\t\t}\n\t\t\tc$1 = ((r < 0 || r >= s.$length) ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + r]);\n\t\t\tif (c$1 === 92) {\n\t\t\t\tr = r + (1) >> 0;\n\t\t\t\tif (r >= s.$length) {\n\t\t\t\t\treturn [t, ok];\n\t\t\t\t}\n\t\t\t\t_ref = ((r < 0 || r >= s.$length) ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + r]);\n\t\t\t\tswitch (0) { default: if (_ref === 34 || _ref === 92 || _ref === 47 || _ref === 39) {\n\t\t\t\t\t((w < 0 || w >= b.$length) ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + w] = ((r < 0 || r >= s.$length) ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + r]));\n\t\t\t\t\tr = r + (1) >> 0;\n\t\t\t\t\tw = w + (1) >> 0;\n\t\t\t\t} else if (_ref === 98) {\n\t\t\t\t\t((w < 0 || w >= b.$length) ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + w] = 8);\n\t\t\t\t\tr = r + (1) >> 0;\n\t\t\t\t\tw = w + (1) >> 0;\n\t\t\t\t} else if (_ref === 102) {\n\t\t\t\t\t((w < 0 || w >= b.$length) ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + w] = 12);\n\t\t\t\t\tr = r + (1) >> 0;\n\t\t\t\t\tw = w + (1) >> 0;\n\t\t\t\t} else if (_ref === 110) {\n\t\t\t\t\t((w < 0 || w >= b.$length) ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + w] = 10);\n\t\t\t\t\tr = r + (1) >> 0;\n\t\t\t\t\tw = w + (1) >> 0;\n\t\t\t\t} else if (_ref === 114) {\n\t\t\t\t\t((w < 0 || w >= b.$length) ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + w] = 13);\n\t\t\t\t\tr = r + (1) >> 0;\n\t\t\t\t\tw = w + (1) >> 0;\n\t\t\t\t} else if (_ref === 116) {\n\t\t\t\t\t((w < 0 || w >= b.$length) ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + w] = 9);\n\t\t\t\t\tr = r + (1) >> 0;\n\t\t\t\t\tw = w + (1) >> 0;\n\t\t\t\t} else if (_ref === 117) {\n\t\t\t\t\tr = r - (1) >> 0;\n\t\t\t\t\trr$1 = getu4($subslice(s, r));\n\t\t\t\t\tif (rr$1 < 0) {\n\t\t\t\t\t\treturn [t, ok];\n\t\t\t\t\t}\n\t\t\t\t\tr = r + (6) >> 0;\n\t\t\t\t\tif (utf16.IsSurrogate(rr$1)) {\n\t\t\t\t\t\trr1 = getu4($subslice(s, r));\n\t\t\t\t\t\tdec = utf16.DecodeRune(rr$1, rr1);\n\t\t\t\t\t\tif (!((dec === 65533))) {\n\t\t\t\t\t\t\tr = r + (6) >> 0;\n\t\t\t\t\t\t\tw = w + (utf8.EncodeRune($subslice(b, w), dec)) >> 0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\trr$1 = 65533;\n\t\t\t\t\t}\n\t\t\t\t\tw = w + (utf8.EncodeRune($subslice(b, w), rr$1)) >> 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn [t, ok];\n\t\t\t\t} }\n\t\t\t} else if (c$1 === 34 || c$1 < 32) {\n\t\t\t\treturn [t, ok];\n\t\t\t} else if (c$1 < 128) {\n\t\t\t\t((w < 0 || w >= b.$length) ? $throwRuntimeError(\"index out of range\") : b.$array[b.$offset + w] = c$1);\n\t\t\t\tr = r + (1) >> 0;\n\t\t\t\tw = w + (1) >> 0;\n\t\t\t} else {\n\t\t\t\t_tuple$1 = utf8.DecodeRune($subslice(s, r)); rr$2 = _tuple$1[0]; size$1 = _tuple$1[1];\n\t\t\t\tr = r + (size$1) >> 0;\n\t\t\t\tw = w + (utf8.EncodeRune($subslice(b, w), rr$2)) >> 0;\n\t\t\t}\n\t\t}\n\t\t_tmp$2 = $subslice(b, 0, w); _tmp$3 = true; t = _tmp$2; ok = _tmp$3;\n\t\treturn [t, ok];\n\t};\n\tisValidTag = function(s) {\n\t\tvar $ptr, _i, _ref, _rune, c, s;\n\t\tif (s === \"\") {\n\t\t\treturn false;\n\t\t}\n\t\t_ref = s;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.length)) { break; }\n\t\t\t_rune = $decodeRune(_ref, _i);\n\t\t\tc = _rune[0];\n\t\t\tif (strings.ContainsRune(\"!#$%&()*+-./:<=>?@[]^_{|}~ \", c)) {\n\t\t\t} else {\n\t\t\t\tif (!unicode.IsLetter(c) && !unicode.IsDigit(c)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_i += _rune[1];\n\t\t}\n\t\treturn true;\n\t};\n\tfillField = function(f) {\n\t\tvar $ptr, f;\n\t\tf = $clone(f, field);\n\t\tf.nameBytes = new sliceType$1($stringToBytes(f.name));\n\t\tf.equalFold = foldFunc(f.nameBytes);\n\t\treturn f;\n\t};\n\tbyName.prototype.Len = function() {\n\t\tvar $ptr, x;\n\t\tx = this;\n\t\treturn x.$length;\n\t};\n\t$ptrType(byName).prototype.Len = function() { return this.$get().Len(); };\n\tbyName.prototype.Swap = function(i, j) {\n\t\tvar $ptr, _tmp, _tmp$1, i, j, x;\n\t\tx = this;\n\t\t_tmp = $clone(((j < 0 || j >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + j]), field); _tmp$1 = $clone(((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]), field); $copy(((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]), _tmp, field); $copy(((j < 0 || j >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + j]), _tmp$1, field);\n\t};\n\t$ptrType(byName).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };\n\tbyName.prototype.Less = function(i, j) {\n\t\tvar $ptr, i, j, x;\n\t\tx = this;\n\t\tif (!(((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]).name === ((j < 0 || j >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + j]).name)) {\n\t\t\treturn ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]).name < ((j < 0 || j >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + j]).name;\n\t\t}\n\t\tif (!((((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]).index.$length === ((j < 0 || j >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + j]).index.$length))) {\n\t\t\treturn ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]).index.$length < ((j < 0 || j >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + j]).index.$length;\n\t\t}\n\t\tif (!(((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]).tag === ((j < 0 || j >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + j]).tag)) {\n\t\t\treturn ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]).tag;\n\t\t}\n\t\treturn $subslice(new byIndex(x.$array), x.$offset, x.$offset + x.$length).Less(i, j);\n\t};\n\t$ptrType(byName).prototype.Less = function(i, j) { return this.$get().Less(i, j); };\n\tbyIndex.prototype.Len = function() {\n\t\tvar $ptr, x;\n\t\tx = this;\n\t\treturn x.$length;\n\t};\n\t$ptrType(byIndex).prototype.Len = function() { return this.$get().Len(); };\n\tbyIndex.prototype.Swap = function(i, j) {\n\t\tvar $ptr, _tmp, _tmp$1, i, j, x;\n\t\tx = this;\n\t\t_tmp = $clone(((j < 0 || j >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + j]), field); _tmp$1 = $clone(((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]), field); $copy(((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]), _tmp, field); $copy(((j < 0 || j >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + j]), _tmp$1, field);\n\t};\n\t$ptrType(byIndex).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };\n\tbyIndex.prototype.Less = function(i, j) {\n\t\tvar $ptr, _i, _ref, i, j, k, x, x$1, x$2, xik;\n\t\tx = this;\n\t\t_ref = ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]).index;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\tk = _i;\n\t\t\txik = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tif (k >= ((j < 0 || j >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + j]).index.$length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!((xik === (x$1 = ((j < 0 || j >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + j]).index, ((k < 0 || k >= x$1.$length) ? $throwRuntimeError(\"index out of range\") : x$1.$array[x$1.$offset + k]))))) {\n\t\t\t\treturn xik < (x$2 = ((j < 0 || j >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + j]).index, ((k < 0 || k >= x$2.$length) ? $throwRuntimeError(\"index out of range\") : x$2.$array[x$2.$offset + k]));\n\t\t\t}\n\t\t\t_i++;\n\t\t}\n\t\treturn ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]).index.$length < ((j < 0 || j >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + j]).index.$length;\n\t};\n\t$ptrType(byIndex).prototype.Less = function(i, j) { return this.$get().Less(i, j); };\n\ttypeFields = function(t) {\n\t\tvar $ptr, _entry, _entry$1, _entry$2, _entry$3, _i, _key, _key$1, _key$2, _key$3, _key$4, _key$5, _map, _map$1, _map$2, _map$3, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _v, _v$1, advance, count, current, dominant, f, fi, fields, fj, ft, i, i$1, index, name, name$1, next, nextCount, ok, opts, out, sf, t, tag, tagged, visited, x, x$1, x$2, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _key$5 = $f._key$5; _map = $f._map; _map$1 = $f._map$1; _map$2 = $f._map$2; _map$3 = $f._map$3; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; _v$1 = $f._v$1; advance = $f.advance; count = $f.count; current = $f.current; dominant = $f.dominant; f = $f.f; fi = $f.fi; fields = $f.fields; fj = $f.fj; ft = $f.ft; i = $f.i; i$1 = $f.i$1; index = $f.index; name = $f.name; name$1 = $f.name$1; next = $f.next; nextCount = $f.nextCount; ok = $f.ok; opts = $f.opts; out = $f.out; sf = $f.sf; t = $f.t; tag = $f.tag; tagged = $f.tagged; visited = $f.visited; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tcurrent = new sliceType([]);\n\t\tnext = new sliceType([new field.ptr(\"\", sliceType$1.nil, $throwNilPointerError, false, sliceType$4.nil, t, false, false)]);\n\t\tcount = (_map = new $Map(), _map);\n\t\tnextCount = (_map$1 = new $Map(), _map$1);\n\t\tvisited = (_map$2 = new $Map(), _map$2);\n\t\tfields = sliceType.nil;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }\n\t\t\t_tmp = next; _tmp$1 = $subslice(current, 0, 0); current = _tmp; next = _tmp$1;\n\t\t\t_tmp$2 = nextCount; _tmp$3 = (_map$3 = new $Map(), _map$3); count = _tmp$2; nextCount = _tmp$3;\n\t\t\t_ref = current;\n\t\t\t_i = 0;\n\t\t\t/* while (true) { */ case 3:\n\t\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }\n\t\t\t\tf = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]), field);\n\t\t\t\t/* */ if ((_entry = visited[f.typ.$key()], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }\n\t\t\t\t/* */ $s = 6; continue;\n\t\t\t\t/* if ((_entry = visited[f.typ.$key()], _entry !== undefined ? _entry.v : false)) { */ case 5:\n\t\t\t\t\t_i++;\n\t\t\t\t\t/* continue; */ $s = 3; continue;\n\t\t\t\t/* } */ case 6:\n\t\t\t\t_key$4 = f.typ; (visited || $throwRuntimeError(\"assignment to entry in nil map\"))[_key$4.$key()] = { k: _key$4, v: true };\n\t\t\t\ti = 0;\n\t\t\t\t/* while (true) { */ case 7:\n\t\t\t\t\t_r$2 = f.typ.NumField(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\t\t/* if (!(i < _r$2)) { break; } */ if(!(i < _r$2)) { $s = 8; continue; }\n\t\t\t\t\t_r$3 = f.typ.Field(i); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t\t\tsf = $clone(_r$3, reflect.StructField);\n\t\t\t\t\t/* */ if (!(sf.PkgPath === \"\")) { $s = 11; continue; }\n\t\t\t\t\t/* */ $s = 12; continue;\n\t\t\t\t\t/* if (!(sf.PkgPath === \"\")) { */ case 11:\n\t\t\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t\t\t/* continue; */ $s = 7; continue;\n\t\t\t\t\t/* } */ case 12:\n\t\t\t\t\ttag = new reflect.StructTag(sf.Tag).Get(\"json\");\n\t\t\t\t\t/* */ if (tag === \"-\") { $s = 13; continue; }\n\t\t\t\t\t/* */ $s = 14; continue;\n\t\t\t\t\t/* if (tag === \"-\") { */ case 13:\n\t\t\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t\t\t/* continue; */ $s = 7; continue;\n\t\t\t\t\t/* } */ case 14:\n\t\t\t\t\t_tuple = parseTag(tag); name = _tuple[0]; opts = _tuple[1];\n\t\t\t\t\tif (!isValidTag(name)) {\n\t\t\t\t\t\tname = \"\";\n\t\t\t\t\t}\n\t\t\t\t\tindex = $makeSlice(sliceType$4, (f.index.$length + 1 >> 0));\n\t\t\t\t\t$copySlice(index, f.index);\n\t\t\t\t\t(x = f.index.$length, ((x < 0 || x >= index.$length) ? $throwRuntimeError(\"index out of range\") : index.$array[index.$offset + x] = i));\n\t\t\t\t\tft = sf.Type;\n\t\t\t\t\t_r$4 = ft.Name(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t\t\tif (!(_r$4 === \"\")) { _v = false; $s = 17; continue s; }\n\t\t\t\t\t_r$5 = ft.Kind(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t\t\t_v = _r$5 === 22; case 17:\n\t\t\t\t\t/* */ if (_v) { $s = 15; continue; }\n\t\t\t\t\t/* */ $s = 16; continue;\n\t\t\t\t\t/* if (_v) { */ case 15:\n\t\t\t\t\t\t_r$6 = ft.Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t\t\t\tft = _r$6;\n\t\t\t\t\t/* } */ case 16:\n\t\t\t\t\tif (!(name === \"\") || !sf.Anonymous) { _v$1 = true; $s = 23; continue s; }\n\t\t\t\t\t_r$7 = ft.Kind(); /* */ $s = 24; case 24: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t\t\t_v$1 = !((_r$7 === 25)); case 23:\n\t\t\t\t\t/* */ if (_v$1) { $s = 21; continue; }\n\t\t\t\t\t/* */ $s = 22; continue;\n\t\t\t\t\t/* if (_v$1) { */ case 21:\n\t\t\t\t\t\ttagged = !(name === \"\");\n\t\t\t\t\t\tif (name === \"\") {\n\t\t\t\t\t\t\tname = sf.Name;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfields = $append(fields, fillField(new field.ptr(name, sliceType$1.nil, $throwNilPointerError, tagged, index, ft, new tagOptions(opts).Contains(\"omitempty\"), new tagOptions(opts).Contains(\"string\"))));\n\t\t\t\t\t\tif ((_entry$1 = count[f.typ.$key()], _entry$1 !== undefined ? _entry$1.v : 0) > 1) {\n\t\t\t\t\t\t\tfields = $append(fields, (x$1 = fields.$length - 1 >> 0, ((x$1 < 0 || x$1 >= fields.$length) ? $throwRuntimeError(\"index out of range\") : fields.$array[fields.$offset + x$1])));\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t\t\t/* continue; */ $s = 7; continue;\n\t\t\t\t\t/* } */ case 22:\n\t\t\t\t\t_key$5 = ft; (nextCount || $throwRuntimeError(\"assignment to entry in nil map\"))[_key$5.$key()] = { k: _key$5, v: (_entry$2 = nextCount[ft.$key()], _entry$2 !== undefined ? _entry$2.v : 0) + (1) >> 0 };\n\t\t\t\t\t/* */ if ((_entry$3 = nextCount[ft.$key()], _entry$3 !== undefined ? _entry$3.v : 0) === 1) { $s = 25; continue; }\n\t\t\t\t\t/* */ $s = 26; continue;\n\t\t\t\t\t/* if ((_entry$3 = nextCount[ft.$key()], _entry$3 !== undefined ? _entry$3.v : 0) === 1) { */ case 25:\n\t\t\t\t\t\t_r$8 = ft.Name(); /* */ $s = 27; case 27: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t\t\t\t_r$9 = fillField(new field.ptr(_r$8, sliceType$1.nil, $throwNilPointerError, false, index, ft, false, false)); /* */ $s = 28; case 28: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\t\t\t\tnext = $append(next, _r$9);\n\t\t\t\t\t/* } */ case 26:\n\t\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t/* } */ $s = 7; continue; case 8:\n\t\t\t\t_i++;\n\t\t\t/* } */ $s = 3; continue; case 4:\n\t\t/* } */ $s = 1; continue; case 2:\n\t\t$r = sort.Sort($subslice(new byName(fields.$array), fields.$offset, fields.$offset + fields.$length)); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tout = $subslice(fields, 0, 0);\n\t\t_tmp$4 = 0; _tmp$5 = 0; advance = _tmp$4; i$1 = _tmp$5;\n\t\t/* while (true) { */ case 30:\n\t\t\t/* if (!(i$1 < fields.$length)) { break; } */ if(!(i$1 < fields.$length)) { $s = 31; continue; }\n\t\t\tfi = $clone(((i$1 < 0 || i$1 >= fields.$length) ? $throwRuntimeError(\"index out of range\") : fields.$array[fields.$offset + i$1]), field);\n\t\t\tname$1 = fi.name;\n\t\t\tadvance = 1;\n\t\t\twhile (true) {\n\t\t\t\tif (!((i$1 + advance >> 0) < fields.$length)) { break; }\n\t\t\t\tfj = $clone((x$2 = i$1 + advance >> 0, ((x$2 < 0 || x$2 >= fields.$length) ? $throwRuntimeError(\"index out of range\") : fields.$array[fields.$offset + x$2])), field);\n\t\t\t\tif (!(fj.name === name$1)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tadvance = advance + (1) >> 0;\n\t\t\t}\n\t\t\tif (advance === 1) {\n\t\t\t\tout = $append(out, fi);\n\t\t\t\ti$1 = i$1 + (advance) >> 0;\n\t\t\t\t/* continue; */ $s = 30; continue;\n\t\t\t}\n\t\t\t_tuple$1 = dominantField($subslice(fields, i$1, (i$1 + advance >> 0))); dominant = $clone(_tuple$1[0], field); ok = _tuple$1[1];\n\t\t\tif (ok) {\n\t\t\t\tout = $append(out, dominant);\n\t\t\t}\n\t\t\ti$1 = i$1 + (advance) >> 0;\n\t\t/* } */ $s = 30; continue; case 31:\n\t\tfields = out;\n\t\t$r = sort.Sort($subslice(new byIndex(fields.$array), fields.$offset, fields.$offset + fields.$length)); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\treturn fields;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: typeFields }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._key$5 = _key$5; $f._map = _map; $f._map$1 = _map$1; $f._map$2 = _map$2; $f._map$3 = _map$3; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f._v$1 = _v$1; $f.advance = advance; $f.count = count; $f.current = current; $f.dominant = dominant; $f.f = f; $f.fi = fi; $f.fields = fields; $f.fj = fj; $f.ft = ft; $f.i = i; $f.i$1 = i$1; $f.index = index; $f.name = name; $f.name$1 = name$1; $f.next = next; $f.nextCount = nextCount; $f.ok = ok; $f.opts = opts; $f.out = out; $f.sf = sf; $f.t = t; $f.tag = tag; $f.tagged = tagged; $f.visited = visited; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdominantField = function(fields) {\n\t\tvar $ptr, _i, _ref, f, fields, i, length, tagged;\n\t\tlength = (0 >= fields.$length ? $throwRuntimeError(\"index out of range\") : fields.$array[fields.$offset + 0]).index.$length;\n\t\ttagged = -1;\n\t\t_ref = fields;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\tf = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]), field);\n\t\t\tif (f.index.$length > length) {\n\t\t\t\tfields = $subslice(fields, 0, i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (f.tag) {\n\t\t\t\tif (tagged >= 0) {\n\t\t\t\t\treturn [new field.ptr(\"\", sliceType$1.nil, $throwNilPointerError, false, sliceType$4.nil, $ifaceNil, false, false), false];\n\t\t\t\t}\n\t\t\t\ttagged = i;\n\t\t\t}\n\t\t\t_i++;\n\t\t}\n\t\tif (tagged >= 0) {\n\t\t\treturn [((tagged < 0 || tagged >= fields.$length) ? $throwRuntimeError(\"index out of range\") : fields.$array[fields.$offset + tagged]), true];\n\t\t}\n\t\tif (fields.$length > 1) {\n\t\t\treturn [new field.ptr(\"\", sliceType$1.nil, $throwNilPointerError, false, sliceType$4.nil, $ifaceNil, false, false), false];\n\t\t}\n\t\treturn [(0 >= fields.$length ? $throwRuntimeError(\"index out of range\") : fields.$array[fields.$offset + 0]), true];\n\t};\n\tcachedTypeFields = function(t) {\n\t\tvar $ptr, _entry, _key, _key$1, _map, _r$2, f, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _key$1 = $f._key$1; _map = $f._map; _r$2 = $f._r$2; f = $f.f; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tfieldCache.RWMutex.RLock();\n\t\tf = (_entry = fieldCache.m[t.$key()], _entry !== undefined ? _entry.v : sliceType.nil);\n\t\tfieldCache.RWMutex.RUnlock();\n\t\tif (!(f === sliceType.nil)) {\n\t\t\treturn f;\n\t\t}\n\t\t_r$2 = typeFields(t); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\tf = _r$2;\n\t\tif (f === sliceType.nil) {\n\t\t\tf = new sliceType([]);\n\t\t}\n\t\tfieldCache.RWMutex.Lock();\n\t\tif (fieldCache.m === false) {\n\t\t\tfieldCache.m = (_map = new $Map(), _map);\n\t\t}\n\t\t_key$1 = t; (fieldCache.m || $throwRuntimeError(\"assignment to entry in nil map\"))[_key$1.$key()] = { k: _key$1, v: f };\n\t\tfieldCache.RWMutex.Unlock();\n\t\treturn f;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: cachedTypeFields }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._key$1 = _key$1; $f._map = _map; $f._r$2 = _r$2; $f.f = f; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tfoldFunc = function(s) {\n\t\tvar $ptr, _i, _ref, b, nonLetter, s, special, upper;\n\t\tnonLetter = false;\n\t\tspecial = false;\n\t\t_ref = s;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\tb = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tif (b >= 128) {\n\t\t\t\treturn bytes.EqualFold;\n\t\t\t}\n\t\t\tupper = (b & 223) >>> 0;\n\t\t\tif (upper < 65 || upper > 90) {\n\t\t\t\tnonLetter = true;\n\t\t\t} else if ((upper === 75) || (upper === 83)) {\n\t\t\t\tspecial = true;\n\t\t\t}\n\t\t\t_i++;\n\t\t}\n\t\tif (special) {\n\t\t\treturn equalFoldRight;\n\t\t}\n\t\tif (nonLetter) {\n\t\t\treturn asciiEqualFold;\n\t\t}\n\t\treturn simpleLetterEqualFold;\n\t};\n\tequalFoldRight = function(s, t) {\n\t\tvar $ptr, _i, _ref, _ref$1, _tuple, s, sb, sbUpper, size, t, tb, tr;\n\t\t_ref = s;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\tsb = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tif (t.$length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ttb = (0 >= t.$length ? $throwRuntimeError(\"index out of range\") : t.$array[t.$offset + 0]);\n\t\t\tif (tb < 128) {\n\t\t\t\tif (!((sb === tb))) {\n\t\t\t\t\tsbUpper = (sb & 223) >>> 0;\n\t\t\t\t\tif (65 <= sbUpper && sbUpper <= 90) {\n\t\t\t\t\t\tif (!((sbUpper === ((tb & 223) >>> 0)))) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tt = $subslice(t, 1);\n\t\t\t\t_i++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t_tuple = utf8.DecodeRune(t); tr = _tuple[0]; size = _tuple[1];\n\t\t\t_ref$1 = sb;\n\t\t\tif (_ref$1 === 115 || _ref$1 === 83) {\n\t\t\t\tif (!((tr === 383))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (_ref$1 === 107 || _ref$1 === 75) {\n\t\t\t\tif (!((tr === 8490))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tt = $subslice(t, size);\n\t\t\t_i++;\n\t\t}\n\t\tif (t.$length > 0) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n\tasciiEqualFold = function(s, t) {\n\t\tvar $ptr, _i, _ref, i, s, sb, t, tb;\n\t\tif (!((s.$length === t.$length))) {\n\t\t\treturn false;\n\t\t}\n\t\t_ref = s;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\tsb = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\ttb = ((i < 0 || i >= t.$length) ? $throwRuntimeError(\"index out of range\") : t.$array[t.$offset + i]);\n\t\t\tif (sb === tb) {\n\t\t\t\t_i++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ((97 <= sb && sb <= 122) || (65 <= sb && sb <= 90)) {\n\t\t\t\tif (!((((sb & 223) >>> 0) === ((tb & 223) >>> 0)))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t_i++;\n\t\t}\n\t\treturn true;\n\t};\n\tsimpleLetterEqualFold = function(s, t) {\n\t\tvar $ptr, _i, _ref, b, i, s, t;\n\t\tif (!((s.$length === t.$length))) {\n\t\t\treturn false;\n\t\t}\n\t\t_ref = s;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\tb = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tif (!((((b & 223) >>> 0) === ((((i < 0 || i >= t.$length) ? $throwRuntimeError(\"index out of range\") : t.$array[t.$offset + i]) & 223) >>> 0)))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t_i++;\n\t\t}\n\t\treturn true;\n\t};\n\tcheckValid = function(data, scan) {\n\t\tvar $ptr, _i, _r$2, _r$3, _ref, c, data, scan, x, x$1, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; c = $f.c; data = $f.data; scan = $f.scan; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tscan.reset();\n\t\t_ref = data;\n\t\t_i = 0;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }\n\t\t\tc = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tscan.bytes = (x = scan.bytes, x$1 = new $Int64(0, 1), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));\n\t\t\t_r$2 = scan.step(scan, (c >> 0)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t/* */ if (_r$2 === 11) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (_r$2 === 11) { */ case 3:\n\t\t\t\treturn scan.err;\n\t\t\t/* } */ case 4:\n\t\t\t_i++;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\t_r$3 = scan.eof(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t/* */ if (_r$3 === 11) { $s = 6; continue; }\n\t\t/* */ $s = 7; continue;\n\t\t/* if (_r$3 === 11) { */ case 6:\n\t\t\treturn scan.err;\n\t\t/* } */ case 7:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: checkValid }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.c = c; $f.data = data; $f.scan = scan; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tnextValue = function(data, scan) {\n\t\tvar $ptr, _i, _r$2, _r$3, _ref, _ref$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, data, err, i, rest, scan, v, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; c = $f.c; data = $f.data; err = $f.err; i = $f.i; rest = $f.rest; scan = $f.scan; v = $f.v; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tvalue = sliceType$1.nil;\n\t\trest = sliceType$1.nil;\n\t\terr = $ifaceNil;\n\t\tscan.reset();\n\t\t_ref = data;\n\t\t_i = 0;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }\n\t\t\ti = _i;\n\t\t\tc = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\t_r$2 = scan.step(scan, (c >> 0)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\tv = _r$2;\n\t\t\tif (v >= 10) {\n\t\t\t\t_ref$1 = v;\n\t\t\t\tif (_ref$1 === 11) {\n\t\t\t\t\t_tmp = sliceType$1.nil; _tmp$1 = sliceType$1.nil; _tmp$2 = scan.err; value = _tmp; rest = _tmp$1; err = _tmp$2;\n\t\t\t\t\treturn [value, rest, err];\n\t\t\t\t} else if (_ref$1 === 10) {\n\t\t\t\t\t_tmp$3 = $subslice(data, 0, i); _tmp$4 = $subslice(data, i); _tmp$5 = $ifaceNil; value = _tmp$3; rest = _tmp$4; err = _tmp$5;\n\t\t\t\t\treturn [value, rest, err];\n\t\t\t\t}\n\t\t\t}\n\t\t\t_i++;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\t_r$3 = scan.eof(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t/* */ if (_r$3 === 11) { $s = 4; continue; }\n\t\t/* */ $s = 5; continue;\n\t\t/* if (_r$3 === 11) { */ case 4:\n\t\t\t_tmp$6 = sliceType$1.nil; _tmp$7 = sliceType$1.nil; _tmp$8 = scan.err; value = _tmp$6; rest = _tmp$7; err = _tmp$8;\n\t\t\treturn [value, rest, err];\n\t\t/* } */ case 5:\n\t\t_tmp$9 = data; _tmp$10 = sliceType$1.nil; _tmp$11 = $ifaceNil; value = _tmp$9; rest = _tmp$10; err = _tmp$11;\n\t\treturn [value, rest, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: nextValue }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f.c = c; $f.data = data; $f.err = err; $f.i = i; $f.rest = rest; $f.scan = scan; $f.v = v; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tSyntaxError.ptr.prototype.Error = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn e.msg;\n\t};\n\tSyntaxError.prototype.Error = function() { return this.$val.Error(); };\n\tscanner.ptr.prototype.reset = function() {\n\t\tvar $ptr, s;\n\t\ts = this;\n\t\ts.step = stateBeginValue;\n\t\ts.parseState = $subslice(s.parseState, 0, 0);\n\t\ts.err = $ifaceNil;\n\t\ts.redo = false;\n\t\ts.endTop = false;\n\t};\n\tscanner.prototype.reset = function() { return this.$val.reset(); };\n\tscanner.ptr.prototype.eof = function() {\n\t\tvar $ptr, _r$2, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ts = this;\n\t\tif (!($interfaceIsEqual(s.err, $ifaceNil))) {\n\t\t\treturn 11;\n\t\t}\n\t\tif (s.endTop) {\n\t\t\treturn 10;\n\t\t}\n\t\t_r$2 = s.step(s, 32); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_r$2;\n\t\tif (s.endTop) {\n\t\t\treturn 10;\n\t\t}\n\t\tif ($interfaceIsEqual(s.err, $ifaceNil)) {\n\t\t\ts.err = new SyntaxError.ptr(\"unexpected end of JSON input\", s.bytes);\n\t\t}\n\t\treturn 11;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: scanner.ptr.prototype.eof }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tscanner.prototype.eof = function() { return this.$val.eof(); };\n\tscanner.ptr.prototype.pushParseState = function(p) {\n\t\tvar $ptr, p, s;\n\t\ts = this;\n\t\ts.parseState = $append(s.parseState, p);\n\t};\n\tscanner.prototype.pushParseState = function(p) { return this.$val.pushParseState(p); };\n\tscanner.ptr.prototype.popParseState = function() {\n\t\tvar $ptr, n, s;\n\t\ts = this;\n\t\tn = s.parseState.$length - 1 >> 0;\n\t\ts.parseState = $subslice(s.parseState, 0, n);\n\t\ts.redo = false;\n\t\tif (n === 0) {\n\t\t\ts.step = stateEndTop;\n\t\t\ts.endTop = true;\n\t\t} else {\n\t\t\ts.step = stateEndValue;\n\t\t}\n\t};\n\tscanner.prototype.popParseState = function() { return this.$val.popParseState(); };\n\tisSpace = function(c) {\n\t\tvar $ptr, c;\n\t\treturn (c === 32) || (c === 9) || (c === 13) || (c === 10);\n\t};\n\tstateBeginValueOrEmpty = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (c <= 32 && isSpace((c >> 0))) {\n\t\t\treturn 9;\n\t\t}\n\t\tif (c === 93) {\n\t\t\treturn stateEndValue(s, c);\n\t\t}\n\t\treturn stateBeginValue(s, c);\n\t};\n\tstateBeginValue = function(s, c) {\n\t\tvar $ptr, _ref, c, s;\n\t\tif (c <= 32 && isSpace((c >> 0))) {\n\t\t\treturn 9;\n\t\t}\n\t\t_ref = c;\n\t\tif (_ref === 123) {\n\t\t\ts.step = stateBeginStringOrEmpty;\n\t\t\ts.pushParseState(0);\n\t\t\treturn 2;\n\t\t} else if (_ref === 91) {\n\t\t\ts.step = stateBeginValueOrEmpty;\n\t\t\ts.pushParseState(2);\n\t\t\treturn 6;\n\t\t} else if (_ref === 34) {\n\t\t\ts.step = stateInString;\n\t\t\treturn 1;\n\t\t} else if (_ref === 45) {\n\t\t\ts.step = stateNeg;\n\t\t\treturn 1;\n\t\t} else if (_ref === 48) {\n\t\t\ts.step = state0;\n\t\t\treturn 1;\n\t\t} else if (_ref === 116) {\n\t\t\ts.step = stateT;\n\t\t\treturn 1;\n\t\t} else if (_ref === 102) {\n\t\t\ts.step = stateF;\n\t\t\treturn 1;\n\t\t} else if (_ref === 110) {\n\t\t\ts.step = stateN;\n\t\t\treturn 1;\n\t\t}\n\t\tif (49 <= c && c <= 57) {\n\t\t\ts.step = state1;\n\t\t\treturn 1;\n\t\t}\n\t\treturn s.error(c, \"looking for beginning of value\");\n\t};\n\tstateBeginStringOrEmpty = function(s, c) {\n\t\tvar $ptr, c, n, s, x, x$1;\n\t\tif (c <= 32 && isSpace((c >> 0))) {\n\t\t\treturn 9;\n\t\t}\n\t\tif (c === 125) {\n\t\t\tn = s.parseState.$length;\n\t\t\t(x = s.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + x$1] = 1));\n\t\t\treturn stateEndValue(s, c);\n\t\t}\n\t\treturn stateBeginString(s, c);\n\t};\n\tstateBeginString = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (c <= 32 && isSpace((c >> 0))) {\n\t\t\treturn 9;\n\t\t}\n\t\tif (c === 34) {\n\t\t\ts.step = stateInString;\n\t\t\treturn 1;\n\t\t}\n\t\treturn s.error(c, \"looking for beginning of object key string\");\n\t};\n\tstateEndValue = function(s, c) {\n\t\tvar $ptr, _ref, c, n, ps, s, x, x$1, x$2, x$3, x$4, x$5;\n\t\tn = s.parseState.$length;\n\t\tif (n === 0) {\n\t\t\ts.step = stateEndTop;\n\t\t\ts.endTop = true;\n\t\t\treturn stateEndTop(s, c);\n\t\t}\n\t\tif (c <= 32 && isSpace((c >> 0))) {\n\t\t\ts.step = stateEndValue;\n\t\t\treturn 9;\n\t\t}\n\t\tps = (x = s.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + x$1]));\n\t\t_ref = ps;\n\t\tif (_ref === 0) {\n\t\t\tif (c === 58) {\n\t\t\t\t(x$2 = s.parseState, x$3 = n - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError(\"index out of range\") : x$2.$array[x$2.$offset + x$3] = 1));\n\t\t\t\ts.step = stateBeginValue;\n\t\t\t\treturn 3;\n\t\t\t}\n\t\t\treturn s.error(c, \"after object key\");\n\t\t} else if (_ref === 1) {\n\t\t\tif (c === 44) {\n\t\t\t\t(x$4 = s.parseState, x$5 = n - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError(\"index out of range\") : x$4.$array[x$4.$offset + x$5] = 0));\n\t\t\t\ts.step = stateBeginString;\n\t\t\t\treturn 4;\n\t\t\t}\n\t\t\tif (c === 125) {\n\t\t\t\ts.popParseState();\n\t\t\t\treturn 5;\n\t\t\t}\n\t\t\treturn s.error(c, \"after object key:value pair\");\n\t\t} else if (_ref === 2) {\n\t\t\tif (c === 44) {\n\t\t\t\ts.step = stateBeginValue;\n\t\t\t\treturn 7;\n\t\t\t}\n\t\t\tif (c === 93) {\n\t\t\t\ts.popParseState();\n\t\t\t\treturn 8;\n\t\t\t}\n\t\t\treturn s.error(c, \"after array element\");\n\t\t}\n\t\treturn s.error(c, \"\");\n\t};\n\tstateEndTop = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (!((c === 32)) && !((c === 9)) && !((c === 13)) && !((c === 10))) {\n\t\t\ts.error(c, \"after top-level value\");\n\t\t}\n\t\treturn 10;\n\t};\n\tstateInString = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (c === 34) {\n\t\t\ts.step = stateEndValue;\n\t\t\treturn 0;\n\t\t}\n\t\tif (c === 92) {\n\t\t\ts.step = stateInStringEsc;\n\t\t\treturn 0;\n\t\t}\n\t\tif (c < 32) {\n\t\t\treturn s.error(c, \"in string literal\");\n\t\t}\n\t\treturn 0;\n\t};\n\tstateInStringEsc = function(s, c) {\n\t\tvar $ptr, _ref, c, s;\n\t\t_ref = c;\n\t\tif (_ref === 98 || _ref === 102 || _ref === 110 || _ref === 114 || _ref === 116 || _ref === 92 || _ref === 47 || _ref === 34) {\n\t\t\ts.step = stateInString;\n\t\t\treturn 0;\n\t\t}\n\t\tif (c === 117) {\n\t\t\ts.step = stateInStringEscU;\n\t\t\treturn 0;\n\t\t}\n\t\treturn s.error(c, \"in string escape code\");\n\t};\n\tstateInStringEscU = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {\n\t\t\ts.step = stateInStringEscU1;\n\t\t\treturn 0;\n\t\t}\n\t\treturn s.error(c, \"in \\\\u hexadecimal character escape\");\n\t};\n\tstateInStringEscU1 = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {\n\t\t\ts.step = stateInStringEscU12;\n\t\t\treturn 0;\n\t\t}\n\t\treturn s.error(c, \"in \\\\u hexadecimal character escape\");\n\t};\n\tstateInStringEscU12 = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {\n\t\t\ts.step = stateInStringEscU123;\n\t\t\treturn 0;\n\t\t}\n\t\treturn s.error(c, \"in \\\\u hexadecimal character escape\");\n\t};\n\tstateInStringEscU123 = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {\n\t\t\ts.step = stateInString;\n\t\t\treturn 0;\n\t\t}\n\t\treturn s.error(c, \"in \\\\u hexadecimal character escape\");\n\t};\n\tstateNeg = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (c === 48) {\n\t\t\ts.step = state0;\n\t\t\treturn 0;\n\t\t}\n\t\tif (49 <= c && c <= 57) {\n\t\t\ts.step = state1;\n\t\t\treturn 0;\n\t\t}\n\t\treturn s.error(c, \"in numeric literal\");\n\t};\n\tstate1 = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (48 <= c && c <= 57) {\n\t\t\ts.step = state1;\n\t\t\treturn 0;\n\t\t}\n\t\treturn state0(s, c);\n\t};\n\tstate0 = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (c === 46) {\n\t\t\ts.step = stateDot;\n\t\t\treturn 0;\n\t\t}\n\t\tif ((c === 101) || (c === 69)) {\n\t\t\ts.step = stateE;\n\t\t\treturn 0;\n\t\t}\n\t\treturn stateEndValue(s, c);\n\t};\n\tstateDot = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (48 <= c && c <= 57) {\n\t\t\ts.step = stateDot0;\n\t\t\treturn 0;\n\t\t}\n\t\treturn s.error(c, \"after decimal point in numeric literal\");\n\t};\n\tstateDot0 = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (48 <= c && c <= 57) {\n\t\t\ts.step = stateDot0;\n\t\t\treturn 0;\n\t\t}\n\t\tif ((c === 101) || (c === 69)) {\n\t\t\ts.step = stateE;\n\t\t\treturn 0;\n\t\t}\n\t\treturn stateEndValue(s, c);\n\t};\n\tstateE = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (c === 43) {\n\t\t\ts.step = stateESign;\n\t\t\treturn 0;\n\t\t}\n\t\tif (c === 45) {\n\t\t\ts.step = stateESign;\n\t\t\treturn 0;\n\t\t}\n\t\treturn stateESign(s, c);\n\t};\n\tstateESign = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (48 <= c && c <= 57) {\n\t\t\ts.step = stateE0;\n\t\t\treturn 0;\n\t\t}\n\t\treturn s.error(c, \"in exponent of numeric literal\");\n\t};\n\tstateE0 = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (48 <= c && c <= 57) {\n\t\t\ts.step = stateE0;\n\t\t\treturn 0;\n\t\t}\n\t\treturn stateEndValue(s, c);\n\t};\n\tstateT = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (c === 114) {\n\t\t\ts.step = stateTr;\n\t\t\treturn 0;\n\t\t}\n\t\treturn s.error(c, \"in literal true (expecting 'r')\");\n\t};\n\tstateTr = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (c === 117) {\n\t\t\ts.step = stateTru;\n\t\t\treturn 0;\n\t\t}\n\t\treturn s.error(c, \"in literal true (expecting 'u')\");\n\t};\n\tstateTru = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (c === 101) {\n\t\t\ts.step = stateEndValue;\n\t\t\treturn 0;\n\t\t}\n\t\treturn s.error(c, \"in literal true (expecting 'e')\");\n\t};\n\tstateF = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (c === 97) {\n\t\t\ts.step = stateFa;\n\t\t\treturn 0;\n\t\t}\n\t\treturn s.error(c, \"in literal false (expecting 'a')\");\n\t};\n\tstateFa = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (c === 108) {\n\t\t\ts.step = stateFal;\n\t\t\treturn 0;\n\t\t}\n\t\treturn s.error(c, \"in literal false (expecting 'l')\");\n\t};\n\tstateFal = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (c === 115) {\n\t\t\ts.step = stateFals;\n\t\t\treturn 0;\n\t\t}\n\t\treturn s.error(c, \"in literal false (expecting 's')\");\n\t};\n\tstateFals = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (c === 101) {\n\t\t\ts.step = stateEndValue;\n\t\t\treturn 0;\n\t\t}\n\t\treturn s.error(c, \"in literal false (expecting 'e')\");\n\t};\n\tstateN = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (c === 117) {\n\t\t\ts.step = stateNu;\n\t\t\treturn 0;\n\t\t}\n\t\treturn s.error(c, \"in literal null (expecting 'u')\");\n\t};\n\tstateNu = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (c === 108) {\n\t\t\ts.step = stateNul;\n\t\t\treturn 0;\n\t\t}\n\t\treturn s.error(c, \"in literal null (expecting 'l')\");\n\t};\n\tstateNul = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\tif (c === 108) {\n\t\t\ts.step = stateEndValue;\n\t\t\treturn 0;\n\t\t}\n\t\treturn s.error(c, \"in literal null (expecting 'l')\");\n\t};\n\tstateError = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\treturn 11;\n\t};\n\tscanner.ptr.prototype.error = function(c, context) {\n\t\tvar $ptr, c, context, s;\n\t\ts = this;\n\t\ts.step = stateError;\n\t\ts.err = new SyntaxError.ptr(\"invalid character \" + quoteChar(c) + \" \" + context, s.bytes);\n\t\treturn 11;\n\t};\n\tscanner.prototype.error = function(c, context) { return this.$val.error(c, context); };\n\tquoteChar = function(c) {\n\t\tvar $ptr, c, s;\n\t\tif (c === 39) {\n\t\t\treturn \"'\\\\''\";\n\t\t}\n\t\tif (c === 34) {\n\t\t\treturn \"'\\\"'\";\n\t\t}\n\t\ts = strconv.Quote($encodeRune(c));\n\t\treturn \"'\" + s.substring(1, (s.length - 1 >> 0)) + \"'\";\n\t};\n\tscanner.ptr.prototype.undo = function(scanCode) {\n\t\tvar $ptr, s, scanCode;\n\t\ts = this;\n\t\tif (s.redo) {\n\t\t\t$panic(new $String(\"json: invalid use of scanner\"));\n\t\t}\n\t\ts.redoCode = scanCode;\n\t\ts.redoState = s.step;\n\t\ts.step = stateRedo;\n\t\ts.redo = true;\n\t};\n\tscanner.prototype.undo = function(scanCode) { return this.$val.undo(scanCode); };\n\tstateRedo = function(s, c) {\n\t\tvar $ptr, c, s;\n\t\ts.redo = false;\n\t\ts.step = s.redoState;\n\t\treturn s.redoCode;\n\t};\n\tparseTag = function(tag) {\n\t\tvar $ptr, idx, tag;\n\t\tidx = strings.Index(tag, \",\");\n\t\tif (!((idx === -1))) {\n\t\t\treturn [tag.substring(0, idx), tag.substring((idx + 1 >> 0))];\n\t\t}\n\t\treturn [tag, \"\"];\n\t};\n\ttagOptions.prototype.Contains = function(optionName) {\n\t\tvar $ptr, _tmp, _tmp$1, i, next, o, optionName, s;\n\t\to = this.$val;\n\t\tif (o.length === 0) {\n\t\t\treturn false;\n\t\t}\n\t\ts = o;\n\t\twhile (true) {\n\t\t\tif (!(!(s === \"\"))) { break; }\n\t\t\tnext = \"\";\n\t\t\ti = strings.Index(s, \",\");\n\t\t\tif (i >= 0) {\n\t\t\t\t_tmp = s.substring(0, i); _tmp$1 = s.substring((i + 1 >> 0)); s = _tmp; next = _tmp$1;\n\t\t\t}\n\t\t\tif (s === optionName) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\ts = next;\n\t\t}\n\t\treturn false;\n\t};\n\t$ptrType(tagOptions).prototype.Contains = function(optionName) { return new tagOptions(this.$get()).Contains(optionName); };\n\tptrType$6.methods = [{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$8.methods = [{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tNumber.methods = [{prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Float64\", name: \"Float64\", pkg: \"\", typ: $funcType([], [$Float64, $error], false)}, {prop: \"Int64\", name: \"Int64\", pkg: \"\", typ: $funcType([], [$Int64, $error], false)}];\n\tptrType$9.methods = [{prop: \"unmarshal\", name: \"unmarshal\", pkg: \"encoding/json\", typ: $funcType([$emptyInterface], [$error], false)}, {prop: \"init\", name: \"init\", pkg: \"encoding/json\", typ: $funcType([sliceType$1], [ptrType$9], false)}, {prop: \"error\", name: \"error\", pkg: \"encoding/json\", typ: $funcType([$error], [], false)}, {prop: \"saveError\", name: \"saveError\", pkg: \"encoding/json\", typ: $funcType([$error], [], false)}, {prop: \"next\", name: \"next\", pkg: \"encoding/json\", typ: $funcType([], [sliceType$1], false)}, {prop: \"scanWhile\", name: \"scanWhile\", pkg: \"encoding/json\", typ: $funcType([$Int], [$Int], false)}, {prop: \"value\", name: \"value\", pkg: \"encoding/json\", typ: $funcType([reflect.Value], [], false)}, {prop: \"valueQuoted\", name: \"valueQuoted\", pkg: \"encoding/json\", typ: $funcType([], [$emptyInterface], false)}, {prop: \"indirect\", name: \"indirect\", pkg: \"encoding/json\", typ: $funcType([reflect.Value, $Bool], [Unmarshaler, encoding.TextUnmarshaler, reflect.Value], false)}, {prop: \"array\", name: \"array\", pkg: \"encoding/json\", typ: $funcType([reflect.Value], [], false)}, {prop: \"object\", name: \"object\", pkg: \"encoding/json\", typ: $funcType([reflect.Value], [], false)}, {prop: \"literal\", name: \"literal\", pkg: \"encoding/json\", typ: $funcType([reflect.Value], [], false)}, {prop: \"convertNumber\", name: \"convertNumber\", pkg: \"encoding/json\", typ: $funcType([$String], [$emptyInterface, $error], false)}, {prop: \"literalStore\", name: \"literalStore\", pkg: \"encoding/json\", typ: $funcType([sliceType$1, reflect.Value, $Bool], [], false)}, {prop: \"valueInterface\", name: \"valueInterface\", pkg: \"encoding/json\", typ: $funcType([], [$emptyInterface], false)}, {prop: \"arrayInterface\", name: \"arrayInterface\", pkg: \"encoding/json\", typ: $funcType([], [sliceType$2], false)}, {prop: \"objectInterface\", name: \"objectInterface\", pkg: \"encoding/json\", typ: $funcType([], [mapType$2], false)}, {prop: \"literalInterface\", name: \"literalInterface\", pkg: \"encoding/json\", typ: $funcType([], [$emptyInterface], false)}];\n\tbyName.methods = [{prop: \"Len\", name: \"Len\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Swap\", name: \"Swap\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"Less\", name: \"Less\", pkg: \"\", typ: $funcType([$Int, $Int], [$Bool], false)}];\n\tbyIndex.methods = [{prop: \"Len\", name: \"Len\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Swap\", name: \"Swap\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"Less\", name: \"Less\", pkg: \"\", typ: $funcType([$Int, $Int], [$Bool], false)}];\n\tptrType$20.methods = [{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$21.methods = [{prop: \"reset\", name: \"reset\", pkg: \"encoding/json\", typ: $funcType([], [], false)}, {prop: \"eof\", name: \"eof\", pkg: \"encoding/json\", typ: $funcType([], [$Int], false)}, {prop: \"pushParseState\", name: \"pushParseState\", pkg: \"encoding/json\", typ: $funcType([$Int], [], false)}, {prop: \"popParseState\", name: \"popParseState\", pkg: \"encoding/json\", typ: $funcType([], [], false)}, {prop: \"error\", name: \"error\", pkg: \"encoding/json\", typ: $funcType([$Int, $String], [$Int], false)}, {prop: \"undo\", name: \"undo\", pkg: \"encoding/json\", typ: $funcType([$Int], [], false)}];\n\ttagOptions.methods = [{prop: \"Contains\", name: \"Contains\", pkg: \"\", typ: $funcType([$String], [$Bool], false)}];\n\tUnmarshaler.init([{prop: \"UnmarshalJSON\", name: \"UnmarshalJSON\", pkg: \"\", typ: $funcType([sliceType$1], [$error], false)}]);\n\tUnmarshalTypeError.init([{prop: \"Value\", name: \"Value\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: reflect.Type, tag: \"\"}]);\n\tInvalidUnmarshalError.init([{prop: \"Type\", name: \"Type\", pkg: \"\", typ: reflect.Type, tag: \"\"}]);\n\tdecodeState.init([{prop: \"data\", name: \"data\", pkg: \"encoding/json\", typ: sliceType$1, tag: \"\"}, {prop: \"off\", name: \"off\", pkg: \"encoding/json\", typ: $Int, tag: \"\"}, {prop: \"scan\", name: \"scan\", pkg: \"encoding/json\", typ: scanner, tag: \"\"}, {prop: \"nextscan\", name: \"nextscan\", pkg: \"encoding/json\", typ: scanner, tag: \"\"}, {prop: \"savedError\", name: \"savedError\", pkg: \"encoding/json\", typ: $error, tag: \"\"}, {prop: \"useNumber\", name: \"useNumber\", pkg: \"encoding/json\", typ: $Bool, tag: \"\"}]);\n\tunquotedValue.init([]);\n\tMarshaler.init([{prop: \"MarshalJSON\", name: \"MarshalJSON\", pkg: \"\", typ: $funcType([], [sliceType$1, $error], false)}]);\n\tfield.init([{prop: \"name\", name: \"name\", pkg: \"encoding/json\", typ: $String, tag: \"\"}, {prop: \"nameBytes\", name: \"nameBytes\", pkg: \"encoding/json\", typ: sliceType$1, tag: \"\"}, {prop: \"equalFold\", name: \"equalFold\", pkg: \"encoding/json\", typ: funcType, tag: \"\"}, {prop: \"tag\", name: \"tag\", pkg: \"encoding/json\", typ: $Bool, tag: \"\"}, {prop: \"index\", name: \"index\", pkg: \"encoding/json\", typ: sliceType$4, tag: \"\"}, {prop: \"typ\", name: \"typ\", pkg: \"encoding/json\", typ: reflect.Type, tag: \"\"}, {prop: \"omitEmpty\", name: \"omitEmpty\", pkg: \"encoding/json\", typ: $Bool, tag: \"\"}, {prop: \"quoted\", name: \"quoted\", pkg: \"encoding/json\", typ: $Bool, tag: \"\"}]);\n\tbyName.init(field);\n\tbyIndex.init(field);\n\tSyntaxError.init([{prop: \"msg\", name: \"msg\", pkg: \"encoding/json\", typ: $String, tag: \"\"}, {prop: \"Offset\", name: \"Offset\", pkg: \"\", typ: $Int64, tag: \"\"}]);\n\tscanner.init([{prop: \"step\", name: \"step\", pkg: \"encoding/json\", typ: funcType$1, tag: \"\"}, {prop: \"endTop\", name: \"endTop\", pkg: \"encoding/json\", typ: $Bool, tag: \"\"}, {prop: \"parseState\", name: \"parseState\", pkg: \"encoding/json\", typ: sliceType$4, tag: \"\"}, {prop: \"err\", name: \"err\", pkg: \"encoding/json\", typ: $error, tag: \"\"}, {prop: \"redo\", name: \"redo\", pkg: \"encoding/json\", typ: $Bool, tag: \"\"}, {prop: \"redoCode\", name: \"redoCode\", pkg: \"encoding/json\", typ: $Int, tag: \"\"}, {prop: \"redoState\", name: \"redoState\", pkg: \"encoding/json\", typ: funcType$1, tag: \"\"}, {prop: \"bytes\", name: \"bytes\", pkg: \"encoding/json\", typ: $Int64, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = encoding.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = base64.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = errors.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = fmt.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = nosync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = math.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = reflect.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = runtime.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = sort.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = strconv.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = strings.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = unicode.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = utf16.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = utf8.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tfieldCache = new structType$1.ptr();\n\t\terrPhase = errors.New(\"JSON decoder out of sync - data changing underfoot?\");\n\t\tnullLiteral = new sliceType$1($stringToBytes(\"null\"));\n\t\tnumberType = reflect.TypeOf(new Number(\"\"));\n\t\tbyteSliceType = reflect.TypeOf(sliceType$1.nil);\n\t\t_r = reflect.TypeOf($newDataPointer($ifaceNil, ptrType)).Elem(); /* */ $s = 17; case 17: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tmarshalerType = _r;\n\t\t_r$1 = reflect.TypeOf($newDataPointer($ifaceNil, ptrType$1)).Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\ttextMarshalerType = _r$1;\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"log\"] = (function() {\n\tvar $pkg = {}, $init, fmt, nosync, io, os, runtime, time, Logger, sliceType, arrayType, ptrType, sliceType$1, ptrType$1, std, New, itoa, Printf;\n\tfmt = $packages[\"fmt\"];\n\tnosync = $packages[\"github.com/gopherjs/gopherjs/nosync\"];\n\tio = $packages[\"io\"];\n\tos = $packages[\"os\"];\n\truntime = $packages[\"runtime\"];\n\ttime = $packages[\"time\"];\n\tLogger = $pkg.Logger = $newType(0, $kindStruct, \"log.Logger\", \"Logger\", \"log\", function(mu_, prefix_, flag_, out_, buf_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.mu = new nosync.Mutex.ptr();\n\t\t\tthis.prefix = \"\";\n\t\t\tthis.flag = 0;\n\t\t\tthis.out = $ifaceNil;\n\t\t\tthis.buf = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.mu = mu_;\n\t\tthis.prefix = prefix_;\n\t\tthis.flag = flag_;\n\t\tthis.out = out_;\n\t\tthis.buf = buf_;\n\t});\n\tsliceType = $sliceType($Uint8);\n\tarrayType = $arrayType($Uint8, 32);\n\tptrType = $ptrType(sliceType);\n\tsliceType$1 = $sliceType($emptyInterface);\n\tptrType$1 = $ptrType(Logger);\n\tNew = function(out, prefix, flag) {\n\t\tvar $ptr, flag, out, prefix;\n\t\treturn new Logger.ptr(new nosync.Mutex.ptr(), prefix, flag, out, sliceType.nil);\n\t};\n\t$pkg.New = New;\n\titoa = function(buf, i, wid) {\n\t\tvar $ptr, _q, _r, b, bp, buf, i, u, wid;\n\t\tu = (i >>> 0);\n\t\tif ((u === 0) && wid <= 1) {\n\t\t\tbuf.$set($append(buf.$get(), 48));\n\t\t\treturn;\n\t\t}\n\t\tb = $clone(arrayType.zero(), arrayType);\n\t\tbp = 32;\n\t\twhile (true) {\n\t\t\tif (!(u > 0 || wid > 0)) { break; }\n\t\t\tbp = bp - (1) >> 0;\n\t\t\twid = wid - (1) >> 0;\n\t\t\t((bp < 0 || bp >= b.length) ? $throwRuntimeError(\"index out of range\") : b[bp] = ((_r = u % 10, _r === _r ? _r : $throwRuntimeError(\"integer divide by zero\")) << 24 >>> 24) + 48 << 24 >>> 24);\n\t\t\tu = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t}\n\t\tbuf.$set($appendSlice(buf.$get(), $subslice(new sliceType(b), bp)));\n\t};\n\tLogger.ptr.prototype.formatHeader = function(buf, t, file, line) {\n\t\tvar $ptr, _q, _r, _r$1, _tuple, _tuple$1, buf, day, file, hour, i, l, line, min, month, sec, short$1, t, year, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buf = $f.buf; day = $f.day; file = $f.file; hour = $f.hour; i = $f.i; l = $f.l; line = $f.line; min = $f.min; month = $f.month; sec = $f.sec; short$1 = $f.short$1; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tl = this;\n\t\tt = $clone(t, time.Time);\n\t\tbuf.$set($appendSlice(buf.$get(), new sliceType($stringToBytes(l.prefix))));\n\t\t/* */ if (!(((l.flag & 7) === 0))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!(((l.flag & 7) === 0))) { */ case 1:\n\t\t\t/* */ if (!(((l.flag & 1) === 0))) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (!(((l.flag & 1) === 0))) { */ case 3:\n\t\t\t\t_r = t.Date(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t\t_tuple = _r; year = _tuple[0]; month = _tuple[1]; day = _tuple[2];\n\t\t\t\titoa(buf, year, 4);\n\t\t\t\tbuf.$set($append(buf.$get(), 47));\n\t\t\t\titoa(buf, (month >> 0), 2);\n\t\t\t\tbuf.$set($append(buf.$get(), 47));\n\t\t\t\titoa(buf, day, 2);\n\t\t\t\tbuf.$set($append(buf.$get(), 32));\n\t\t\t/* } */ case 4:\n\t\t\t/* */ if (!(((l.flag & 6) === 0))) { $s = 6; continue; }\n\t\t\t/* */ $s = 7; continue;\n\t\t\t/* if (!(((l.flag & 6) === 0))) { */ case 6:\n\t\t\t\t_r$1 = t.Clock(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$1 = _r$1; hour = _tuple$1[0]; min = _tuple$1[1]; sec = _tuple$1[2];\n\t\t\t\titoa(buf, hour, 2);\n\t\t\t\tbuf.$set($append(buf.$get(), 58));\n\t\t\t\titoa(buf, min, 2);\n\t\t\t\tbuf.$set($append(buf.$get(), 58));\n\t\t\t\titoa(buf, sec, 2);\n\t\t\t\tif (!(((l.flag & 4) === 0))) {\n\t\t\t\t\tbuf.$set($append(buf.$get(), 46));\n\t\t\t\t\titoa(buf, (_q = t.Nanosecond() / 1000, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\")), 6);\n\t\t\t\t}\n\t\t\t\tbuf.$set($append(buf.$get(), 32));\n\t\t\t/* } */ case 7:\n\t\t/* } */ case 2:\n\t\tif (!(((l.flag & 24) === 0))) {\n\t\t\tif (!(((l.flag & 16) === 0))) {\n\t\t\t\tshort$1 = file;\n\t\t\t\ti = file.length - 1 >> 0;\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!(i > 0)) { break; }\n\t\t\t\t\tif (file.charCodeAt(i) === 47) {\n\t\t\t\t\t\tshort$1 = file.substring((i + 1 >> 0));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\ti = i - (1) >> 0;\n\t\t\t\t}\n\t\t\t\tfile = short$1;\n\t\t\t}\n\t\t\tbuf.$set($appendSlice(buf.$get(), new sliceType($stringToBytes(file))));\n\t\t\tbuf.$set($append(buf.$get(), 58));\n\t\t\titoa(buf, line, -1);\n\t\t\tbuf.$set($appendSlice(buf.$get(), new sliceType($stringToBytes(\": \"))));\n\t\t}\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.formatHeader }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.day = day; $f.file = file; $f.hour = hour; $f.i = i; $f.l = l; $f.line = line; $f.min = min; $f.month = month; $f.sec = sec; $f.short$1 = short$1; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tLogger.prototype.formatHeader = function(buf, t, file, line) { return this.$val.formatHeader(buf, t, file, line); };\n\tLogger.ptr.prototype.Output = function(calldepth, s) {\n\t\tvar $ptr, _r, _tuple, _tuple$1, calldepth, err, file, l, line, now, ok, s, $s, $deferred, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; calldepth = $f.calldepth; err = $f.err; file = $f.file; l = $f.l; line = $f.line; now = $f.now; ok = $f.ok; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\tl = this;\n\t\tnow = $clone(time.Now(), time.Time);\n\t\tfile = \"\";\n\t\tline = 0;\n\t\tl.mu.Lock();\n\t\t$deferred.push([$methodVal(l.mu, \"Unlock\"), []]);\n\t\tif (!(((l.flag & 24) === 0))) {\n\t\t\tl.mu.Unlock();\n\t\t\tok = false;\n\t\t\t_tuple = runtime.Caller(calldepth); file = _tuple[1]; line = _tuple[2]; ok = _tuple[3];\n\t\t\tif (!ok) {\n\t\t\t\tfile = \"???\";\n\t\t\t\tline = 0;\n\t\t\t}\n\t\t\tl.mu.Lock();\n\t\t}\n\t\tl.buf = $subslice(l.buf, 0, 0);\n\t\t$r = l.formatHeader((l.$ptr_buf || (l.$ptr_buf = new ptrType(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, l))), now, file, line); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tl.buf = $appendSlice(l.buf, new sliceType($stringToBytes(s)));\n\t\tif (s.length > 0 && !((s.charCodeAt((s.length - 1 >> 0)) === 10))) {\n\t\t\tl.buf = $append(l.buf, 10);\n\t\t}\n\t\t_r = l.out.Write(l.buf); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r; err = _tuple$1[1];\n\t\treturn err;\n\t\t/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Output }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.calldepth = calldepth; $f.err = err; $f.file = file; $f.l = l; $f.line = line; $f.now = now; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }\n\t};\n\tLogger.prototype.Output = function(calldepth, s) { return this.$val.Output(calldepth, s); };\n\tLogger.ptr.prototype.Printf = function(format, v) {\n\t\tvar $ptr, _arg, _r, _r$1, format, l, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tl = this;\n\t\t_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_arg = _r;\n\t\t_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_r$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Printf }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tLogger.prototype.Printf = function(format, v) { return this.$val.Printf(format, v); };\n\tLogger.ptr.prototype.Print = function(v) {\n\t\tvar $ptr, _arg, _r, _r$1, l, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tl = this;\n\t\t_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_arg = _r;\n\t\t_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_r$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Print }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tLogger.prototype.Print = function(v) { return this.$val.Print(v); };\n\tLogger.ptr.prototype.Println = function(v) {\n\t\tvar $ptr, _arg, _r, _r$1, l, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tl = this;\n\t\t_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_arg = _r;\n\t\t_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_r$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Println }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tLogger.prototype.Println = function(v) { return this.$val.Println(v); };\n\tLogger.ptr.prototype.Fatal = function(v) {\n\t\tvar $ptr, _arg, _r, _r$1, l, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tl = this;\n\t\t_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_arg = _r;\n\t\t_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_r$1;\n\t\tos.Exit(1);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatal }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tLogger.prototype.Fatal = function(v) { return this.$val.Fatal(v); };\n\tLogger.ptr.prototype.Fatalf = function(format, v) {\n\t\tvar $ptr, _arg, _r, _r$1, format, l, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tl = this;\n\t\t_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_arg = _r;\n\t\t_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_r$1;\n\t\tos.Exit(1);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatalf }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tLogger.prototype.Fatalf = function(format, v) { return this.$val.Fatalf(format, v); };\n\tLogger.ptr.prototype.Fatalln = function(v) {\n\t\tvar $ptr, _arg, _r, _r$1, l, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tl = this;\n\t\t_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_arg = _r;\n\t\t_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_r$1;\n\t\tos.Exit(1);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatalln }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tLogger.prototype.Fatalln = function(v) { return this.$val.Fatalln(v); };\n\tLogger.ptr.prototype.Panic = function(v) {\n\t\tvar $ptr, _r, _r$1, l, s, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tl = this;\n\t\t_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\ts = _r;\n\t\t_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_r$1;\n\t\t$panic(new $String(s));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panic }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tLogger.prototype.Panic = function(v) { return this.$val.Panic(v); };\n\tLogger.ptr.prototype.Panicf = function(format, v) {\n\t\tvar $ptr, _r, _r$1, format, l, s, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tl = this;\n\t\t_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\ts = _r;\n\t\t_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_r$1;\n\t\t$panic(new $String(s));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panicf }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tLogger.prototype.Panicf = function(format, v) { return this.$val.Panicf(format, v); };\n\tLogger.ptr.prototype.Panicln = function(v) {\n\t\tvar $ptr, _r, _r$1, l, s, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tl = this;\n\t\t_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\ts = _r;\n\t\t_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_r$1;\n\t\t$panic(new $String(s));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panicln }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tLogger.prototype.Panicln = function(v) { return this.$val.Panicln(v); };\n\tLogger.ptr.prototype.Flags = function() {\n\t\tvar $ptr, l, $deferred;\n\t\t/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\tl = this;\n\t\tl.mu.Lock();\n\t\t$deferred.push([$methodVal(l.mu, \"Unlock\"), []]);\n\t\treturn l.flag;\n\t\t/* */ } catch(err) { $err = err; return 0; } finally { $callDeferred($deferred, $err); }\n\t};\n\tLogger.prototype.Flags = function() { return this.$val.Flags(); };\n\tLogger.ptr.prototype.SetFlags = function(flag) {\n\t\tvar $ptr, flag, l, $deferred;\n\t\t/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\tl = this;\n\t\tl.mu.Lock();\n\t\t$deferred.push([$methodVal(l.mu, \"Unlock\"), []]);\n\t\tl.flag = flag;\n\t\t/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }\n\t};\n\tLogger.prototype.SetFlags = function(flag) { return this.$val.SetFlags(flag); };\n\tLogger.ptr.prototype.Prefix = function() {\n\t\tvar $ptr, l, $deferred;\n\t\t/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\tl = this;\n\t\tl.mu.Lock();\n\t\t$deferred.push([$methodVal(l.mu, \"Unlock\"), []]);\n\t\treturn l.prefix;\n\t\t/* */ } catch(err) { $err = err; return \"\"; } finally { $callDeferred($deferred, $err); }\n\t};\n\tLogger.prototype.Prefix = function() { return this.$val.Prefix(); };\n\tLogger.ptr.prototype.SetPrefix = function(prefix) {\n\t\tvar $ptr, l, prefix, $deferred;\n\t\t/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\tl = this;\n\t\tl.mu.Lock();\n\t\t$deferred.push([$methodVal(l.mu, \"Unlock\"), []]);\n\t\tl.prefix = prefix;\n\t\t/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }\n\t};\n\tLogger.prototype.SetPrefix = function(prefix) { return this.$val.SetPrefix(prefix); };\n\tPrintf = function(format, v) {\n\t\tvar $ptr, _arg, _r, _r$1, format, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_arg = _r;\n\t\t_r$1 = std.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_r$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Printf }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Printf = Printf;\n\tptrType$1.methods = [{prop: \"formatHeader\", name: \"formatHeader\", pkg: \"log\", typ: $funcType([ptrType, time.Time, $String, $Int], [], false)}, {prop: \"Output\", name: \"Output\", pkg: \"\", typ: $funcType([$Int, $String], [$error], false)}, {prop: \"Printf\", name: \"Printf\", pkg: \"\", typ: $funcType([$String, sliceType$1], [], true)}, {prop: \"Print\", name: \"Print\", pkg: \"\", typ: $funcType([sliceType$1], [], true)}, {prop: \"Println\", name: \"Println\", pkg: \"\", typ: $funcType([sliceType$1], [], true)}, {prop: \"Fatal\", name: \"Fatal\", pkg: \"\", typ: $funcType([sliceType$1], [], true)}, {prop: \"Fatalf\", name: \"Fatalf\", pkg: \"\", typ: $funcType([$String, sliceType$1], [], true)}, {prop: \"Fatalln\", name: \"Fatalln\", pkg: \"\", typ: $funcType([sliceType$1], [], true)}, {prop: \"Panic\", name: \"Panic\", pkg: \"\", typ: $funcType([sliceType$1], [], true)}, {prop: \"Panicf\", name: \"Panicf\", pkg: \"\", typ: $funcType([$String, sliceType$1], [], true)}, {prop: \"Panicln\", name: \"Panicln\", pkg: \"\", typ: $funcType([sliceType$1], [], true)}, {prop: \"Flags\", name: \"Flags\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"SetFlags\", name: \"SetFlags\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"Prefix\", name: \"Prefix\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"SetPrefix\", name: \"SetPrefix\", pkg: \"\", typ: $funcType([$String], [], false)}];\n\tLogger.init([{prop: \"mu\", name: \"mu\", pkg: \"log\", typ: nosync.Mutex, tag: \"\"}, {prop: \"prefix\", name: \"prefix\", pkg: \"log\", typ: $String, tag: \"\"}, {prop: \"flag\", name: \"flag\", pkg: \"log\", typ: $Int, tag: \"\"}, {prop: \"out\", name: \"out\", pkg: \"log\", typ: io.Writer, tag: \"\"}, {prop: \"buf\", name: \"buf\", pkg: \"log\", typ: sliceType, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = nosync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = runtime.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = time.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tstd = New(os.Stderr, \"\", 3);\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"github.com/golang/protobuf/proto\"] = (function() {\n\tvar $pkg = {}, $init, bufio, bytes, encoding, json, errors, fmt, io, log, math, os, reflect, sort, strconv, strings, sync, utf8, Unmarshaler, RequiredNotSetError, Marshaler, errorState, ExtensionRange, extendableProto, ExtensionDesc, Extension, extPropKey, Message, Buffer, mapKeys, _MessageSet_Item, MessageSet, messageTypeIder, messageSetDesc, structPointer, field, structPointerSlice, word32, word32Val, word32Slice, word64, word64Val, word64Slice, encoder, valueEncoder, sizer, valueSizer, decoder, valueDecoder, tagMap, StructProperties, Properties, writer, textWriter, raw, int32Slice, arrayType, ptrType, ptrType$1, mapType, structType, ptrType$2, ptrType$3, ptrType$4, ptrType$5, sliceType, ptrType$6, sliceType$1, sliceType$2, ptrType$7, sliceType$3, ptrType$8, ptrType$9, ptrType$10, sliceType$4, ptrType$11, mapType$1, ptrType$12, sliceType$5, sliceType$6, sliceType$7, sliceType$8, sliceType$9, sliceType$10, ptrType$13, ptrType$14, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$23, ptrType$26, sliceType$11, sliceType$12, ptrType$27, ptrType$28, sliceType$13, ptrType$29, ptrType$30, ptrType$31, arrayType$2, ptrType$32, sliceType$14, ptrType$33, ptrType$35, sliceType$15, funcType, ptrType$36, mapType$2, mapType$3, ptrType$37, errOverflow, errRepeatedHasNil, zeroes, extendableProtoType, extProp, extensionMaps, defaults, int32PtrType, messageSetMap, invalidField, int32Type, uint32Type, float32Type, int64Type, uint64Type, float64Type, protoMessageType, marshalerType, unmarshalerType, propertiesMu, propertiesMap, enumValueMaps, newline, spaces, gtNewline, endBraceNewline, backslashN, backslashR, backslashT, backslashDQ, backslashBS, posInf, negInf, nan, messageSetType, errBadUTF8, errBadHex, _r, _r$1, _r$2, _r$3, _r$4, Unmarshal, UnmarshalMerge, sizeVarint, sizeFixed64, sizeFixed32, sizeZigzag64, sizeZigzag32, sizeRawBytes, sizeStringBytes, Marshal, size_bool, size_proto3_bool, size_int32, size_proto3_int32, size_uint32, size_proto3_uint32, size_int64, size_proto3_int64, size_string, size_proto3_string, size_struct_message, size_struct_group, size_slice_bool, size_slice_packed_bool, size_slice_byte, size_proto3_slice_byte, size_slice_int32, size_slice_packed_int32, size_slice_uint32, size_slice_packed_uint32, size_slice_int64, size_slice_packed_int64, size_slice_slice_byte, size_slice_string, size_slice_struct_message, size_slice_struct_group, size_map, size_new_map, mapEncodeScratch, size_struct, isExtensionField, checkExtensionTypes, extensionProperties, encodeExtensionMap, sizeExtensionMap, GetExtension, decodeExtension, NewBuffer, EnumName, UnmarshalJSONEnum, toStructPointer, structPointer_IsNil, structPointer_Interface, toField, structPointer_field, structPointer_ifield, structPointer_Bytes, structPointer_BytesSlice, structPointer_Bool, structPointer_BoolVal, structPointer_BoolSlice, structPointer_String, structPointer_StringVal, structPointer_StringSlice, structPointer_ExtMap, structPointer_Map, structPointer_SetStructPointer, structPointer_GetStructPointer, structPointer_StructPointerSlice, word32_IsNil, word32_Set, word32_Get, structPointer_Word32, word32Val_Set, word32Val_Get, structPointer_Word32Val, structPointer_Word32Slice, word64_Set, word64_IsNil, word64_Get, structPointer_Word64, word64Val_Set, word64Val_Get, structPointer_Word64Val, structPointer_Word64Slice, logNoSliceEnc, isMarshaler, isUnmarshaler, GetProperties, getPropertiesLocked, getbase, RegisterEnum, writeName, writeStruct, writeRaw, writeAny, isprint, writeString, writeMessageSet, writeUnknownStruct, writeUnknownInt, writeExtensions, writeExtension, marshalText, CompactTextString;\n\tbufio = $packages[\"bufio\"];\n\tbytes = $packages[\"bytes\"];\n\tencoding = $packages[\"encoding\"];\n\tjson = $packages[\"encoding/json\"];\n\terrors = $packages[\"errors\"];\n\tfmt = $packages[\"fmt\"];\n\tio = $packages[\"io\"];\n\tlog = $packages[\"log\"];\n\tmath = $packages[\"math\"];\n\tos = $packages[\"os\"];\n\treflect = $packages[\"reflect\"];\n\tsort = $packages[\"sort\"];\n\tstrconv = $packages[\"strconv\"];\n\tstrings = $packages[\"strings\"];\n\tsync = $packages[\"sync\"];\n\tutf8 = $packages[\"unicode/utf8\"];\n\tUnmarshaler = $pkg.Unmarshaler = $newType(8, $kindInterface, \"proto.Unmarshaler\", \"Unmarshaler\", \"github.com/golang/protobuf/proto\", null);\n\tRequiredNotSetError = $pkg.RequiredNotSetError = $newType(0, $kindStruct, \"proto.RequiredNotSetError\", \"RequiredNotSetError\", \"github.com/golang/protobuf/proto\", function(field_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.field = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.field = field_;\n\t});\n\tMarshaler = $pkg.Marshaler = $newType(8, $kindInterface, \"proto.Marshaler\", \"Marshaler\", \"github.com/golang/protobuf/proto\", null);\n\terrorState = $pkg.errorState = $newType(0, $kindStruct, \"proto.errorState\", \"errorState\", \"github.com/golang/protobuf/proto\", function(err_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.err = $ifaceNil;\n\t\t\treturn;\n\t\t}\n\t\tthis.err = err_;\n\t});\n\tExtensionRange = $pkg.ExtensionRange = $newType(0, $kindStruct, \"proto.ExtensionRange\", \"ExtensionRange\", \"github.com/golang/protobuf/proto\", function(Start_, End_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Start = 0;\n\t\t\tthis.End = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.Start = Start_;\n\t\tthis.End = End_;\n\t});\n\textendableProto = $pkg.extendableProto = $newType(8, $kindInterface, \"proto.extendableProto\", \"extendableProto\", \"github.com/golang/protobuf/proto\", null);\n\tExtensionDesc = $pkg.ExtensionDesc = $newType(0, $kindStruct, \"proto.ExtensionDesc\", \"ExtensionDesc\", \"github.com/golang/protobuf/proto\", function(ExtendedType_, ExtensionType_, Field_, Name_, Tag_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.ExtendedType = $ifaceNil;\n\t\t\tthis.ExtensionType = $ifaceNil;\n\t\t\tthis.Field = 0;\n\t\t\tthis.Name = \"\";\n\t\t\tthis.Tag = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.ExtendedType = ExtendedType_;\n\t\tthis.ExtensionType = ExtensionType_;\n\t\tthis.Field = Field_;\n\t\tthis.Name = Name_;\n\t\tthis.Tag = Tag_;\n\t});\n\tExtension = $pkg.Extension = $newType(0, $kindStruct, \"proto.Extension\", \"Extension\", \"github.com/golang/protobuf/proto\", function(desc_, value_, enc_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.desc = ptrType$7.nil;\n\t\t\tthis.value = $ifaceNil;\n\t\t\tthis.enc = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.desc = desc_;\n\t\tthis.value = value_;\n\t\tthis.enc = enc_;\n\t});\n\textPropKey = $pkg.extPropKey = $newType(0, $kindStruct, \"proto.extPropKey\", \"extPropKey\", \"github.com/golang/protobuf/proto\", function(base_, field_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.base = $ifaceNil;\n\t\t\tthis.field = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.base = base_;\n\t\tthis.field = field_;\n\t});\n\tMessage = $pkg.Message = $newType(8, $kindInterface, \"proto.Message\", \"Message\", \"github.com/golang/protobuf/proto\", null);\n\tBuffer = $pkg.Buffer = $newType(0, $kindStruct, \"proto.Buffer\", \"Buffer\", \"github.com/golang/protobuf/proto\", function(buf_, index_, bools_, uint32s_, uint64s_, int32s_, int64s_, float32s_, float64s_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.buf = sliceType.nil;\n\t\t\tthis.index = 0;\n\t\t\tthis.bools = sliceType$3.nil;\n\t\t\tthis.uint32s = sliceType$5.nil;\n\t\t\tthis.uint64s = sliceType$6.nil;\n\t\t\tthis.int32s = sliceType$7.nil;\n\t\t\tthis.int64s = sliceType$8.nil;\n\t\t\tthis.float32s = sliceType$9.nil;\n\t\t\tthis.float64s = sliceType$10.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.buf = buf_;\n\t\tthis.index = index_;\n\t\tthis.bools = bools_;\n\t\tthis.uint32s = uint32s_;\n\t\tthis.uint64s = uint64s_;\n\t\tthis.int32s = int32s_;\n\t\tthis.int64s = int64s_;\n\t\tthis.float32s = float32s_;\n\t\tthis.float64s = float64s_;\n\t});\n\tmapKeys = $pkg.mapKeys = $newType(12, $kindSlice, \"proto.mapKeys\", \"mapKeys\", \"github.com/golang/protobuf/proto\", null);\n\t_MessageSet_Item = $pkg._MessageSet_Item = $newType(0, $kindStruct, \"proto._MessageSet_Item\", \"_MessageSet_Item\", \"github.com/golang/protobuf/proto\", function(TypeId_, Message_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.TypeId = ptrType$2.nil;\n\t\t\tthis.Message = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.TypeId = TypeId_;\n\t\tthis.Message = Message_;\n\t});\n\tMessageSet = $pkg.MessageSet = $newType(0, $kindStruct, \"proto.MessageSet\", \"MessageSet\", \"github.com/golang/protobuf/proto\", function(Item_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Item = sliceType$11.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Item = Item_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tmessageTypeIder = $pkg.messageTypeIder = $newType(8, $kindInterface, \"proto.messageTypeIder\", \"messageTypeIder\", \"github.com/golang/protobuf/proto\", null);\n\tmessageSetDesc = $pkg.messageSetDesc = $newType(0, $kindStruct, \"proto.messageSetDesc\", \"messageSetDesc\", \"github.com/golang/protobuf/proto\", function(t_, name_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.t = $ifaceNil;\n\t\t\tthis.name = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.t = t_;\n\t\tthis.name = name_;\n\t});\n\tstructPointer = $pkg.structPointer = $newType(0, $kindStruct, \"proto.structPointer\", \"structPointer\", \"github.com/golang/protobuf/proto\", function(v_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.v = new reflect.Value.ptr();\n\t\t\treturn;\n\t\t}\n\t\tthis.v = v_;\n\t});\n\tfield = $pkg.field = $newType(12, $kindSlice, \"proto.field\", \"field\", \"github.com/golang/protobuf/proto\", null);\n\tstructPointerSlice = $pkg.structPointerSlice = $newType(0, $kindStruct, \"proto.structPointerSlice\", \"structPointerSlice\", \"github.com/golang/protobuf/proto\", function(v_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.v = new reflect.Value.ptr();\n\t\t\treturn;\n\t\t}\n\t\tthis.v = v_;\n\t});\n\tword32 = $pkg.word32 = $newType(0, $kindStruct, \"proto.word32\", \"word32\", \"github.com/golang/protobuf/proto\", function(v_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.v = new reflect.Value.ptr();\n\t\t\treturn;\n\t\t}\n\t\tthis.v = v_;\n\t});\n\tword32Val = $pkg.word32Val = $newType(0, $kindStruct, \"proto.word32Val\", \"word32Val\", \"github.com/golang/protobuf/proto\", function(v_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.v = new reflect.Value.ptr();\n\t\t\treturn;\n\t\t}\n\t\tthis.v = v_;\n\t});\n\tword32Slice = $pkg.word32Slice = $newType(0, $kindStruct, \"proto.word32Slice\", \"word32Slice\", \"github.com/golang/protobuf/proto\", function(v_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.v = new reflect.Value.ptr();\n\t\t\treturn;\n\t\t}\n\t\tthis.v = v_;\n\t});\n\tword64 = $pkg.word64 = $newType(0, $kindStruct, \"proto.word64\", \"word64\", \"github.com/golang/protobuf/proto\", function(v_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.v = new reflect.Value.ptr();\n\t\t\treturn;\n\t\t}\n\t\tthis.v = v_;\n\t});\n\tword64Val = $pkg.word64Val = $newType(0, $kindStruct, \"proto.word64Val\", \"word64Val\", \"github.com/golang/protobuf/proto\", function(v_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.v = new reflect.Value.ptr();\n\t\t\treturn;\n\t\t}\n\t\tthis.v = v_;\n\t});\n\tword64Slice = $pkg.word64Slice = $newType(0, $kindStruct, \"proto.word64Slice\", \"word64Slice\", \"github.com/golang/protobuf/proto\", function(v_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.v = new reflect.Value.ptr();\n\t\t\treturn;\n\t\t}\n\t\tthis.v = v_;\n\t});\n\tencoder = $pkg.encoder = $newType(4, $kindFunc, \"proto.encoder\", \"encoder\", \"github.com/golang/protobuf/proto\", null);\n\tvalueEncoder = $pkg.valueEncoder = $newType(4, $kindFunc, \"proto.valueEncoder\", \"valueEncoder\", \"github.com/golang/protobuf/proto\", null);\n\tsizer = $pkg.sizer = $newType(4, $kindFunc, \"proto.sizer\", \"sizer\", \"github.com/golang/protobuf/proto\", null);\n\tvalueSizer = $pkg.valueSizer = $newType(4, $kindFunc, \"proto.valueSizer\", \"valueSizer\", \"github.com/golang/protobuf/proto\", null);\n\tdecoder = $pkg.decoder = $newType(4, $kindFunc, \"proto.decoder\", \"decoder\", \"github.com/golang/protobuf/proto\", null);\n\tvalueDecoder = $pkg.valueDecoder = $newType(4, $kindFunc, \"proto.valueDecoder\", \"valueDecoder\", \"github.com/golang/protobuf/proto\", null);\n\ttagMap = $pkg.tagMap = $newType(0, $kindStruct, \"proto.tagMap\", \"tagMap\", \"github.com/golang/protobuf/proto\", function(fastTags_, slowTags_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.fastTags = sliceType$4.nil;\n\t\t\tthis.slowTags = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.fastTags = fastTags_;\n\t\tthis.slowTags = slowTags_;\n\t});\n\tStructProperties = $pkg.StructProperties = $newType(0, $kindStruct, \"proto.StructProperties\", \"StructProperties\", \"github.com/golang/protobuf/proto\", function(Prop_, reqCount_, decoderTags_, decoderOrigNames_, order_, unrecField_, extendable_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Prop = sliceType$14.nil;\n\t\t\tthis.reqCount = 0;\n\t\t\tthis.decoderTags = new tagMap.ptr();\n\t\t\tthis.decoderOrigNames = false;\n\t\t\tthis.order = sliceType$4.nil;\n\t\t\tthis.unrecField = field.nil;\n\t\t\tthis.extendable = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.Prop = Prop_;\n\t\tthis.reqCount = reqCount_;\n\t\tthis.decoderTags = decoderTags_;\n\t\tthis.decoderOrigNames = decoderOrigNames_;\n\t\tthis.order = order_;\n\t\tthis.unrecField = unrecField_;\n\t\tthis.extendable = extendable_;\n\t});\n\tProperties = $pkg.Properties = $newType(0, $kindStruct, \"proto.Properties\", \"Properties\", \"github.com/golang/protobuf/proto\", function(Name_, OrigName_, Wire_, WireType_, Tag_, Required_, Optional_, Repeated_, Packed_, Enum_, proto3_, Default_, HasDefault_, def_uint64_, enc_, valEnc_, field_, tagcode_, tagbuf_, stype_, sprop_, isMarshaler_, isUnmarshaler_, mtype_, mkeyprop_, mvalprop_, size_, valSize_, dec_, valDec_, packedDec_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Name = \"\";\n\t\t\tthis.OrigName = \"\";\n\t\t\tthis.Wire = \"\";\n\t\t\tthis.WireType = 0;\n\t\t\tthis.Tag = 0;\n\t\t\tthis.Required = false;\n\t\t\tthis.Optional = false;\n\t\t\tthis.Repeated = false;\n\t\t\tthis.Packed = false;\n\t\t\tthis.Enum = \"\";\n\t\t\tthis.proto3 = false;\n\t\t\tthis.Default = \"\";\n\t\t\tthis.HasDefault = false;\n\t\t\tthis.def_uint64 = new $Uint64(0, 0);\n\t\t\tthis.enc = $throwNilPointerError;\n\t\t\tthis.valEnc = $throwNilPointerError;\n\t\t\tthis.field = field.nil;\n\t\t\tthis.tagcode = sliceType.nil;\n\t\t\tthis.tagbuf = arrayType$2.zero();\n\t\t\tthis.stype = $ifaceNil;\n\t\t\tthis.sprop = ptrType$32.nil;\n\t\t\tthis.isMarshaler = false;\n\t\t\tthis.isUnmarshaler = false;\n\t\t\tthis.mtype = $ifaceNil;\n\t\t\tthis.mkeyprop = ptrType$1.nil;\n\t\t\tthis.mvalprop = ptrType$1.nil;\n\t\t\tthis.size = $throwNilPointerError;\n\t\t\tthis.valSize = $throwNilPointerError;\n\t\t\tthis.dec = $throwNilPointerError;\n\t\t\tthis.valDec = $throwNilPointerError;\n\t\t\tthis.packedDec = $throwNilPointerError;\n\t\t\treturn;\n\t\t}\n\t\tthis.Name = Name_;\n\t\tthis.OrigName = OrigName_;\n\t\tthis.Wire = Wire_;\n\t\tthis.WireType = WireType_;\n\t\tthis.Tag = Tag_;\n\t\tthis.Required = Required_;\n\t\tthis.Optional = Optional_;\n\t\tthis.Repeated = Repeated_;\n\t\tthis.Packed = Packed_;\n\t\tthis.Enum = Enum_;\n\t\tthis.proto3 = proto3_;\n\t\tthis.Default = Default_;\n\t\tthis.HasDefault = HasDefault_;\n\t\tthis.def_uint64 = def_uint64_;\n\t\tthis.enc = enc_;\n\t\tthis.valEnc = valEnc_;\n\t\tthis.field = field_;\n\t\tthis.tagcode = tagcode_;\n\t\tthis.tagbuf = tagbuf_;\n\t\tthis.stype = stype_;\n\t\tthis.sprop = sprop_;\n\t\tthis.isMarshaler = isMarshaler_;\n\t\tthis.isUnmarshaler = isUnmarshaler_;\n\t\tthis.mtype = mtype_;\n\t\tthis.mkeyprop = mkeyprop_;\n\t\tthis.mvalprop = mvalprop_;\n\t\tthis.size = size_;\n\t\tthis.valSize = valSize_;\n\t\tthis.dec = dec_;\n\t\tthis.valDec = valDec_;\n\t\tthis.packedDec = packedDec_;\n\t});\n\twriter = $pkg.writer = $newType(8, $kindInterface, \"proto.writer\", \"writer\", \"github.com/golang/protobuf/proto\", null);\n\ttextWriter = $pkg.textWriter = $newType(0, $kindStruct, \"proto.textWriter\", \"textWriter\", \"github.com/golang/protobuf/proto\", function(ind_, complete_, compact_, w_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.ind = 0;\n\t\t\tthis.complete = false;\n\t\t\tthis.compact = false;\n\t\t\tthis.w = $ifaceNil;\n\t\t\treturn;\n\t\t}\n\t\tthis.ind = ind_;\n\t\tthis.complete = complete_;\n\t\tthis.compact = compact_;\n\t\tthis.w = w_;\n\t});\n\traw = $pkg.raw = $newType(8, $kindInterface, \"proto.raw\", \"raw\", \"github.com/golang/protobuf/proto\", null);\n\tint32Slice = $pkg.int32Slice = $newType(12, $kindSlice, \"proto.int32Slice\", \"int32Slice\", \"github.com/golang/protobuf/proto\", null);\n\tarrayType = $arrayType($Uint8, 20);\n\tptrType = $ptrType(extendableProto);\n\tptrType$1 = $ptrType(Properties);\n\tmapType = $mapType(extPropKey, ptrType$1);\n\tstructType = $structType([{prop: \"RWMutex\", name: \"\", pkg: \"\", typ: sync.RWMutex, tag: \"\"}, {prop: \"m\", name: \"m\", pkg: \"github.com/golang/protobuf/proto\", typ: mapType, tag: \"\"}]);\n\tptrType$2 = $ptrType($Int32);\n\tptrType$3 = $ptrType(Message);\n\tptrType$4 = $ptrType(Marshaler);\n\tptrType$5 = $ptrType(Unmarshaler);\n\tsliceType = $sliceType($Uint8);\n\tptrType$6 = $ptrType(MessageSet);\n\tsliceType$1 = $sliceType(reflect.Value);\n\tsliceType$2 = $sliceType($emptyInterface);\n\tptrType$7 = $ptrType(ExtensionDesc);\n\tsliceType$3 = $sliceType($Bool);\n\tptrType$8 = $ptrType($Bool);\n\tptrType$9 = $ptrType($String);\n\tptrType$10 = $ptrType(sliceType);\n\tsliceType$4 = $sliceType($Int);\n\tptrType$11 = $ptrType(RequiredNotSetError);\n\tmapType$1 = $mapType($Int32, Extension);\n\tptrType$12 = $ptrType(reflect.StructField);\n\tsliceType$5 = $sliceType($Uint32);\n\tsliceType$6 = $sliceType($Uint64);\n\tsliceType$7 = $sliceType($Int32);\n\tsliceType$8 = $sliceType($Int64);\n\tsliceType$9 = $sliceType($Float32);\n\tsliceType$10 = $sliceType($Float64);\n\tptrType$13 = $ptrType($Int64);\n\tptrType$14 = $ptrType($Float32);\n\tptrType$15 = $ptrType($Float64);\n\tptrType$16 = $ptrType($Uint32);\n\tptrType$17 = $ptrType($Uint64);\n\tptrType$18 = $ptrType(ptrType$8);\n\tptrType$23 = $ptrType(ptrType$9);\n\tptrType$26 = $ptrType(_MessageSet_Item);\n\tsliceType$11 = $sliceType(ptrType$26);\n\tsliceType$12 = $sliceType(sliceType);\n\tptrType$27 = $ptrType(sliceType$12);\n\tptrType$28 = $ptrType(sliceType$3);\n\tsliceType$13 = $sliceType($String);\n\tptrType$29 = $ptrType(sliceType$13);\n\tptrType$30 = $ptrType(mapType$1);\n\tptrType$31 = $ptrType(Buffer);\n\tarrayType$2 = $arrayType($Uint8, 8);\n\tptrType$32 = $ptrType(StructProperties);\n\tsliceType$14 = $sliceType(ptrType$1);\n\tptrType$33 = $ptrType(bufio.Writer);\n\tptrType$35 = $ptrType(errorState);\n\tsliceType$15 = $sliceType(ExtensionRange);\n\tfuncType = $funcType([], [$error], false);\n\tptrType$36 = $ptrType(tagMap);\n\tmapType$2 = $mapType($Int, $Int);\n\tmapType$3 = $mapType($String, $Int);\n\tptrType$37 = $ptrType(textWriter);\n\tBuffer.ptr.prototype.DecodeVarint = function() {\n\t\tvar $ptr, b, err, i, l, p, shift, x, x$1, x$2, x$3;\n\t\tx = new $Uint64(0, 0);\n\t\terr = $ifaceNil;\n\t\tp = this;\n\t\ti = p.index;\n\t\tl = p.buf.$length;\n\t\tshift = 0;\n\t\twhile (true) {\n\t\t\tif (!(shift < 64)) { break; }\n\t\t\tif (i >= l) {\n\t\t\t\terr = io.ErrUnexpectedEOF;\n\t\t\t\treturn [x, err];\n\t\t\t}\n\t\t\tb = (x$1 = p.buf, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError(\"index out of range\") : x$1.$array[x$1.$offset + i]));\n\t\t\ti = i + (1) >> 0;\n\t\t\tx = (x$2 = $shiftLeft64(((x$3 = new $Uint64(0, b), new $Uint64(x$3.$high & 0, (x$3.$low & 127) >>> 0))), shift), new $Uint64(x.$high | x$2.$high, (x.$low | x$2.$low) >>> 0));\n\t\t\tif (b < 128) {\n\t\t\t\tp.index = i;\n\t\t\t\treturn [x, err];\n\t\t\t}\n\t\t\tshift = shift + (7) >>> 0;\n\t\t}\n\t\terr = errOverflow;\n\t\treturn [x, err];\n\t};\n\tBuffer.prototype.DecodeVarint = function() { return this.$val.DecodeVarint(); };\n\tBuffer.ptr.prototype.DecodeFixed64 = function() {\n\t\tvar $ptr, err, i, p, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$3, x$4, x$5, x$6, x$7, x$8, x$9;\n\t\tx = new $Uint64(0, 0);\n\t\terr = $ifaceNil;\n\t\tp = this;\n\t\ti = p.index + 8 >> 0;\n\t\tif (i < 0 || i > p.buf.$length) {\n\t\t\terr = io.ErrUnexpectedEOF;\n\t\t\treturn [x, err];\n\t\t}\n\t\tp.index = i;\n\t\tx = new $Uint64(0, (x$1 = p.buf, x$2 = i - 8 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError(\"index out of range\") : x$1.$array[x$1.$offset + x$2])));\n\t\tx = (x$3 = $shiftLeft64(new $Uint64(0, (x$4 = p.buf, x$5 = i - 7 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError(\"index out of range\") : x$4.$array[x$4.$offset + x$5]))), 8), new $Uint64(x.$high | x$3.$high, (x.$low | x$3.$low) >>> 0));\n\t\tx = (x$6 = $shiftLeft64(new $Uint64(0, (x$7 = p.buf, x$8 = i - 6 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? $throwRuntimeError(\"index out of range\") : x$7.$array[x$7.$offset + x$8]))), 16), new $Uint64(x.$high | x$6.$high, (x.$low | x$6.$low) >>> 0));\n\t\tx = (x$9 = $shiftLeft64(new $Uint64(0, (x$10 = p.buf, x$11 = i - 5 >> 0, ((x$11 < 0 || x$11 >= x$10.$length) ? $throwRuntimeError(\"index out of range\") : x$10.$array[x$10.$offset + x$11]))), 24), new $Uint64(x.$high | x$9.$high, (x.$low | x$9.$low) >>> 0));\n\t\tx = (x$12 = $shiftLeft64(new $Uint64(0, (x$13 = p.buf, x$14 = i - 4 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? $throwRuntimeError(\"index out of range\") : x$13.$array[x$13.$offset + x$14]))), 32), new $Uint64(x.$high | x$12.$high, (x.$low | x$12.$low) >>> 0));\n\t\tx = (x$15 = $shiftLeft64(new $Uint64(0, (x$16 = p.buf, x$17 = i - 3 >> 0, ((x$17 < 0 || x$17 >= x$16.$length) ? $throwRuntimeError(\"index out of range\") : x$16.$array[x$16.$offset + x$17]))), 40), new $Uint64(x.$high | x$15.$high, (x.$low | x$15.$low) >>> 0));\n\t\tx = (x$18 = $shiftLeft64(new $Uint64(0, (x$19 = p.buf, x$20 = i - 2 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? $throwRuntimeError(\"index out of range\") : x$19.$array[x$19.$offset + x$20]))), 48), new $Uint64(x.$high | x$18.$high, (x.$low | x$18.$low) >>> 0));\n\t\tx = (x$21 = $shiftLeft64(new $Uint64(0, (x$22 = p.buf, x$23 = i - 1 >> 0, ((x$23 < 0 || x$23 >= x$22.$length) ? $throwRuntimeError(\"index out of range\") : x$22.$array[x$22.$offset + x$23]))), 56), new $Uint64(x.$high | x$21.$high, (x.$low | x$21.$low) >>> 0));\n\t\treturn [x, err];\n\t};\n\tBuffer.prototype.DecodeFixed64 = function() { return this.$val.DecodeFixed64(); };\n\tBuffer.ptr.prototype.DecodeFixed32 = function() {\n\t\tvar $ptr, err, i, p, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;\n\t\tx = new $Uint64(0, 0);\n\t\terr = $ifaceNil;\n\t\tp = this;\n\t\ti = p.index + 4 >> 0;\n\t\tif (i < 0 || i > p.buf.$length) {\n\t\t\terr = io.ErrUnexpectedEOF;\n\t\t\treturn [x, err];\n\t\t}\n\t\tp.index = i;\n\t\tx = new $Uint64(0, (x$1 = p.buf, x$2 = i - 4 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError(\"index out of range\") : x$1.$array[x$1.$offset + x$2])));\n\t\tx = (x$3 = $shiftLeft64(new $Uint64(0, (x$4 = p.buf, x$5 = i - 3 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError(\"index out of range\") : x$4.$array[x$4.$offset + x$5]))), 8), new $Uint64(x.$high | x$3.$high, (x.$low | x$3.$low) >>> 0));\n\t\tx = (x$6 = $shiftLeft64(new $Uint64(0, (x$7 = p.buf, x$8 = i - 2 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? $throwRuntimeError(\"index out of range\") : x$7.$array[x$7.$offset + x$8]))), 16), new $Uint64(x.$high | x$6.$high, (x.$low | x$6.$low) >>> 0));\n\t\tx = (x$9 = $shiftLeft64(new $Uint64(0, (x$10 = p.buf, x$11 = i - 1 >> 0, ((x$11 < 0 || x$11 >= x$10.$length) ? $throwRuntimeError(\"index out of range\") : x$10.$array[x$10.$offset + x$11]))), 24), new $Uint64(x.$high | x$9.$high, (x.$low | x$9.$low) >>> 0));\n\t\treturn [x, err];\n\t};\n\tBuffer.prototype.DecodeFixed32 = function() { return this.$val.DecodeFixed32(); };\n\tBuffer.ptr.prototype.DecodeZigzag64 = function() {\n\t\tvar $ptr, _tuple, err, p, x, x$1, x$2, x$3, x$4;\n\t\tx = new $Uint64(0, 0);\n\t\terr = $ifaceNil;\n\t\tp = this;\n\t\t_tuple = p.DecodeVarint(); x = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn [x, err];\n\t\t}\n\t\tx = (x$1 = $shiftRightUint64(x, 1), x$2 = (x$3 = $shiftRightInt64(($shiftLeft64((x$4 = new $Uint64(x.$high & 0, (x.$low & 1) >>> 0), new $Int64(x$4.$high, x$4.$low)), 63)), 63), new $Uint64(x$3.$high, x$3.$low)), new $Uint64(x$1.$high ^ x$2.$high, (x$1.$low ^ x$2.$low) >>> 0));\n\t\treturn [x, err];\n\t};\n\tBuffer.prototype.DecodeZigzag64 = function() { return this.$val.DecodeZigzag64(); };\n\tBuffer.ptr.prototype.DecodeZigzag32 = function() {\n\t\tvar $ptr, _tuple, err, p, x;\n\t\tx = new $Uint64(0, 0);\n\t\terr = $ifaceNil;\n\t\tp = this;\n\t\t_tuple = p.DecodeVarint(); x = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn [x, err];\n\t\t}\n\t\tx = new $Uint64(0, (((((x.$low >>> 0) >>> 1 >>> 0)) ^ (((((new $Uint64(x.$high & 0, (x.$low & 1) >>> 0).$low >> 0) << 31 >> 0)) >> 31 >> 0) >>> 0)) >>> 0));\n\t\treturn [x, err];\n\t};\n\tBuffer.prototype.DecodeZigzag32 = function() { return this.$val.DecodeZigzag32(); };\n\tBuffer.ptr.prototype.DecodeRawBytes = function(alloc) {\n\t\tvar $ptr, _r$5, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, alloc, buf, end, err, n, nb, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; alloc = $f.alloc; buf = $f.buf; end = $f.end; err = $f.err; n = $f.n; nb = $f.nb; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tbuf = sliceType.nil;\n\t\terr = $ifaceNil;\n\t\tp = this;\n\t\t_tuple = p.DecodeVarint(); n = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t_tmp = sliceType.nil; _tmp$1 = err; buf = _tmp; err = _tmp$1;\n\t\t\treturn [buf, err];\n\t\t}\n\t\tnb = (n.$low >> 0);\n\t\t/* */ if (nb < 0) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (nb < 0) { */ case 1:\n\t\t\t_r$5 = fmt.Errorf(\"proto: bad byte length %d\", new sliceType$2([new $Int(nb)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t_tmp$2 = sliceType.nil; _tmp$3 = _r$5; buf = _tmp$2; err = _tmp$3;\n\t\t\treturn [buf, err];\n\t\t/* } */ case 2:\n\t\tend = p.index + nb >> 0;\n\t\tif (end < p.index || end > p.buf.$length) {\n\t\t\t_tmp$4 = sliceType.nil; _tmp$5 = io.ErrUnexpectedEOF; buf = _tmp$4; err = _tmp$5;\n\t\t\treturn [buf, err];\n\t\t}\n\t\tif (!alloc) {\n\t\t\tbuf = $subslice(p.buf, p.index, end);\n\t\t\tp.index = p.index + (nb) >> 0;\n\t\t\treturn [buf, err];\n\t\t}\n\t\tbuf = $makeSlice(sliceType, nb);\n\t\t$copySlice(buf, $subslice(p.buf, p.index));\n\t\tp.index = p.index + (nb) >> 0;\n\t\treturn [buf, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.DecodeRawBytes }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.alloc = alloc; $f.buf = buf; $f.end = end; $f.err = err; $f.n = n; $f.nb = nb; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.DecodeRawBytes = function(alloc) { return this.$val.DecodeRawBytes(alloc); };\n\tBuffer.ptr.prototype.DecodeStringBytes = function() {\n\t\tvar $ptr, _r$5, _tmp, _tmp$1, _tuple, buf, err, p, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; buf = $f.buf; err = $f.err; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ts = \"\";\n\t\terr = $ifaceNil;\n\t\tp = this;\n\t\t_r$5 = p.DecodeRawBytes(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_tuple = _r$5; buf = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn [s, err];\n\t\t}\n\t\t_tmp = $bytesToString(buf); _tmp$1 = $ifaceNil; s = _tmp; err = _tmp$1;\n\t\treturn [s, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.DecodeStringBytes }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.DecodeStringBytes = function() { return this.$val.DecodeStringBytes(); };\n\tBuffer.ptr.prototype.skipAndSave = function(t, tag, wire, base, unrecField) {\n\t\tvar $ptr, _r$5, _r$6, base, err, o, obuf, oi, ptr, t, tag, unrecField, wire, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; base = $f.base; err = $f.err; o = $f.o; obuf = $f.obuf; oi = $f.oi; ptr = $f.ptr; t = $f.t; tag = $f.tag; unrecField = $f.unrecField; wire = $f.wire; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\toi = o.index;\n\t\t_r$5 = o.skip(t, tag, wire); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\terr = _r$5;\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\tif (!unrecField.IsValid()) {\n\t\t\treturn $ifaceNil;\n\t\t}\n\t\t_r$6 = structPointer_Bytes(base, unrecField); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tptr = _r$6;\n\t\tobuf = o.buf;\n\t\to.buf = ptr.$get();\n\t\to.EncodeVarint(new $Uint64(0, ((tag << 3 >> 0) | wire)));\n\t\tptr.$set($appendSlice(o.buf, $subslice(obuf, oi, o.index)));\n\t\to.buf = obuf;\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.skipAndSave }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.base = base; $f.err = err; $f.o = o; $f.obuf = obuf; $f.oi = oi; $f.ptr = ptr; $f.t = t; $f.tag = tag; $f.unrecField = unrecField; $f.wire = wire; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.skipAndSave = function(t, tag, wire, base, unrecField) { return this.$val.skipAndSave(t, tag, wire, base, unrecField); };\n\tBuffer.ptr.prototype.skip = function(t, tag, wire) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, err, ftag, fwire, o, t, tag, u, wire, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; err = $f.err; ftag = $f.ftag; fwire = $f.fwire; o = $f.o; t = $f.t; tag = $f.tag; u = $f.u; wire = $f.wire; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tu = new $Uint64(0, 0);\n\t\terr = $ifaceNil;\n\t\t_ref = wire;\n\t\t/* */ if (_ref === 0) { $s = 1; continue; }\n\t\t/* */ if (_ref === 1) { $s = 2; continue; }\n\t\t/* */ if (_ref === 2) { $s = 3; continue; }\n\t\t/* */ if (_ref === 5) { $s = 4; continue; }\n\t\t/* */ if (_ref === 3) { $s = 5; continue; }\n\t\t/* */ $s = 6; continue;\n\t\t/* if (_ref === 0) { */ case 1:\n\t\t\t_tuple = o.DecodeVarint(); err = _tuple[1];\n\t\t\t$s = 7; continue;\n\t\t/* } else if (_ref === 1) { */ case 2:\n\t\t\t_tuple$1 = o.DecodeFixed64(); err = _tuple$1[1];\n\t\t\t$s = 7; continue;\n\t\t/* } else if (_ref === 2) { */ case 3:\n\t\t\t_r$5 = o.DecodeRawBytes(false); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t_tuple$2 = _r$5; err = _tuple$2[1];\n\t\t\t$s = 7; continue;\n\t\t/* } else if (_ref === 5) { */ case 4:\n\t\t\t_tuple$3 = o.DecodeFixed32(); err = _tuple$3[1];\n\t\t\t$s = 7; continue;\n\t\t/* } else if (_ref === 3) { */ case 5:\n\t\t\t/* while (true) { */ case 9:\n\t\t\t\t_tuple$4 = o.DecodeVarint(); u = _tuple$4[0]; err = _tuple$4[1];\n\t\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\t\t/* break; */ $s = 10; continue;\n\t\t\t\t}\n\t\t\t\tfwire = (new $Uint64(u.$high & 0, (u.$low & 7) >>> 0).$low >> 0);\n\t\t\t\tif (fwire === 4) {\n\t\t\t\t\t/* break; */ $s = 10; continue;\n\t\t\t\t}\n\t\t\t\tftag = ($shiftRightUint64(u, 3).$low >> 0);\n\t\t\t\t_r$6 = o.skip(t, ftag, fwire); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t\terr = _r$6;\n\t\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\t\t/* break; */ $s = 10; continue;\n\t\t\t\t}\n\t\t\t/* } */ $s = 9; continue; case 10:\n\t\t\t$s = 7; continue;\n\t\t/* } else { */ case 6:\n\t\t\t_r$7 = fmt.Errorf(\"proto: can't skip unknown wire type %d for %s\", new sliceType$2([new $Int(wire), t])); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\terr = _r$7;\n\t\t/* } */ case 7:\n\t\treturn err;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.skip }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.err = err; $f.ftag = ftag; $f.fwire = fwire; $f.o = o; $f.t = t; $f.tag = tag; $f.u = u; $f.wire = wire; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.skip = function(t, tag, wire) { return this.$val.skip(t, tag, wire); };\n\tUnmarshal = function(buf, pb) {\n\t\tvar $ptr, _r$5, buf, pb, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; buf = $f.buf; pb = $f.pb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = pb.Reset(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t_r$5 = UnmarshalMerge(buf, pb); /* */ $s = 2; case 2: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn _r$5;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Unmarshal }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.buf = buf; $f.pb = pb; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Unmarshal = Unmarshal;\n\tUnmarshalMerge = function(buf, pb) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, buf, ok, pb, u, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; buf = $f.buf; ok = $f.ok; pb = $f.pb; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_tuple = $assertType(pb, Unmarshaler, true); u = _tuple[0]; ok = _tuple[1];\n\t\t/* */ if (ok) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (ok) { */ case 1:\n\t\t\t_r$5 = u.Unmarshal(buf); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\treturn _r$5;\n\t\t/* } */ case 2:\n\t\t_r$6 = NewBuffer(buf).Unmarshal(pb); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\treturn _r$6;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: UnmarshalMerge }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.buf = buf; $f.ok = ok; $f.pb = pb; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.UnmarshalMerge = UnmarshalMerge;\n\tBuffer.ptr.prototype.Unmarshal = function(pb) {\n\t\tvar $ptr, _arg, _arg$1, _arg$2, _r$10, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, base, err, err$1, ok, p, pb, typ, u, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r$10 = $f._r$10; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; base = $f.base; err = $f.err; err$1 = $f.err$1; ok = $f.ok; p = $f.p; pb = $f.pb; typ = $f.typ; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\t_tuple = $assertType(pb, Unmarshaler, true); u = _tuple[0]; ok = _tuple[1];\n\t\t/* */ if (ok) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (ok) { */ case 1:\n\t\t\t_r$5 = u.Unmarshal($subslice(p.buf, p.index)); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\terr = _r$5;\n\t\t\tp.index = p.buf.$length;\n\t\t\treturn err;\n\t\t/* } */ case 2:\n\t\t_r$6 = getbase(pb); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r$6; typ = _tuple$1[0]; base = $clone(_tuple$1[1], structPointer); err$1 = _tuple$1[2];\n\t\tif (!($interfaceIsEqual(err$1, $ifaceNil))) {\n\t\t\treturn err$1;\n\t\t}\n\t\t_r$7 = typ.Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t_arg = _r$7;\n\t\t_r$8 = typ.Elem(); /* */ $s = 6; case 6: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t_r$9 = GetProperties(_r$8); /* */ $s = 7; case 7: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t_arg$1 = _r$9;\n\t\t_arg$2 = base;\n\t\t_r$10 = p.unmarshalType(_arg, _arg$1, false, _arg$2); /* */ $s = 8; case 8: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\terr$1 = _r$10;\n\t\treturn err$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.Unmarshal }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r$10 = _r$10; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.base = base; $f.err = err; $f.err$1 = err$1; $f.ok = ok; $f.p = p; $f.pb = pb; $f.typ = typ; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.Unmarshal = function(pb) { return this.$val.Unmarshal(pb); };\n\tBuffer.ptr.prototype.unmarshalType = function(st, prop, is_group, base) {\n\t\tvar $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _entry, _key, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tuple, _tuple$1, base, dec, decErr, e, err, ext, fieldnum, is_group, mask, o, oi, ok, p, prop, reqFields, required, st, state, tag, u, wire, x, x$1, x$2, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _entry = $f._entry; _key = $f._key; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; base = $f.base; dec = $f.dec; decErr = $f.decErr; e = $f.e; err = $f.err; ext = $f.ext; fieldnum = $f.fieldnum; is_group = $f.is_group; mask = $f.mask; o = $f.o; oi = $f.oi; ok = $f.ok; p = $f.p; prop = $f.prop; reqFields = $f.reqFields; required = $f.required; st = $f.st; state = $f.state; tag = $f.tag; u = $f.u; wire = $f.wire; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\tstate = $clone(new errorState.ptr(), errorState);\n\t\t_tmp = prop.reqCount; _tmp$1 = new $Uint64(0, 0); required = _tmp; reqFields = _tmp$1;\n\t\terr = $ifaceNil;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!($interfaceIsEqual(err, $ifaceNil) && o.index < o.buf.$length)) { break; } */ if(!($interfaceIsEqual(err, $ifaceNil) && o.index < o.buf.$length)) { $s = 2; continue; }\n\t\t\toi = o.index;\n\t\t\tu = new $Uint64(0, 0);\n\t\t\t_tuple = o.DecodeVarint(); u = _tuple[0]; err = _tuple[1];\n\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\t/* break; */ $s = 2; continue;\n\t\t\t}\n\t\t\twire = (new $Uint64(u.$high & 0, (u.$low & 7) >>> 0).$low >> 0);\n\t\t\t/* */ if (wire === 4) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (wire === 4) { */ case 3:\n\t\t\t\tif (is_group) {\n\t\t\t\t\treturn $ifaceNil;\n\t\t\t\t}\n\t\t\t\t_r$5 = fmt.Errorf(\"proto: %s: wiretype end group for non-group\", new sliceType$2([st])); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t\treturn _r$5;\n\t\t\t/* } */ case 4:\n\t\t\ttag = ($shiftRightUint64(u, 3).$low >> 0);\n\t\t\t/* */ if (tag <= 0) { $s = 6; continue; }\n\t\t\t/* */ $s = 7; continue;\n\t\t\t/* if (tag <= 0) { */ case 6:\n\t\t\t\t_r$6 = fmt.Errorf(\"proto: %s: illegal tag %d (wire type %d)\", new sliceType$2([st, new $Int(tag), new $Int(wire)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t\treturn _r$6;\n\t\t\t/* } */ case 7:\n\t\t\t_tuple$1 = prop.decoderTags.get(tag); fieldnum = _tuple$1[0]; ok = _tuple$1[1];\n\t\t\t/* */ if (!ok) { $s = 9; continue; }\n\t\t\t/* */ $s = 10; continue;\n\t\t\t/* if (!ok) { */ case 9:\n\t\t\t\t/* */ if (prop.extendable) { $s = 11; continue; }\n\t\t\t\t/* */ $s = 12; continue;\n\t\t\t\t/* if (prop.extendable) { */ case 11:\n\t\t\t\t\t_r$7 = structPointer_Interface(base, st); /* */ $s = 13; case 13: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t\t\te = $assertType(_r$7, extendableProto);\n\t\t\t\t\t_r$8 = isExtensionField(e, (tag >> 0)); /* */ $s = 16; case 16: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t\t\t/* */ if (_r$8) { $s = 14; continue; }\n\t\t\t\t\t/* */ $s = 15; continue;\n\t\t\t\t\t/* if (_r$8) { */ case 14:\n\t\t\t\t\t\t_r$9 = o.skip(st, tag, wire); /* */ $s = 17; case 17: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\t\t\t\terr = _r$9;\n\t\t\t\t\t\t/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 18; continue; }\n\t\t\t\t\t\t/* */ $s = 19; continue;\n\t\t\t\t\t\t/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 18:\n\t\t\t\t\t\t\t_r$10 = e.ExtensionMap(); /* */ $s = 20; case 20: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\t\t\t\t\text = $clone((_entry = _r$10[(tag >> 0)], _entry !== undefined ? _entry.v : new Extension.ptr()), Extension);\n\t\t\t\t\t\t\text.enc = $appendSlice(ext.enc, $subslice(o.buf, oi, o.index));\n\t\t\t\t\t\t\t_r$11 = e.ExtensionMap(); /* */ $s = 21; case 21: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t\t\t\t\t\t_key = (tag >> 0); (_r$11 || $throwRuntimeError(\"assignment to entry in nil map\"))[_key] = { k: _key, v: $clone(ext, Extension) };\n\t\t\t\t\t\t/* } */ case 19:\n\t\t\t\t\t\t/* continue; */ $s = 1; continue;\n\t\t\t\t\t/* } */ case 15:\n\t\t\t\t/* } */ case 12:\n\t\t\t\t_r$12 = o.skipAndSave(st, tag, wire, base, prop.unrecField); /* */ $s = 22; case 22: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\t\t\terr = _r$12;\n\t\t\t\t/* continue; */ $s = 1; continue;\n\t\t\t/* } */ case 10:\n\t\t\tp = (x = prop.Prop, ((fieldnum < 0 || fieldnum >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + fieldnum]));\n\t\t\t/* */ if (p.dec === $throwNilPointerError) { $s = 23; continue; }\n\t\t\t/* */ $s = 24; continue;\n\t\t\t/* if (p.dec === $throwNilPointerError) { */ case 23:\n\t\t\t\t_arg = os.Stderr;\n\t\t\t\t_arg$1 = st;\n\t\t\t\t_r$13 = st.Field(fieldnum); /* */ $s = 25; case 25: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }\n\t\t\t\t_arg$2 = new $String(_r$13.Name);\n\t\t\t\t_r$14 = fmt.Fprintf(_arg, \"proto: no protobuf decoder for %s.%s\\n\", new sliceType$2([_arg$1, _arg$2])); /* */ $s = 26; case 26: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }\n\t\t\t\t_r$14;\n\t\t\t\t/* continue; */ $s = 1; continue;\n\t\t\t/* } */ case 24:\n\t\t\tdec = p.dec;\n\t\t\t/* */ if (!((wire === 3)) && !((wire === p.WireType))) { $s = 27; continue; }\n\t\t\t/* */ $s = 28; continue;\n\t\t\t/* if (!((wire === 3)) && !((wire === p.WireType))) { */ case 27:\n\t\t\t\t/* */ if ((wire === 2) && !(p.packedDec === $throwNilPointerError)) { $s = 29; continue; }\n\t\t\t\t/* */ $s = 30; continue;\n\t\t\t\t/* if ((wire === 2) && !(p.packedDec === $throwNilPointerError)) { */ case 29:\n\t\t\t\t\tdec = p.packedDec;\n\t\t\t\t\t$s = 31; continue;\n\t\t\t\t/* } else { */ case 30:\n\t\t\t\t\t_arg$3 = st;\n\t\t\t\t\t_r$15 = st.Field(fieldnum); /* */ $s = 32; case 32: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }\n\t\t\t\t\t_arg$4 = new $String(_r$15.Name);\n\t\t\t\t\t_arg$5 = new $Int(wire);\n\t\t\t\t\t_arg$6 = new $Int(p.WireType);\n\t\t\t\t\t_r$16 = fmt.Errorf(\"proto: bad wiretype for field %s.%s: got wiretype %d, want %d\", new sliceType$2([_arg$3, _arg$4, _arg$5, _arg$6])); /* */ $s = 33; case 33: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }\n\t\t\t\t\terr = _r$16;\n\t\t\t\t\t/* continue; */ $s = 1; continue;\n\t\t\t\t/* } */ case 31:\n\t\t\t/* } */ case 28:\n\t\t\t_r$17 = dec(o, p, base); /* */ $s = 34; case 34: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }\n\t\t\tdecErr = _r$17;\n\t\t\tif (!($interfaceIsEqual(decErr, $ifaceNil)) && !state.shouldContinue(decErr, p)) {\n\t\t\t\terr = decErr;\n\t\t\t}\n\t\t\tif ($interfaceIsEqual(err, $ifaceNil) && p.Required) {\n\t\t\t\tif (tag <= 64) {\n\t\t\t\t\tmask = $shiftLeft64(new $Uint64(0, 1), $flatten64(new $Uint64(0, (tag - 1 >> 0))));\n\t\t\t\t\tif ((x$1 = new $Uint64(reqFields.$high & mask.$high, (reqFields.$low & mask.$low) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {\n\t\t\t\t\t\treqFields = (x$2 = mask, new $Uint64(reqFields.$high | x$2.$high, (reqFields.$low | x$2.$low) >>> 0));\n\t\t\t\t\t\trequired = required - (1) >> 0;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trequired = required - (1) >> 0;\n\t\t\t\t}\n\t\t\t}\n\t\t/* } */ $s = 1; continue; case 2:\n\t\tif ($interfaceIsEqual(err, $ifaceNil)) {\n\t\t\tif (is_group) {\n\t\t\t\treturn io.ErrUnexpectedEOF;\n\t\t\t}\n\t\t\tif (!($interfaceIsEqual(state.err, $ifaceNil))) {\n\t\t\t\treturn state.err;\n\t\t\t}\n\t\t\tif (required > 0) {\n\t\t\t\treturn new RequiredNotSetError.ptr(\"{Unknown}\");\n\t\t\t}\n\t\t}\n\t\treturn err;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.unmarshalType }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._entry = _entry; $f._key = _key; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.base = base; $f.dec = dec; $f.decErr = decErr; $f.e = e; $f.err = err; $f.ext = ext; $f.fieldnum = fieldnum; $f.is_group = is_group; $f.mask = mask; $f.o = o; $f.oi = oi; $f.ok = ok; $f.p = p; $f.prop = prop; $f.reqFields = reqFields; $f.required = required; $f.st = st; $f.state = state; $f.tag = tag; $f.u = u; $f.wire = wire; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.unmarshalType = function(st, prop, is_group, base) { return this.$val.unmarshalType(st, prop, is_group, base); };\n\tBuffer.ptr.prototype.dec_bool = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, base, err, o, p, u, x, x$1, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; base = $f.base; err = $f.err; o = $f.o; p = $f.p; u = $f.u; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = p.valDec(o); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_tuple = _r$5; u = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\tif (o.bools.$length === 0) {\n\t\t\to.bools = $makeSlice(sliceType$3, 16);\n\t\t}\n\t\t(x = o.bools, (0 >= x.$length ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + 0] = !((u.$high === 0 && u.$low === 0))));\n\t\t_r$6 = structPointer_Bool(base, p.field); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_r$6.$set((x$1 = o.bools, $indexPtr(x$1.$array, x$1.$offset + 0, ptrType$8)));\n\t\to.bools = $subslice(o.bools, 1);\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_bool }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.base = base; $f.err = err; $f.o = o; $f.p = p; $f.u = u; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_bool = function(p, base) { return this.$val.dec_bool(p, base); };\n\tBuffer.ptr.prototype.dec_proto3_bool = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, base, err, o, p, u, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; base = $f.base; err = $f.err; o = $f.o; p = $f.p; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = p.valDec(o); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_tuple = _r$5; u = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\t_r$6 = structPointer_BoolVal(base, p.field); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_r$6.$set(!((u.$high === 0 && u.$low === 0)));\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_proto3_bool }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.base = base; $f.err = err; $f.o = o; $f.p = p; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_proto3_bool = function(p, base) { return this.$val.dec_proto3_bool(p, base); };\n\tBuffer.ptr.prototype.dec_int32 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, base, err, o, p, u, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; base = $f.base; err = $f.err; o = $f.o; p = $f.p; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = p.valDec(o); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_tuple = _r$5; u = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\t_r$6 = structPointer_Word32(base, p.field); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t$r = word32_Set(_r$6, o, (u.$low >>> 0)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_int32 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.base = base; $f.err = err; $f.o = o; $f.p = p; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_int32 = function(p, base) { return this.$val.dec_int32(p, base); };\n\tBuffer.ptr.prototype.dec_proto3_int32 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, base, err, o, p, u, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; base = $f.base; err = $f.err; o = $f.o; p = $f.p; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = p.valDec(o); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_tuple = _r$5; u = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\t_r$6 = structPointer_Word32Val(base, p.field); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t$r = word32Val_Set(_r$6, (u.$low >>> 0)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_proto3_int32 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.base = base; $f.err = err; $f.o = o; $f.p = p; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_proto3_int32 = function(p, base) { return this.$val.dec_proto3_int32(p, base); };\n\tBuffer.ptr.prototype.dec_int64 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, base, err, o, p, u, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; base = $f.base; err = $f.err; o = $f.o; p = $f.p; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = p.valDec(o); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_tuple = _r$5; u = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\t_r$6 = structPointer_Word64(base, p.field); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t$r = word64_Set(_r$6, o, u); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_int64 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.base = base; $f.err = err; $f.o = o; $f.p = p; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_int64 = function(p, base) { return this.$val.dec_int64(p, base); };\n\tBuffer.ptr.prototype.dec_proto3_int64 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, base, err, o, p, u, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; base = $f.base; err = $f.err; o = $f.o; p = $f.p; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = p.valDec(o); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_tuple = _r$5; u = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\t_r$6 = structPointer_Word64Val(base, p.field); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t$r = word64Val_Set(_r$6, o, u); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_proto3_int64 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.base = base; $f.err = err; $f.o = o; $f.p = p; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_proto3_int64 = function(p, base) { return this.$val.dec_proto3_int64(p, base); };\n\tBuffer.ptr.prototype.dec_string = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, base, err, o, p, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; base = $f.base; err = $f.err; o = $f.o; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ts = [s];\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = o.DecodeStringBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_tuple = _r$5; s[0] = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\t_r$6 = structPointer_String(base, p.field); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_r$6.$set((s.$ptr || (s.$ptr = new ptrType$9(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, s))));\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_string }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.base = base; $f.err = err; $f.o = o; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_string = function(p, base) { return this.$val.dec_string(p, base); };\n\tBuffer.ptr.prototype.dec_proto3_string = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, base, err, o, p, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; base = $f.base; err = $f.err; o = $f.o; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = o.DecodeStringBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_tuple = _r$5; s = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\t_r$6 = structPointer_StringVal(base, p.field); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_r$6.$set(s);\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_proto3_string }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.base = base; $f.err = err; $f.o = o; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_proto3_string = function(p, base) { return this.$val.dec_proto3_string(p, base); };\n\tBuffer.ptr.prototype.dec_slice_byte = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, b, base, err, o, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; b = $f.b; base = $f.base; err = $f.err; o = $f.o; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = o.DecodeRawBytes(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_tuple = _r$5; b = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\t_r$6 = structPointer_Bytes(base, p.field); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_r$6.$set(b);\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_slice_byte }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.b = b; $f.base = base; $f.err = err; $f.o = o; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_slice_byte = function(p, base) { return this.$val.dec_slice_byte(p, base); };\n\tBuffer.ptr.prototype.dec_slice_bool = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, base, err, o, p, u, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; base = $f.base; err = $f.err; o = $f.o; p = $f.p; u = $f.u; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = p.valDec(o); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_tuple = _r$5; u = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\t_r$6 = structPointer_BoolSlice(base, p.field); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tv = _r$6;\n\t\tv.$set($append(v.$get(), !((u.$high === 0 && u.$low === 0))));\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_slice_bool }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.base = base; $f.err = err; $f.o = o; $f.p = p; $f.u = u; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_slice_bool = function(p, base) { return this.$val.dec_slice_bool(p, base); };\n\tBuffer.ptr.prototype.dec_slice_packed_bool = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, _tuple$1, base, err, err$1, i, nb, nn, o, p, u, v, y, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; base = $f.base; err = $f.err; err$1 = $f.err$1; i = $f.i; nb = $f.nb; nn = $f.nn; o = $f.o; p = $f.p; u = $f.u; v = $f.v; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_BoolSlice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = _r$5;\n\t\t_tuple = o.DecodeVarint(); nn = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\tnb = (nn.$low >> 0);\n\t\ty = v.$get();\n\t\ti = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(i < nb)) { break; } */ if(!(i < nb)) { $s = 3; continue; }\n\t\t\t_r$6 = p.valDec(o); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_tuple$1 = _r$6; u = _tuple$1[0]; err$1 = _tuple$1[1];\n\t\t\tif (!($interfaceIsEqual(err$1, $ifaceNil))) {\n\t\t\t\treturn err$1;\n\t\t\t}\n\t\t\ty = $append(y, !((u.$high === 0 && u.$low === 0)));\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\tv.$set(y);\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_slice_packed_bool }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.base = base; $f.err = err; $f.err$1 = err$1; $f.i = i; $f.nb = nb; $f.nn = nn; $f.o = o; $f.p = p; $f.u = u; $f.v = v; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_slice_packed_bool = function(p, base) { return this.$val.dec_slice_packed_bool(p, base); };\n\tBuffer.ptr.prototype.dec_slice_int32 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, base, err, o, p, u, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; base = $f.base; err = $f.err; o = $f.o; p = $f.p; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = p.valDec(o); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_tuple = _r$5; u = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\t_r$6 = structPointer_Word32Slice(base, p.field); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t$r = _r$6.Append((u.$low >>> 0)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_slice_int32 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.base = base; $f.err = err; $f.o = o; $f.p = p; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_slice_int32 = function(p, base) { return this.$val.dec_slice_int32(p, base); };\n\tBuffer.ptr.prototype.dec_slice_packed_int32 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, _tuple$1, base, err, err$1, fin, nb, nn, o, p, u, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; base = $f.base; err = $f.err; err$1 = $f.err$1; fin = $f.fin; nb = $f.nb; nn = $f.nn; o = $f.o; p = $f.p; u = $f.u; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word32Slice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = $clone(_r$5, word32Slice);\n\t\t_tuple = o.DecodeVarint(); nn = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\tnb = (nn.$low >> 0);\n\t\tfin = o.index + nb >> 0;\n\t\tif (fin < o.index) {\n\t\t\treturn errOverflow;\n\t\t}\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(o.index < fin)) { break; } */ if(!(o.index < fin)) { $s = 3; continue; }\n\t\t\t_r$6 = p.valDec(o); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_tuple$1 = _r$6; u = _tuple$1[0]; err$1 = _tuple$1[1];\n\t\t\tif (!($interfaceIsEqual(err$1, $ifaceNil))) {\n\t\t\t\treturn err$1;\n\t\t\t}\n\t\t\t$r = v.Append((u.$low >>> 0)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ $s = 2; continue; case 3:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_slice_packed_int32 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.base = base; $f.err = err; $f.err$1 = err$1; $f.fin = fin; $f.nb = nb; $f.nn = nn; $f.o = o; $f.p = p; $f.u = u; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_slice_packed_int32 = function(p, base) { return this.$val.dec_slice_packed_int32(p, base); };\n\tBuffer.ptr.prototype.dec_slice_int64 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, base, err, o, p, u, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; base = $f.base; err = $f.err; o = $f.o; p = $f.p; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = p.valDec(o); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_tuple = _r$5; u = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\t_r$6 = structPointer_Word64Slice(base, p.field); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t$r = _r$6.Append(u); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_slice_int64 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.base = base; $f.err = err; $f.o = o; $f.p = p; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_slice_int64 = function(p, base) { return this.$val.dec_slice_int64(p, base); };\n\tBuffer.ptr.prototype.dec_slice_packed_int64 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, _tuple$1, base, err, err$1, fin, nb, nn, o, p, u, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; base = $f.base; err = $f.err; err$1 = $f.err$1; fin = $f.fin; nb = $f.nb; nn = $f.nn; o = $f.o; p = $f.p; u = $f.u; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word64Slice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = $clone(_r$5, word64Slice);\n\t\t_tuple = o.DecodeVarint(); nn = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\tnb = (nn.$low >> 0);\n\t\tfin = o.index + nb >> 0;\n\t\tif (fin < o.index) {\n\t\t\treturn errOverflow;\n\t\t}\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(o.index < fin)) { break; } */ if(!(o.index < fin)) { $s = 3; continue; }\n\t\t\t_r$6 = p.valDec(o); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_tuple$1 = _r$6; u = _tuple$1[0]; err$1 = _tuple$1[1];\n\t\t\tif (!($interfaceIsEqual(err$1, $ifaceNil))) {\n\t\t\t\treturn err$1;\n\t\t\t}\n\t\t\t$r = v.Append(u); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ $s = 2; continue; case 3:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_slice_packed_int64 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.base = base; $f.err = err; $f.err$1 = err$1; $f.fin = fin; $f.nb = nb; $f.nn = nn; $f.o = o; $f.p = p; $f.u = u; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_slice_packed_int64 = function(p, base) { return this.$val.dec_slice_packed_int64(p, base); };\n\tBuffer.ptr.prototype.dec_slice_string = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, base, err, o, p, s, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; base = $f.base; err = $f.err; o = $f.o; p = $f.p; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = o.DecodeStringBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_tuple = _r$5; s = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\t_r$6 = structPointer_StringSlice(base, p.field); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tv = _r$6;\n\t\tv.$set($append(v.$get(), s));\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_slice_string }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.base = base; $f.err = err; $f.o = o; $f.p = p; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_slice_string = function(p, base) { return this.$val.dec_slice_string(p, base); };\n\tBuffer.ptr.prototype.dec_slice_slice_byte = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, b, base, err, o, p, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; b = $f.b; base = $f.base; err = $f.err; o = $f.o; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = o.DecodeRawBytes(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_tuple = _r$5; b = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\t_r$6 = structPointer_BytesSlice(base, p.field); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tv = _r$6;\n\t\tv.$set($append(v.$get(), b));\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_slice_slice_byte }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.b = b; $f.base = base; $f.err = err; $f.o = o; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_slice_slice_byte = function(p, base) { return this.$val.dec_slice_slice_byte(p, base); };\n\tBuffer.ptr.prototype.dec_new_map = function(p, base) {\n\t\tvar $ptr, _arg, _arg$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple, base, dummy, err, err$1, err$2, keybase, keyptr, mptr, o, oi, p, raw$1, tagcode, v, valbase, valptr, x, x$1, x$2, x$3, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; base = $f.base; dummy = $f.dummy; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; keybase = $f.keybase; keyptr = $f.keyptr; mptr = $f.mptr; o = $f.o; oi = $f.oi; p = $f.p; raw$1 = $f.raw$1; tagcode = $f.tagcode; v = $f.v; valbase = $f.valbase; valptr = $f.valptr; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tdummy = [dummy];\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = o.DecodeRawBytes(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_tuple = _r$5; raw$1 = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\toi = o.index;\n\t\to.index = o.index - (raw$1.$length) >> 0;\n\t\t_r$6 = structPointer_Map(base, p.field, p.mtype); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tmptr = _r$6;\n\t\t_r$7 = mptr.Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t_r$8 = _r$7.IsNil(); /* */ $s = 6; case 6: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t/* */ if (_r$8) { $s = 3; continue; }\n\t\t/* */ $s = 4; continue;\n\t\t/* if (_r$8) { */ case 3:\n\t\t\t_r$9 = mptr.Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\t_r$10 = mptr.Type().Elem(); /* */ $s = 8; case 8: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\t_r$11 = reflect.MakeMap(_r$10); /* */ $s = 9; case 9: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t\t$r = _r$9.Set(_r$11); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 4:\n\t\t_r$12 = mptr.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\tv = _r$12;\n\t\t_r$13 = p.mtype.Key(); /* */ $s = 12; case 12: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }\n\t\t_r$14 = reflect.PtrTo(_r$13); /* */ $s = 13; case 13: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }\n\t\t_r$15 = reflect.New(_r$14); /* */ $s = 14; case 14: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }\n\t\t_r$16 = _r$15.Elem(); /* */ $s = 15; case 15: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }\n\t\tkeyptr = _r$16;\n\t\tkeybase = $clone(toStructPointer(keyptr.Addr()), structPointer);\n\t\tvalbase = $clone(new structPointer.ptr(), structPointer);\n\t\tvalptr = new reflect.Value.ptr();\n\t\t_r$17 = p.mtype.Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }\n\t\t_r$18 = _r$17.Kind(); /* */ $s = 17; case 17: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }\n\t\t_ref = _r$18;\n\t\t/* */ if (_ref === 23) { $s = 18; continue; }\n\t\t/* */ if (_ref === 22) { $s = 19; continue; }\n\t\t/* */ $s = 20; continue;\n\t\t/* if (_ref === 23) { */ case 18:\n\t\t\tdummy[0] = sliceType.nil;\n\t\t\t_r$19 = reflect.ValueOf((dummy.$ptr || (dummy.$ptr = new ptrType$10(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, dummy)))); /* */ $s = 22; case 22: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }\n\t\t\tvalptr = _r$19;\n\t\t\t$copy(valbase, toStructPointer(valptr), structPointer);\n\t\t\t$s = 21; continue;\n\t\t/* } else if (_ref === 22) { */ case 19:\n\t\t\t_r$20 = p.mtype.Elem(); /* */ $s = 23; case 23: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }\n\t\t\t_r$21 = reflect.PtrTo(_r$20); /* */ $s = 24; case 24: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }\n\t\t\t_r$22 = reflect.New(_r$21); /* */ $s = 25; case 25: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }\n\t\t\t_r$23 = _r$22.Elem(); /* */ $s = 26; case 26: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }\n\t\t\tvalptr = _r$23;\n\t\t\t_r$24 = valptr.Type().Elem(); /* */ $s = 27; case 27: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }\n\t\t\t_r$25 = reflect.New(_r$24); /* */ $s = 28; case 28: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }\n\t\t\t$r = valptr.Set(_r$25); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$copy(valbase, toStructPointer(valptr), structPointer);\n\t\t\t$s = 21; continue;\n\t\t/* } else { */ case 20:\n\t\t\t_r$26 = p.mtype.Elem(); /* */ $s = 30; case 30: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }\n\t\t\t_r$27 = reflect.PtrTo(_r$26); /* */ $s = 31; case 31: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }\n\t\t\t_r$28 = reflect.New(_r$27); /* */ $s = 32; case 32: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }\n\t\t\t_r$29 = _r$28.Elem(); /* */ $s = 33; case 33: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }\n\t\t\tvalptr = _r$29;\n\t\t\t$copy(valbase, toStructPointer(valptr.Addr()), structPointer);\n\t\t/* } */ case 21:\n\t\t/* while (true) { */ case 34:\n\t\t\t/* if (!(o.index < oi)) { break; } */ if(!(o.index < oi)) { $s = 35; continue; }\n\t\t\ttagcode = (x = o.buf, x$1 = o.index, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + x$1]));\n\t\t\to.index = o.index + (1) >> 0;\n\t\t\t_ref$1 = tagcode;\n\t\t\t/* */ if (_ref$1 === (x$2 = p.mkeyprop.tagcode, (0 >= x$2.$length ? $throwRuntimeError(\"index out of range\") : x$2.$array[x$2.$offset + 0]))) { $s = 36; continue; }\n\t\t\t/* */ if (_ref$1 === (x$3 = p.mvalprop.tagcode, (0 >= x$3.$length ? $throwRuntimeError(\"index out of range\") : x$3.$array[x$3.$offset + 0]))) { $s = 37; continue; }\n\t\t\t/* */ $s = 38; continue;\n\t\t\t/* if (_ref$1 === (x$2 = p.mkeyprop.tagcode, (0 >= x$2.$length ? $throwRuntimeError(\"index out of range\") : x$2.$array[x$2.$offset + 0]))) { */ case 36:\n\t\t\t\t_r$30 = p.mkeyprop.dec(o, p.mkeyprop, keybase); /* */ $s = 40; case 40: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }\n\t\t\t\terr$1 = _r$30;\n\t\t\t\t/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 41; continue; }\n\t\t\t\t/* */ $s = 42; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 41:\n\t\t\t\t\treturn err$1;\n\t\t\t\t/* } */ case 42:\n\t\t\t\t$s = 39; continue;\n\t\t\t/* } else if (_ref$1 === (x$3 = p.mvalprop.tagcode, (0 >= x$3.$length ? $throwRuntimeError(\"index out of range\") : x$3.$array[x$3.$offset + 0]))) { */ case 37:\n\t\t\t\t_r$31 = p.mvalprop.dec(o, p.mvalprop, valbase); /* */ $s = 43; case 43: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }\n\t\t\t\terr$2 = _r$31;\n\t\t\t\t/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 44; continue; }\n\t\t\t\t/* */ $s = 45; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 44:\n\t\t\t\t\treturn err$2;\n\t\t\t\t/* } */ case 45:\n\t\t\t\t$s = 39; continue;\n\t\t\t/* } else { */ case 38:\n\t\t\t\t_r$32 = fmt.Errorf(\"proto: bad map data tag %d\", new sliceType$2([new $Uint8((0 >= raw$1.$length ? $throwRuntimeError(\"index out of range\") : raw$1.$array[raw$1.$offset + 0]))])); /* */ $s = 46; case 46: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }\n\t\t\t\treturn _r$32;\n\t\t\t/* } */ case 39:\n\t\t/* } */ $s = 34; continue; case 35:\n\t\t_r$33 = keyptr.Elem(); /* */ $s = 47; case 47: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }\n\t\t_arg = _r$33;\n\t\t_r$34 = valptr.Elem(); /* */ $s = 48; case 48: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }\n\t\t_arg$1 = _r$34;\n\t\t$r = v.SetMapIndex(_arg, _arg$1); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_new_map }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.base = base; $f.dummy = dummy; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.keybase = keybase; $f.keyptr = keyptr; $f.mptr = mptr; $f.o = o; $f.oi = oi; $f.p = p; $f.raw$1 = raw$1; $f.tagcode = tagcode; $f.v = v; $f.valbase = valbase; $f.valptr = valptr; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_new_map = function(p, base) { return this.$val.dec_new_map(p, base); };\n\tBuffer.ptr.prototype.dec_struct_group = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, _r$8, bas, base, o, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; bas = $f.bas; base = $f.base; o = $f.o; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_GetStructPointer(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tbas = $clone(_r$5, structPointer);\n\t\t/* */ if (structPointer_IsNil(bas)) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (structPointer_IsNil(bas)) { */ case 2:\n\t\t\t_r$6 = reflect.New(p.stype); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_r$7 = toStructPointer(_r$6); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t$copy(bas, _r$7, structPointer);\n\t\t\t$r = structPointer_SetStructPointer(base, p.field, bas); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 3:\n\t\t_r$8 = o.unmarshalType(p.stype, p.sprop, true, bas); /* */ $s = 7; case 7: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\treturn _r$8;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_struct_group }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.bas = bas; $f.base = base; $f.o = o; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_struct_group = function(p, base) { return this.$val.dec_struct_group(p, base); };\n\tBuffer.ptr.prototype.dec_struct_message = function(p, base) {\n\t\tvar $ptr, _r$10, _r$11, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, bas, base, e, err, iv, o, obuf, oi, p, raw$1, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; bas = $f.bas; base = $f.base; e = $f.e; err = $f.err; iv = $f.iv; o = $f.o; obuf = $f.obuf; oi = $f.oi; p = $f.p; raw$1 = $f.raw$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\terr = $ifaceNil;\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = o.DecodeRawBytes(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_tuple = _r$5; raw$1 = _tuple[0]; e = _tuple[1];\n\t\tif (!($interfaceIsEqual(e, $ifaceNil))) {\n\t\t\terr = e;\n\t\t\treturn err;\n\t\t}\n\t\t_r$6 = structPointer_GetStructPointer(base, p.field); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tbas = $clone(_r$6, structPointer);\n\t\t/* */ if (structPointer_IsNil(bas)) { $s = 3; continue; }\n\t\t/* */ $s = 4; continue;\n\t\t/* if (structPointer_IsNil(bas)) { */ case 3:\n\t\t\t_r$7 = reflect.New(p.stype); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t_r$8 = toStructPointer(_r$7); /* */ $s = 6; case 6: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t$copy(bas, _r$8, structPointer);\n\t\t\t$r = structPointer_SetStructPointer(base, p.field, bas); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 4:\n\t\t/* */ if (p.isUnmarshaler) { $s = 8; continue; }\n\t\t/* */ $s = 9; continue;\n\t\t/* if (p.isUnmarshaler) { */ case 8:\n\t\t\t_r$9 = structPointer_Interface(bas, p.stype); /* */ $s = 10; case 10: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\tiv = _r$9;\n\t\t\t_r$10 = $assertType(iv, Unmarshaler).Unmarshal(raw$1); /* */ $s = 11; case 11: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\terr = _r$10;\n\t\t\treturn err;\n\t\t/* } */ case 9:\n\t\tobuf = o.buf;\n\t\toi = o.index;\n\t\to.buf = raw$1;\n\t\to.index = 0;\n\t\t_r$11 = o.unmarshalType(p.stype, p.sprop, false, bas); /* */ $s = 12; case 12: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\terr = _r$11;\n\t\to.buf = obuf;\n\t\to.index = oi;\n\t\terr = err;\n\t\treturn err;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_struct_message }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.bas = bas; $f.base = base; $f.e = e; $f.err = err; $f.iv = iv; $f.o = o; $f.obuf = obuf; $f.oi = oi; $f.p = p; $f.raw$1 = raw$1; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_struct_message = function(p, base) { return this.$val.dec_struct_message(p, base); };\n\tBuffer.ptr.prototype.dec_slice_struct_message = function(p, base) {\n\t\tvar $ptr, _r$5, base, o, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; base = $f.base; o = $f.o; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = o.dec_slice_struct(p, false, base); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn _r$5;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_slice_struct_message }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.base = base; $f.o = o; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_slice_struct_message = function(p, base) { return this.$val.dec_slice_struct_message(p, base); };\n\tBuffer.ptr.prototype.dec_slice_struct_group = function(p, base) {\n\t\tvar $ptr, _r$5, base, o, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; base = $f.base; o = $f.o; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = o.dec_slice_struct(p, true, base); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn _r$5;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_slice_struct_group }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.base = base; $f.o = o; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_slice_struct_group = function(p, base) { return this.$val.dec_slice_struct_group(p, base); };\n\tBuffer.ptr.prototype.dec_slice_struct = function(p, is_group, base) {\n\t\tvar $ptr, _r$10, _r$11, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, bas, base, err, err$1, is_group, iv, o, obuf, oi, p, raw$1, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; bas = $f.bas; base = $f.base; err = $f.err; err$1 = $f.err$1; is_group = $f.is_group; iv = $f.iv; o = $f.o; obuf = $f.obuf; oi = $f.oi; p = $f.p; raw$1 = $f.raw$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = reflect.New(p.stype); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = _r$5;\n\t\tbas = $clone(toStructPointer(v), structPointer);\n\t\t_r$6 = structPointer_StructPointerSlice(base, p.field); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t$r = _r$6.Append(bas); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ if (is_group) { $s = 4; continue; }\n\t\t/* */ $s = 5; continue;\n\t\t/* if (is_group) { */ case 4:\n\t\t\t_r$7 = o.unmarshalType(p.stype, p.sprop, is_group, bas); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\terr = _r$7;\n\t\t\treturn err;\n\t\t/* } */ case 5:\n\t\t_r$8 = o.DecodeRawBytes(false); /* */ $s = 7; case 7: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t_tuple = _r$8; raw$1 = _tuple[0]; err$1 = _tuple[1];\n\t\tif (!($interfaceIsEqual(err$1, $ifaceNil))) {\n\t\t\treturn err$1;\n\t\t}\n\t\t/* */ if (p.isUnmarshaler) { $s = 8; continue; }\n\t\t/* */ $s = 9; continue;\n\t\t/* if (p.isUnmarshaler) { */ case 8:\n\t\t\t_r$9 = v.Interface(); /* */ $s = 10; case 10: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\tiv = _r$9;\n\t\t\t_r$10 = $assertType(iv, Unmarshaler).Unmarshal(raw$1); /* */ $s = 11; case 11: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\treturn _r$10;\n\t\t/* } */ case 9:\n\t\tobuf = o.buf;\n\t\toi = o.index;\n\t\to.buf = raw$1;\n\t\to.index = 0;\n\t\t_r$11 = o.unmarshalType(p.stype, p.sprop, is_group, bas); /* */ $s = 12; case 12: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\terr$1 = _r$11;\n\t\to.buf = obuf;\n\t\to.index = oi;\n\t\treturn err$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.dec_slice_struct }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.bas = bas; $f.base = base; $f.err = err; $f.err$1 = err$1; $f.is_group = is_group; $f.iv = iv; $f.o = o; $f.obuf = obuf; $f.oi = oi; $f.p = p; $f.raw$1 = raw$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.dec_slice_struct = function(p, is_group, base) { return this.$val.dec_slice_struct(p, is_group, base); };\n\tRequiredNotSetError.ptr.prototype.Error = function() {\n\t\tvar $ptr, _r$5, e, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\te = this;\n\t\t_r$5 = fmt.Sprintf(\"proto: required field %q not set\", new sliceType$2([new $String(e.field)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn _r$5;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RequiredNotSetError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tRequiredNotSetError.prototype.Error = function() { return this.$val.Error(); };\n\tBuffer.ptr.prototype.EncodeVarint = function(x) {\n\t\tvar $ptr, p, x, x$1;\n\t\tp = this;\n\t\twhile (true) {\n\t\t\tif (!((x.$high > 0 || (x.$high === 0 && x.$low >= 128)))) { break; }\n\t\t\tp.buf = $append(p.buf, ((x$1 = new $Uint64(x.$high & 0, (x.$low & 127) >>> 0), new $Uint64(x$1.$high | 0, (x$1.$low | 128) >>> 0)).$low << 24 >>> 24));\n\t\t\tx = $shiftRightUint64(x, (7));\n\t\t}\n\t\tp.buf = $append(p.buf, (x.$low << 24 >>> 24));\n\t\treturn $ifaceNil;\n\t};\n\tBuffer.prototype.EncodeVarint = function(x) { return this.$val.EncodeVarint(x); };\n\tsizeVarint = function(x) {\n\t\tvar $ptr, n, x;\n\t\tn = 0;\n\t\twhile (true) {\n\t\t\tn = n + (1) >> 0;\n\t\t\tx = $shiftRightUint64(x, (7));\n\t\t\tif ((x.$high === 0 && x.$low === 0)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tn = n;\n\t\treturn n;\n\t};\n\tBuffer.ptr.prototype.EncodeFixed64 = function(x) {\n\t\tvar $ptr, p, x;\n\t\tp = this;\n\t\tp.buf = $append(p.buf, (x.$low << 24 >>> 24), ($shiftRightUint64(x, 8).$low << 24 >>> 24), ($shiftRightUint64(x, 16).$low << 24 >>> 24), ($shiftRightUint64(x, 24).$low << 24 >>> 24), ($shiftRightUint64(x, 32).$low << 24 >>> 24), ($shiftRightUint64(x, 40).$low << 24 >>> 24), ($shiftRightUint64(x, 48).$low << 24 >>> 24), ($shiftRightUint64(x, 56).$low << 24 >>> 24));\n\t\treturn $ifaceNil;\n\t};\n\tBuffer.prototype.EncodeFixed64 = function(x) { return this.$val.EncodeFixed64(x); };\n\tsizeFixed64 = function(x) {\n\t\tvar $ptr, x;\n\t\treturn 8;\n\t};\n\tBuffer.ptr.prototype.EncodeFixed32 = function(x) {\n\t\tvar $ptr, p, x;\n\t\tp = this;\n\t\tp.buf = $append(p.buf, (x.$low << 24 >>> 24), ($shiftRightUint64(x, 8).$low << 24 >>> 24), ($shiftRightUint64(x, 16).$low << 24 >>> 24), ($shiftRightUint64(x, 24).$low << 24 >>> 24));\n\t\treturn $ifaceNil;\n\t};\n\tBuffer.prototype.EncodeFixed32 = function(x) { return this.$val.EncodeFixed32(x); };\n\tsizeFixed32 = function(x) {\n\t\tvar $ptr, x;\n\t\treturn 4;\n\t};\n\tBuffer.ptr.prototype.EncodeZigzag64 = function(x) {\n\t\tvar $ptr, p, x, x$1, x$2, x$3;\n\t\tp = this;\n\t\treturn p.EncodeVarint((x$1 = $shiftLeft64(x, 1), x$2 = (x$3 = $shiftRightInt64(new $Int64(x.$high, x.$low), 63), new $Uint64(x$3.$high, x$3.$low)), new $Uint64(x$1.$high ^ x$2.$high, (x$1.$low ^ x$2.$low) >>> 0)));\n\t};\n\tBuffer.prototype.EncodeZigzag64 = function(x) { return this.$val.EncodeZigzag64(x); };\n\tsizeZigzag64 = function(x) {\n\t\tvar $ptr, x, x$1, x$2, x$3;\n\t\treturn sizeVarint((x$1 = $shiftLeft64(x, 1), x$2 = (x$3 = $shiftRightInt64(new $Int64(x.$high, x.$low), 63), new $Uint64(x$3.$high, x$3.$low)), new $Uint64(x$1.$high ^ x$2.$high, (x$1.$low ^ x$2.$low) >>> 0)));\n\t};\n\tBuffer.ptr.prototype.EncodeZigzag32 = function(x) {\n\t\tvar $ptr, p, x;\n\t\tp = this;\n\t\treturn p.EncodeVarint(new $Uint64(0, (((((x.$low >>> 0) << 1 >>> 0)) ^ ((((x.$low >> 0) >> 31 >> 0)) >>> 0)) >>> 0)));\n\t};\n\tBuffer.prototype.EncodeZigzag32 = function(x) { return this.$val.EncodeZigzag32(x); };\n\tsizeZigzag32 = function(x) {\n\t\tvar $ptr, x;\n\t\treturn sizeVarint(new $Uint64(0, (((((x.$low >>> 0) << 1 >>> 0)) ^ ((((x.$low >> 0) >> 31 >> 0)) >>> 0)) >>> 0)));\n\t};\n\tBuffer.ptr.prototype.EncodeRawBytes = function(b) {\n\t\tvar $ptr, b, p;\n\t\tp = this;\n\t\tp.EncodeVarint(new $Uint64(0, b.$length));\n\t\tp.buf = $appendSlice(p.buf, b);\n\t\treturn $ifaceNil;\n\t};\n\tBuffer.prototype.EncodeRawBytes = function(b) { return this.$val.EncodeRawBytes(b); };\n\tsizeRawBytes = function(b) {\n\t\tvar $ptr, b;\n\t\treturn sizeVarint(new $Uint64(0, b.$length)) + b.$length >> 0;\n\t};\n\tBuffer.ptr.prototype.EncodeStringBytes = function(s) {\n\t\tvar $ptr, p, s;\n\t\tp = this;\n\t\tp.EncodeVarint(new $Uint64(0, s.length));\n\t\tp.buf = $appendSlice(p.buf, new sliceType($stringToBytes(s)));\n\t\treturn $ifaceNil;\n\t};\n\tBuffer.prototype.EncodeStringBytes = function(s) { return this.$val.EncodeStringBytes(s); };\n\tsizeStringBytes = function(s) {\n\t\tvar $ptr, s;\n\t\treturn sizeVarint(new $Uint64(0, s.length)) + s.length >> 0;\n\t};\n\tMarshal = function(pb) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, err, m, ok, p, pb, state, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; err = $f.err; m = $f.m; ok = $f.ok; p = $f.p; pb = $f.pb; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_tuple = $assertType(pb, Marshaler, true); m = _tuple[0]; ok = _tuple[1];\n\t\t/* */ if (ok) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (ok) { */ case 1:\n\t\t\t_r$5 = m.Marshal(); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\treturn _r$5;\n\t\t/* } */ case 2:\n\t\tp = NewBuffer(sliceType.nil);\n\t\t_r$6 = p.Marshal(pb); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\terr = _r$6;\n\t\tstate = $clone(new errorState.ptr(), errorState);\n\t\tif (!($interfaceIsEqual(err, $ifaceNil)) && !state.shouldContinue(err, ptrType$1.nil)) {\n\t\t\treturn [sliceType.nil, err];\n\t\t}\n\t\tif (p.buf === sliceType.nil && $interfaceIsEqual(err, $ifaceNil)) {\n\t\t\treturn [new sliceType([]), $ifaceNil];\n\t\t}\n\t\treturn [p.buf, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Marshal }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.err = err; $f.m = m; $f.ok = ok; $f.p = p; $f.pb = pb; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Marshal = Marshal;\n\tBuffer.ptr.prototype.Marshal = function(pb) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, base, data, err, err$1, m, ok, p, pb, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; base = $f.base; data = $f.data; err = $f.err; err$1 = $f.err$1; m = $f.m; ok = $f.ok; p = $f.p; pb = $f.pb; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\t_tuple = $assertType(pb, Marshaler, true); m = _tuple[0]; ok = _tuple[1];\n\t\t/* */ if (ok) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (ok) { */ case 1:\n\t\t\t_r$5 = m.Marshal(); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t_tuple$1 = _r$5; data = _tuple$1[0]; err = _tuple$1[1];\n\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\treturn err;\n\t\t\t}\n\t\t\tp.buf = $appendSlice(p.buf, data);\n\t\t\treturn $ifaceNil;\n\t\t/* } */ case 2:\n\t\t_r$6 = getbase(pb); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_tuple$2 = _r$6; t = _tuple$2[0]; base = $clone(_tuple$2[1], structPointer); err$1 = _tuple$2[2];\n\t\tif (structPointer_IsNil(base)) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\t/* */ if ($interfaceIsEqual(err$1, $ifaceNil)) { $s = 5; continue; }\n\t\t/* */ $s = 6; continue;\n\t\t/* if ($interfaceIsEqual(err$1, $ifaceNil)) { */ case 5:\n\t\t\t_r$7 = t.Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t_r$8 = GetProperties(_r$7); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t_r$9 = p.enc_struct(_r$8, base); /* */ $s = 9; case 9: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\terr$1 = _r$9;\n\t\t/* } */ case 6:\n\t\treturn err$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.Marshal }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.base = base; $f.data = data; $f.err = err; $f.err$1 = err$1; $f.m = m; $f.ok = ok; $f.p = p; $f.pb = pb; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.Marshal = function(pb) { return this.$val.Marshal(pb); };\n\tBuffer.ptr.prototype.enc_bool = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, base, o, p, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; base = $f.base; o = $f.o; p = $f.p; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Bool(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = _r$5.$get();\n\t\tif (v === ptrType$8.nil) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\tx = 0;\n\t\tif (v.$get()) {\n\t\t\tx = 1;\n\t\t}\n\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\t_r$6 = p.valEnc(o, new $Uint64(0, x)); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_r$6;\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_bool }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.base = base; $f.o = o; $f.p = p; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_bool = function(p, base) { return this.$val.enc_bool(p, base); };\n\tBuffer.ptr.prototype.enc_proto3_bool = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, base, o, p, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; base = $f.base; o = $f.o; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_BoolVal(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = _r$5.$get();\n\t\tif (!v) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\t_r$6 = p.valEnc(o, new $Uint64(0, 1)); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_r$6;\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_proto3_bool }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.base = base; $f.o = o; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_proto3_bool = function(p, base) { return this.$val.enc_proto3_bool(p, base); };\n\tsize_bool = function(p, base) {\n\t\tvar $ptr, _r$5, base, p, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; base = $f.base; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Bool(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = _r$5.$get();\n\t\tif (v === ptrType$8.nil) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn p.tagcode.$length + 1 >> 0;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_bool }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.base = base; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tsize_proto3_bool = function(p, base) {\n\t\tvar $ptr, _r$5, base, p, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; base = $f.base; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_BoolVal(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = _r$5.$get();\n\t\tif (!v) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn p.tagcode.$length + 1 >> 0;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_proto3_bool }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.base = base; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_int32 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, base, o, p, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; base = $f.base; o = $f.o; p = $f.p; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word32(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = $clone(_r$5, word32);\n\t\tif (word32_IsNil(v)) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\t_r$6 = word32_Get(v); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tx = (_r$6 >> 0);\n\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\t_r$7 = p.valEnc(o, new $Uint64(0, x)); /* */ $s = 3; case 3: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t_r$7;\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_int32 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.base = base; $f.o = o; $f.p = p; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_int32 = function(p, base) { return this.$val.enc_int32(p, base); };\n\tBuffer.ptr.prototype.enc_proto3_int32 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, base, o, p, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; base = $f.base; o = $f.o; p = $f.p; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word32Val(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = $clone(_r$5, word32Val);\n\t\tx = (word32Val_Get(v) >> 0);\n\t\tif (x === 0) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\t_r$6 = p.valEnc(o, new $Uint64(0, x)); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_r$6;\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_proto3_int32 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.base = base; $f.o = o; $f.p = p; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_proto3_int32 = function(p, base) { return this.$val.enc_proto3_int32(p, base); };\n\tsize_int32 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, base, n, p, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; base = $f.base; n = $f.n; p = $f.p; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word32(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = $clone(_r$5, word32);\n\t\tif (word32_IsNil(v)) {\n\t\t\tn = 0;\n\t\t\treturn n;\n\t\t}\n\t\t_r$6 = word32_Get(v); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tx = (_r$6 >> 0);\n\t\tn = n + (p.tagcode.$length) >> 0;\n\t\t_r$7 = p.valSize(new $Uint64(0, x)); /* */ $s = 3; case 3: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\tn = n + (_r$7) >> 0;\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_int32 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.base = base; $f.n = n; $f.p = p; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tsize_proto3_int32 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, base, n, p, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; base = $f.base; n = $f.n; p = $f.p; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word32Val(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = $clone(_r$5, word32Val);\n\t\tx = (word32Val_Get(v) >> 0);\n\t\tif (x === 0) {\n\t\t\tn = 0;\n\t\t\treturn n;\n\t\t}\n\t\tn = n + (p.tagcode.$length) >> 0;\n\t\t_r$6 = p.valSize(new $Uint64(0, x)); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tn = n + (_r$6) >> 0;\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_proto3_int32 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.base = base; $f.n = n; $f.p = p; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_uint32 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, base, o, p, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; base = $f.base; o = $f.o; p = $f.p; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word32(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = $clone(_r$5, word32);\n\t\tif (word32_IsNil(v)) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\t_r$6 = word32_Get(v); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tx = _r$6;\n\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\t_r$7 = p.valEnc(o, new $Uint64(0, x)); /* */ $s = 3; case 3: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t_r$7;\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_uint32 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.base = base; $f.o = o; $f.p = p; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_uint32 = function(p, base) { return this.$val.enc_uint32(p, base); };\n\tBuffer.ptr.prototype.enc_proto3_uint32 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, base, o, p, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; base = $f.base; o = $f.o; p = $f.p; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word32Val(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = $clone(_r$5, word32Val);\n\t\tx = word32Val_Get(v);\n\t\tif (x === 0) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\t_r$6 = p.valEnc(o, new $Uint64(0, x)); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_r$6;\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_proto3_uint32 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.base = base; $f.o = o; $f.p = p; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_proto3_uint32 = function(p, base) { return this.$val.enc_proto3_uint32(p, base); };\n\tsize_uint32 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, base, n, p, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; base = $f.base; n = $f.n; p = $f.p; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word32(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = $clone(_r$5, word32);\n\t\tif (word32_IsNil(v)) {\n\t\t\tn = 0;\n\t\t\treturn n;\n\t\t}\n\t\t_r$6 = word32_Get(v); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tx = _r$6;\n\t\tn = n + (p.tagcode.$length) >> 0;\n\t\t_r$7 = p.valSize(new $Uint64(0, x)); /* */ $s = 3; case 3: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\tn = n + (_r$7) >> 0;\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_uint32 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.base = base; $f.n = n; $f.p = p; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tsize_proto3_uint32 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, base, n, p, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; base = $f.base; n = $f.n; p = $f.p; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word32Val(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = $clone(_r$5, word32Val);\n\t\tx = word32Val_Get(v);\n\t\tif (x === 0) {\n\t\t\tn = 0;\n\t\t\treturn n;\n\t\t}\n\t\tn = n + (p.tagcode.$length) >> 0;\n\t\t_r$6 = p.valSize(new $Uint64(0, x)); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tn = n + (_r$6) >> 0;\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_proto3_uint32 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.base = base; $f.n = n; $f.p = p; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_int64 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, base, o, p, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; base = $f.base; o = $f.o; p = $f.p; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word64(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = $clone(_r$5, word64);\n\t\tif (word64_IsNil(v)) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\t_r$6 = word64_Get(v); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tx = _r$6;\n\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\t_r$7 = p.valEnc(o, x); /* */ $s = 3; case 3: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t_r$7;\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_int64 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.base = base; $f.o = o; $f.p = p; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_int64 = function(p, base) { return this.$val.enc_int64(p, base); };\n\tBuffer.ptr.prototype.enc_proto3_int64 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, base, o, p, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; base = $f.base; o = $f.o; p = $f.p; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word64Val(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = $clone(_r$5, word64Val);\n\t\tx = word64Val_Get(v);\n\t\tif ((x.$high === 0 && x.$low === 0)) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\t_r$6 = p.valEnc(o, x); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_r$6;\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_proto3_int64 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.base = base; $f.o = o; $f.p = p; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_proto3_int64 = function(p, base) { return this.$val.enc_proto3_int64(p, base); };\n\tsize_int64 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, base, n, p, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; base = $f.base; n = $f.n; p = $f.p; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word64(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = $clone(_r$5, word64);\n\t\tif (word64_IsNil(v)) {\n\t\t\tn = 0;\n\t\t\treturn n;\n\t\t}\n\t\t_r$6 = word64_Get(v); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tx = _r$6;\n\t\tn = n + (p.tagcode.$length) >> 0;\n\t\t_r$7 = p.valSize(x); /* */ $s = 3; case 3: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\tn = n + (_r$7) >> 0;\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_int64 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.base = base; $f.n = n; $f.p = p; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tsize_proto3_int64 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, base, n, p, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; base = $f.base; n = $f.n; p = $f.p; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word64Val(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = $clone(_r$5, word64Val);\n\t\tx = word64Val_Get(v);\n\t\tif ((x.$high === 0 && x.$low === 0)) {\n\t\t\tn = 0;\n\t\t\treturn n;\n\t\t}\n\t\tn = n + (p.tagcode.$length) >> 0;\n\t\t_r$6 = p.valSize(x); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tn = n + (_r$6) >> 0;\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_proto3_int64 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.base = base; $f.n = n; $f.p = p; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_string = function(p, base) {\n\t\tvar $ptr, _r$5, base, o, p, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; base = $f.base; o = $f.o; p = $f.p; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_String(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = _r$5.$get();\n\t\tif (v === ptrType$9.nil) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\tx = v.$get();\n\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\to.EncodeStringBytes(x);\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_string }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.base = base; $f.o = o; $f.p = p; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_string = function(p, base) { return this.$val.enc_string(p, base); };\n\tBuffer.ptr.prototype.enc_proto3_string = function(p, base) {\n\t\tvar $ptr, _r$5, base, o, p, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; base = $f.base; o = $f.o; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_StringVal(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = _r$5.$get();\n\t\tif (v === \"\") {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\to.EncodeStringBytes(v);\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_proto3_string }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.base = base; $f.o = o; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_proto3_string = function(p, base) { return this.$val.enc_proto3_string(p, base); };\n\tsize_string = function(p, base) {\n\t\tvar $ptr, _r$5, base, n, p, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; base = $f.base; n = $f.n; p = $f.p; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_String(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = _r$5.$get();\n\t\tif (v === ptrType$9.nil) {\n\t\t\tn = 0;\n\t\t\treturn n;\n\t\t}\n\t\tx = v.$get();\n\t\tn = n + (p.tagcode.$length) >> 0;\n\t\tn = n + (sizeStringBytes(x)) >> 0;\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_string }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.base = base; $f.n = n; $f.p = p; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tsize_proto3_string = function(p, base) {\n\t\tvar $ptr, _r$5, base, n, p, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; base = $f.base; n = $f.n; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_StringVal(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = _r$5.$get();\n\t\tif (v === \"\") {\n\t\t\tn = 0;\n\t\t\treturn n;\n\t\t}\n\t\tn = n + (p.tagcode.$length) >> 0;\n\t\tn = n + (sizeStringBytes(v)) >> 0;\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_proto3_string }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.base = base; $f.n = n; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_struct_message = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, _r$8, _tuple, base, data, err, m, o, p, state, structp, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; base = $f.base; data = $f.data; err = $f.err; m = $f.m; o = $f.o; p = $f.p; state = $f.state; structp = $f.structp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tstate = [state];\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\tstate[0] = $clone(new errorState.ptr(), errorState);\n\t\t_r$5 = structPointer_GetStructPointer(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tstructp = $clone(_r$5, structPointer);\n\t\tif (structPointer_IsNil(structp)) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\t/* */ if (p.isMarshaler) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (p.isMarshaler) { */ case 2:\n\t\t\t_r$6 = structPointer_Interface(structp, p.stype); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\tm = $assertType(_r$6, Marshaler);\n\t\t\t_r$7 = m.Marshal(); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t_tuple = _r$7; data = _tuple[0]; err = _tuple[1];\n\t\t\tif (!($interfaceIsEqual(err, $ifaceNil)) && !state[0].shouldContinue(err, ptrType$1.nil)) {\n\t\t\t\treturn err;\n\t\t\t}\n\t\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\t\to.EncodeRawBytes(data);\n\t\t\treturn $ifaceNil;\n\t\t/* } */ case 3:\n\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\t_r$8 = o.enc_len_struct(p.sprop, structp, state[0]); /* */ $s = 6; case 6: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\treturn _r$8;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_struct_message }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f.base = base; $f.data = data; $f.err = err; $f.m = m; $f.o = o; $f.p = p; $f.state = state; $f.structp = structp; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_struct_message = function(p, base) { return this.$val.enc_struct_message(p, base); };\n\tsize_struct_message = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, _r$8, _tuple, base, data, m, n0, n0$1, n1, n1$1, n2, p, structp, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; base = $f.base; data = $f.data; m = $f.m; n0 = $f.n0; n0$1 = $f.n0$1; n1 = $f.n1; n1$1 = $f.n1$1; n2 = $f.n2; p = $f.p; structp = $f.structp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_GetStructPointer(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tstructp = $clone(_r$5, structPointer);\n\t\tif (structPointer_IsNil(structp)) {\n\t\t\treturn 0;\n\t\t}\n\t\t/* */ if (p.isMarshaler) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (p.isMarshaler) { */ case 2:\n\t\t\t_r$6 = structPointer_Interface(structp, p.stype); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\tm = $assertType(_r$6, Marshaler);\n\t\t\t_r$7 = m.Marshal(); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t_tuple = _r$7; data = _tuple[0];\n\t\t\tn0 = p.tagcode.$length;\n\t\t\tn1 = sizeRawBytes(data);\n\t\t\treturn n0 + n1 >> 0;\n\t\t/* } */ case 3:\n\t\tn0$1 = p.tagcode.$length;\n\t\t_r$8 = size_struct(p.sprop, structp); /* */ $s = 6; case 6: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\tn1$1 = _r$8;\n\t\tn2 = sizeVarint(new $Uint64(0, n1$1));\n\t\treturn (n0$1 + n1$1 >> 0) + n2 >> 0;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_struct_message }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f.base = base; $f.data = data; $f.m = m; $f.n0 = n0; $f.n0$1 = n0$1; $f.n1 = n1; $f.n1$1 = n1$1; $f.n2 = n2; $f.p = p; $f.structp = structp; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_struct_group = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, b, base, err, o, p, state, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; b = $f.b; base = $f.base; err = $f.err; o = $f.o; p = $f.p; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\tstate = $clone(new errorState.ptr(), errorState);\n\t\t_r$5 = structPointer_GetStructPointer(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tb = $clone(_r$5, structPointer);\n\t\tif (structPointer_IsNil(b)) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\to.EncodeVarint(new $Uint64(0, (((p.Tag << 3 >> 0)) | 3)));\n\t\t_r$6 = o.enc_struct(p.sprop, b); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\terr = _r$6;\n\t\tif (!($interfaceIsEqual(err, $ifaceNil)) && !state.shouldContinue(err, ptrType$1.nil)) {\n\t\t\treturn err;\n\t\t}\n\t\to.EncodeVarint(new $Uint64(0, (((p.Tag << 3 >> 0)) | 4)));\n\t\treturn state.err;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_struct_group }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.b = b; $f.base = base; $f.err = err; $f.o = o; $f.p = p; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_struct_group = function(p, base) { return this.$val.enc_struct_group(p, base); };\n\tsize_struct_group = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, b, base, n, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; b = $f.b; base = $f.base; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_GetStructPointer(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tb = $clone(_r$5, structPointer);\n\t\tif (structPointer_IsNil(b)) {\n\t\t\tn = 0;\n\t\t\treturn n;\n\t\t}\n\t\tn = n + (sizeVarint(new $Uint64(0, (((p.Tag << 3 >> 0)) | 3)))) >> 0;\n\t\t_r$6 = size_struct(p.sprop, b); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tn = n + (_r$6) >> 0;\n\t\tn = n + (sizeVarint(new $Uint64(0, (((p.Tag << 3 >> 0)) | 4)))) >> 0;\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_struct_group }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.b = b; $f.base = base; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_slice_bool = function(p, base) {\n\t\tvar $ptr, _i, _r$5, _r$6, _ref, base, l, o, p, s, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; base = $f.base; l = $f.l; o = $f.o; p = $f.p; s = $f.s; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_BoolSlice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = _r$5.$get();\n\t\tl = s.$length;\n\t\tif (l === 0) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\t_ref = s;\n\t\t_i = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }\n\t\t\tx = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\t\tv = new $Uint64(0, 0);\n\t\t\tif (x) {\n\t\t\t\tv = new $Uint64(0, 1);\n\t\t\t}\n\t\t\t_r$6 = p.valEnc(o, v); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_r$6;\n\t\t\t_i++;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_slice_bool }; } $f.$ptr = $ptr; $f._i = _i; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f.base = base; $f.l = l; $f.o = o; $f.p = p; $f.s = s; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_slice_bool = function(p, base) { return this.$val.enc_slice_bool(p, base); };\n\tsize_slice_bool = function(p, base) {\n\t\tvar $ptr, _r$5, base, l, p, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; base = $f.base; l = $f.l; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_BoolSlice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = _r$5.$get();\n\t\tl = s.$length;\n\t\tif (l === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn l * ((p.tagcode.$length + 1 >> 0)) >> 0;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_slice_bool }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.base = base; $f.l = l; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_slice_packed_bool = function(p, base) {\n\t\tvar $ptr, _i, _r$5, _r$6, _ref, base, l, o, p, s, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; base = $f.base; l = $f.l; o = $f.o; p = $f.p; s = $f.s; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_BoolSlice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = _r$5.$get();\n\t\tl = s.$length;\n\t\tif (l === 0) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\to.EncodeVarint(new $Uint64(0, l));\n\t\t_ref = s;\n\t\t_i = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }\n\t\t\tx = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tv = new $Uint64(0, 0);\n\t\t\tif (x) {\n\t\t\t\tv = new $Uint64(0, 1);\n\t\t\t}\n\t\t\t_r$6 = p.valEnc(o, v); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_r$6;\n\t\t\t_i++;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_slice_packed_bool }; } $f.$ptr = $ptr; $f._i = _i; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f.base = base; $f.l = l; $f.o = o; $f.p = p; $f.s = s; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_slice_packed_bool = function(p, base) { return this.$val.enc_slice_packed_bool(p, base); };\n\tsize_slice_packed_bool = function(p, base) {\n\t\tvar $ptr, _r$5, base, l, n, p, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; base = $f.base; l = $f.l; n = $f.n; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_BoolSlice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = _r$5.$get();\n\t\tl = s.$length;\n\t\tif (l === 0) {\n\t\t\tn = 0;\n\t\t\treturn n;\n\t\t}\n\t\tn = n + (p.tagcode.$length) >> 0;\n\t\tn = n + (sizeVarint(new $Uint64(0, l))) >> 0;\n\t\tn = n + (l) >> 0;\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_slice_packed_bool }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.base = base; $f.l = l; $f.n = n; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_slice_byte = function(p, base) {\n\t\tvar $ptr, _r$5, base, o, p, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; base = $f.base; o = $f.o; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Bytes(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = _r$5.$get();\n\t\tif (s === sliceType.nil) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\to.EncodeRawBytes(s);\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_slice_byte }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.base = base; $f.o = o; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_slice_byte = function(p, base) { return this.$val.enc_slice_byte(p, base); };\n\tBuffer.ptr.prototype.enc_proto3_slice_byte = function(p, base) {\n\t\tvar $ptr, _r$5, base, o, p, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; base = $f.base; o = $f.o; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Bytes(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = _r$5.$get();\n\t\tif (s.$length === 0) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\to.EncodeRawBytes(s);\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_proto3_slice_byte }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.base = base; $f.o = o; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_proto3_slice_byte = function(p, base) { return this.$val.enc_proto3_slice_byte(p, base); };\n\tsize_slice_byte = function(p, base) {\n\t\tvar $ptr, _r$5, base, n, p, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; base = $f.base; n = $f.n; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Bytes(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = _r$5.$get();\n\t\tif (s === sliceType.nil) {\n\t\t\tn = 0;\n\t\t\treturn n;\n\t\t}\n\t\tn = n + (p.tagcode.$length) >> 0;\n\t\tn = n + (sizeRawBytes(s)) >> 0;\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_slice_byte }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.base = base; $f.n = n; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tsize_proto3_slice_byte = function(p, base) {\n\t\tvar $ptr, _r$5, base, n, p, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; base = $f.base; n = $f.n; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Bytes(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = _r$5.$get();\n\t\tif (s.$length === 0) {\n\t\t\tn = 0;\n\t\t\treturn n;\n\t\t}\n\t\tn = n + (p.tagcode.$length) >> 0;\n\t\tn = n + (sizeRawBytes(s)) >> 0;\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_proto3_slice_byte }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.base = base; $f.n = n; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_slice_int32 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, base, i, l, o, p, s, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; base = $f.base; i = $f.i; l = $f.l; o = $f.o; p = $f.p; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word32Slice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = $clone(_r$5, word32Slice);\n\t\tl = s.Len();\n\t\tif (l === 0) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\ti = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(i < l)) { break; } */ if(!(i < l)) { $s = 3; continue; }\n\t\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\t\t_r$6 = s.Index(i); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\tx = (_r$6 >> 0);\n\t\t\t_r$7 = p.valEnc(o, new $Uint64(0, x)); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t_r$7;\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_slice_int32 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.base = base; $f.i = i; $f.l = l; $f.o = o; $f.p = p; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_slice_int32 = function(p, base) { return this.$val.enc_slice_int32(p, base); };\n\tsize_slice_int32 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, base, i, l, n, p, s, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; base = $f.base; i = $f.i; l = $f.l; n = $f.n; p = $f.p; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word32Slice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = $clone(_r$5, word32Slice);\n\t\tl = s.Len();\n\t\tif (l === 0) {\n\t\t\tn = 0;\n\t\t\treturn n;\n\t\t}\n\t\ti = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(i < l)) { break; } */ if(!(i < l)) { $s = 3; continue; }\n\t\t\tn = n + (p.tagcode.$length) >> 0;\n\t\t\t_r$6 = s.Index(i); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\tx = (_r$6 >> 0);\n\t\t\t_r$7 = p.valSize(new $Uint64(0, x)); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\tn = n + (_r$7) >> 0;\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_slice_int32 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.base = base; $f.i = i; $f.l = l; $f.n = n; $f.p = p; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_slice_packed_int32 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, base, buf, i, l, o, p, s, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; base = $f.base; buf = $f.buf; i = $f.i; l = $f.l; o = $f.o; p = $f.p; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word32Slice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = $clone(_r$5, word32Slice);\n\t\tl = s.Len();\n\t\tif (l === 0) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\tbuf = NewBuffer(sliceType.nil);\n\t\ti = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(i < l)) { break; } */ if(!(i < l)) { $s = 3; continue; }\n\t\t\t_r$6 = s.Index(i); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\tx = (_r$6 >> 0);\n\t\t\t_r$7 = p.valEnc(buf, new $Uint64(0, x)); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t_r$7;\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\to.EncodeVarint(new $Uint64(0, buf.buf.$length));\n\t\to.buf = $appendSlice(o.buf, buf.buf);\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_slice_packed_int32 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.base = base; $f.buf = buf; $f.i = i; $f.l = l; $f.o = o; $f.p = p; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_slice_packed_int32 = function(p, base) { return this.$val.enc_slice_packed_int32(p, base); };\n\tsize_slice_packed_int32 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, base, bufSize, i, l, n, p, s, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; base = $f.base; bufSize = $f.bufSize; i = $f.i; l = $f.l; n = $f.n; p = $f.p; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word32Slice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = $clone(_r$5, word32Slice);\n\t\tl = s.Len();\n\t\tif (l === 0) {\n\t\t\tn = 0;\n\t\t\treturn n;\n\t\t}\n\t\tbufSize = 0;\n\t\ti = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(i < l)) { break; } */ if(!(i < l)) { $s = 3; continue; }\n\t\t\t_r$6 = s.Index(i); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\tx = (_r$6 >> 0);\n\t\t\t_r$7 = p.valSize(new $Uint64(0, x)); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\tbufSize = bufSize + (_r$7) >> 0;\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\tn = n + (p.tagcode.$length) >> 0;\n\t\tn = n + (sizeVarint(new $Uint64(0, bufSize))) >> 0;\n\t\tn = n + (bufSize) >> 0;\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_slice_packed_int32 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.base = base; $f.bufSize = bufSize; $f.i = i; $f.l = l; $f.n = n; $f.p = p; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_slice_uint32 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, base, i, l, o, p, s, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; base = $f.base; i = $f.i; l = $f.l; o = $f.o; p = $f.p; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word32Slice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = $clone(_r$5, word32Slice);\n\t\tl = s.Len();\n\t\tif (l === 0) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\ti = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(i < l)) { break; } */ if(!(i < l)) { $s = 3; continue; }\n\t\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\t\t_r$6 = s.Index(i); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\tx = _r$6;\n\t\t\t_r$7 = p.valEnc(o, new $Uint64(0, x)); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t_r$7;\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_slice_uint32 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.base = base; $f.i = i; $f.l = l; $f.o = o; $f.p = p; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_slice_uint32 = function(p, base) { return this.$val.enc_slice_uint32(p, base); };\n\tsize_slice_uint32 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, base, i, l, n, p, s, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; base = $f.base; i = $f.i; l = $f.l; n = $f.n; p = $f.p; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word32Slice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = $clone(_r$5, word32Slice);\n\t\tl = s.Len();\n\t\tif (l === 0) {\n\t\t\tn = 0;\n\t\t\treturn n;\n\t\t}\n\t\ti = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(i < l)) { break; } */ if(!(i < l)) { $s = 3; continue; }\n\t\t\tn = n + (p.tagcode.$length) >> 0;\n\t\t\t_r$6 = s.Index(i); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\tx = _r$6;\n\t\t\t_r$7 = p.valSize(new $Uint64(0, x)); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\tn = n + (_r$7) >> 0;\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_slice_uint32 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.base = base; $f.i = i; $f.l = l; $f.n = n; $f.p = p; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_slice_packed_uint32 = function(p, base) {\n\t\tvar $ptr, _arg, _arg$1, _r$5, _r$6, _r$7, base, buf, i, l, o, p, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; base = $f.base; buf = $f.buf; i = $f.i; l = $f.l; o = $f.o; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word32Slice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = $clone(_r$5, word32Slice);\n\t\tl = s.Len();\n\t\tif (l === 0) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\tbuf = NewBuffer(sliceType.nil);\n\t\ti = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(i < l)) { break; } */ if(!(i < l)) { $s = 3; continue; }\n\t\t\t_arg = buf;\n\t\t\t_r$6 = s.Index(i); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_arg$1 = new $Uint64(0, _r$6);\n\t\t\t_r$7 = p.valEnc(_arg, _arg$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t_r$7;\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\to.EncodeVarint(new $Uint64(0, buf.buf.$length));\n\t\to.buf = $appendSlice(o.buf, buf.buf);\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_slice_packed_uint32 }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.base = base; $f.buf = buf; $f.i = i; $f.l = l; $f.o = o; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_slice_packed_uint32 = function(p, base) { return this.$val.enc_slice_packed_uint32(p, base); };\n\tsize_slice_packed_uint32 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, base, bufSize, i, l, n, p, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; base = $f.base; bufSize = $f.bufSize; i = $f.i; l = $f.l; n = $f.n; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word32Slice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = $clone(_r$5, word32Slice);\n\t\tl = s.Len();\n\t\tif (l === 0) {\n\t\t\tn = 0;\n\t\t\treturn n;\n\t\t}\n\t\tbufSize = 0;\n\t\ti = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(i < l)) { break; } */ if(!(i < l)) { $s = 3; continue; }\n\t\t\t_r$6 = s.Index(i); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_r$7 = p.valSize(new $Uint64(0, _r$6)); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\tbufSize = bufSize + (_r$7) >> 0;\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\tn = n + (p.tagcode.$length) >> 0;\n\t\tn = n + (sizeVarint(new $Uint64(0, bufSize))) >> 0;\n\t\tn = n + (bufSize) >> 0;\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_slice_packed_uint32 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.base = base; $f.bufSize = bufSize; $f.i = i; $f.l = l; $f.n = n; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_slice_int64 = function(p, base) {\n\t\tvar $ptr, _arg, _arg$1, _r$5, _r$6, _r$7, base, i, l, o, p, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; base = $f.base; i = $f.i; l = $f.l; o = $f.o; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word64Slice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = $clone(_r$5, word64Slice);\n\t\tl = s.Len();\n\t\tif (l === 0) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\ti = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(i < l)) { break; } */ if(!(i < l)) { $s = 3; continue; }\n\t\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\t\t_arg = o;\n\t\t\t_r$6 = s.Index(i); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_arg$1 = _r$6;\n\t\t\t_r$7 = p.valEnc(_arg, _arg$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t_r$7;\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_slice_int64 }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.base = base; $f.i = i; $f.l = l; $f.o = o; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_slice_int64 = function(p, base) { return this.$val.enc_slice_int64(p, base); };\n\tsize_slice_int64 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, base, i, l, n, p, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; base = $f.base; i = $f.i; l = $f.l; n = $f.n; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word64Slice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = $clone(_r$5, word64Slice);\n\t\tl = s.Len();\n\t\tif (l === 0) {\n\t\t\tn = 0;\n\t\t\treturn n;\n\t\t}\n\t\ti = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(i < l)) { break; } */ if(!(i < l)) { $s = 3; continue; }\n\t\t\tn = n + (p.tagcode.$length) >> 0;\n\t\t\t_r$6 = s.Index(i); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_r$7 = p.valSize(_r$6); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\tn = n + (_r$7) >> 0;\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_slice_int64 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.base = base; $f.i = i; $f.l = l; $f.n = n; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_slice_packed_int64 = function(p, base) {\n\t\tvar $ptr, _arg, _arg$1, _r$5, _r$6, _r$7, base, buf, i, l, o, p, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; base = $f.base; buf = $f.buf; i = $f.i; l = $f.l; o = $f.o; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word64Slice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = $clone(_r$5, word64Slice);\n\t\tl = s.Len();\n\t\tif (l === 0) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\tbuf = NewBuffer(sliceType.nil);\n\t\ti = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(i < l)) { break; } */ if(!(i < l)) { $s = 3; continue; }\n\t\t\t_arg = buf;\n\t\t\t_r$6 = s.Index(i); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_arg$1 = _r$6;\n\t\t\t_r$7 = p.valEnc(_arg, _arg$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t_r$7;\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\to.EncodeVarint(new $Uint64(0, buf.buf.$length));\n\t\to.buf = $appendSlice(o.buf, buf.buf);\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_slice_packed_int64 }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.base = base; $f.buf = buf; $f.i = i; $f.l = l; $f.o = o; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_slice_packed_int64 = function(p, base) { return this.$val.enc_slice_packed_int64(p, base); };\n\tsize_slice_packed_int64 = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, base, bufSize, i, l, n, p, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; base = $f.base; bufSize = $f.bufSize; i = $f.i; l = $f.l; n = $f.n; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Word64Slice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = $clone(_r$5, word64Slice);\n\t\tl = s.Len();\n\t\tif (l === 0) {\n\t\t\tn = 0;\n\t\t\treturn n;\n\t\t}\n\t\tbufSize = 0;\n\t\ti = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(i < l)) { break; } */ if(!(i < l)) { $s = 3; continue; }\n\t\t\t_r$6 = s.Index(i); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_r$7 = p.valSize(_r$6); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\tbufSize = bufSize + (_r$7) >> 0;\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\tn = n + (p.tagcode.$length) >> 0;\n\t\tn = n + (sizeVarint(new $Uint64(0, bufSize))) >> 0;\n\t\tn = n + (bufSize) >> 0;\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_slice_packed_int64 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.base = base; $f.bufSize = bufSize; $f.i = i; $f.l = l; $f.n = n; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_slice_slice_byte = function(p, base) {\n\t\tvar $ptr, _r$5, base, i, l, o, p, ss, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; base = $f.base; i = $f.i; l = $f.l; o = $f.o; p = $f.p; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_BytesSlice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tss = _r$5.$get();\n\t\tl = ss.$length;\n\t\tif (l === 0) {\n\t\t\treturn $pkg.ErrNil;\n\t\t}\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < l)) { break; }\n\t\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\t\to.EncodeRawBytes(((i < 0 || i >= ss.$length) ? $throwRuntimeError(\"index out of range\") : ss.$array[ss.$offset + i]));\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_slice_slice_byte }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.base = base; $f.i = i; $f.l = l; $f.o = o; $f.p = p; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_slice_slice_byte = function(p, base) { return this.$val.enc_slice_slice_byte(p, base); };\n\tsize_slice_slice_byte = function(p, base) {\n\t\tvar $ptr, _r$5, base, i, l, n, p, ss, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; base = $f.base; i = $f.i; l = $f.l; n = $f.n; p = $f.p; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_BytesSlice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tss = _r$5.$get();\n\t\tl = ss.$length;\n\t\tif (l === 0) {\n\t\t\tn = 0;\n\t\t\treturn n;\n\t\t}\n\t\tn = n + ((l * p.tagcode.$length >> 0)) >> 0;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < l)) { break; }\n\t\t\tn = n + (sizeRawBytes(((i < 0 || i >= ss.$length) ? $throwRuntimeError(\"index out of range\") : ss.$array[ss.$offset + i]))) >> 0;\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_slice_slice_byte }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.base = base; $f.i = i; $f.l = l; $f.n = n; $f.p = p; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_slice_string = function(p, base) {\n\t\tvar $ptr, _r$5, base, i, l, o, p, ss, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; base = $f.base; i = $f.i; l = $f.l; o = $f.o; p = $f.p; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_StringSlice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tss = _r$5.$get();\n\t\tl = ss.$length;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < l)) { break; }\n\t\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\t\to.EncodeStringBytes(((i < 0 || i >= ss.$length) ? $throwRuntimeError(\"index out of range\") : ss.$array[ss.$offset + i]));\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_slice_string }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.base = base; $f.i = i; $f.l = l; $f.o = o; $f.p = p; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_slice_string = function(p, base) { return this.$val.enc_slice_string(p, base); };\n\tsize_slice_string = function(p, base) {\n\t\tvar $ptr, _r$5, base, i, l, n, p, ss, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; base = $f.base; i = $f.i; l = $f.l; n = $f.n; p = $f.p; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_StringSlice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tss = _r$5.$get();\n\t\tl = ss.$length;\n\t\tn = n + ((l * p.tagcode.$length >> 0)) >> 0;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < l)) { break; }\n\t\t\tn = n + (sizeStringBytes(((i < 0 || i >= ss.$length) ? $throwRuntimeError(\"index out of range\") : ss.$array[ss.$offset + i]))) >> 0;\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_slice_string }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.base = base; $f.i = i; $f.l = l; $f.n = n; $f.p = p; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_slice_struct_message = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, base, data, err, err$1, i, l, m, o, p, s, state, structp, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; base = $f.base; data = $f.data; err = $f.err; err$1 = $f.err$1; i = $f.i; l = $f.l; m = $f.m; o = $f.o; p = $f.p; s = $f.s; state = $f.state; structp = $f.structp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tstate = [state];\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\tstate[0] = $clone(new errorState.ptr(), errorState);\n\t\t_r$5 = structPointer_StructPointerSlice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = $clone(_r$5, structPointerSlice);\n\t\tl = s.Len();\n\t\ti = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(i < l)) { break; } */ if(!(i < l)) { $s = 3; continue; }\n\t\t\t_r$6 = s.Index(i); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\tstructp = $clone(_r$6, structPointer);\n\t\t\tif (structPointer_IsNil(structp)) {\n\t\t\t\treturn errRepeatedHasNil;\n\t\t\t}\n\t\t\t/* */ if (p.isMarshaler) { $s = 5; continue; }\n\t\t\t/* */ $s = 6; continue;\n\t\t\t/* if (p.isMarshaler) { */ case 5:\n\t\t\t\t_r$7 = structPointer_Interface(structp, p.stype); /* */ $s = 7; case 7: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t\tm = $assertType(_r$7, Marshaler);\n\t\t\t\t_r$8 = m.Marshal(); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t\t_tuple = _r$8; data = _tuple[0]; err = _tuple[1];\n\t\t\t\tif (!($interfaceIsEqual(err, $ifaceNil)) && !state[0].shouldContinue(err, ptrType$1.nil)) {\n\t\t\t\t\treturn err;\n\t\t\t\t}\n\t\t\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\t\t\to.EncodeRawBytes(data);\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t/* continue; */ $s = 2; continue;\n\t\t\t/* } */ case 6:\n\t\t\to.buf = $appendSlice(o.buf, p.tagcode);\n\t\t\t_r$9 = o.enc_len_struct(p.sprop, structp, state[0]); /* */ $s = 9; case 9: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\terr$1 = _r$9;\n\t\t\tif (!($interfaceIsEqual(err$1, $ifaceNil)) && !state[0].shouldContinue(err$1, ptrType$1.nil)) {\n\t\t\t\tif ($interfaceIsEqual(err$1, $pkg.ErrNil)) {\n\t\t\t\t\treturn errRepeatedHasNil;\n\t\t\t\t}\n\t\t\t\treturn err$1;\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\treturn state[0].err;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_slice_struct_message }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.base = base; $f.data = data; $f.err = err; $f.err$1 = err$1; $f.i = i; $f.l = l; $f.m = m; $f.o = o; $f.p = p; $f.s = s; $f.state = state; $f.structp = structp; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_slice_struct_message = function(p, base) { return this.$val.enc_slice_struct_message(p, base); };\n\tsize_slice_struct_message = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, base, data, i, l, m, n, n0, n1, p, s, structp, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; base = $f.base; data = $f.data; i = $f.i; l = $f.l; m = $f.m; n = $f.n; n0 = $f.n0; n1 = $f.n1; p = $f.p; s = $f.s; structp = $f.structp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_StructPointerSlice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = $clone(_r$5, structPointerSlice);\n\t\tl = s.Len();\n\t\tn = n + ((l * p.tagcode.$length >> 0)) >> 0;\n\t\ti = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(i < l)) { break; } */ if(!(i < l)) { $s = 3; continue; }\n\t\t\t_r$6 = s.Index(i); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\tstructp = $clone(_r$6, structPointer);\n\t\t\tif (structPointer_IsNil(structp)) {\n\t\t\t\treturn n;\n\t\t\t}\n\t\t\t/* */ if (p.isMarshaler) { $s = 5; continue; }\n\t\t\t/* */ $s = 6; continue;\n\t\t\t/* if (p.isMarshaler) { */ case 5:\n\t\t\t\t_r$7 = structPointer_Interface(structp, p.stype); /* */ $s = 7; case 7: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t\tm = $assertType(_r$7, Marshaler);\n\t\t\t\t_r$8 = m.Marshal(); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t\t_tuple = _r$8; data = _tuple[0];\n\t\t\t\tn = n + (p.tagcode.$length) >> 0;\n\t\t\t\tn = n + (sizeRawBytes(data)) >> 0;\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t/* continue; */ $s = 2; continue;\n\t\t\t/* } */ case 6:\n\t\t\t_r$9 = size_struct(p.sprop, structp); /* */ $s = 9; case 9: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\tn0 = _r$9;\n\t\t\tn1 = sizeVarint(new $Uint64(0, n0));\n\t\t\tn = n + ((n0 + n1 >> 0)) >> 0;\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_slice_struct_message }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.base = base; $f.data = data; $f.i = i; $f.l = l; $f.m = m; $f.n = n; $f.n0 = n0; $f.n1 = n1; $f.p = p; $f.s = s; $f.structp = structp; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_slice_struct_group = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, b, base, err, i, l, o, p, s, state, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; b = $f.b; base = $f.base; err = $f.err; i = $f.i; l = $f.l; o = $f.o; p = $f.p; s = $f.s; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\tstate = $clone(new errorState.ptr(), errorState);\n\t\t_r$5 = structPointer_StructPointerSlice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = $clone(_r$5, structPointerSlice);\n\t\tl = s.Len();\n\t\ti = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(i < l)) { break; } */ if(!(i < l)) { $s = 3; continue; }\n\t\t\t_r$6 = s.Index(i); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\tb = $clone(_r$6, structPointer);\n\t\t\tif (structPointer_IsNil(b)) {\n\t\t\t\treturn errRepeatedHasNil;\n\t\t\t}\n\t\t\to.EncodeVarint(new $Uint64(0, (((p.Tag << 3 >> 0)) | 3)));\n\t\t\t_r$7 = o.enc_struct(p.sprop, b); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\terr = _r$7;\n\t\t\tif (!($interfaceIsEqual(err, $ifaceNil)) && !state.shouldContinue(err, ptrType$1.nil)) {\n\t\t\t\tif ($interfaceIsEqual(err, $pkg.ErrNil)) {\n\t\t\t\t\treturn errRepeatedHasNil;\n\t\t\t\t}\n\t\t\t\treturn err;\n\t\t\t}\n\t\t\to.EncodeVarint(new $Uint64(0, (((p.Tag << 3 >> 0)) | 4)));\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\treturn state.err;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_slice_struct_group }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.b = b; $f.base = base; $f.err = err; $f.i = i; $f.l = l; $f.o = o; $f.p = p; $f.s = s; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_slice_struct_group = function(p, base) { return this.$val.enc_slice_struct_group(p, base); };\n\tsize_slice_struct_group = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, b, base, i, l, n, p, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; b = $f.b; base = $f.base; i = $f.i; l = $f.l; n = $f.n; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_StructPointerSlice(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\ts = $clone(_r$5, structPointerSlice);\n\t\tl = s.Len();\n\t\tn = n + ((l * sizeVarint(new $Uint64(0, (((p.Tag << 3 >> 0)) | 3))) >> 0)) >> 0;\n\t\tn = n + ((l * sizeVarint(new $Uint64(0, (((p.Tag << 3 >> 0)) | 4))) >> 0)) >> 0;\n\t\ti = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(i < l)) { break; } */ if(!(i < l)) { $s = 3; continue; }\n\t\t\t_r$6 = s.Index(i); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\tb = $clone(_r$6, structPointer);\n\t\t\tif (structPointer_IsNil(b)) {\n\t\t\t\treturn n;\n\t\t\t}\n\t\t\t_r$7 = size_struct(p.sprop, b); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\tn = n + (_r$7) >> 0;\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_slice_struct_group }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.b = b; $f.base = base; $f.i = i; $f.l = l; $f.n = n; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_map = function(p, base) {\n\t\tvar $ptr, _entry, _entry$1, _entry$2, _i, _i$1, _i$2, _keys, _keys$1, _r$5, _r$6, _ref, _ref$1, _ref$2, base, e, err, k, k$1, keys, o, p, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _keys = $f._keys; _keys$1 = $f._keys$1; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; base = $f.base; e = $f.e; err = $f.err; k = $f.k; k$1 = $f.k$1; keys = $f.keys; o = $f.o; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_ExtMap(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = _r$5.$get();\n\t\t_r$6 = encodeExtensionMap(v); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\terr = _r$6;\n\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 3; continue; }\n\t\t/* */ $s = 4; continue;\n\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 3:\n\t\t\treturn err;\n\t\t/* } */ case 4:\n\t\tif ($keys(v).length <= 1) {\n\t\t\t_ref = v;\n\t\t\t_i = 0;\n\t\t\t_keys = $keys(_ref);\n\t\t\twhile (true) {\n\t\t\t\tif (!(_i < _keys.length)) { break; }\n\t\t\t\t_entry = _ref[_keys[_i]];\n\t\t\t\tif (_entry === undefined) {\n\t\t\t\t\t_i++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\te = $clone(_entry.v, Extension);\n\t\t\t\to.buf = $appendSlice(o.buf, e.enc);\n\t\t\t\t_i++;\n\t\t\t}\n\t\t\treturn $ifaceNil;\n\t\t}\n\t\tkeys = $makeSlice(sliceType$4, 0, $keys(v).length);\n\t\t_ref$1 = v;\n\t\t_i$1 = 0;\n\t\t_keys$1 = $keys(_ref$1);\n\t\twhile (true) {\n\t\t\tif (!(_i$1 < _keys$1.length)) { break; }\n\t\t\t_entry$1 = _ref$1[_keys$1[_i$1]];\n\t\t\tif (_entry$1 === undefined) {\n\t\t\t\t_i$1++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tk = _entry$1.k;\n\t\t\tkeys = $append(keys, (k >> 0));\n\t\t\t_i$1++;\n\t\t}\n\t\t$r = sort.Ints(keys); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t_ref$2 = keys;\n\t\t_i$2 = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i$2 < _ref$2.$length)) { break; }\n\t\t\tk$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError(\"index out of range\") : _ref$2.$array[_ref$2.$offset + _i$2]);\n\t\t\to.buf = $appendSlice(o.buf, (_entry$2 = v[(k$1 >> 0)], _entry$2 !== undefined ? _entry$2.v : new Extension.ptr()).enc);\n\t\t\t_i$2++;\n\t\t}\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_map }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._keys = _keys; $f._keys$1 = _keys$1; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.base = base; $f.e = e; $f.err = err; $f.k = k; $f.k$1 = k$1; $f.keys = keys; $f.o = o; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_map = function(p, base) { return this.$val.enc_map(p, base); };\n\tsize_map = function(p, base) {\n\t\tvar $ptr, _r$5, _r$6, base, p, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; base = $f.base; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_ExtMap(base, p.field); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = _r$5.$get();\n\t\t_r$6 = sizeExtensionMap(v); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\treturn _r$6;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_map }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.base = base; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_new_map = function(p, base) {\n\t\tvar $ptr, _i, _r$10, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, base, enc, err, key, keybase, keycopy, keys, o, p, state, v, val, valbase, valcopy, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$10 = $f._r$10; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; base = $f.base; enc = $f.enc; err = $f.err; key = $f.key; keybase = $f.keybase; keycopy = $f.keycopy; keys = $f.keys; o = $f.o; p = $f.p; state = $f.state; v = $f.v; val = $f.val; valbase = $f.valbase; valcopy = $f.valcopy; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tkeybase = [keybase];\n\t\to = [o];\n\t\tp = [p];\n\t\tstate = [state];\n\t\tvalbase = [valbase];\n\t\to[0] = this;\n\t\tbase = $clone(base, structPointer);\n\t\tstate[0] = $clone(new errorState.ptr(), errorState);\n\t\t_r$5 = structPointer_Map(base, p[0].field, p[0].mtype); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_r$6 = _r$5.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tv = _r$6;\n\t\tif (v.Len() === 0) {\n\t\t\treturn $ifaceNil;\n\t\t}\n\t\t_r$7 = mapEncodeScratch(p[0].mtype); /* */ $s = 3; case 3: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t_tuple = _r$7; keycopy = _tuple[0]; valcopy = _tuple[1]; keybase[0] = $clone(_tuple[2], structPointer); valbase[0] = $clone(_tuple[3], structPointer);\n\t\tenc = (function(keybase, o, p, state, valbase) { return function $b() {\n\t\t\tvar $ptr, _r$8, _r$9, err, err$1, $s, $r;\n\t\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$8 = $f._r$8; _r$9 = $f._r$9; err = $f.err; err$1 = $f.err$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t\t_r$8 = p[0].mkeyprop.enc(o[0], p[0].mkeyprop, keybase[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\terr = _r$8;\n\t\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }\n\t\t\t/* */ $s = 3; continue;\n\t\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:\n\t\t\t\treturn err;\n\t\t\t/* } */ case 3:\n\t\t\t_r$9 = p[0].mvalprop.enc(o[0], p[0].mvalprop, valbase[0]); /* */ $s = 4; case 4: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\terr$1 = _r$9;\n\t\t\t/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }\n\t\t\t/* */ $s = 6; continue;\n\t\t\t/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:\n\t\t\t\treturn err$1;\n\t\t\t/* } */ case 6:\n\t\t\treturn $ifaceNil;\n\t\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.err = err; $f.err$1 = err$1; $f.$s = $s; $f.$r = $r; return $f;\n\t\t}; })(keybase, o, p, state, valbase);\n\t\t_r$8 = v.MapKeys(); /* */ $s = 4; case 4: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\tkeys = _r$8;\n\t\t$r = sort.Sort($subslice(new mapKeys(keys.$array), keys.$offset, keys.$offset + keys.$length)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t_ref = keys;\n\t\t_i = 0;\n\t\t/* while (true) { */ case 6:\n\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }\n\t\t\tkey = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\t_r$9 = v.MapIndex(key); /* */ $s = 8; case 8: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\tval = _r$9;\n\t\t\t$r = keycopy.Set(key); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$r = valcopy.Set(val); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\to[0].buf = $appendSlice(o[0].buf, p[0].tagcode);\n\t\t\t_r$10 = o[0].enc_len_thing(enc, state[0]); /* */ $s = 11; case 11: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\terr = _r$10;\n\t\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 12; continue; }\n\t\t\t/* */ $s = 13; continue;\n\t\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 12:\n\t\t\t\treturn err;\n\t\t\t/* } */ case 13:\n\t\t\t_i++;\n\t\t/* } */ $s = 6; continue; case 7:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_new_map }; } $f.$ptr = $ptr; $f._i = _i; $f._r$10 = _r$10; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f.base = base; $f.enc = enc; $f.err = err; $f.key = key; $f.keybase = keybase; $f.keycopy = keycopy; $f.keys = keys; $f.o = o; $f.p = p; $f.state = state; $f.v = v; $f.val = val; $f.valbase = valbase; $f.valcopy = valcopy; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_new_map = function(p, base) { return this.$val.enc_new_map(p, base); };\n\tsize_new_map = function(p, base) {\n\t\tvar $ptr, _i, _r$10, _r$11, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, base, entry, key, keybase, keycopy, keysize, n, p, v, val, valbase, valcopy, valsize, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; base = $f.base; entry = $f.entry; key = $f.key; keybase = $f.keybase; keycopy = $f.keycopy; keysize = $f.keysize; n = $f.n; p = $f.p; v = $f.v; val = $f.val; valbase = $f.valbase; valcopy = $f.valcopy; valsize = $f.valsize; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tbase = $clone(base, structPointer);\n\t\t_r$5 = structPointer_Map(base, p.field, p.mtype); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_r$6 = _r$5.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tv = _r$6;\n\t\t_r$7 = mapEncodeScratch(p.mtype); /* */ $s = 3; case 3: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t_tuple = _r$7; keycopy = _tuple[0]; valcopy = _tuple[1]; keybase = $clone(_tuple[2], structPointer); valbase = $clone(_tuple[3], structPointer);\n\t\tn = 0;\n\t\t_r$8 = v.MapKeys(); /* */ $s = 4; case 4: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t_ref = _r$8;\n\t\t_i = 0;\n\t\t/* while (true) { */ case 5:\n\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }\n\t\t\tkey = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\t_r$9 = v.MapIndex(key); /* */ $s = 7; case 7: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\tval = _r$9;\n\t\t\t$r = keycopy.Set(key); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$r = valcopy.Set(val); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t_r$10 = p.mkeyprop.size(p.mkeyprop, keybase); /* */ $s = 10; case 10: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\tkeysize = _r$10;\n\t\t\t_r$11 = p.mvalprop.size(p.mvalprop, valbase); /* */ $s = 11; case 11: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t\tvalsize = _r$11;\n\t\t\tentry = keysize + valsize >> 0;\n\t\t\tn = n + (((p.tagcode.$length + sizeVarint(new $Uint64(0, entry)) >> 0) + entry >> 0)) >> 0;\n\t\t\t_i++;\n\t\t/* } */ $s = 5; continue; case 6:\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_new_map }; } $f.$ptr = $ptr; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f.base = base; $f.entry = entry; $f.key = key; $f.keybase = keybase; $f.keycopy = keycopy; $f.keysize = keysize; $f.n = n; $f.p = p; $f.v = v; $f.val = val; $f.valbase = valbase; $f.valcopy = valcopy; $f.valsize = valsize; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tmapEncodeScratch = function(mapType$1) {\n\t\tvar $ptr, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, dummy, keybase, keycopy, keyptr, mapType$1, valbase, valcopy, valptr, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; dummy = $f.dummy; keybase = $f.keybase; keycopy = $f.keycopy; keyptr = $f.keyptr; mapType$1 = $f.mapType$1; valbase = $f.valbase; valcopy = $f.valcopy; valptr = $f.valptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tdummy = [dummy];\n\t\tkeycopy = new reflect.Value.ptr();\n\t\tvalcopy = new reflect.Value.ptr();\n\t\tkeybase = new structPointer.ptr();\n\t\tvalbase = new structPointer.ptr();\n\t\t_r$5 = mapType$1.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_r$6 = reflect.New(_r$5); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_r$7 = _r$6.Elem(); /* */ $s = 3; case 3: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\tkeycopy = _r$7;\n\t\t_r$8 = reflect.New(reflect.PtrTo(keycopy.Type())); /* */ $s = 4; case 4: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t_r$9 = _r$8.Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\tkeyptr = _r$9;\n\t\t$r = keyptr.Set(keycopy.Addr()); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$copy(keybase, toStructPointer(keyptr.Addr()), structPointer);\n\t\t_r$10 = mapType$1.Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t_r$11 = _r$10.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t_ref = _r$11;\n\t\t/* */ if (_ref === 23) { $s = 9; continue; }\n\t\t/* */ if (_ref === 22) { $s = 10; continue; }\n\t\t/* */ $s = 11; continue;\n\t\t/* if (_ref === 23) { */ case 9:\n\t\t\tdummy[0] = sliceType.nil;\n\t\t\t_r$12 = reflect.ValueOf((dummy.$ptr || (dummy.$ptr = new ptrType$10(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, dummy)))); /* */ $s = 13; case 13: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\t\t_r$13 = _r$12.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }\n\t\t\tvalcopy = _r$13;\n\t\t\t$copy(valbase, toStructPointer(valcopy.Addr()), structPointer);\n\t\t\t$s = 12; continue;\n\t\t/* } else if (_ref === 22) { */ case 10:\n\t\t\t_r$14 = mapType$1.Elem(); /* */ $s = 15; case 15: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }\n\t\t\t_r$15 = reflect.New(_r$14); /* */ $s = 16; case 16: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }\n\t\t\t_r$16 = _r$15.Elem(); /* */ $s = 17; case 17: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }\n\t\t\tvalcopy = _r$16;\n\t\t\t$copy(valbase, toStructPointer(valcopy.Addr()), structPointer);\n\t\t\t$s = 12; continue;\n\t\t/* } else { */ case 11:\n\t\t\t_r$17 = mapType$1.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }\n\t\t\t_r$18 = reflect.New(_r$17); /* */ $s = 19; case 19: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }\n\t\t\t_r$19 = _r$18.Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }\n\t\t\tvalcopy = _r$19;\n\t\t\t_r$20 = reflect.New(reflect.PtrTo(valcopy.Type())); /* */ $s = 21; case 21: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }\n\t\t\t_r$21 = _r$20.Elem(); /* */ $s = 22; case 22: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }\n\t\t\tvalptr = _r$21;\n\t\t\t$r = valptr.Set(valcopy.Addr()); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$copy(valbase, toStructPointer(valptr.Addr()), structPointer);\n\t\t/* } */ case 12:\n\t\treturn [keycopy, valcopy, keybase, valbase];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: mapEncodeScratch }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.dummy = dummy; $f.keybase = keybase; $f.keycopy = keycopy; $f.keyptr = keyptr; $f.mapType$1 = mapType$1; $f.valbase = valbase; $f.valcopy = valcopy; $f.valptr = valptr; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_struct = function(prop, base) {\n\t\tvar $ptr, _i, _r$5, _r$6, _ref, base, err, i, o, p, prop, state, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; base = $f.base; err = $f.err; i = $f.i; o = $f.o; p = $f.p; prop = $f.prop; state = $f.state; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tbase = $clone(base, structPointer);\n\t\tstate = $clone(new errorState.ptr(), errorState);\n\t\t_ref = prop.order;\n\t\t_i = 0;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }\n\t\t\ti = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tp = (x = prop.Prop, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]));\n\t\t\t/* */ if (!(p.enc === $throwNilPointerError)) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (!(p.enc === $throwNilPointerError)) { */ case 3:\n\t\t\t\t_r$5 = p.enc(o, p, base); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t\terr = _r$5;\n\t\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\t\tif ($interfaceIsEqual(err, $pkg.ErrNil)) {\n\t\t\t\t\t\tif (p.Required && $interfaceIsEqual(state.err, $ifaceNil)) {\n\t\t\t\t\t\t\tstate.err = new RequiredNotSetError.ptr(p.Name);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if ($interfaceIsEqual(err, errRepeatedHasNil)) {\n\t\t\t\t\t\treturn errors.New(\"repeated field \" + p.OrigName + \" has nil element\");\n\t\t\t\t\t} else if (!state.shouldContinue(err, p)) {\n\t\t\t\t\t\treturn err;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t/* } */ case 4:\n\t\t\t_i++;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\t/* */ if (prop.unrecField.IsValid()) { $s = 6; continue; }\n\t\t/* */ $s = 7; continue;\n\t\t/* if (prop.unrecField.IsValid()) { */ case 6:\n\t\t\t_r$6 = structPointer_Bytes(base, prop.unrecField); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\tv = _r$6.$get();\n\t\t\tif (v.$length > 0) {\n\t\t\t\to.buf = $appendSlice(o.buf, v);\n\t\t\t}\n\t\t/* } */ case 7:\n\t\treturn state.err;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_struct }; } $f.$ptr = $ptr; $f._i = _i; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f.base = base; $f.err = err; $f.i = i; $f.o = o; $f.p = p; $f.prop = prop; $f.state = state; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_struct = function(prop, base) { return this.$val.enc_struct(prop, base); };\n\tsize_struct = function(prop, base) {\n\t\tvar $ptr, _i, _r$5, _r$6, _ref, base, i, n, p, prop, v, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; base = $f.base; i = $f.i; n = $f.n; p = $f.p; prop = $f.prop; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\tbase = $clone(base, structPointer);\n\t\t_ref = prop.order;\n\t\t_i = 0;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }\n\t\t\ti = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tp = (x = prop.Prop, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]));\n\t\t\t/* */ if (!(p.size === $throwNilPointerError)) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (!(p.size === $throwNilPointerError)) { */ case 3:\n\t\t\t\t_r$5 = p.size(p, base); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t\tn = n + (_r$5) >> 0;\n\t\t\t/* } */ case 4:\n\t\t\t_i++;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\t/* */ if (prop.unrecField.IsValid()) { $s = 6; continue; }\n\t\t/* */ $s = 7; continue;\n\t\t/* if (prop.unrecField.IsValid()) { */ case 6:\n\t\t\t_r$6 = structPointer_Bytes(base, prop.unrecField); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\tv = _r$6.$get();\n\t\t\tn = n + (v.$length) >> 0;\n\t\t/* } */ case 7:\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: size_struct }; } $f.$ptr = $ptr; $f._i = _i; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f.base = base; $f.i = i; $f.n = n; $f.p = p; $f.prop = prop; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.ptr.prototype.enc_len_struct = function(prop, base, state) {\n\t\tvar $ptr, _r$5, base, o, prop, state, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; base = $f.base; o = $f.o; prop = $f.prop; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tbase = [base];\n\t\to = [o];\n\t\tprop = [prop];\n\t\to[0] = this;\n\t\tbase[0] = $clone(base[0], structPointer);\n\t\t_r$5 = o[0].enc_len_thing((function(base, o, prop) { return function $b() {\n\t\t\tvar $ptr, _r$5, $s, $r;\n\t\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t\t_r$5 = o[0].enc_struct(prop[0], base[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\treturn _r$5;\n\t\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.$s = $s; $f.$r = $r; return $f;\n\t\t}; })(base, o, prop), state); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn _r$5;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_len_struct }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.base = base; $f.o = o; $f.prop = prop; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_len_struct = function(prop, base, state) { return this.$val.enc_len_struct(prop, base, state); };\n\tBuffer.ptr.prototype.enc_len_thing = function(enc, state) {\n\t\tvar $ptr, _r$5, enc, err, iLen, iMsg, lLen, lMsg, o, state, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; enc = $f.enc; err = $f.err; iLen = $f.iLen; iMsg = $f.iMsg; lLen = $f.lLen; lMsg = $f.lMsg; o = $f.o; state = $f.state; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tiLen = o.buf.$length;\n\t\to.buf = $append(o.buf, 0, 0, 0, 0);\n\t\tiMsg = o.buf.$length;\n\t\t_r$5 = enc(); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\terr = _r$5;\n\t\tif (!($interfaceIsEqual(err, $ifaceNil)) && !state.shouldContinue(err, ptrType$1.nil)) {\n\t\t\treturn err;\n\t\t}\n\t\tlMsg = o.buf.$length - iMsg >> 0;\n\t\tlLen = sizeVarint(new $Uint64(0, lMsg));\n\t\tx = lLen - ((iMsg - iLen >> 0)) >> 0;\n\t\tif (x > 0) {\n\t\t\to.buf = $appendSlice(o.buf, $subslice(new sliceType(zeroes), 0, x));\n\t\t\t$copySlice($subslice(o.buf, (iMsg + x >> 0)), $subslice(o.buf, iMsg, (iMsg + lMsg >> 0)));\n\t\t} else if (x < 0) {\n\t\t\t$copySlice($subslice(o.buf, (iMsg + x >> 0)), $subslice(o.buf, iMsg, (iMsg + lMsg >> 0)));\n\t\t\to.buf = $subslice(o.buf, 0, (o.buf.$length + x >> 0));\n\t\t}\n\t\to.buf = $subslice(o.buf, 0, iLen);\n\t\to.EncodeVarint(new $Uint64(0, lMsg));\n\t\to.buf = $subslice(o.buf, 0, (o.buf.$length + lMsg >> 0));\n\t\treturn state.err;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.enc_len_thing }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.enc = enc; $f.err = err; $f.iLen = iLen; $f.iMsg = iMsg; $f.lLen = lLen; $f.lMsg = lMsg; $f.o = o; $f.state = state; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.enc_len_thing = function(enc, state) { return this.$val.enc_len_thing(enc, state); };\n\terrorState.ptr.prototype.shouldContinue = function(err, prop) {\n\t\tvar $ptr, _tuple, err, ok, prop, reqNotSet, s;\n\t\ts = this;\n\t\t_tuple = $assertType(err, ptrType$11, true); reqNotSet = _tuple[0]; ok = _tuple[1];\n\t\tif (!ok) {\n\t\t\treturn false;\n\t\t}\n\t\tif ($interfaceIsEqual(s.err, $ifaceNil)) {\n\t\t\tif (!(prop === ptrType$1.nil)) {\n\t\t\t\terr = new RequiredNotSetError.ptr(prop.Name + \".\" + reqNotSet.field);\n\t\t\t}\n\t\t\ts.err = err;\n\t\t}\n\t\treturn true;\n\t};\n\terrorState.prototype.shouldContinue = function(err, prop) { return this.$val.shouldContinue(err, prop); };\n\tExtensionDesc.ptr.prototype.repeated = function() {\n\t\tvar $ptr, _r$5, _r$6, _r$7, _v, ed, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _v = $f._v; ed = $f.ed; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ted = this;\n\t\tt = reflect.TypeOf(ed.ExtensionType);\n\t\t_r$5 = t.Kind(); /* */ $s = 2; case 2: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tif (!(_r$5 === 23)) { _v = false; $s = 1; continue s; }\n\t\t_r$6 = t.Elem(); /* */ $s = 3; case 3: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_r$7 = _r$6.Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t_v = !((_r$7 === 8)); case 1:\n\t\treturn _v;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ExtensionDesc.ptr.prototype.repeated }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._v = _v; $f.ed = ed; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tExtensionDesc.prototype.repeated = function() { return this.$val.repeated(); };\n\tisExtensionField = function(pb, field$1) {\n\t\tvar $ptr, _i, _r$5, _ref, er, field$1, pb, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$5 = $f._r$5; _ref = $f._ref; er = $f.er; field$1 = $f.field$1; pb = $f.pb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r$5 = pb.ExtensionRangeArray(); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_ref = _r$5;\n\t\t_i = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }\n\t\t\ter = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]), ExtensionRange);\n\t\t\tif (er.Start <= field$1 && field$1 <= er.End) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t_i++;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\treturn false;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: isExtensionField }; } $f.$ptr = $ptr; $f._i = _i; $f._r$5 = _r$5; $f._ref = _ref; $f.er = er; $f.field$1 = field$1; $f.pb = pb; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tcheckExtensionTypes = function(pb, extension) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, _r$8, _tmp, _tmp$1, a, b, extension, pb, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; a = $f.a; b = $f.b; extension = $f.extension; pb = $f.pb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_tmp = reflect.TypeOf(pb); _tmp$1 = reflect.TypeOf(extension.ExtendedType); a = _tmp; b = _tmp$1;\n\t\t/* */ if (!($interfaceIsEqual(a, b))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!($interfaceIsEqual(a, b))) { */ case 1:\n\t\t\t_r$5 = b.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t_r$6 = a.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_r$7 = errors.New(\"proto: bad extended type; \" + _r$5 + \" does not extend \" + _r$6); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\treturn _r$7;\n\t\t/* } */ case 2:\n\t\t_r$8 = isExtensionField(pb, extension.Field); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t/* */ if (!_r$8) { $s = 6; continue; }\n\t\t/* */ $s = 7; continue;\n\t\t/* if (!_r$8) { */ case 6:\n\t\t\treturn errors.New(\"proto: bad extension number; not in declared ranges\");\n\t\t/* } */ case 7:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: checkExtensionTypes }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.a = a; $f.b = b; $f.extension = extension; $f.pb = pb; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\textensionProperties = function(ed) {\n\t\tvar $ptr, _entry, _entry$1, _key, _tuple, _tuple$1, ed, key, ok, ok$1, prop, prop$1, prop$2, $s, $deferred, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; ed = $f.ed; key = $f.key; ok = $f.ok; ok$1 = $f.ok$1; prop = $f.prop; prop$1 = $f.prop$1; prop$2 = $f.prop$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\tkey = new extPropKey.ptr(reflect.TypeOf(ed.ExtendedType), ed.Field);\n\t\t$r = extProp.RWMutex.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t_tuple = (_entry = extProp.m[(new extPropKey(key)).$key()], _entry !== undefined ? [_entry.v, true] : [ptrType$1.nil, false]); prop = _tuple[0]; ok = _tuple[1];\n\t\t/* */ if (ok) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (ok) { */ case 2:\n\t\t\t$r = extProp.RWMutex.RUnlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\treturn prop;\n\t\t/* } */ case 3:\n\t\t$r = extProp.RWMutex.RUnlock(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = extProp.RWMutex.Lock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$deferred.push([$methodVal(extProp.RWMutex, \"Unlock\"), []]);\n\t\t_tuple$1 = (_entry$1 = extProp.m[(new extPropKey(key)).$key()], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$1.nil, false]); prop$1 = _tuple$1[0]; ok$1 = _tuple$1[1];\n\t\tif (ok$1) {\n\t\t\treturn prop$1;\n\t\t}\n\t\tprop$2 = new Properties.ptr();\n\t\t$r = prop$2.Init(reflect.TypeOf(ed.ExtensionType), \"unknown_name\", ed.Tag, ptrType$12.nil); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t_key = $clone(key, extPropKey); (extProp.m || $throwRuntimeError(\"assignment to entry in nil map\"))[(new extPropKey(_key)).$key()] = { k: _key, v: prop$2 };\n\t\treturn prop$2;\n\t\t/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; return ptrType$1.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: extensionProperties }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.ed = ed; $f.key = key; $f.ok = ok; $f.ok$1 = ok$1; $f.prop = prop; $f.prop$1 = prop$1; $f.prop$2 = prop$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }\n\t};\n\tencodeExtensionMap = function(m) {\n\t\tvar $ptr, _entry, _i, _key, _keys, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, e, err, et, k, m, p, props, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _key = $f._key; _keys = $f._keys; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; e = $f.e; err = $f.err; et = $f.et; k = $f.k; m = $f.m; p = $f.p; props = $f.props; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_ref = m;\n\t\t_i = 0;\n\t\t_keys = $keys(_ref);\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }\n\t\t\t_entry = _ref[_keys[_i]];\n\t\t\tif (_entry === undefined) {\n\t\t\t\t_i++;\n\t\t\t\t/* continue; */ $s = 1; continue;\n\t\t\t}\n\t\t\tk = _entry.k;\n\t\t\te = $clone(_entry.v, Extension);\n\t\t\t/* */ if ($interfaceIsEqual(e.value, $ifaceNil) || e.desc === ptrType$7.nil) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if ($interfaceIsEqual(e.value, $ifaceNil) || e.desc === ptrType$7.nil) { */ case 3:\n\t\t\t\t_i++;\n\t\t\t\t/* continue; */ $s = 1; continue;\n\t\t\t/* } */ case 4:\n\t\t\tet = reflect.TypeOf(e.desc.ExtensionType);\n\t\t\t_r$5 = extensionProperties(e.desc); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\tprops = _r$5;\n\t\t\tp = NewBuffer(sliceType.nil);\n\t\t\t_r$6 = reflect.New(et); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\tx = _r$6;\n\t\t\t_r$7 = x.Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t_r$8 = reflect.ValueOf(e.value); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t$r = _r$7.Set(_r$8); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t_r$9 = props.enc(p, props, toStructPointer(x)); /* */ $s = 10; case 10: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\terr = _r$9;\n\t\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 11; continue; }\n\t\t\t/* */ $s = 12; continue;\n\t\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 11:\n\t\t\t\treturn err;\n\t\t\t/* } */ case 12:\n\t\t\te.enc = p.buf;\n\t\t\t_key = k; (m || $throwRuntimeError(\"assignment to entry in nil map\"))[_key] = { k: _key, v: $clone(e, Extension) };\n\t\t\t_i++;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encodeExtensionMap }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._keys = _keys; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.e = e; $f.err = err; $f.et = et; $f.k = k; $f.m = m; $f.p = p; $f.props = props; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tsizeExtensionMap = function(m) {\n\t\tvar $ptr, _entry, _i, _keys, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, e, et, m, n, props, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; e = $f.e; et = $f.et; m = $f.m; n = $f.n; props = $f.props; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\t_ref = m;\n\t\t_i = 0;\n\t\t_keys = $keys(_ref);\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }\n\t\t\t_entry = _ref[_keys[_i]];\n\t\t\tif (_entry === undefined) {\n\t\t\t\t_i++;\n\t\t\t\t/* continue; */ $s = 1; continue;\n\t\t\t}\n\t\t\te = $clone(_entry.v, Extension);\n\t\t\t/* */ if ($interfaceIsEqual(e.value, $ifaceNil) || e.desc === ptrType$7.nil) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if ($interfaceIsEqual(e.value, $ifaceNil) || e.desc === ptrType$7.nil) { */ case 3:\n\t\t\t\tn = n + (e.enc.$length) >> 0;\n\t\t\t\t_i++;\n\t\t\t\t/* continue; */ $s = 1; continue;\n\t\t\t/* } */ case 4:\n\t\t\tet = reflect.TypeOf(e.desc.ExtensionType);\n\t\t\t_r$5 = extensionProperties(e.desc); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\tprops = _r$5;\n\t\t\t_r$6 = reflect.New(et); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\tx = _r$6;\n\t\t\t_r$7 = x.Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t_r$8 = reflect.ValueOf(e.value); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t$r = _r$7.Set(_r$8); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t_r$9 = props.size(props, toStructPointer(x)); /* */ $s = 10; case 10: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\tn = n + (_r$9) >> 0;\n\t\t\t_i++;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: sizeExtensionMap }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.e = e; $f.et = et; $f.m = m; $f.n = n; $f.props = props; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tGetExtension = function(pb, extension) {\n\t\tvar $ptr, _entry, _key, _r$5, _r$6, _r$7, _tuple, _tuple$1, e, emap, err, err$1, extension, ok, pb, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; e = $f.e; emap = $f.emap; err = $f.err; err$1 = $f.err$1; extension = $f.extension; ok = $f.ok; pb = $f.pb; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r$5 = checkExtensionTypes(pb, extension); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\terr = _r$5;\n\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:\n\t\t\treturn [$ifaceNil, err];\n\t\t/* } */ case 3:\n\t\t_r$6 = pb.ExtensionMap(); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\temap = _r$6;\n\t\t_tuple = (_entry = emap[extension.Field], _entry !== undefined ? [_entry.v, true] : [new Extension.ptr(), false]); e = $clone(_tuple[0], Extension); ok = _tuple[1];\n\t\tif (!ok) {\n\t\t\treturn [$ifaceNil, $pkg.ErrMissingExtension];\n\t\t}\n\t\tif (!($interfaceIsEqual(e.value, $ifaceNil))) {\n\t\t\tif (!(e.desc === extension)) {\n\t\t\t\treturn [$ifaceNil, errors.New(\"proto: descriptor conflict\")];\n\t\t\t}\n\t\t\treturn [e.value, $ifaceNil];\n\t\t}\n\t\t_r$7 = decodeExtension(e.enc, extension); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r$7; v = _tuple$1[0]; err$1 = _tuple$1[1];\n\t\tif (!($interfaceIsEqual(err$1, $ifaceNil))) {\n\t\t\treturn [$ifaceNil, err$1];\n\t\t}\n\t\te.value = v;\n\t\te.desc = extension;\n\t\te.enc = sliceType.nil;\n\t\t_key = extension.Field; (emap || $throwRuntimeError(\"assignment to entry in nil map\"))[_key] = { k: _key, v: $clone(e, Extension) };\n\t\treturn [e.value, $ifaceNil];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: GetExtension }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.e = e; $f.emap = emap; $f.err = err; $f.err$1 = err$1; $f.extension = extension; $f.ok = ok; $f.pb = pb; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.GetExtension = GetExtension;\n\tdecodeExtension = function(b, extension) {\n\t\tvar $ptr, _r$10, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, b, err, err$1, extension, o, props, rep, t, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; b = $f.b; err = $f.err; err$1 = $f.err$1; extension = $f.extension; o = $f.o; props = $f.props; rep = $f.rep; t = $f.t; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = NewBuffer(b);\n\t\tt = reflect.TypeOf(extension.ExtensionType);\n\t\t_r$5 = extension.repeated(); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\trep = _r$5;\n\t\t_r$6 = extensionProperties(extension); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tprops = _r$6;\n\t\t_r$7 = reflect.New(t); /* */ $s = 3; case 3: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t_r$8 = _r$7.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\tvalue = _r$8;\n\t\t/* while (true) { */ case 5:\n\t\t\t_tuple = o.DecodeVarint(); err = _tuple[1];\n\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\treturn [$ifaceNil, err];\n\t\t\t}\n\t\t\t_r$9 = props.dec(o, props, toStructPointer(value.Addr())); /* */ $s = 7; case 7: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\terr$1 = _r$9;\n\t\t\t/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 8; continue; }\n\t\t\t/* */ $s = 9; continue;\n\t\t\t/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 8:\n\t\t\t\treturn [$ifaceNil, err$1];\n\t\t\t/* } */ case 9:\n\t\t\tif (!rep || o.index >= o.buf.$length) {\n\t\t\t\t/* break; */ $s = 6; continue;\n\t\t\t}\n\t\t/* } */ $s = 5; continue; case 6:\n\t\t_r$10 = value.Interface(); /* */ $s = 10; case 10: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\treturn [_r$10, $ifaceNil];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeExtension }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.extension = extension; $f.o = o; $f.props = props; $f.rep = rep; $f.t = t; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tNewBuffer = function(e) {\n\t\tvar $ptr, e;\n\t\treturn new Buffer.ptr(e, 0, sliceType$3.nil, sliceType$5.nil, sliceType$6.nil, sliceType$7.nil, sliceType$8.nil, sliceType$9.nil, sliceType$10.nil);\n\t};\n\t$pkg.NewBuffer = NewBuffer;\n\tBuffer.ptr.prototype.Reset = function() {\n\t\tvar $ptr, p;\n\t\tp = this;\n\t\tp.buf = $subslice(p.buf, 0, 0);\n\t\tp.index = 0;\n\t};\n\tBuffer.prototype.Reset = function() { return this.$val.Reset(); };\n\tBuffer.ptr.prototype.SetBuf = function(s) {\n\t\tvar $ptr, p, s;\n\t\tp = this;\n\t\tp.buf = s;\n\t\tp.index = 0;\n\t};\n\tBuffer.prototype.SetBuf = function(s) { return this.$val.SetBuf(s); };\n\tBuffer.ptr.prototype.Bytes = function() {\n\t\tvar $ptr, p;\n\t\tp = this;\n\t\treturn p.buf;\n\t};\n\tBuffer.prototype.Bytes = function() { return this.$val.Bytes(); };\n\tEnumName = function(m, v) {\n\t\tvar $ptr, _entry, _tuple, m, ok, s, v;\n\t\t_tuple = (_entry = m[v], _entry !== undefined ? [_entry.v, true] : [\"\", false]); s = _tuple[0]; ok = _tuple[1];\n\t\tif (ok) {\n\t\t\treturn s;\n\t\t}\n\t\treturn strconv.Itoa((v >> 0));\n\t};\n\t$pkg.EnumName = EnumName;\n\tUnmarshalJSONEnum = function(m, data, enumName) {\n\t\tvar $ptr, _entry, _r$5, _r$6, _r$7, _r$8, _tuple, data, enumName, err, err$1, m, ok, repr, val, val$1, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; data = $f.data; enumName = $f.enumName; err = $f.err; err$1 = $f.err$1; m = $f.m; ok = $f.ok; repr = $f.repr; val = $f.val; val$1 = $f.val$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\trepr = [repr];\n\t\tval = [val];\n\t\t/* */ if ((0 >= data.$length ? $throwRuntimeError(\"index out of range\") : data.$array[data.$offset + 0]) === 34) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if ((0 >= data.$length ? $throwRuntimeError(\"index out of range\") : data.$array[data.$offset + 0]) === 34) { */ case 1:\n\t\t\trepr[0] = \"\";\n\t\t\t_r$5 = json.Unmarshal(data, (repr.$ptr || (repr.$ptr = new ptrType$9(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, repr)))); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\terr = _r$5;\n\t\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }\n\t\t\t/* */ $s = 5; continue;\n\t\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:\n\t\t\t\treturn [-1, err];\n\t\t\t/* } */ case 5:\n\t\t\t_tuple = (_entry = m[repr[0]], _entry !== undefined ? [_entry.v, true] : [0, false]); val$1 = _tuple[0]; ok = _tuple[1];\n\t\t\t/* */ if (!ok) { $s = 6; continue; }\n\t\t\t/* */ $s = 7; continue;\n\t\t\t/* if (!ok) { */ case 6:\n\t\t\t\t_r$6 = fmt.Errorf(\"unrecognized enum %s value %q\", new sliceType$2([new $String(enumName), new $String(repr[0])])); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t\treturn [0, _r$6];\n\t\t\t/* } */ case 7:\n\t\t\treturn [val$1, $ifaceNil];\n\t\t/* } */ case 2:\n\t\tval[0] = 0;\n\t\t_r$7 = json.Unmarshal(data, (val.$ptr || (val.$ptr = new ptrType$2(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, val)))); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\terr$1 = _r$7;\n\t\t/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 10; continue; }\n\t\t/* */ $s = 11; continue;\n\t\t/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 10:\n\t\t\t_r$8 = fmt.Errorf(\"cannot unmarshal %#q into enum %s\", new sliceType$2([data, new $String(enumName)])); /* */ $s = 12; case 12: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\treturn [0, _r$8];\n\t\t/* } */ case 11:\n\t\treturn [val[0], $ifaceNil];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: UnmarshalJSONEnum }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f.data = data; $f.enumName = enumName; $f.err = err; $f.err$1 = err$1; $f.m = m; $f.ok = ok; $f.repr = repr; $f.val = val; $f.val$1 = val$1; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.UnmarshalJSONEnum = UnmarshalJSONEnum;\n\tBuffer.ptr.prototype.DebugPrint = function(s, b) {\n\t\tvar $ptr, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, depth, err, i, i$1, i$2, i$3, index, index$1, o, obuf, op, r, s, tag, u, wire, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; b = $f.b; depth = $f.depth; err = $f.err; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; index = $f.index; index$1 = $f.index$1; o = $f.o; obuf = $f.obuf; op = $f.op; r = $f.r; s = $f.s; tag = $f.tag; u = $f.u; wire = $f.wire; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\to = this;\n\t\tu = new $Uint64(0, 0);\n\t\tobuf = o.buf;\n\t\tindex = o.index;\n\t\to.buf = b;\n\t\to.index = 0;\n\t\tdepth = 0;\n\t\t_r$5 = fmt.Printf(\"\\n--- %s ---\\n\", new sliceType$2([new $String(s)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_r$5;\n\t\t/* while (true) { */ case 2:\n\t\t\ti = 0;\n\t\t\t/* while (true) { */ case 4:\n\t\t\t\t/* if (!(i < depth)) { break; } */ if(!(i < depth)) { $s = 5; continue; }\n\t\t\t\t_r$6 = fmt.Print(new sliceType$2([new $String(\"  \")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t\t_r$6;\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t/* } */ $s = 4; continue; case 5:\n\t\t\tindex$1 = o.index;\n\t\t\tif (index$1 === o.buf.$length) {\n\t\t\t\t/* break; */ $s = 3; continue;\n\t\t\t}\n\t\t\t_tuple = o.DecodeVarint(); op = _tuple[0]; err = _tuple[1];\n\t\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 7; continue; }\n\t\t\t/* */ $s = 8; continue;\n\t\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 7:\n\t\t\t\t_r$7 = fmt.Printf(\"%3d: fetching op err %v\\n\", new sliceType$2([new $Int(index$1), err])); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t\t_r$7;\n\t\t\t\t/* break out; */ $s = 3; continue s;\n\t\t\t/* } */ case 8:\n\t\t\ttag = $shiftRightUint64(op, 3);\n\t\t\twire = new $Uint64(op.$high & 0, (op.$low & 7) >>> 0);\n\t\t\t_ref = wire;\n\t\t\t/* */ if ((_ref.$high === 0 && _ref.$low === 2)) { $s = 10; continue; }\n\t\t\t/* */ if ((_ref.$high === 0 && _ref.$low === 5)) { $s = 11; continue; }\n\t\t\t/* */ if ((_ref.$high === 0 && _ref.$low === 1)) { $s = 12; continue; }\n\t\t\t/* */ if ((_ref.$high === 0 && _ref.$low === 0)) { $s = 13; continue; }\n\t\t\t/* */ if ((_ref.$high === 0 && _ref.$low === 3)) { $s = 14; continue; }\n\t\t\t/* */ if ((_ref.$high === 0 && _ref.$low === 4)) { $s = 15; continue; }\n\t\t\t/* */ $s = 16; continue;\n\t\t\t/* switch (0) { default: if ((_ref.$high === 0 && _ref.$low === 2)) { */ case 10:\n\t\t\t\tr = sliceType.nil;\n\t\t\t\t_r$8 = o.DecodeRawBytes(false); /* */ $s = 18; case 18: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$1 = _r$8; r = _tuple$1[0]; err = _tuple$1[1];\n\t\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\t\t/* break out; */ $s = 3; continue s;\n\t\t\t\t}\n\t\t\t\t_r$9 = fmt.Printf(\"%3d: t=%3d bytes [%d]\", new sliceType$2([new $Int(index$1), tag, new $Int(r.$length)])); /* */ $s = 19; case 19: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\t\t_r$9;\n\t\t\t\t/* */ if (r.$length <= 6) { $s = 20; continue; }\n\t\t\t\t/* */ $s = 21; continue;\n\t\t\t\t/* if (r.$length <= 6) { */ case 20:\n\t\t\t\t\ti$1 = 0;\n\t\t\t\t\t/* while (true) { */ case 23:\n\t\t\t\t\t\t/* if (!(i$1 < r.$length)) { break; } */ if(!(i$1 < r.$length)) { $s = 24; continue; }\n\t\t\t\t\t\t_r$10 = fmt.Printf(\" %.2x\", new sliceType$2([new $Uint8(((i$1 < 0 || i$1 >= r.$length) ? $throwRuntimeError(\"index out of range\") : r.$array[r.$offset + i$1]))])); /* */ $s = 25; case 25: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\t\t\t\t_r$10;\n\t\t\t\t\t\ti$1 = i$1 + (1) >> 0;\n\t\t\t\t\t/* } */ $s = 23; continue; case 24:\n\t\t\t\t\t$s = 22; continue;\n\t\t\t\t/* } else { */ case 21:\n\t\t\t\t\ti$2 = 0;\n\t\t\t\t\t/* while (true) { */ case 26:\n\t\t\t\t\t\t/* if (!(i$2 < 3)) { break; } */ if(!(i$2 < 3)) { $s = 27; continue; }\n\t\t\t\t\t\t_r$11 = fmt.Printf(\" %.2x\", new sliceType$2([new $Uint8(((i$2 < 0 || i$2 >= r.$length) ? $throwRuntimeError(\"index out of range\") : r.$array[r.$offset + i$2]))])); /* */ $s = 28; case 28: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t\t\t\t\t_r$11;\n\t\t\t\t\t\ti$2 = i$2 + (1) >> 0;\n\t\t\t\t\t/* } */ $s = 26; continue; case 27:\n\t\t\t\t\t_r$12 = fmt.Printf(\" ..\", new sliceType$2([])); /* */ $s = 29; case 29: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$12;\n\t\t\t\t\ti$3 = r.$length - 3 >> 0;\n\t\t\t\t\t/* while (true) { */ case 30:\n\t\t\t\t\t\t/* if (!(i$3 < r.$length)) { break; } */ if(!(i$3 < r.$length)) { $s = 31; continue; }\n\t\t\t\t\t\t_r$13 = fmt.Printf(\" %.2x\", new sliceType$2([new $Uint8(((i$3 < 0 || i$3 >= r.$length) ? $throwRuntimeError(\"index out of range\") : r.$array[r.$offset + i$3]))])); /* */ $s = 32; case 32: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }\n\t\t\t\t\t\t_r$13;\n\t\t\t\t\t\ti$3 = i$3 + (1) >> 0;\n\t\t\t\t\t/* } */ $s = 30; continue; case 31:\n\t\t\t\t/* } */ case 22:\n\t\t\t\t_r$14 = fmt.Printf(\"\\n\", new sliceType$2([])); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }\n\t\t\t\t_r$14;\n\t\t\t\t$s = 17; continue;\n\t\t\t/* } else if ((_ref.$high === 0 && _ref.$low === 5)) { */ case 11:\n\t\t\t\t_tuple$2 = o.DecodeFixed32(); u = _tuple$2[0]; err = _tuple$2[1];\n\t\t\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 34; continue; }\n\t\t\t\t/* */ $s = 35; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 34:\n\t\t\t\t\t_r$15 = fmt.Printf(\"%3d: t=%3d fix32 err %v\\n\", new sliceType$2([new $Int(index$1), tag, err])); /* */ $s = 36; case 36: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$15;\n\t\t\t\t\t/* break out; */ $s = 3; continue s;\n\t\t\t\t/* } */ case 35:\n\t\t\t\t_r$16 = fmt.Printf(\"%3d: t=%3d fix32 %d\\n\", new sliceType$2([new $Int(index$1), tag, u])); /* */ $s = 37; case 37: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }\n\t\t\t\t_r$16;\n\t\t\t\t$s = 17; continue;\n\t\t\t/* } else if ((_ref.$high === 0 && _ref.$low === 1)) { */ case 12:\n\t\t\t\t_tuple$3 = o.DecodeFixed64(); u = _tuple$3[0]; err = _tuple$3[1];\n\t\t\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 38; continue; }\n\t\t\t\t/* */ $s = 39; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 38:\n\t\t\t\t\t_r$17 = fmt.Printf(\"%3d: t=%3d fix64 err %v\\n\", new sliceType$2([new $Int(index$1), tag, err])); /* */ $s = 40; case 40: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$17;\n\t\t\t\t\t/* break out; */ $s = 3; continue s;\n\t\t\t\t/* } */ case 39:\n\t\t\t\t_r$18 = fmt.Printf(\"%3d: t=%3d fix64 %d\\n\", new sliceType$2([new $Int(index$1), tag, u])); /* */ $s = 41; case 41: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }\n\t\t\t\t_r$18;\n\t\t\t\t/* break; */ $s = 17; continue;\n\t\t\t\t$s = 17; continue;\n\t\t\t/* } else if ((_ref.$high === 0 && _ref.$low === 0)) { */ case 13:\n\t\t\t\t_tuple$4 = o.DecodeVarint(); u = _tuple$4[0]; err = _tuple$4[1];\n\t\t\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 42; continue; }\n\t\t\t\t/* */ $s = 43; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 42:\n\t\t\t\t\t_r$19 = fmt.Printf(\"%3d: t=%3d varint err %v\\n\", new sliceType$2([new $Int(index$1), tag, err])); /* */ $s = 44; case 44: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$19;\n\t\t\t\t\t/* break out; */ $s = 3; continue s;\n\t\t\t\t/* } */ case 43:\n\t\t\t\t_r$20 = fmt.Printf(\"%3d: t=%3d varint %d\\n\", new sliceType$2([new $Int(index$1), tag, u])); /* */ $s = 45; case 45: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }\n\t\t\t\t_r$20;\n\t\t\t\t$s = 17; continue;\n\t\t\t/* } else if ((_ref.$high === 0 && _ref.$low === 3)) { */ case 14:\n\t\t\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 46; continue; }\n\t\t\t\t/* */ $s = 47; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 46:\n\t\t\t\t\t_r$21 = fmt.Printf(\"%3d: t=%3d start err %v\\n\", new sliceType$2([new $Int(index$1), tag, err])); /* */ $s = 48; case 48: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$21;\n\t\t\t\t\t/* break out; */ $s = 3; continue s;\n\t\t\t\t/* } */ case 47:\n\t\t\t\t_r$22 = fmt.Printf(\"%3d: t=%3d start\\n\", new sliceType$2([new $Int(index$1), tag])); /* */ $s = 49; case 49: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }\n\t\t\t\t_r$22;\n\t\t\t\tdepth = depth + (1) >> 0;\n\t\t\t\t$s = 17; continue;\n\t\t\t/* } else if ((_ref.$high === 0 && _ref.$low === 4)) { */ case 15:\n\t\t\t\tdepth = depth - (1) >> 0;\n\t\t\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 50; continue; }\n\t\t\t\t/* */ $s = 51; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 50:\n\t\t\t\t\t_r$23 = fmt.Printf(\"%3d: t=%3d end err %v\\n\", new sliceType$2([new $Int(index$1), tag, err])); /* */ $s = 52; case 52: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$23;\n\t\t\t\t\t/* break out; */ $s = 3; continue s;\n\t\t\t\t/* } */ case 51:\n\t\t\t\t_r$24 = fmt.Printf(\"%3d: t=%3d end\\n\", new sliceType$2([new $Int(index$1), tag])); /* */ $s = 53; case 53: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }\n\t\t\t\t_r$24;\n\t\t\t\t$s = 17; continue;\n\t\t\t/* } else { */ case 16:\n\t\t\t\t_r$25 = fmt.Printf(\"%3d: t=%3d unknown wire=%d\\n\", new sliceType$2([new $Int(index$1), tag, wire])); /* */ $s = 54; case 54: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }\n\t\t\t\t_r$25;\n\t\t\t\t/* break out; */ $s = 3; continue s;\n\t\t\t/* } } */ case 17:\n\t\t/* } */ $s = 2; continue; case 3:\n\t\t/* */ if (!((depth === 0))) { $s = 55; continue; }\n\t\t/* */ $s = 56; continue;\n\t\t/* if (!((depth === 0))) { */ case 55:\n\t\t\t_r$26 = fmt.Printf(\"%3d: start-end not balanced %d\\n\", new sliceType$2([new $Int(o.index), new $Int(depth)])); /* */ $s = 57; case 57: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }\n\t\t\t_r$26;\n\t\t/* } */ case 56:\n\t\t_r$27 = fmt.Printf(\"\\n\", new sliceType$2([])); /* */ $s = 58; case 58: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }\n\t\t_r$27;\n\t\to.buf = obuf;\n\t\to.index = index;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.DebugPrint }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.b = b; $f.depth = depth; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.index = index; $f.index$1 = index$1; $f.o = o; $f.obuf = obuf; $f.op = op; $f.r = r; $f.s = s; $f.tag = tag; $f.u = u; $f.wire = wire; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBuffer.prototype.DebugPrint = function(s, b) { return this.$val.DebugPrint(s, b); };\n\tmapKeys.prototype.Len = function() {\n\t\tvar $ptr, s;\n\t\ts = this;\n\t\treturn s.$length;\n\t};\n\t$ptrType(mapKeys).prototype.Len = function() { return this.$get().Len(); };\n\tmapKeys.prototype.Swap = function(i, j) {\n\t\tvar $ptr, _tmp, _tmp$1, i, j, s;\n\t\ts = this;\n\t\t_tmp = ((j < 0 || j >= s.$length) ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + j]); _tmp$1 = ((i < 0 || i >= s.$length) ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + i]); ((i < 0 || i >= s.$length) ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + i] = _tmp); ((j < 0 || j >= s.$length) ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + j] = _tmp$1);\n\t};\n\t$ptrType(mapKeys).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };\n\tmapKeys.prototype.Less = function(i, j) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, _r$8, i, j, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; i = $f.i; j = $f.j; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ts = this;\n\t\t_r$5 = ((i < 0 || i >= s.$length) ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + i]).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_r$6 = fmt.Sprint(new sliceType$2([_r$5])); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_r$7 = ((j < 0 || j >= s.$length) ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + j]).Interface(); /* */ $s = 3; case 3: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t_r$8 = fmt.Sprint(new sliceType$2([_r$7])); /* */ $s = 4; case 4: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\treturn _r$6 < _r$8;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: mapKeys.prototype.Less }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.i = i; $f.j = j; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$ptrType(mapKeys).prototype.Less = function(i, j) { return this.$get().Less(i, j); };\n\tMessageSet.ptr.prototype.find = function(pb) {\n\t\tvar $ptr, _i, _r$5, _ref, _tuple, id, item, ms, mti, ok, pb, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$5 = $f._r$5; _ref = $f._ref; _tuple = $f._tuple; id = $f.id; item = $f.item; ms = $f.ms; mti = $f.mti; ok = $f.ok; pb = $f.pb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tms = this;\n\t\t_tuple = $assertType(pb, messageTypeIder, true); mti = _tuple[0]; ok = _tuple[1];\n\t\tif (!ok) {\n\t\t\treturn ptrType$26.nil;\n\t\t}\n\t\t_r$5 = mti.MessageTypeId(); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tid = _r$5;\n\t\t_ref = ms.Item;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\titem = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tif (item.TypeId.$get() === id) {\n\t\t\t\treturn item;\n\t\t\t}\n\t\t\t_i++;\n\t\t}\n\t\treturn ptrType$26.nil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MessageSet.ptr.prototype.find }; } $f.$ptr = $ptr; $f._i = _i; $f._r$5 = _r$5; $f._ref = _ref; $f._tuple = _tuple; $f.id = id; $f.item = item; $f.ms = ms; $f.mti = mti; $f.ok = ok; $f.pb = pb; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tMessageSet.prototype.find = function(pb) { return this.$val.find(pb); };\n\tMessageSet.ptr.prototype.Has = function(pb) {\n\t\tvar $ptr, _r$5, ms, pb, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; ms = $f.ms; pb = $f.pb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tms = this;\n\t\t_r$5 = ms.find(pb); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t/* */ if (!(_r$5 === ptrType$26.nil)) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!(_r$5 === ptrType$26.nil)) { */ case 1:\n\t\t\treturn true;\n\t\t/* } */ case 2:\n\t\treturn false;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MessageSet.ptr.prototype.Has }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.ms = ms; $f.pb = pb; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tMessageSet.prototype.Has = function(pb) { return this.$val.Has(pb); };\n\tMessageSet.ptr.prototype.Unmarshal = function(pb) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, item, ms, ok, pb, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; item = $f.item; ms = $f.ms; ok = $f.ok; pb = $f.pb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tms = this;\n\t\t_r$5 = ms.find(pb); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\titem = _r$5;\n\t\t/* */ if (!(item === ptrType$26.nil)) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (!(item === ptrType$26.nil)) { */ case 2:\n\t\t\t_r$6 = Unmarshal(item.Message, pb); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\treturn _r$6;\n\t\t/* } */ case 3:\n\t\t_tuple = $assertType(pb, messageTypeIder, true); ok = _tuple[1];\n\t\tif (!ok) {\n\t\t\treturn $pkg.ErrNoMessageTypeId;\n\t\t}\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MessageSet.ptr.prototype.Unmarshal }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.item = item; $f.ms = ms; $f.ok = ok; $f.pb = pb; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tMessageSet.prototype.Unmarshal = function(pb) { return this.$val.Unmarshal(pb); };\n\tMessageSet.ptr.prototype.Marshal = function(pb) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, _tuple, _tuple$1, err, item, ms, msg, mti, mtid, ok, pb, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; item = $f.item; ms = $f.ms; msg = $f.msg; mti = $f.mti; mtid = $f.mtid; ok = $f.ok; pb = $f.pb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tmtid = [mtid];\n\t\tms = this;\n\t\t_r$5 = Marshal(pb); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_tuple = _r$5; msg = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\t_r$6 = ms.find(pb); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\titem = _r$6;\n\t\t/* */ if (!(item === ptrType$26.nil)) { $s = 3; continue; }\n\t\t/* */ $s = 4; continue;\n\t\t/* if (!(item === ptrType$26.nil)) { */ case 3:\n\t\t\titem.Message = msg;\n\t\t\treturn $ifaceNil;\n\t\t/* } */ case 4:\n\t\t_tuple$1 = $assertType(pb, messageTypeIder, true); mti = _tuple$1[0]; ok = _tuple$1[1];\n\t\tif (!ok) {\n\t\t\treturn $pkg.ErrNoMessageTypeId;\n\t\t}\n\t\t_r$7 = mti.MessageTypeId(); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\tmtid[0] = _r$7;\n\t\tms.Item = $append(ms.Item, new _MessageSet_Item.ptr((mtid.$ptr || (mtid.$ptr = new ptrType$2(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, mtid))), msg));\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MessageSet.ptr.prototype.Marshal }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.item = item; $f.ms = ms; $f.msg = msg; $f.mti = mti; $f.mtid = mtid; $f.ok = ok; $f.pb = pb; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tMessageSet.prototype.Marshal = function(pb) { return this.$val.Marshal(pb); };\n\tMessageSet.ptr.prototype.Reset = function() {\n\t\tvar $ptr, ms;\n\t\tms = this;\n\t\t$copy(ms, new MessageSet.ptr(sliceType$11.nil, sliceType.nil), MessageSet);\n\t};\n\tMessageSet.prototype.Reset = function() { return this.$val.Reset(); };\n\tMessageSet.ptr.prototype.String = function() {\n\t\tvar $ptr, _r$5, ms, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; ms = $f.ms; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tms = this;\n\t\t_r$5 = CompactTextString(ms); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn _r$5;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MessageSet.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.ms = ms; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tMessageSet.prototype.String = function() { return this.$val.String(); };\n\tMessageSet.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tMessageSet.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\ttoStructPointer = function(v) {\n\t\tvar $ptr, v;\n\t\tv = v;\n\t\treturn new structPointer.ptr($clone(v, reflect.Value));\n\t};\n\tstructPointer_IsNil = function(p) {\n\t\tvar $ptr, p;\n\t\tp = $clone(p, structPointer);\n\t\treturn p.v.IsNil();\n\t};\n\tstructPointer_Interface = function(p, param) {\n\t\tvar $ptr, _r$5, p, param, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; p = $f.p; param = $f.param; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = p.v.Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn _r$5;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_Interface }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.p = p; $f.param = param; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\ttoField = function(f) {\n\t\tvar $ptr, f, x;\n\t\treturn (x = f.Index, $subslice(new field(x.$array), x.$offset, x.$offset + x.$length));\n\t};\n\tfield.prototype.IsValid = function() {\n\t\tvar $ptr, f;\n\t\tf = this;\n\t\treturn !(f === field.nil);\n\t};\n\t$ptrType(field).prototype.IsValid = function() { return this.$get().IsValid(); };\n\tstructPointer_field = function(p, f) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, f, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t/* */ if (f === field.nil) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (f === field.nil) { */ case 1:\n\t\t\t_r$5 = p.v.Elem(); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\treturn _r$5;\n\t\t/* } */ case 2:\n\t\t_r$6 = p.v.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_r$7 = _r$6.FieldByIndex($subslice(new sliceType$4(f.$array), f.$offset, f.$offset + f.$length)); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\treturn _r$7;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_field }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructPointer_ifield = function(p, f) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, f, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = structPointer_field(p, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_r$6 = _r$5.Addr(); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_r$7 = _r$6.Interface(); /* */ $s = 3; case 3: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\treturn _r$7;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_ifield }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructPointer_Bytes = function(p, f) {\n\t\tvar $ptr, _r$5, f, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = structPointer_ifield(p, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn $assertType(_r$5, ptrType$10);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_Bytes }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructPointer_BytesSlice = function(p, f) {\n\t\tvar $ptr, _r$5, f, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = structPointer_ifield(p, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn $assertType(_r$5, ptrType$27);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_BytesSlice }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructPointer_Bool = function(p, f) {\n\t\tvar $ptr, _r$5, f, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = structPointer_ifield(p, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn $assertType(_r$5, ptrType$18);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_Bool }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructPointer_BoolVal = function(p, f) {\n\t\tvar $ptr, _r$5, f, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = structPointer_ifield(p, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn $assertType(_r$5, ptrType$8);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_BoolVal }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructPointer_BoolSlice = function(p, f) {\n\t\tvar $ptr, _r$5, f, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = structPointer_ifield(p, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn $assertType(_r$5, ptrType$28);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_BoolSlice }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructPointer_String = function(p, f) {\n\t\tvar $ptr, _r$5, f, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = structPointer_ifield(p, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn $assertType(_r$5, ptrType$23);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_String }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructPointer_StringVal = function(p, f) {\n\t\tvar $ptr, _r$5, f, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = structPointer_ifield(p, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn $assertType(_r$5, ptrType$9);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_StringVal }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructPointer_StringSlice = function(p, f) {\n\t\tvar $ptr, _r$5, f, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = structPointer_ifield(p, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn $assertType(_r$5, ptrType$29);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_StringSlice }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructPointer_ExtMap = function(p, f) {\n\t\tvar $ptr, _r$5, f, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = structPointer_ifield(p, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn $assertType(_r$5, ptrType$30);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_ExtMap }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructPointer_Map = function(p, f, typ) {\n\t\tvar $ptr, _r$5, _r$6, f, p, typ, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; f = $f.f; p = $f.p; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = structPointer_field(p, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_r$6 = _r$5.Addr(); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\treturn _r$6;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_Map }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.f = f; $f.p = p; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructPointer_SetStructPointer = function(p, f, q) {\n\t\tvar $ptr, _r$5, f, p, q, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; f = $f.f; p = $f.p; q = $f.q; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tq = $clone(q, structPointer);\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = structPointer_field(p, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t$r = _r$5.Set(q.v); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_SetStructPointer }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.f = f; $f.p = p; $f.q = q; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructPointer_GetStructPointer = function(p, f) {\n\t\tvar $ptr, _r$5, f, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = structPointer_field(p, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn new structPointer.ptr($clone(_r$5, reflect.Value));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_GetStructPointer }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructPointer_StructPointerSlice = function(p, f) {\n\t\tvar $ptr, _r$5, f, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = structPointer_field(p, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn new structPointerSlice.ptr($clone(_r$5, reflect.Value));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_StructPointerSlice }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructPointerSlice.ptr.prototype.Len = function() {\n\t\tvar $ptr, p;\n\t\tp = $clone(this, structPointerSlice);\n\t\treturn p.v.Len();\n\t};\n\tstructPointerSlice.prototype.Len = function() { return this.$val.Len(); };\n\tstructPointerSlice.ptr.prototype.Index = function(i) {\n\t\tvar $ptr, _r$5, i, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; i = $f.i; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(this, structPointerSlice);\n\t\t_r$5 = p.v.Index(i); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn new structPointer.ptr($clone(_r$5, reflect.Value));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointerSlice.ptr.prototype.Index }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.i = i; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructPointerSlice.prototype.Index = function(i) { return this.$val.Index(i); };\n\tstructPointerSlice.ptr.prototype.Append = function(q) {\n\t\tvar $ptr, _r$5, p, q, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; p = $f.p; q = $f.q; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(this, structPointerSlice);\n\t\tq = $clone(q, structPointer);\n\t\t_r$5 = reflect.Append(p.v, new sliceType$1([q.v])); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t$r = p.v.Set(_r$5); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointerSlice.ptr.prototype.Append }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.p = p; $f.q = q; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructPointerSlice.prototype.Append = function(q) { return this.$val.Append(q); };\n\tword32_IsNil = function(p) {\n\t\tvar $ptr, p;\n\t\tp = $clone(p, word32);\n\t\treturn p.v.IsNil();\n\t};\n\tword32_Set = function(p, o, x) {\n\t\tvar $ptr, _r$10, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, o, p, t, x, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; o = $f.o; p = $f.p; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, word32);\n\t\t_r$5 = p.v.Type().Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tt = _r$5;\n\t\t_ref = t;\n\t\t/* */ if ($interfaceIsEqual(_ref, int32Type)) { $s = 2; continue; }\n\t\t/* */ if ($interfaceIsEqual(_ref, uint32Type)) { $s = 3; continue; }\n\t\t/* */ if ($interfaceIsEqual(_ref, float32Type)) { $s = 4; continue; }\n\t\t/* */ $s = 5; continue;\n\t\t/* if ($interfaceIsEqual(_ref, int32Type)) { */ case 2:\n\t\t\tif (o.int32s.$length === 0) {\n\t\t\t\to.int32s = $makeSlice(sliceType$7, 8);\n\t\t\t}\n\t\t\t(x$1 = o.int32s, (0 >= x$1.$length ? $throwRuntimeError(\"index out of range\") : x$1.$array[x$1.$offset + 0] = (x >> 0)));\n\t\t\t_r$6 = reflect.ValueOf((x$2 = o.int32s, $indexPtr(x$2.$array, x$2.$offset + 0, ptrType$2))); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t$r = p.v.Set(_r$6); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\to.int32s = $subslice(o.int32s, 1);\n\t\t\treturn;\n\t\t\t$s = 5; continue;\n\t\t/* } else if ($interfaceIsEqual(_ref, uint32Type)) { */ case 3:\n\t\t\tif (o.uint32s.$length === 0) {\n\t\t\t\to.uint32s = $makeSlice(sliceType$5, 8);\n\t\t\t}\n\t\t\t(x$3 = o.uint32s, (0 >= x$3.$length ? $throwRuntimeError(\"index out of range\") : x$3.$array[x$3.$offset + 0] = x));\n\t\t\t_r$7 = reflect.ValueOf((x$4 = o.uint32s, $indexPtr(x$4.$array, x$4.$offset + 0, ptrType$16))); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t$r = p.v.Set(_r$7); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\to.uint32s = $subslice(o.uint32s, 1);\n\t\t\treturn;\n\t\t\t$s = 5; continue;\n\t\t/* } else if ($interfaceIsEqual(_ref, float32Type)) { */ case 4:\n\t\t\tif (o.float32s.$length === 0) {\n\t\t\t\to.float32s = $makeSlice(sliceType$9, 8);\n\t\t\t}\n\t\t\t(x$5 = o.float32s, (0 >= x$5.$length ? $throwRuntimeError(\"index out of range\") : x$5.$array[x$5.$offset + 0] = math.Float32frombits(x)));\n\t\t\t_r$8 = reflect.ValueOf((x$6 = o.float32s, $indexPtr(x$6.$array, x$6.$offset + 0, ptrType$14))); /* */ $s = 10; case 10: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t$r = p.v.Set(_r$8); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\to.float32s = $subslice(o.float32s, 1);\n\t\t\treturn;\n\t\t/* } */ case 5:\n\t\t_r$9 = reflect.New(t); /* */ $s = 12; case 12: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t$r = p.v.Set(_r$9); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t_r$10 = p.v.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t$r = _r$10.SetInt(new $Int64(0, (x >> 0))); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: word32_Set }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.o = o; $f.p = p; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tword32_Get = function(p) {\n\t\tvar $ptr, _r$5, _ref, elem, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _ref = $f._ref; elem = $f.elem; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, word32);\n\t\t_r$5 = p.v.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\telem = _r$5;\n\t\t_ref = elem.Kind();\n\t\tif (_ref === 5) {\n\t\t\treturn (elem.Int().$low >>> 0);\n\t\t} else if (_ref === 10) {\n\t\t\treturn (elem.Uint().$low >>> 0);\n\t\t} else if (_ref === 13) {\n\t\t\treturn math.Float32bits($fround(elem.Float()));\n\t\t}\n\t\t$panic(new $String(\"unreachable\"));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: word32_Get }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._ref = _ref; $f.elem = elem; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructPointer_Word32 = function(p, f) {\n\t\tvar $ptr, _r$5, f, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = structPointer_field(p, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn new word32.ptr($clone(_r$5, reflect.Value));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_Word32 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tword32Val_Set = function(p, x) {\n\t\tvar $ptr, _ref, p, x;\n\t\tp = $clone(p, word32Val);\n\t\t_ref = p.v.Type();\n\t\tif ($interfaceIsEqual(_ref, int32Type)) {\n\t\t\tp.v.SetInt(new $Int64(0, x));\n\t\t\treturn;\n\t\t} else if ($interfaceIsEqual(_ref, uint32Type)) {\n\t\t\tp.v.SetUint(new $Uint64(0, x));\n\t\t\treturn;\n\t\t} else if ($interfaceIsEqual(_ref, float32Type)) {\n\t\t\tp.v.SetFloat(math.Float32frombits(x));\n\t\t\treturn;\n\t\t}\n\t\tp.v.SetInt(new $Int64(0, (x >> 0)));\n\t};\n\tword32Val_Get = function(p) {\n\t\tvar $ptr, _ref, elem, p;\n\t\tp = $clone(p, word32Val);\n\t\telem = p.v;\n\t\t_ref = elem.Kind();\n\t\tif (_ref === 5) {\n\t\t\treturn (elem.Int().$low >>> 0);\n\t\t} else if (_ref === 10) {\n\t\t\treturn (elem.Uint().$low >>> 0);\n\t\t} else if (_ref === 13) {\n\t\t\treturn math.Float32bits($fround(elem.Float()));\n\t\t}\n\t\t$panic(new $String(\"unreachable\"));\n\t};\n\tstructPointer_Word32Val = function(p, f) {\n\t\tvar $ptr, _r$5, f, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = structPointer_field(p, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn new word32Val.ptr($clone(_r$5, reflect.Value));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_Word32Val }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tword32Slice.ptr.prototype.Append = function(x) {\n\t\tvar $ptr, _arg, _arg$1, _r$5, _r$6, _r$7, _r$8, _ref, _tmp, _tmp$1, elem, m, n, p, t, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; elem = $f.elem; m = $f.m; n = $f.n; p = $f.p; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(this, word32Slice);\n\t\t_tmp = p.v.Len(); _tmp$1 = p.v.Cap(); n = _tmp; m = _tmp$1;\n\t\t/* */ if (n < m) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (n < m) { */ case 1:\n\t\t\tp.v.SetLen(n + 1 >> 0);\n\t\t\t$s = 3; continue;\n\t\t/* } else { */ case 2:\n\t\t\t_r$5 = p.v.Type().Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\tt = _r$5;\n\t\t\t_arg = p.v;\n\t\t\t_r$6 = reflect.Zero(t); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_arg$1 = _r$6;\n\t\t\t_r$7 = reflect.Append(_arg, new sliceType$1([_arg$1])); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t$r = p.v.Set(_r$7); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 3:\n\t\t_r$8 = p.v.Index(n); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\telem = _r$8;\n\t\t_ref = elem.Kind();\n\t\tif (_ref === 5) {\n\t\t\telem.SetInt(new $Int64(0, (x >> 0)));\n\t\t} else if (_ref === 10) {\n\t\t\telem.SetUint(new $Uint64(0, x));\n\t\t} else if (_ref === 13) {\n\t\t\telem.SetFloat(math.Float32frombits(x));\n\t\t}\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: word32Slice.ptr.prototype.Append }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.elem = elem; $f.m = m; $f.n = n; $f.p = p; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tword32Slice.prototype.Append = function(x) { return this.$val.Append(x); };\n\tword32Slice.ptr.prototype.Len = function() {\n\t\tvar $ptr, p;\n\t\tp = $clone(this, word32Slice);\n\t\treturn p.v.Len();\n\t};\n\tword32Slice.prototype.Len = function() { return this.$val.Len(); };\n\tword32Slice.ptr.prototype.Index = function(i) {\n\t\tvar $ptr, _r$5, _ref, elem, i, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _ref = $f._ref; elem = $f.elem; i = $f.i; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(this, word32Slice);\n\t\t_r$5 = p.v.Index(i); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\telem = _r$5;\n\t\t_ref = elem.Kind();\n\t\tif (_ref === 5) {\n\t\t\treturn (elem.Int().$low >>> 0);\n\t\t} else if (_ref === 10) {\n\t\t\treturn (elem.Uint().$low >>> 0);\n\t\t} else if (_ref === 13) {\n\t\t\treturn math.Float32bits($fround(elem.Float()));\n\t\t}\n\t\t$panic(new $String(\"unreachable\"));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: word32Slice.ptr.prototype.Index }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._ref = _ref; $f.elem = elem; $f.i = i; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tword32Slice.prototype.Index = function(i) { return this.$val.Index(i); };\n\tstructPointer_Word32Slice = function(p, f) {\n\t\tvar $ptr, _r$5, f, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = structPointer_field(p, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn new word32Slice.ptr($clone(_r$5, reflect.Value));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_Word32Slice }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tword64_Set = function(p, o, x) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, _r$8, _ref, o, p, t, x, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; o = $f.o; p = $f.p; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, word64);\n\t\t_r$5 = p.v.Type().Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tt = _r$5;\n\t\t_ref = t;\n\t\t/* */ if ($interfaceIsEqual(_ref, int64Type)) { $s = 2; continue; }\n\t\t/* */ if ($interfaceIsEqual(_ref, uint64Type)) { $s = 3; continue; }\n\t\t/* */ if ($interfaceIsEqual(_ref, float64Type)) { $s = 4; continue; }\n\t\t/* */ $s = 5; continue;\n\t\t/* if ($interfaceIsEqual(_ref, int64Type)) { */ case 2:\n\t\t\tif (o.int64s.$length === 0) {\n\t\t\t\to.int64s = $makeSlice(sliceType$8, 4);\n\t\t\t}\n\t\t\t(x$1 = o.int64s, (0 >= x$1.$length ? $throwRuntimeError(\"index out of range\") : x$1.$array[x$1.$offset + 0] = new $Int64(x.$high, x.$low)));\n\t\t\t_r$6 = reflect.ValueOf((x$2 = o.int64s, $indexPtr(x$2.$array, x$2.$offset + 0, ptrType$13))); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t$r = p.v.Set(_r$6); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\to.int64s = $subslice(o.int64s, 1);\n\t\t\treturn;\n\t\t\t$s = 5; continue;\n\t\t/* } else if ($interfaceIsEqual(_ref, uint64Type)) { */ case 3:\n\t\t\tif (o.uint64s.$length === 0) {\n\t\t\t\to.uint64s = $makeSlice(sliceType$6, 4);\n\t\t\t}\n\t\t\t(x$3 = o.uint64s, (0 >= x$3.$length ? $throwRuntimeError(\"index out of range\") : x$3.$array[x$3.$offset + 0] = x));\n\t\t\t_r$7 = reflect.ValueOf((x$4 = o.uint64s, $indexPtr(x$4.$array, x$4.$offset + 0, ptrType$17))); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t$r = p.v.Set(_r$7); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\to.uint64s = $subslice(o.uint64s, 1);\n\t\t\treturn;\n\t\t\t$s = 5; continue;\n\t\t/* } else if ($interfaceIsEqual(_ref, float64Type)) { */ case 4:\n\t\t\tif (o.float64s.$length === 0) {\n\t\t\t\to.float64s = $makeSlice(sliceType$10, 4);\n\t\t\t}\n\t\t\t(x$5 = o.float64s, (0 >= x$5.$length ? $throwRuntimeError(\"index out of range\") : x$5.$array[x$5.$offset + 0] = math.Float64frombits(x)));\n\t\t\t_r$8 = reflect.ValueOf((x$6 = o.float64s, $indexPtr(x$6.$array, x$6.$offset + 0, ptrType$15))); /* */ $s = 10; case 10: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t$r = p.v.Set(_r$8); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\to.float64s = $subslice(o.float64s, 1);\n\t\t\treturn;\n\t\t/* } */ case 5:\n\t\t$panic(new $String(\"unreachable\"));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: word64_Set }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f.o = o; $f.p = p; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tword64_IsNil = function(p) {\n\t\tvar $ptr, p;\n\t\tp = $clone(p, word64);\n\t\treturn p.v.IsNil();\n\t};\n\tword64_Get = function(p) {\n\t\tvar $ptr, _r$5, _ref, elem, p, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _ref = $f._ref; elem = $f.elem; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, word64);\n\t\t_r$5 = p.v.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\telem = _r$5;\n\t\t_ref = elem.Kind();\n\t\tif (_ref === 6) {\n\t\t\treturn (x = elem.Int(), new $Uint64(x.$high, x.$low));\n\t\t} else if (_ref === 11) {\n\t\t\treturn elem.Uint();\n\t\t} else if (_ref === 14) {\n\t\t\treturn math.Float64bits(elem.Float());\n\t\t}\n\t\t$panic(new $String(\"unreachable\"));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: word64_Get }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._ref = _ref; $f.elem = elem; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tstructPointer_Word64 = function(p, f) {\n\t\tvar $ptr, _r$5, f, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = structPointer_field(p, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn new word64.ptr($clone(_r$5, reflect.Value));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_Word64 }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tword64Val_Set = function(p, o, x) {\n\t\tvar $ptr, _ref, o, p, x;\n\t\tp = $clone(p, word64Val);\n\t\t_ref = p.v.Type();\n\t\tif ($interfaceIsEqual(_ref, int64Type)) {\n\t\t\tp.v.SetInt(new $Int64(x.$high, x.$low));\n\t\t\treturn;\n\t\t} else if ($interfaceIsEqual(_ref, uint64Type)) {\n\t\t\tp.v.SetUint(x);\n\t\t\treturn;\n\t\t} else if ($interfaceIsEqual(_ref, float64Type)) {\n\t\t\tp.v.SetFloat(math.Float64frombits(x));\n\t\t\treturn;\n\t\t}\n\t\t$panic(new $String(\"unreachable\"));\n\t};\n\tword64Val_Get = function(p) {\n\t\tvar $ptr, _ref, elem, p, x;\n\t\tp = $clone(p, word64Val);\n\t\telem = p.v;\n\t\t_ref = elem.Kind();\n\t\tif (_ref === 6) {\n\t\t\treturn (x = elem.Int(), new $Uint64(x.$high, x.$low));\n\t\t} else if (_ref === 11) {\n\t\t\treturn elem.Uint();\n\t\t} else if (_ref === 14) {\n\t\t\treturn math.Float64bits(elem.Float());\n\t\t}\n\t\t$panic(new $String(\"unreachable\"));\n\t};\n\tstructPointer_Word64Val = function(p, f) {\n\t\tvar $ptr, _r$5, f, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = structPointer_field(p, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn new word64Val.ptr($clone(_r$5, reflect.Value));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_Word64Val }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tword64Slice.ptr.prototype.Append = function(x) {\n\t\tvar $ptr, _arg, _arg$1, _r$5, _r$6, _r$7, _r$8, _ref, _tmp, _tmp$1, elem, m, n, p, t, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; elem = $f.elem; m = $f.m; n = $f.n; p = $f.p; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(this, word64Slice);\n\t\t_tmp = p.v.Len(); _tmp$1 = p.v.Cap(); n = _tmp; m = _tmp$1;\n\t\t/* */ if (n < m) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (n < m) { */ case 1:\n\t\t\tp.v.SetLen(n + 1 >> 0);\n\t\t\t$s = 3; continue;\n\t\t/* } else { */ case 2:\n\t\t\t_r$5 = p.v.Type().Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\tt = _r$5;\n\t\t\t_arg = p.v;\n\t\t\t_r$6 = reflect.Zero(t); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_arg$1 = _r$6;\n\t\t\t_r$7 = reflect.Append(_arg, new sliceType$1([_arg$1])); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t$r = p.v.Set(_r$7); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 3:\n\t\t_r$8 = p.v.Index(n); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\telem = _r$8;\n\t\t_ref = elem.Kind();\n\t\tif (_ref === 6) {\n\t\t\telem.SetInt(new $Int64(x.$high, x.$low));\n\t\t} else if (_ref === 11) {\n\t\t\telem.SetUint(x);\n\t\t} else if (_ref === 14) {\n\t\t\telem.SetFloat(math.Float64frombits(x));\n\t\t}\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: word64Slice.ptr.prototype.Append }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.elem = elem; $f.m = m; $f.n = n; $f.p = p; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tword64Slice.prototype.Append = function(x) { return this.$val.Append(x); };\n\tword64Slice.ptr.prototype.Len = function() {\n\t\tvar $ptr, p;\n\t\tp = $clone(this, word64Slice);\n\t\treturn p.v.Len();\n\t};\n\tword64Slice.prototype.Len = function() { return this.$val.Len(); };\n\tword64Slice.ptr.prototype.Index = function(i) {\n\t\tvar $ptr, _r$5, _ref, elem, i, p, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _ref = $f._ref; elem = $f.elem; i = $f.i; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(this, word64Slice);\n\t\t_r$5 = p.v.Index(i); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\telem = _r$5;\n\t\t_ref = elem.Kind();\n\t\tif (_ref === 6) {\n\t\t\treturn (x = elem.Int(), new $Uint64(x.$high, x.$low));\n\t\t} else if (_ref === 11) {\n\t\t\treturn elem.Uint();\n\t\t} else if (_ref === 14) {\n\t\t\treturn math.Float64bits(elem.Float());\n\t\t}\n\t\t$panic(new $String(\"unreachable\"));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: word64Slice.ptr.prototype.Index }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._ref = _ref; $f.elem = elem; $f.i = i; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tword64Slice.prototype.Index = function(i) { return this.$val.Index(i); };\n\tstructPointer_Word64Slice = function(p, f) {\n\t\tvar $ptr, _r$5, f, p, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = $clone(p, structPointer);\n\t\t_r$5 = structPointer_field(p, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\treturn new word64Slice.ptr($clone(_r$5, reflect.Value));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structPointer_Word64Slice }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\ttagMap.ptr.prototype.get = function(t) {\n\t\tvar $ptr, _entry, _tuple, fi, fi$1, ok, p, t, x;\n\t\tp = this;\n\t\tif (t > 0 && t < 1024) {\n\t\t\tif (t >= p.fastTags.$length) {\n\t\t\t\treturn [0, false];\n\t\t\t}\n\t\t\tfi = (x = p.fastTags, ((t < 0 || t >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + t]));\n\t\t\treturn [fi, fi >= 0];\n\t\t}\n\t\t_tuple = (_entry = p.slowTags[t], _entry !== undefined ? [_entry.v, true] : [0, false]); fi$1 = _tuple[0]; ok = _tuple[1];\n\t\treturn [fi$1, ok];\n\t};\n\ttagMap.prototype.get = function(t) { return this.$val.get(t); };\n\ttagMap.ptr.prototype.put = function(t, fi) {\n\t\tvar $ptr, _key, fi, p, t, x;\n\t\tp = this;\n\t\tif (t > 0 && t < 1024) {\n\t\t\twhile (true) {\n\t\t\t\tif (!(p.fastTags.$length < (t + 1 >> 0))) { break; }\n\t\t\t\tp.fastTags = $append(p.fastTags, -1);\n\t\t\t}\n\t\t\t(x = p.fastTags, ((t < 0 || t >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + t] = fi));\n\t\t\treturn;\n\t\t}\n\t\tif (p.slowTags === false) {\n\t\t\tp.slowTags = new $Map();\n\t\t}\n\t\t_key = t; (p.slowTags || $throwRuntimeError(\"assignment to entry in nil map\"))[_key] = { k: _key, v: fi };\n\t};\n\ttagMap.prototype.put = function(t, fi) { return this.$val.put(t, fi); };\n\tStructProperties.ptr.prototype.Len = function() {\n\t\tvar $ptr, sp;\n\t\tsp = this;\n\t\treturn sp.order.$length;\n\t};\n\tStructProperties.prototype.Len = function() { return this.$val.Len(); };\n\tStructProperties.ptr.prototype.Less = function(i, j) {\n\t\tvar $ptr, i, j, sp, x, x$1, x$2, x$3, x$4, x$5;\n\t\tsp = this;\n\t\treturn (x = sp.Prop, x$1 = (x$2 = sp.order, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError(\"index out of range\") : x$2.$array[x$2.$offset + i])), ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + x$1])).Tag < (x$3 = sp.Prop, x$4 = (x$5 = sp.order, ((j < 0 || j >= x$5.$length) ? $throwRuntimeError(\"index out of range\") : x$5.$array[x$5.$offset + j])), ((x$4 < 0 || x$4 >= x$3.$length) ? $throwRuntimeError(\"index out of range\") : x$3.$array[x$3.$offset + x$4])).Tag;\n\t};\n\tStructProperties.prototype.Less = function(i, j) { return this.$val.Less(i, j); };\n\tStructProperties.ptr.prototype.Swap = function(i, j) {\n\t\tvar $ptr, _tmp, _tmp$1, i, j, sp, x, x$1, x$2, x$3;\n\t\tsp = this;\n\t\t_tmp = (x = sp.order, ((j < 0 || j >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + j])); _tmp$1 = (x$1 = sp.order, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError(\"index out of range\") : x$1.$array[x$1.$offset + i])); (x$2 = sp.order, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError(\"index out of range\") : x$2.$array[x$2.$offset + i] = _tmp)); (x$3 = sp.order, ((j < 0 || j >= x$3.$length) ? $throwRuntimeError(\"index out of range\") : x$3.$array[x$3.$offset + j] = _tmp$1));\n\t};\n\tStructProperties.prototype.Swap = function(i, j) { return this.$val.Swap(i, j); };\n\tProperties.ptr.prototype.String = function() {\n\t\tvar $ptr, p, s;\n\t\tp = this;\n\t\ts = p.Wire;\n\t\ts = \",\";\n\t\ts = s + (strconv.Itoa(p.Tag));\n\t\tif (p.Required) {\n\t\t\ts = s + (\",req\");\n\t\t}\n\t\tif (p.Optional) {\n\t\t\ts = s + (\",opt\");\n\t\t}\n\t\tif (p.Repeated) {\n\t\t\ts = s + (\",rep\");\n\t\t}\n\t\tif (p.Packed) {\n\t\t\ts = s + (\",packed\");\n\t\t}\n\t\tif (!(p.OrigName === p.Name)) {\n\t\t\ts = s + (\",name=\" + p.OrigName);\n\t\t}\n\t\tif (p.proto3) {\n\t\t\ts = s + (\",proto3\");\n\t\t}\n\t\tif (p.Enum.length > 0) {\n\t\t\ts = s + (\",enum=\" + p.Enum);\n\t\t}\n\t\tif (p.HasDefault) {\n\t\t\ts = s + (\",def=\" + p.Default);\n\t\t}\n\t\treturn s;\n\t};\n\tProperties.prototype.String = function() { return this.$val.String(); };\n\tProperties.ptr.prototype.Parse = function(s) {\n\t\tvar $ptr, _r$5, _r$6, _ref, _tuple, err, f, fields, i, p, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _tuple = $f._tuple; err = $f.err; f = $f.f; fields = $f.fields; i = $f.i; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\tfields = strings.Split(s, \",\");\n\t\t/* */ if (fields.$length < 2) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (fields.$length < 2) { */ case 1:\n\t\t\t_r$5 = fmt.Fprintf(os.Stderr, \"proto: tag has too few fields: %q\\n\", new sliceType$2([new $String(s)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t_r$5;\n\t\t\treturn;\n\t\t/* } */ case 2:\n\t\tp.Wire = (0 >= fields.$length ? $throwRuntimeError(\"index out of range\") : fields.$array[fields.$offset + 0]);\n\t\t_ref = p.Wire;\n\t\t/* */ if (_ref === \"varint\") { $s = 4; continue; }\n\t\t/* */ if (_ref === \"fixed32\") { $s = 5; continue; }\n\t\t/* */ if (_ref === \"fixed64\") { $s = 6; continue; }\n\t\t/* */ if (_ref === \"zigzag32\") { $s = 7; continue; }\n\t\t/* */ if (_ref === \"zigzag64\") { $s = 8; continue; }\n\t\t/* */ if (_ref === \"bytes\" || _ref === \"group\") { $s = 9; continue; }\n\t\t/* */ $s = 10; continue;\n\t\t/* if (_ref === \"varint\") { */ case 4:\n\t\t\tp.WireType = 0;\n\t\t\tp.valEnc = $methodExpr(ptrType$31.prototype.EncodeVarint);\n\t\t\tp.valDec = $methodExpr(ptrType$31.prototype.DecodeVarint);\n\t\t\tp.valSize = sizeVarint;\n\t\t\t$s = 11; continue;\n\t\t/* } else if (_ref === \"fixed32\") { */ case 5:\n\t\t\tp.WireType = 5;\n\t\t\tp.valEnc = $methodExpr(ptrType$31.prototype.EncodeFixed32);\n\t\t\tp.valDec = $methodExpr(ptrType$31.prototype.DecodeFixed32);\n\t\t\tp.valSize = sizeFixed32;\n\t\t\t$s = 11; continue;\n\t\t/* } else if (_ref === \"fixed64\") { */ case 6:\n\t\t\tp.WireType = 1;\n\t\t\tp.valEnc = $methodExpr(ptrType$31.prototype.EncodeFixed64);\n\t\t\tp.valDec = $methodExpr(ptrType$31.prototype.DecodeFixed64);\n\t\t\tp.valSize = sizeFixed64;\n\t\t\t$s = 11; continue;\n\t\t/* } else if (_ref === \"zigzag32\") { */ case 7:\n\t\t\tp.WireType = 0;\n\t\t\tp.valEnc = $methodExpr(ptrType$31.prototype.EncodeZigzag32);\n\t\t\tp.valDec = $methodExpr(ptrType$31.prototype.DecodeZigzag32);\n\t\t\tp.valSize = sizeZigzag32;\n\t\t\t$s = 11; continue;\n\t\t/* } else if (_ref === \"zigzag64\") { */ case 8:\n\t\t\tp.WireType = 0;\n\t\t\tp.valEnc = $methodExpr(ptrType$31.prototype.EncodeZigzag64);\n\t\t\tp.valDec = $methodExpr(ptrType$31.prototype.DecodeZigzag64);\n\t\t\tp.valSize = sizeZigzag64;\n\t\t\t$s = 11; continue;\n\t\t/* } else if (_ref === \"bytes\" || _ref === \"group\") { */ case 9:\n\t\t\tp.WireType = 2;\n\t\t\t$s = 11; continue;\n\t\t/* } else { */ case 10:\n\t\t\t_r$6 = fmt.Fprintf(os.Stderr, \"proto: tag has unknown wire type: %q\\n\", new sliceType$2([new $String(s)])); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_r$6;\n\t\t\treturn;\n\t\t/* } */ case 11:\n\t\terr = $ifaceNil;\n\t\t_tuple = strconv.Atoi((1 >= fields.$length ? $throwRuntimeError(\"index out of range\") : fields.$array[fields.$offset + 1])); p.Tag = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn;\n\t\t}\n\t\ti = 2;\n\t\twhile (true) {\n\t\t\tif (!(i < fields.$length)) { break; }\n\t\t\tf = ((i < 0 || i >= fields.$length) ? $throwRuntimeError(\"index out of range\") : fields.$array[fields.$offset + i]);\n\t\t\tswitch (0) { default: if (f === \"req\") {\n\t\t\t\tp.Required = true;\n\t\t\t} else if (f === \"opt\") {\n\t\t\t\tp.Optional = true;\n\t\t\t} else if (f === \"rep\") {\n\t\t\t\tp.Repeated = true;\n\t\t\t} else if (f === \"packed\") {\n\t\t\t\tp.Packed = true;\n\t\t\t} else if (strings.HasPrefix(f, \"name=\")) {\n\t\t\t\tp.OrigName = f.substring(5);\n\t\t\t} else if (strings.HasPrefix(f, \"enum=\")) {\n\t\t\t\tp.Enum = f.substring(5);\n\t\t\t} else if (f === \"proto3\") {\n\t\t\t\tp.proto3 = true;\n\t\t\t} else if (strings.HasPrefix(f, \"def=\")) {\n\t\t\t\tp.HasDefault = true;\n\t\t\t\tp.Default = f.substring(4);\n\t\t\t\tif ((i + 1 >> 0) < fields.$length) {\n\t\t\t\t\tp.Default = p.Default + (\",\" + strings.Join($subslice(fields, (i + 1 >> 0)), \",\"));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} }\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Properties.ptr.prototype.Parse }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.fields = fields; $f.i = i; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tProperties.prototype.Parse = function(s) { return this.$val.Parse(s); };\n\tlogNoSliceEnc = function(t1, t2) {\n\t\tvar $ptr, _r$5, t1, t2, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; t1 = $f.t1; t2 = $f.t2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r$5 = fmt.Fprintf(os.Stderr, \"proto: no slice oenc for %T = []%T\\n\", new sliceType$2([t1, t2])); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_r$5;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: logNoSliceEnc }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.t1 = t1; $f.t2 = t2; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tProperties.ptr.prototype.setEncAndDec = function(typ, f, lockGetProp) {\n\t\tvar $ptr, _arg, _arg$1, _arg$2, _arg$3, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _v, f, i, lockGetProp, p, t1, t2, t2$1, t3, typ, vtype, wire, x, x$1, x$2, y, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _v = $f._v; f = $f.f; i = $f.i; lockGetProp = $f.lockGetProp; p = $f.p; t1 = $f.t1; t2 = $f.t2; t2$1 = $f.t2$1; t3 = $f.t3; typ = $f.typ; vtype = $f.vtype; wire = $f.wire; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\tp.enc = $throwNilPointerError;\n\t\tp.dec = $throwNilPointerError;\n\t\tp.size = $throwNilPointerError;\n\t\tt1 = typ;\n\t\t_r$5 = t1.Kind(); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_ref = _r$5;\n\t\t/* */ if (_ref === 1) { $s = 2; continue; }\n\t\t/* */ if (_ref === 5) { $s = 3; continue; }\n\t\t/* */ if (_ref === 10) { $s = 4; continue; }\n\t\t/* */ if (_ref === 6 || _ref === 11) { $s = 5; continue; }\n\t\t/* */ if (_ref === 13) { $s = 6; continue; }\n\t\t/* */ if (_ref === 14) { $s = 7; continue; }\n\t\t/* */ if (_ref === 24) { $s = 8; continue; }\n\t\t/* */ if (_ref === 22) { $s = 9; continue; }\n\t\t/* */ if (_ref === 23) { $s = 10; continue; }\n\t\t/* */ if (_ref === 21) { $s = 11; continue; }\n\t\t/* */ $s = 12; continue;\n\t\t/* if (_ref === 1) { */ case 2:\n\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_proto3_bool);\n\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_proto3_bool);\n\t\t\tp.size = size_proto3_bool;\n\t\t\t$s = 13; continue;\n\t\t/* } else if (_ref === 5) { */ case 3:\n\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_proto3_int32);\n\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_proto3_int32);\n\t\t\tp.size = size_proto3_int32;\n\t\t\t$s = 13; continue;\n\t\t/* } else if (_ref === 10) { */ case 4:\n\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_proto3_uint32);\n\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_proto3_int32);\n\t\t\tp.size = size_proto3_uint32;\n\t\t\t$s = 13; continue;\n\t\t/* } else if (_ref === 6 || _ref === 11) { */ case 5:\n\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_proto3_int64);\n\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_proto3_int64);\n\t\t\tp.size = size_proto3_int64;\n\t\t\t$s = 13; continue;\n\t\t/* } else if (_ref === 13) { */ case 6:\n\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_proto3_uint32);\n\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_proto3_int32);\n\t\t\tp.size = size_proto3_uint32;\n\t\t\t$s = 13; continue;\n\t\t/* } else if (_ref === 14) { */ case 7:\n\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_proto3_int64);\n\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_proto3_int64);\n\t\t\tp.size = size_proto3_int64;\n\t\t\t$s = 13; continue;\n\t\t/* } else if (_ref === 24) { */ case 8:\n\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_proto3_string);\n\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_proto3_string);\n\t\t\tp.size = size_proto3_string;\n\t\t\t$s = 13; continue;\n\t\t/* } else if (_ref === 22) { */ case 9:\n\t\t\t_r$6 = t1.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\tt2 = _r$6;\n\t\t\t_r$7 = t2.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t_ref$1 = _r$7;\n\t\t\t/* */ if (_ref$1 === 1) { $s = 16; continue; }\n\t\t\t/* */ if (_ref$1 === 5) { $s = 17; continue; }\n\t\t\t/* */ if (_ref$1 === 10) { $s = 18; continue; }\n\t\t\t/* */ if (_ref$1 === 6 || _ref$1 === 11) { $s = 19; continue; }\n\t\t\t/* */ if (_ref$1 === 13) { $s = 20; continue; }\n\t\t\t/* */ if (_ref$1 === 14) { $s = 21; continue; }\n\t\t\t/* */ if (_ref$1 === 24) { $s = 22; continue; }\n\t\t\t/* */ if (_ref$1 === 25) { $s = 23; continue; }\n\t\t\t/* */ $s = 24; continue;\n\t\t\t/* switch (0) { default: if (_ref$1 === 1) { */ case 16:\n\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_bool);\n\t\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_bool);\n\t\t\t\tp.size = size_bool;\n\t\t\t\t$s = 25; continue;\n\t\t\t/* } else if (_ref$1 === 5) { */ case 17:\n\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_int32);\n\t\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_int32);\n\t\t\t\tp.size = size_int32;\n\t\t\t\t$s = 25; continue;\n\t\t\t/* } else if (_ref$1 === 10) { */ case 18:\n\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_uint32);\n\t\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_int32);\n\t\t\t\tp.size = size_uint32;\n\t\t\t\t$s = 25; continue;\n\t\t\t/* } else if (_ref$1 === 6 || _ref$1 === 11) { */ case 19:\n\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_int64);\n\t\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_int64);\n\t\t\t\tp.size = size_int64;\n\t\t\t\t$s = 25; continue;\n\t\t\t/* } else if (_ref$1 === 13) { */ case 20:\n\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_uint32);\n\t\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_int32);\n\t\t\t\tp.size = size_uint32;\n\t\t\t\t$s = 25; continue;\n\t\t\t/* } else if (_ref$1 === 14) { */ case 21:\n\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_int64);\n\t\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_int64);\n\t\t\t\tp.size = size_int64;\n\t\t\t\t$s = 25; continue;\n\t\t\t/* } else if (_ref$1 === 24) { */ case 22:\n\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_string);\n\t\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_string);\n\t\t\t\tp.size = size_string;\n\t\t\t\t$s = 25; continue;\n\t\t\t/* } else if (_ref$1 === 25) { */ case 23:\n\t\t\t\t_r$8 = t1.Elem(); /* */ $s = 26; case 26: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t\tp.stype = _r$8;\n\t\t\t\t_r$9 = isMarshaler(t1); /* */ $s = 27; case 27: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\t\tp.isMarshaler = _r$9;\n\t\t\t\t_r$10 = isUnmarshaler(t1); /* */ $s = 28; case 28: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\t\tp.isUnmarshaler = _r$10;\n\t\t\t\tif (p.Wire === \"bytes\") {\n\t\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_struct_message);\n\t\t\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_struct_message);\n\t\t\t\t\tp.size = size_struct_message;\n\t\t\t\t} else {\n\t\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_struct_group);\n\t\t\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_struct_group);\n\t\t\t\t\tp.size = size_struct_group;\n\t\t\t\t}\n\t\t\t\t$s = 25; continue;\n\t\t\t/* } else { */ case 24:\n\t\t\t\t_r$11 = fmt.Fprintf(os.Stderr, \"proto: no encoder function for %v -> %v\\n\", new sliceType$2([t1, t2])); /* */ $s = 29; case 29: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t\t\t_r$11;\n\t\t\t\t/* break; */ $s = 25; continue;\n\t\t\t/* } } */ case 25:\n\t\t\t$s = 13; continue;\n\t\t/* } else if (_ref === 23) { */ case 10:\n\t\t\t_r$12 = t1.Elem(); /* */ $s = 30; case 30: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\t\tt2$1 = _r$12;\n\t\t\t_r$13 = t2$1.Kind(); /* */ $s = 31; case 31: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }\n\t\t\t_ref$2 = _r$13;\n\t\t\t/* */ if (_ref$2 === 1) { $s = 32; continue; }\n\t\t\t/* */ if (_ref$2 === 5) { $s = 33; continue; }\n\t\t\t/* */ if (_ref$2 === 10) { $s = 34; continue; }\n\t\t\t/* */ if (_ref$2 === 6 || _ref$2 === 11) { $s = 35; continue; }\n\t\t\t/* */ if (_ref$2 === 8) { $s = 36; continue; }\n\t\t\t/* */ if (_ref$2 === 13 || _ref$2 === 14) { $s = 37; continue; }\n\t\t\t/* */ if (_ref$2 === 24) { $s = 38; continue; }\n\t\t\t/* */ if (_ref$2 === 22) { $s = 39; continue; }\n\t\t\t/* */ if (_ref$2 === 23) { $s = 40; continue; }\n\t\t\t/* */ $s = 41; continue;\n\t\t\t/* switch (0) { default: if (_ref$2 === 1) { */ case 32:\n\t\t\t\tif (p.Packed) {\n\t\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_slice_packed_bool);\n\t\t\t\t\tp.size = size_slice_packed_bool;\n\t\t\t\t} else {\n\t\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_slice_bool);\n\t\t\t\t\tp.size = size_slice_bool;\n\t\t\t\t}\n\t\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_slice_bool);\n\t\t\t\tp.packedDec = $methodExpr(ptrType$31.prototype.dec_slice_packed_bool);\n\t\t\t\t$s = 42; continue;\n\t\t\t/* } else if (_ref$2 === 5) { */ case 33:\n\t\t\t\tif (p.Packed) {\n\t\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_slice_packed_int32);\n\t\t\t\t\tp.size = size_slice_packed_int32;\n\t\t\t\t} else {\n\t\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_slice_int32);\n\t\t\t\t\tp.size = size_slice_int32;\n\t\t\t\t}\n\t\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_slice_int32);\n\t\t\t\tp.packedDec = $methodExpr(ptrType$31.prototype.dec_slice_packed_int32);\n\t\t\t\t$s = 42; continue;\n\t\t\t/* } else if (_ref$2 === 10) { */ case 34:\n\t\t\t\tif (p.Packed) {\n\t\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_slice_packed_uint32);\n\t\t\t\t\tp.size = size_slice_packed_uint32;\n\t\t\t\t} else {\n\t\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_slice_uint32);\n\t\t\t\t\tp.size = size_slice_uint32;\n\t\t\t\t}\n\t\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_slice_int32);\n\t\t\t\tp.packedDec = $methodExpr(ptrType$31.prototype.dec_slice_packed_int32);\n\t\t\t\t$s = 42; continue;\n\t\t\t/* } else if (_ref$2 === 6 || _ref$2 === 11) { */ case 35:\n\t\t\t\tif (p.Packed) {\n\t\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_slice_packed_int64);\n\t\t\t\t\tp.size = size_slice_packed_int64;\n\t\t\t\t} else {\n\t\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_slice_int64);\n\t\t\t\t\tp.size = size_slice_int64;\n\t\t\t\t}\n\t\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_slice_int64);\n\t\t\t\tp.packedDec = $methodExpr(ptrType$31.prototype.dec_slice_packed_int64);\n\t\t\t\t$s = 42; continue;\n\t\t\t/* } else if (_ref$2 === 8) { */ case 36:\n\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_slice_byte);\n\t\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_slice_byte);\n\t\t\t\tp.size = size_slice_byte;\n\t\t\t\tif (p.proto3 && !(f === ptrType$12.nil)) {\n\t\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_proto3_slice_byte);\n\t\t\t\t\tp.size = size_proto3_slice_byte;\n\t\t\t\t}\n\t\t\t\t$s = 42; continue;\n\t\t\t/* } else if (_ref$2 === 13 || _ref$2 === 14) { */ case 37:\n\t\t\t\t_r$14 = t2$1.Bits(); /* */ $s = 43; case 43: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }\n\t\t\t\t_ref$3 = _r$14;\n\t\t\t\t/* */ if (_ref$3 === 32) { $s = 44; continue; }\n\t\t\t\t/* */ if (_ref$3 === 64) { $s = 45; continue; }\n\t\t\t\t/* */ $s = 46; continue;\n\t\t\t\t/* switch (0) { default: if (_ref$3 === 32) { */ case 44:\n\t\t\t\t\tif (p.Packed) {\n\t\t\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_slice_packed_uint32);\n\t\t\t\t\t\tp.size = size_slice_packed_uint32;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_slice_uint32);\n\t\t\t\t\t\tp.size = size_slice_uint32;\n\t\t\t\t\t}\n\t\t\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_slice_int32);\n\t\t\t\t\tp.packedDec = $methodExpr(ptrType$31.prototype.dec_slice_packed_int32);\n\t\t\t\t\t$s = 47; continue;\n\t\t\t\t/* } else if (_ref$3 === 64) { */ case 45:\n\t\t\t\t\tif (p.Packed) {\n\t\t\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_slice_packed_int64);\n\t\t\t\t\t\tp.size = size_slice_packed_int64;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_slice_int64);\n\t\t\t\t\t\tp.size = size_slice_int64;\n\t\t\t\t\t}\n\t\t\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_slice_int64);\n\t\t\t\t\tp.packedDec = $methodExpr(ptrType$31.prototype.dec_slice_packed_int64);\n\t\t\t\t\t$s = 47; continue;\n\t\t\t\t/* } else { */ case 46:\n\t\t\t\t\t$r = logNoSliceEnc(t1, t2$1); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t/* break; */ $s = 47; continue;\n\t\t\t\t/* } } */ case 47:\n\t\t\t\t$s = 42; continue;\n\t\t\t/* } else if (_ref$2 === 24) { */ case 38:\n\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_slice_string);\n\t\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_slice_string);\n\t\t\t\tp.size = size_slice_string;\n\t\t\t\t$s = 42; continue;\n\t\t\t/* } else if (_ref$2 === 22) { */ case 39:\n\t\t\t\t_r$15 = t2$1.Elem(); /* */ $s = 49; case 49: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }\n\t\t\t\tt3 = _r$15;\n\t\t\t\t_r$16 = t3.Kind(); /* */ $s = 50; case 50: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }\n\t\t\t\t_ref$4 = _r$16;\n\t\t\t\t/* */ if (_ref$4 === 25) { $s = 51; continue; }\n\t\t\t\t/* */ $s = 52; continue;\n\t\t\t\t/* switch (0) { default: if (_ref$4 === 25) { */ case 51:\n\t\t\t\t\t_r$17 = t2$1.Elem(); /* */ $s = 54; case 54: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }\n\t\t\t\t\tp.stype = _r$17;\n\t\t\t\t\t_r$18 = isMarshaler(t2$1); /* */ $s = 55; case 55: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }\n\t\t\t\t\tp.isMarshaler = _r$18;\n\t\t\t\t\t_r$19 = isUnmarshaler(t2$1); /* */ $s = 56; case 56: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }\n\t\t\t\t\tp.isUnmarshaler = _r$19;\n\t\t\t\t\tif (p.Wire === \"bytes\") {\n\t\t\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_slice_struct_message);\n\t\t\t\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_slice_struct_message);\n\t\t\t\t\t\tp.size = size_slice_struct_message;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_slice_struct_group);\n\t\t\t\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_slice_struct_group);\n\t\t\t\t\t\tp.size = size_slice_struct_group;\n\t\t\t\t\t}\n\t\t\t\t\t$s = 53; continue;\n\t\t\t\t/* } else { */ case 52:\n\t\t\t\t\t_r$20 = fmt.Fprintf(os.Stderr, \"proto: no ptr oenc for %T -> %T -> %T\\n\", new sliceType$2([t1, t2$1, t3])); /* */ $s = 57; case 57: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$20;\n\t\t\t\t\t/* break; */ $s = 53; continue;\n\t\t\t\t/* } } */ case 53:\n\t\t\t\t$s = 42; continue;\n\t\t\t/* } else if (_ref$2 === 23) { */ case 40:\n\t\t\t\t_r$21 = t2$1.Elem(); /* */ $s = 58; case 58: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }\n\t\t\t\t_r$22 = _r$21.Kind(); /* */ $s = 59; case 59: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }\n\t\t\t\t_ref$5 = _r$22;\n\t\t\t\t/* */ if (_ref$5 === 8) { $s = 60; continue; }\n\t\t\t\t/* */ $s = 61; continue;\n\t\t\t\t/* switch (0) { default: if (_ref$5 === 8) { */ case 60:\n\t\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_slice_slice_byte);\n\t\t\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_slice_slice_byte);\n\t\t\t\t\tp.size = size_slice_slice_byte;\n\t\t\t\t\t$s = 62; continue;\n\t\t\t\t/* } else { */ case 61:\n\t\t\t\t\t_arg = os.Stderr;\n\t\t\t\t\t_arg$1 = t1;\n\t\t\t\t\t_arg$2 = t2$1;\n\t\t\t\t\t_r$23 = t2$1.Elem(); /* */ $s = 63; case 63: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }\n\t\t\t\t\t_arg$3 = _r$23;\n\t\t\t\t\t_r$24 = fmt.Fprintf(_arg, \"proto: no slice elem oenc for %T -> %T -> %T\\n\", new sliceType$2([_arg$1, _arg$2, _arg$3])); /* */ $s = 64; case 64: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$24;\n\t\t\t\t\t/* break; */ $s = 62; continue;\n\t\t\t\t/* } } */ case 62:\n\t\t\t\t$s = 42; continue;\n\t\t\t/* } else { */ case 41:\n\t\t\t\t$r = logNoSliceEnc(t1, t2$1); /* */ $s = 65; case 65: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t/* break; */ $s = 42; continue;\n\t\t\t/* } } */ case 42:\n\t\t\t$s = 13; continue;\n\t\t/* } else if (_ref === 21) { */ case 11:\n\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_new_map);\n\t\t\tp.dec = $methodExpr(ptrType$31.prototype.dec_new_map);\n\t\t\tp.size = size_new_map;\n\t\t\tp.mtype = t1;\n\t\t\tp.mkeyprop = new Properties.ptr(\"\", \"\", \"\", 0, 0, false, false, false, false, \"\", false, \"\", false, new $Uint64(0, 0), $throwNilPointerError, $throwNilPointerError, field.nil, sliceType.nil, arrayType$2.zero(), $ifaceNil, ptrType$32.nil, false, false, $ifaceNil, ptrType$1.nil, ptrType$1.nil, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError);\n\t\t\t_r$25 = p.mtype.Key(); /* */ $s = 66; case 66: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }\n\t\t\t_r$26 = reflect.PtrTo(_r$25); /* */ $s = 67; case 67: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }\n\t\t\t$r = p.mkeyprop.init(_r$26, \"Key\", new reflect.StructTag(f.Tag).Get(\"protobuf_key\"), ptrType$12.nil, lockGetProp); /* */ $s = 68; case 68: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\tp.mvalprop = new Properties.ptr(\"\", \"\", \"\", 0, 0, false, false, false, false, \"\", false, \"\", false, new $Uint64(0, 0), $throwNilPointerError, $throwNilPointerError, field.nil, sliceType.nil, arrayType$2.zero(), $ifaceNil, ptrType$32.nil, false, false, $ifaceNil, ptrType$1.nil, ptrType$1.nil, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError);\n\t\t\t_r$27 = p.mtype.Elem(); /* */ $s = 69; case 69: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }\n\t\t\tvtype = _r$27;\n\t\t\t_r$28 = vtype.Kind(); /* */ $s = 73; case 73: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }\n\t\t\tif (!(!((_r$28 === 22)))) { _v = false; $s = 72; continue s; }\n\t\t\t_r$29 = vtype.Kind(); /* */ $s = 74; case 74: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }\n\t\t\t_v = !((_r$29 === 23)); case 72:\n\t\t\t/* */ if (_v) { $s = 70; continue; }\n\t\t\t/* */ $s = 71; continue;\n\t\t\t/* if (_v) { */ case 70:\n\t\t\t\tvtype = reflect.PtrTo(vtype);\n\t\t\t/* } */ case 71:\n\t\t\t$r = p.mvalprop.init(vtype, \"Value\", new reflect.StructTag(f.Tag).Get(\"protobuf_val\"), ptrType$12.nil, lockGetProp); /* */ $s = 75; case 75: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$s = 13; continue;\n\t\t/* } else { */ case 12:\n\t\t\t_r$30 = fmt.Fprintf(os.Stderr, \"proto: no coders for %v\\n\", new sliceType$2([t1])); /* */ $s = 76; case 76: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }\n\t\t\t_r$30;\n\t\t/* } */ case 13:\n\t\twire = p.WireType;\n\t\tif (p.Packed) {\n\t\t\twire = 2;\n\t\t}\n\t\tx = (((p.Tag >>> 0) << 3 >>> 0) | (wire >>> 0)) >>> 0;\n\t\ti = 0;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(x > 127)) { break; }\n\t\t\t(x$1 = p.tagbuf, ((i < 0 || i >= x$1.length) ? $throwRuntimeError(\"index out of range\") : x$1[i] = (128 | (((x & 127) >>> 0) << 24 >>> 24)) >>> 0));\n\t\t\tx = (y = (7), y < 32 ? (x >>> y) : 0) >>> 0;\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\t(x$2 = p.tagbuf, ((i < 0 || i >= x$2.length) ? $throwRuntimeError(\"index out of range\") : x$2[i] = (x << 24 >>> 24)));\n\t\tp.tagcode = $subslice(new sliceType(p.tagbuf), 0, (i + 1 >> 0));\n\t\t/* */ if (!($interfaceIsEqual(p.stype, $ifaceNil))) { $s = 77; continue; }\n\t\t/* */ $s = 78; continue;\n\t\t/* if (!($interfaceIsEqual(p.stype, $ifaceNil))) { */ case 77:\n\t\t\t/* */ if (lockGetProp) { $s = 79; continue; }\n\t\t\t/* */ $s = 80; continue;\n\t\t\t/* if (lockGetProp) { */ case 79:\n\t\t\t\t_r$31 = GetProperties(p.stype); /* */ $s = 82; case 82: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }\n\t\t\t\tp.sprop = _r$31;\n\t\t\t\t$s = 81; continue;\n\t\t\t/* } else { */ case 80:\n\t\t\t\t_r$32 = getPropertiesLocked(p.stype); /* */ $s = 83; case 83: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }\n\t\t\t\tp.sprop = _r$32;\n\t\t\t/* } */ case 81:\n\t\t/* } */ case 78:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Properties.ptr.prototype.setEncAndDec }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._v = _v; $f.f = f; $f.i = i; $f.lockGetProp = lockGetProp; $f.p = p; $f.t1 = t1; $f.t2 = t2; $f.t2$1 = t2$1; $f.t3 = t3; $f.typ = typ; $f.vtype = vtype; $f.wire = wire; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tProperties.prototype.setEncAndDec = function(typ, f, lockGetProp) { return this.$val.setEncAndDec(typ, f, lockGetProp); };\n\tisMarshaler = function(t) {\n\t\tvar $ptr, _r$5, _r$6, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r$5 = t.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t/* */ if (!((_r$5 === 22))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!((_r$5 === 22))) { */ case 1:\n\t\t\t$panic(new $String(\"proto: misuse of isMarshaler\"));\n\t\t/* } */ case 2:\n\t\t_r$6 = t.Implements(marshalerType); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\treturn _r$6;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: isMarshaler }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tisUnmarshaler = function(t) {\n\t\tvar $ptr, _r$5, _r$6, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r$5 = t.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t/* */ if (!((_r$5 === 22))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!((_r$5 === 22))) { */ case 1:\n\t\t\t$panic(new $String(\"proto: misuse of isUnmarshaler\"));\n\t\t/* } */ case 2:\n\t\t_r$6 = t.Implements(unmarshalerType); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\treturn _r$6;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: isUnmarshaler }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tProperties.ptr.prototype.Init = function(typ, name, tag, f) {\n\t\tvar $ptr, f, name, p, tag, typ, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; tag = $f.tag; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\t$r = p.init(typ, name, tag, f, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Properties.ptr.prototype.Init }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.tag = tag; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tProperties.prototype.Init = function(typ, name, tag, f) { return this.$val.Init(typ, name, tag, f); };\n\tProperties.ptr.prototype.init = function(typ, name, tag, f, lockGetProp) {\n\t\tvar $ptr, f, lockGetProp, name, p, tag, typ, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; lockGetProp = $f.lockGetProp; name = $f.name; p = $f.p; tag = $f.tag; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tp = this;\n\t\tp.Name = name;\n\t\tp.OrigName = name;\n\t\tif (!(f === ptrType$12.nil)) {\n\t\t\tp.field = toField(f);\n\t\t}\n\t\tif (tag === \"\") {\n\t\t\treturn;\n\t\t}\n\t\t$r = p.Parse(tag); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = p.setEncAndDec(typ, f, lockGetProp); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Properties.ptr.prototype.init }; } $f.$ptr = $ptr; $f.f = f; $f.lockGetProp = lockGetProp; $f.name = name; $f.p = p; $f.tag = tag; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tProperties.prototype.init = function(typ, name, tag, f, lockGetProp) { return this.$val.init(typ, name, tag, f, lockGetProp); };\n\tGetProperties = function(t) {\n\t\tvar $ptr, _entry, _r$5, _r$6, _tuple, ok, sprop, t, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; ok = $f.ok; sprop = $f.sprop; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r$5 = t.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t/* */ if (!((_r$5 === 25))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!((_r$5 === 25))) { */ case 1:\n\t\t\t$panic(new $String(\"proto: type must have kind struct\"));\n\t\t/* } */ case 2:\n\t\t$r = propertiesMu.RLock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t_tuple = (_entry = propertiesMap[t.$key()], _entry !== undefined ? [_entry.v, true] : [ptrType$32.nil, false]); sprop = _tuple[0]; ok = _tuple[1];\n\t\t$r = propertiesMu.RUnlock(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tif (ok) {\n\t\t\treturn sprop;\n\t\t}\n\t\t$r = propertiesMu.Lock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t_r$6 = getPropertiesLocked(t); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tsprop = _r$6;\n\t\t$r = propertiesMu.Unlock(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\treturn sprop;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: GetProperties }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.ok = ok; $f.sprop = sprop; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.GetProperties = GetProperties;\n\tgetPropertiesLocked = function(t) {\n\t\tvar $ptr, _arg, _arg$1, _arg$2, _entry, _i, _key, _key$1, _r$10, _r$11, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, f, i, i$1, name, ok, p, p$1, prop, prop$1, reqCount, t, x, x$1, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _entry = $f._entry; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; f = $f.f; i = $f.i; i$1 = $f.i$1; name = $f.name; ok = $f.ok; p = $f.p; p$1 = $f.p$1; prop = $f.prop; prop$1 = $f.prop$1; reqCount = $f.reqCount; t = $f.t; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_tuple = (_entry = propertiesMap[t.$key()], _entry !== undefined ? [_entry.v, true] : [ptrType$32.nil, false]); prop = _tuple[0]; ok = _tuple[1];\n\t\tif (ok) {\n\t\t\treturn prop;\n\t\t}\n\t\tprop$1 = new StructProperties.ptr();\n\t\t_key = t; (propertiesMap || $throwRuntimeError(\"assignment to entry in nil map\"))[_key.$key()] = { k: _key, v: prop$1 };\n\t\t_r$5 = reflect.PtrTo(t).Implements(extendableProtoType); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tprop$1.extendable = _r$5;\n\t\tprop$1.unrecField = invalidField;\n\t\t_r$6 = t.NumField(); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tprop$1.Prop = $makeSlice(sliceType$14, _r$6);\n\t\t_r$7 = t.NumField(); /* */ $s = 3; case 3: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\tprop$1.order = $makeSlice(sliceType$4, _r$7);\n\t\ti = 0;\n\t\t/* while (true) { */ case 4:\n\t\t\t_r$8 = t.NumField(); /* */ $s = 6; case 6: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t/* if (!(i < _r$8)) { break; } */ if(!(i < _r$8)) { $s = 5; continue; }\n\t\t\tf = [f];\n\t\t\t_r$9 = t.Field(i); /* */ $s = 7; case 7: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\tf[0] = $clone(_r$9, reflect.StructField);\n\t\t\tp = new Properties.ptr();\n\t\t\tname = f[0].Name;\n\t\t\t$r = p.init(f[0].Type, name, new reflect.StructTag(f[0].Tag).Get(\"protobuf\"), f[0], false); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\tif (f[0].Name === \"XXX_extensions\") {\n\t\t\t\tp.enc = $methodExpr(ptrType$31.prototype.enc_map);\n\t\t\t\tp.dec = $throwNilPointerError;\n\t\t\t\tp.size = size_map;\n\t\t\t}\n\t\t\tif (f[0].Name === \"XXX_unrecognized\") {\n\t\t\t\tprop$1.unrecField = toField(f[0]);\n\t\t\t}\n\t\t\t(x = prop$1.Prop, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i] = p));\n\t\t\t(x$1 = prop$1.order, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError(\"index out of range\") : x$1.$array[x$1.$offset + i] = i));\n\t\t\t/* */ if (p.enc === $throwNilPointerError && !strings.HasPrefix(f[0].Name, \"XXX_\")) { $s = 9; continue; }\n\t\t\t/* */ $s = 10; continue;\n\t\t\t/* if (p.enc === $throwNilPointerError && !strings.HasPrefix(f[0].Name, \"XXX_\")) { */ case 9:\n\t\t\t\t_arg = os.Stderr;\n\t\t\t\t_arg$1 = new $String(f[0].Name);\n\t\t\t\t_r$10 = f[0].Type.String(); /* */ $s = 11; case 11: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\t\t_arg$2 = new $String(_r$10);\n\t\t\t\t_r$11 = fmt.Fprintln(_arg, new sliceType$2([new $String(\"proto: no encoder for\"), _arg$1, _arg$2, new $String(\"[GetProperties]\")])); /* */ $s = 12; case 12: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t\t\t_r$11;\n\t\t\t/* } */ case 10:\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 4; continue; case 5:\n\t\t$r = sort.Sort(prop$1); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\treqCount = 0;\n\t\tprop$1.decoderOrigNames = new $Map();\n\t\t_ref = prop$1.Prop;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti$1 = _i;\n\t\t\tp$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tif (strings.HasPrefix(p$1.Name, \"XXX_\")) {\n\t\t\t\t_i++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (p$1.Required) {\n\t\t\t\treqCount = reqCount + (1) >> 0;\n\t\t\t}\n\t\t\tprop$1.decoderTags.put(p$1.Tag, i$1);\n\t\t\t_key$1 = p$1.OrigName; (prop$1.decoderOrigNames || $throwRuntimeError(\"assignment to entry in nil map\"))[_key$1] = { k: _key$1, v: i$1 };\n\t\t\t_i++;\n\t\t}\n\t\tprop$1.reqCount = reqCount;\n\t\treturn prop$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: getPropertiesLocked }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.name = name; $f.ok = ok; $f.p = p; $f.p$1 = p$1; $f.prop = prop; $f.prop$1 = prop$1; $f.reqCount = reqCount; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tgetbase = function(pb) {\n\t\tvar $ptr, _r$5, b, err, pb, t, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; b = $f.b; err = $f.err; pb = $f.pb; t = $f.t; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tt = $ifaceNil;\n\t\tb = new structPointer.ptr();\n\t\terr = $ifaceNil;\n\t\tif ($interfaceIsEqual(pb, $ifaceNil)) {\n\t\t\terr = $pkg.ErrNil;\n\t\t\treturn [t, b, err];\n\t\t}\n\t\tt = reflect.TypeOf(pb);\n\t\t_r$5 = reflect.ValueOf(pb); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tvalue = _r$5;\n\t\t$copy(b, toStructPointer(value), structPointer);\n\t\treturn [t, b, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: getbase }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.b = b; $f.err = err; $f.pb = pb; $f.t = t; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tRegisterEnum = function(typeName, unusedNameMap, valueMap) {\n\t\tvar $ptr, _entry, _key, _tuple, ok, typeName, unusedNameMap, valueMap;\n\t\t_tuple = (_entry = enumValueMaps[typeName], _entry !== undefined ? [_entry.v, true] : [false, false]); ok = _tuple[1];\n\t\tif (ok) {\n\t\t\t$panic(new $String(\"proto: duplicate enum registered: \" + typeName));\n\t\t}\n\t\t_key = typeName; (enumValueMaps || $throwRuntimeError(\"assignment to entry in nil map\"))[_key] = { k: _key, v: valueMap };\n\t};\n\t$pkg.RegisterEnum = RegisterEnum;\n\ttextWriter.ptr.prototype.WriteString = function(s) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, _tuple$1, err, n, s, w, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; n = $f.n; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tw = this;\n\t\t/* */ if (!strings.Contains(s, \"\\n\")) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!strings.Contains(s, \"\\n\")) { */ case 1:\n\t\t\t/* */ if (!w.compact && w.complete) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (!w.compact && w.complete) { */ case 3:\n\t\t\t\t$r = w.writeIndent(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 4:\n\t\t\tw.complete = false;\n\t\t\t_r$5 = io.WriteString(w.w, s); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t_tuple = _r$5; n = _tuple[0]; err = _tuple[1];\n\t\t\treturn [n, err];\n\t\t/* } */ case 2:\n\t\t_r$6 = w.Write(new sliceType($stringToBytes(s))); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r$6; n = _tuple$1[0]; err = _tuple$1[1];\n\t\treturn [n, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: textWriter.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.n = n; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\ttextWriter.prototype.WriteString = function(s) { return this.$val.WriteString(s); };\n\ttextWriter.ptr.prototype.Write = function(p) {\n\t\tvar $ptr, _i, _i$1, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, err, err$1, err$2, err$3, err$4, frag, frag$1, frags, i, i$1, n, newlines, nn, nn$1, p, w, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; frag = $f.frag; frag$1 = $f.frag$1; frags = $f.frags; i = $f.i; i$1 = $f.i$1; n = $f.n; newlines = $f.newlines; nn = $f.nn; nn$1 = $f.nn$1; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tw = this;\n\t\tnewlines = bytes.Count(p, newline);\n\t\t/* */ if (newlines === 0) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (newlines === 0) { */ case 1:\n\t\t\t/* */ if (!w.compact && w.complete) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (!w.compact && w.complete) { */ case 3:\n\t\t\t\t$r = w.writeIndent(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 4:\n\t\t\t_r$5 = w.w.Write(p); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t_tuple = _r$5; n = _tuple[0]; err = _tuple[1];\n\t\t\tw.complete = false;\n\t\t\t_tmp = n; _tmp$1 = err; n = _tmp; err = _tmp$1;\n\t\t\treturn [n, err];\n\t\t/* } */ case 2:\n\t\tfrags = bytes.SplitN(p, newline, newlines + 1 >> 0);\n\t\t/* */ if (w.compact) { $s = 7; continue; }\n\t\t/* */ $s = 8; continue;\n\t\t/* if (w.compact) { */ case 7:\n\t\t\t_ref = frags;\n\t\t\t_i = 0;\n\t\t\t/* while (true) { */ case 9:\n\t\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 10; continue; }\n\t\t\t\ti = _i;\n\t\t\t\tfrag = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\t\t/* */ if (i > 0) { $s = 11; continue; }\n\t\t\t\t/* */ $s = 12; continue;\n\t\t\t\t/* if (i > 0) { */ case 11:\n\t\t\t\t\t_r$6 = w.w.WriteByte(32); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t\t\terr$1 = _r$6;\n\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 14; continue; }\n\t\t\t\t\t/* */ $s = 15; continue;\n\t\t\t\t\t/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 14:\n\t\t\t\t\t\t_tmp$2 = n; _tmp$3 = err$1; n = _tmp$2; err = _tmp$3;\n\t\t\t\t\t\treturn [n, err];\n\t\t\t\t\t/* } */ case 15:\n\t\t\t\t\tn = n + (1) >> 0;\n\t\t\t\t/* } */ case 12:\n\t\t\t\t_r$7 = w.w.Write(frag); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$1 = _r$7; nn = _tuple$1[0]; err$2 = _tuple$1[1];\n\t\t\t\tn = n + (nn) >> 0;\n\t\t\t\tif (!($interfaceIsEqual(err$2, $ifaceNil))) {\n\t\t\t\t\t_tmp$4 = n; _tmp$5 = err$2; n = _tmp$4; err = _tmp$5;\n\t\t\t\t\treturn [n, err];\n\t\t\t\t}\n\t\t\t\t_i++;\n\t\t\t/* } */ $s = 9; continue; case 10:\n\t\t\t_tmp$6 = n; _tmp$7 = $ifaceNil; n = _tmp$6; err = _tmp$7;\n\t\t\treturn [n, err];\n\t\t/* } */ case 8:\n\t\t_ref$1 = frags;\n\t\t_i$1 = 0;\n\t\t/* while (true) { */ case 17:\n\t\t\t/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 18; continue; }\n\t\t\ti$1 = _i$1;\n\t\t\tfrag$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError(\"index out of range\") : _ref$1.$array[_ref$1.$offset + _i$1]);\n\t\t\t/* */ if (w.complete) { $s = 19; continue; }\n\t\t\t/* */ $s = 20; continue;\n\t\t\t/* if (w.complete) { */ case 19:\n\t\t\t\t$r = w.writeIndent(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 20:\n\t\t\t_r$8 = w.w.Write(frag$1); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t_tuple$2 = _r$8; nn$1 = _tuple$2[0]; err$3 = _tuple$2[1];\n\t\t\tn = n + (nn$1) >> 0;\n\t\t\tif (!($interfaceIsEqual(err$3, $ifaceNil))) {\n\t\t\t\t_tmp$8 = n; _tmp$9 = err$3; n = _tmp$8; err = _tmp$9;\n\t\t\t\treturn [n, err];\n\t\t\t}\n\t\t\t/* */ if ((i$1 + 1 >> 0) < frags.$length) { $s = 23; continue; }\n\t\t\t/* */ $s = 24; continue;\n\t\t\t/* if ((i$1 + 1 >> 0) < frags.$length) { */ case 23:\n\t\t\t\t_r$9 = w.w.WriteByte(10); /* */ $s = 25; case 25: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\t\terr$4 = _r$9;\n\t\t\t\t/* */ if (!($interfaceIsEqual(err$4, $ifaceNil))) { $s = 26; continue; }\n\t\t\t\t/* */ $s = 27; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err$4, $ifaceNil))) { */ case 26:\n\t\t\t\t\t_tmp$10 = n; _tmp$11 = err$4; n = _tmp$10; err = _tmp$11;\n\t\t\t\t\treturn [n, err];\n\t\t\t\t/* } */ case 27:\n\t\t\t\tn = n + (1) >> 0;\n\t\t\t/* } */ case 24:\n\t\t\t_i$1++;\n\t\t/* } */ $s = 17; continue; case 18:\n\t\tw.complete = (x = frags.$length - 1 >> 0, ((x < 0 || x >= frags.$length) ? $throwRuntimeError(\"index out of range\") : frags.$array[frags.$offset + x])).$length === 0;\n\t\t_tmp$12 = n; _tmp$13 = $ifaceNil; n = _tmp$12; err = _tmp$13;\n\t\treturn [n, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: textWriter.ptr.prototype.Write }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.frag = frag; $f.frag$1 = frag$1; $f.frags = frags; $f.i = i; $f.i$1 = i$1; $f.n = n; $f.newlines = newlines; $f.nn = nn; $f.nn$1 = nn$1; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\ttextWriter.prototype.Write = function(p) { return this.$val.Write(p); };\n\ttextWriter.ptr.prototype.WriteByte = function(c) {\n\t\tvar $ptr, _r$5, c, err, w, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; c = $f.c; err = $f.err; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tw = this;\n\t\tif (w.compact && (c === 10)) {\n\t\t\tc = 32;\n\t\t}\n\t\t/* */ if (!w.compact && w.complete) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!w.compact && w.complete) { */ case 1:\n\t\t\t$r = w.writeIndent(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 2:\n\t\t_r$5 = w.w.WriteByte(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\terr = _r$5;\n\t\tw.complete = c === 10;\n\t\treturn err;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: textWriter.ptr.prototype.WriteByte }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.c = c; $f.err = err; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\ttextWriter.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };\n\ttextWriter.ptr.prototype.indent = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\tw.ind = w.ind + (1) >> 0;\n\t};\n\ttextWriter.prototype.indent = function() { return this.$val.indent(); };\n\ttextWriter.ptr.prototype.unindent = function() {\n\t\tvar $ptr, w, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tw = this;\n\t\t/* */ if (w.ind === 0) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (w.ind === 0) { */ case 1:\n\t\t\t$r = log.Printf(\"proto: textWriter unindented too far\", new sliceType$2([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\treturn;\n\t\t/* } */ case 2:\n\t\tw.ind = w.ind - (1) >> 0;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: textWriter.ptr.prototype.unindent }; } $f.$ptr = $ptr; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\ttextWriter.prototype.unindent = function() { return this.$val.unindent(); };\n\twriteName = function(w, props) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, err, props, w, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; err = $f.err; props = $f.props; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r$5 = w.WriteString(props.OrigName); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_tuple = _r$5; err = _tuple[1];\n\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:\n\t\t\treturn err;\n\t\t/* } */ case 3:\n\t\t/* */ if (!(props.Wire === \"group\")) { $s = 4; continue; }\n\t\t/* */ $s = 5; continue;\n\t\t/* if (!(props.Wire === \"group\")) { */ case 4:\n\t\t\t_r$6 = w.WriteByte(58); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\treturn _r$6;\n\t\t/* } */ case 5:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: writeName }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.err = err; $f.props = props; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\twriteStruct = function(w, sv) {\n\t\tvar $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _i, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, _tuple$3, b, err, err$1, err$10, err$11, err$12, err$13, err$14, err$15, err$16, err$17, err$18, err$19, err$2, err$20, err$21, err$22, err$23, err$24, err$25, err$3, err$4, err$5, err$6, err$7, err$8, err$9, fv, i, j, key, keys, name, ok, props, pv, sprops, st, sv, v, val, w, x, x$1, x$2, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; b = $f.b; err = $f.err; err$1 = $f.err$1; err$10 = $f.err$10; err$11 = $f.err$11; err$12 = $f.err$12; err$13 = $f.err$13; err$14 = $f.err$14; err$15 = $f.err$15; err$16 = $f.err$16; err$17 = $f.err$17; err$18 = $f.err$18; err$19 = $f.err$19; err$2 = $f.err$2; err$20 = $f.err$20; err$21 = $f.err$21; err$22 = $f.err$22; err$23 = $f.err$23; err$24 = $f.err$24; err$25 = $f.err$25; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; err$7 = $f.err$7; err$8 = $f.err$8; err$9 = $f.err$9; fv = $f.fv; i = $f.i; j = $f.j; key = $f.key; keys = $f.keys; name = $f.name; ok = $f.ok; props = $f.props; pv = $f.pv; sprops = $f.sprops; st = $f.st; sv = $f.sv; v = $f.v; val = $f.val; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tsv = sv;\n\t\t/* */ if ($interfaceIsEqual(sv.Type(), messageSetType)) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if ($interfaceIsEqual(sv.Type(), messageSetType)) { */ case 1:\n\t\t\t_arg = w;\n\t\t\t_r$5 = sv.Addr().Interface(); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t_arg$1 = $assertType(_r$5, ptrType$6);\n\t\t\t_r$6 = writeMessageSet(_arg, _arg$1); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\treturn _r$6;\n\t\t/* } */ case 2:\n\t\tst = sv.Type();\n\t\t_r$7 = GetProperties(st); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\tsprops = _r$7;\n\t\ti = 0;\n\t\t/* while (true) { */ case 6:\n\t\t\t/* if (!(i < sv.NumField())) { break; } */ if(!(i < sv.NumField())) { $s = 7; continue; }\n\t\t\t_r$8 = sv.Field(i); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\tfv = _r$8;\n\t\t\tprops = (x = sprops.Prop, ((i < 0 || i >= x.$length) ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + i]));\n\t\t\t_r$9 = st.Field(i); /* */ $s = 9; case 9: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\tname = _r$9.Name;\n\t\t\t/* */ if (strings.HasPrefix(name, \"XXX_\")) { $s = 10; continue; }\n\t\t\t/* */ $s = 11; continue;\n\t\t\t/* if (strings.HasPrefix(name, \"XXX_\")) { */ case 10:\n\t\t\t\t/* */ if (name === \"XXX_unrecognized\" && !fv.IsNil()) { $s = 12; continue; }\n\t\t\t\t/* */ $s = 13; continue;\n\t\t\t\t/* if (name === \"XXX_unrecognized\" && !fv.IsNil()) { */ case 12:\n\t\t\t\t\t_arg$2 = w;\n\t\t\t\t\t_r$10 = fv.Interface(); /* */ $s = 14; case 14: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\t\t\t_arg$3 = $assertType(_r$10, sliceType);\n\t\t\t\t\t_r$11 = writeUnknownStruct(_arg$2, _arg$3); /* */ $s = 15; case 15: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t\t\t\terr = _r$11;\n\t\t\t\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 16; continue; }\n\t\t\t\t\t/* */ $s = 17; continue;\n\t\t\t\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 16:\n\t\t\t\t\t\treturn err;\n\t\t\t\t\t/* } */ case 17:\n\t\t\t\t/* } */ case 13:\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t/* continue; */ $s = 6; continue;\n\t\t\t/* } */ case 11:\n\t\t\t/* */ if ((fv.Kind() === 22) && fv.IsNil()) { $s = 18; continue; }\n\t\t\t/* */ $s = 19; continue;\n\t\t\t/* if ((fv.Kind() === 22) && fv.IsNil()) { */ case 18:\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t/* continue; */ $s = 6; continue;\n\t\t\t/* } */ case 19:\n\t\t\t/* */ if ((fv.Kind() === 23) && fv.IsNil()) { $s = 20; continue; }\n\t\t\t/* */ $s = 21; continue;\n\t\t\t/* if ((fv.Kind() === 23) && fv.IsNil()) { */ case 20:\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t/* continue; */ $s = 6; continue;\n\t\t\t/* } */ case 21:\n\t\t\t/* */ if (props.Repeated && (fv.Kind() === 23)) { $s = 22; continue; }\n\t\t\t/* */ $s = 23; continue;\n\t\t\t/* if (props.Repeated && (fv.Kind() === 23)) { */ case 22:\n\t\t\t\tj = 0;\n\t\t\t\t/* while (true) { */ case 24:\n\t\t\t\t\t/* if (!(j < fv.Len())) { break; } */ if(!(j < fv.Len())) { $s = 25; continue; }\n\t\t\t\t\t_r$12 = writeName(w, props); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\t\t\t\terr$1 = _r$12;\n\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 27; continue; }\n\t\t\t\t\t/* */ $s = 28; continue;\n\t\t\t\t\t/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 27:\n\t\t\t\t\t\treturn err$1;\n\t\t\t\t\t/* } */ case 28:\n\t\t\t\t\t/* */ if (!w.compact) { $s = 29; continue; }\n\t\t\t\t\t/* */ $s = 30; continue;\n\t\t\t\t\t/* if (!w.compact) { */ case 29:\n\t\t\t\t\t\t_r$13 = w.WriteByte(32); /* */ $s = 31; case 31: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }\n\t\t\t\t\t\terr$2 = _r$13;\n\t\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 32; continue; }\n\t\t\t\t\t\t/* */ $s = 33; continue;\n\t\t\t\t\t\t/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 32:\n\t\t\t\t\t\t\treturn err$2;\n\t\t\t\t\t\t/* } */ case 33:\n\t\t\t\t\t/* } */ case 30:\n\t\t\t\t\t_r$14 = fv.Index(j); /* */ $s = 34; case 34: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }\n\t\t\t\t\tv = _r$14;\n\t\t\t\t\t/* */ if ((v.Kind() === 22) && v.IsNil()) { $s = 35; continue; }\n\t\t\t\t\t/* */ $s = 36; continue;\n\t\t\t\t\t/* if ((v.Kind() === 22) && v.IsNil()) { */ case 35:\n\t\t\t\t\t\t_r$15 = w.Write(new sliceType($stringToBytes(\"<nil>\\n\"))); /* */ $s = 37; case 37: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }\n\t\t\t\t\t\t_tuple = _r$15; err$3 = _tuple[1];\n\t\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$3, $ifaceNil))) { $s = 38; continue; }\n\t\t\t\t\t\t/* */ $s = 39; continue;\n\t\t\t\t\t\t/* if (!($interfaceIsEqual(err$3, $ifaceNil))) { */ case 38:\n\t\t\t\t\t\t\treturn err$3;\n\t\t\t\t\t\t/* } */ case 39:\n\t\t\t\t\t\tj = j + (1) >> 0;\n\t\t\t\t\t\t/* continue; */ $s = 24; continue;\n\t\t\t\t\t/* } */ case 36:\n\t\t\t\t\t_r$16 = writeAny(w, v, props); /* */ $s = 40; case 40: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }\n\t\t\t\t\terr$4 = _r$16;\n\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$4, $ifaceNil))) { $s = 41; continue; }\n\t\t\t\t\t/* */ $s = 42; continue;\n\t\t\t\t\t/* if (!($interfaceIsEqual(err$4, $ifaceNil))) { */ case 41:\n\t\t\t\t\t\treturn err$4;\n\t\t\t\t\t/* } */ case 42:\n\t\t\t\t\t_r$17 = w.WriteByte(10); /* */ $s = 43; case 43: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }\n\t\t\t\t\terr$5 = _r$17;\n\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$5, $ifaceNil))) { $s = 44; continue; }\n\t\t\t\t\t/* */ $s = 45; continue;\n\t\t\t\t\t/* if (!($interfaceIsEqual(err$5, $ifaceNil))) { */ case 44:\n\t\t\t\t\t\treturn err$5;\n\t\t\t\t\t/* } */ case 45:\n\t\t\t\t\tj = j + (1) >> 0;\n\t\t\t\t/* } */ $s = 24; continue; case 25:\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t/* continue; */ $s = 6; continue;\n\t\t\t/* } */ case 23:\n\t\t\t/* */ if (fv.Kind() === 21) { $s = 46; continue; }\n\t\t\t/* */ $s = 47; continue;\n\t\t\t/* if (fv.Kind() === 21) { */ case 46:\n\t\t\t\t_r$18 = fv.MapKeys(); /* */ $s = 48; case 48: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }\n\t\t\t\tkeys = _r$18;\n\t\t\t\t$r = sort.Sort($subslice(new mapKeys(keys.$array), keys.$offset, keys.$offset + keys.$length)); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t_ref = keys;\n\t\t\t\t_i = 0;\n\t\t\t\t/* while (true) { */ case 50:\n\t\t\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 51; continue; }\n\t\t\t\t\tkey = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\t\t\t_r$19 = fv.MapIndex(key); /* */ $s = 52; case 52: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }\n\t\t\t\t\tval = _r$19;\n\t\t\t\t\t_r$20 = writeName(w, props); /* */ $s = 53; case 53: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }\n\t\t\t\t\terr$6 = _r$20;\n\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$6, $ifaceNil))) { $s = 54; continue; }\n\t\t\t\t\t/* */ $s = 55; continue;\n\t\t\t\t\t/* if (!($interfaceIsEqual(err$6, $ifaceNil))) { */ case 54:\n\t\t\t\t\t\treturn err$6;\n\t\t\t\t\t/* } */ case 55:\n\t\t\t\t\t/* */ if (!w.compact) { $s = 56; continue; }\n\t\t\t\t\t/* */ $s = 57; continue;\n\t\t\t\t\t/* if (!w.compact) { */ case 56:\n\t\t\t\t\t\t_r$21 = w.WriteByte(32); /* */ $s = 58; case 58: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }\n\t\t\t\t\t\terr$7 = _r$21;\n\t\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$7, $ifaceNil))) { $s = 59; continue; }\n\t\t\t\t\t\t/* */ $s = 60; continue;\n\t\t\t\t\t\t/* if (!($interfaceIsEqual(err$7, $ifaceNil))) { */ case 59:\n\t\t\t\t\t\t\treturn err$7;\n\t\t\t\t\t\t/* } */ case 60:\n\t\t\t\t\t/* } */ case 57:\n\t\t\t\t\t_r$22 = w.WriteByte(60); /* */ $s = 61; case 61: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }\n\t\t\t\t\terr$8 = _r$22;\n\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$8, $ifaceNil))) { $s = 62; continue; }\n\t\t\t\t\t/* */ $s = 63; continue;\n\t\t\t\t\t/* if (!($interfaceIsEqual(err$8, $ifaceNil))) { */ case 62:\n\t\t\t\t\t\treturn err$8;\n\t\t\t\t\t/* } */ case 63:\n\t\t\t\t\t/* */ if (!w.compact) { $s = 64; continue; }\n\t\t\t\t\t/* */ $s = 65; continue;\n\t\t\t\t\t/* if (!w.compact) { */ case 64:\n\t\t\t\t\t\t_r$23 = w.WriteByte(10); /* */ $s = 66; case 66: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }\n\t\t\t\t\t\terr$9 = _r$23;\n\t\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$9, $ifaceNil))) { $s = 67; continue; }\n\t\t\t\t\t\t/* */ $s = 68; continue;\n\t\t\t\t\t\t/* if (!($interfaceIsEqual(err$9, $ifaceNil))) { */ case 67:\n\t\t\t\t\t\t\treturn err$9;\n\t\t\t\t\t\t/* } */ case 68:\n\t\t\t\t\t/* } */ case 65:\n\t\t\t\t\tw.indent();\n\t\t\t\t\t_r$24 = w.WriteString(\"key:\"); /* */ $s = 69; case 69: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }\n\t\t\t\t\t_tuple$1 = _r$24; err$10 = _tuple$1[1];\n\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$10, $ifaceNil))) { $s = 70; continue; }\n\t\t\t\t\t/* */ $s = 71; continue;\n\t\t\t\t\t/* if (!($interfaceIsEqual(err$10, $ifaceNil))) { */ case 70:\n\t\t\t\t\t\treturn err$10;\n\t\t\t\t\t/* } */ case 71:\n\t\t\t\t\t/* */ if (!w.compact) { $s = 72; continue; }\n\t\t\t\t\t/* */ $s = 73; continue;\n\t\t\t\t\t/* if (!w.compact) { */ case 72:\n\t\t\t\t\t\t_r$25 = w.WriteByte(32); /* */ $s = 74; case 74: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }\n\t\t\t\t\t\terr$11 = _r$25;\n\t\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$11, $ifaceNil))) { $s = 75; continue; }\n\t\t\t\t\t\t/* */ $s = 76; continue;\n\t\t\t\t\t\t/* if (!($interfaceIsEqual(err$11, $ifaceNil))) { */ case 75:\n\t\t\t\t\t\t\treturn err$11;\n\t\t\t\t\t\t/* } */ case 76:\n\t\t\t\t\t/* } */ case 73:\n\t\t\t\t\t_r$26 = writeAny(w, key, props.mkeyprop); /* */ $s = 77; case 77: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }\n\t\t\t\t\terr$12 = _r$26;\n\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$12, $ifaceNil))) { $s = 78; continue; }\n\t\t\t\t\t/* */ $s = 79; continue;\n\t\t\t\t\t/* if (!($interfaceIsEqual(err$12, $ifaceNil))) { */ case 78:\n\t\t\t\t\t\treturn err$12;\n\t\t\t\t\t/* } */ case 79:\n\t\t\t\t\t_r$27 = w.WriteByte(10); /* */ $s = 80; case 80: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }\n\t\t\t\t\terr$13 = _r$27;\n\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$13, $ifaceNil))) { $s = 81; continue; }\n\t\t\t\t\t/* */ $s = 82; continue;\n\t\t\t\t\t/* if (!($interfaceIsEqual(err$13, $ifaceNil))) { */ case 81:\n\t\t\t\t\t\treturn err$13;\n\t\t\t\t\t/* } */ case 82:\n\t\t\t\t\t_r$28 = w.WriteString(\"value:\"); /* */ $s = 83; case 83: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }\n\t\t\t\t\t_tuple$2 = _r$28; err$14 = _tuple$2[1];\n\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$14, $ifaceNil))) { $s = 84; continue; }\n\t\t\t\t\t/* */ $s = 85; continue;\n\t\t\t\t\t/* if (!($interfaceIsEqual(err$14, $ifaceNil))) { */ case 84:\n\t\t\t\t\t\treturn err$14;\n\t\t\t\t\t/* } */ case 85:\n\t\t\t\t\t/* */ if (!w.compact) { $s = 86; continue; }\n\t\t\t\t\t/* */ $s = 87; continue;\n\t\t\t\t\t/* if (!w.compact) { */ case 86:\n\t\t\t\t\t\t_r$29 = w.WriteByte(32); /* */ $s = 88; case 88: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }\n\t\t\t\t\t\terr$15 = _r$29;\n\t\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$15, $ifaceNil))) { $s = 89; continue; }\n\t\t\t\t\t\t/* */ $s = 90; continue;\n\t\t\t\t\t\t/* if (!($interfaceIsEqual(err$15, $ifaceNil))) { */ case 89:\n\t\t\t\t\t\t\treturn err$15;\n\t\t\t\t\t\t/* } */ case 90:\n\t\t\t\t\t/* } */ case 87:\n\t\t\t\t\t_r$30 = writeAny(w, val, props.mvalprop); /* */ $s = 91; case 91: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }\n\t\t\t\t\terr$16 = _r$30;\n\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$16, $ifaceNil))) { $s = 92; continue; }\n\t\t\t\t\t/* */ $s = 93; continue;\n\t\t\t\t\t/* if (!($interfaceIsEqual(err$16, $ifaceNil))) { */ case 92:\n\t\t\t\t\t\treturn err$16;\n\t\t\t\t\t/* } */ case 93:\n\t\t\t\t\t_r$31 = w.WriteByte(10); /* */ $s = 94; case 94: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }\n\t\t\t\t\terr$17 = _r$31;\n\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$17, $ifaceNil))) { $s = 95; continue; }\n\t\t\t\t\t/* */ $s = 96; continue;\n\t\t\t\t\t/* if (!($interfaceIsEqual(err$17, $ifaceNil))) { */ case 95:\n\t\t\t\t\t\treturn err$17;\n\t\t\t\t\t/* } */ case 96:\n\t\t\t\t\t$r = w.unindent(); /* */ $s = 97; case 97: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$32 = w.WriteByte(62); /* */ $s = 98; case 98: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }\n\t\t\t\t\terr$18 = _r$32;\n\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$18, $ifaceNil))) { $s = 99; continue; }\n\t\t\t\t\t/* */ $s = 100; continue;\n\t\t\t\t\t/* if (!($interfaceIsEqual(err$18, $ifaceNil))) { */ case 99:\n\t\t\t\t\t\treturn err$18;\n\t\t\t\t\t/* } */ case 100:\n\t\t\t\t\t_r$33 = w.WriteByte(10); /* */ $s = 101; case 101: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }\n\t\t\t\t\terr$19 = _r$33;\n\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$19, $ifaceNil))) { $s = 102; continue; }\n\t\t\t\t\t/* */ $s = 103; continue;\n\t\t\t\t\t/* if (!($interfaceIsEqual(err$19, $ifaceNil))) { */ case 102:\n\t\t\t\t\t\treturn err$19;\n\t\t\t\t\t/* } */ case 103:\n\t\t\t\t\t_i++;\n\t\t\t\t/* } */ $s = 50; continue; case 51:\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t/* continue; */ $s = 6; continue;\n\t\t\t/* } */ case 47:\n\t\t\t/* */ if (props.proto3 && (fv.Kind() === 23) && (fv.Len() === 0)) { $s = 104; continue; }\n\t\t\t/* */ $s = 105; continue;\n\t\t\t/* if (props.proto3 && (fv.Kind() === 23) && (fv.Len() === 0)) { */ case 104:\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t/* continue; */ $s = 6; continue;\n\t\t\t/* } */ case 105:\n\t\t\t/* */ if (!((fv.Kind() === 22)) && !((fv.Kind() === 23))) { $s = 106; continue; }\n\t\t\t/* */ $s = 107; continue;\n\t\t\t/* if (!((fv.Kind() === 22)) && !((fv.Kind() === 23))) { */ case 106:\n\t\t\t\t_ref$1 = fv.Kind();\n\t\t\t\t/* */ if (_ref$1 === 1) { $s = 108; continue; }\n\t\t\t\t/* */ if (_ref$1 === 5 || _ref$1 === 6) { $s = 109; continue; }\n\t\t\t\t/* */ if (_ref$1 === 10 || _ref$1 === 11) { $s = 110; continue; }\n\t\t\t\t/* */ if (_ref$1 === 13 || _ref$1 === 14) { $s = 111; continue; }\n\t\t\t\t/* */ if (_ref$1 === 24) { $s = 112; continue; }\n\t\t\t\t/* */ $s = 113; continue;\n\t\t\t\t/* if (_ref$1 === 1) { */ case 108:\n\t\t\t\t\tif (!fv.Bool()) {\n\t\t\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t\t\t/* continue; */ $s = 6; continue;\n\t\t\t\t\t}\n\t\t\t\t\t$s = 113; continue;\n\t\t\t\t/* } else if (_ref$1 === 5 || _ref$1 === 6) { */ case 109:\n\t\t\t\t\tif ((x$1 = fv.Int(), (x$1.$high === 0 && x$1.$low === 0))) {\n\t\t\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t\t\t/* continue; */ $s = 6; continue;\n\t\t\t\t\t}\n\t\t\t\t\t$s = 113; continue;\n\t\t\t\t/* } else if (_ref$1 === 10 || _ref$1 === 11) { */ case 110:\n\t\t\t\t\tif ((x$2 = fv.Uint(), (x$2.$high === 0 && x$2.$low === 0))) {\n\t\t\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t\t\t/* continue; */ $s = 6; continue;\n\t\t\t\t\t}\n\t\t\t\t\t$s = 113; continue;\n\t\t\t\t/* } else if (_ref$1 === 13 || _ref$1 === 14) { */ case 111:\n\t\t\t\t\tif (fv.Float() === 0) {\n\t\t\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t\t\t/* continue; */ $s = 6; continue;\n\t\t\t\t\t}\n\t\t\t\t\t$s = 113; continue;\n\t\t\t\t/* } else if (_ref$1 === 24) { */ case 112:\n\t\t\t\t\t_r$34 = fv.String(); /* */ $s = 116; case 116: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }\n\t\t\t\t\t/* */ if (_r$34 === \"\") { $s = 114; continue; }\n\t\t\t\t\t/* */ $s = 115; continue;\n\t\t\t\t\t/* if (_r$34 === \"\") { */ case 114:\n\t\t\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t\t\t/* continue; */ $s = 6; continue;\n\t\t\t\t\t/* } */ case 115:\n\t\t\t\t/* } */ case 113:\n\t\t\t/* } */ case 107:\n\t\t\t_r$35 = writeName(w, props); /* */ $s = 117; case 117: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }\n\t\t\terr$20 = _r$35;\n\t\t\t/* */ if (!($interfaceIsEqual(err$20, $ifaceNil))) { $s = 118; continue; }\n\t\t\t/* */ $s = 119; continue;\n\t\t\t/* if (!($interfaceIsEqual(err$20, $ifaceNil))) { */ case 118:\n\t\t\t\treturn err$20;\n\t\t\t/* } */ case 119:\n\t\t\t/* */ if (!w.compact) { $s = 120; continue; }\n\t\t\t/* */ $s = 121; continue;\n\t\t\t/* if (!w.compact) { */ case 120:\n\t\t\t\t_r$36 = w.WriteByte(32); /* */ $s = 122; case 122: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }\n\t\t\t\terr$21 = _r$36;\n\t\t\t\t/* */ if (!($interfaceIsEqual(err$21, $ifaceNil))) { $s = 123; continue; }\n\t\t\t\t/* */ $s = 124; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err$21, $ifaceNil))) { */ case 123:\n\t\t\t\t\treturn err$21;\n\t\t\t\t/* } */ case 124:\n\t\t\t/* } */ case 121:\n\t\t\t_r$37 = fv.Interface(); /* */ $s = 125; case 125: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }\n\t\t\t_tuple$3 = $assertType(_r$37, raw, true); b = _tuple$3[0]; ok = _tuple$3[1];\n\t\t\t/* */ if (ok) { $s = 126; continue; }\n\t\t\t/* */ $s = 127; continue;\n\t\t\t/* if (ok) { */ case 126:\n\t\t\t\t_arg$4 = w;\n\t\t\t\t_r$38 = b.Bytes(); /* */ $s = 128; case 128: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }\n\t\t\t\t_arg$5 = _r$38;\n\t\t\t\t_r$39 = writeRaw(_arg$4, _arg$5); /* */ $s = 129; case 129: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }\n\t\t\t\terr$22 = _r$39;\n\t\t\t\t/* */ if (!($interfaceIsEqual(err$22, $ifaceNil))) { $s = 130; continue; }\n\t\t\t\t/* */ $s = 131; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err$22, $ifaceNil))) { */ case 130:\n\t\t\t\t\treturn err$22;\n\t\t\t\t/* } */ case 131:\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t/* continue; */ $s = 6; continue;\n\t\t\t/* } */ case 127:\n\t\t\t_r$40 = writeAny(w, fv, props); /* */ $s = 132; case 132: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }\n\t\t\terr$23 = _r$40;\n\t\t\t/* */ if (!($interfaceIsEqual(err$23, $ifaceNil))) { $s = 133; continue; }\n\t\t\t/* */ $s = 134; continue;\n\t\t\t/* if (!($interfaceIsEqual(err$23, $ifaceNil))) { */ case 133:\n\t\t\t\treturn err$23;\n\t\t\t/* } */ case 134:\n\t\t\t_r$41 = w.WriteByte(10); /* */ $s = 135; case 135: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }\n\t\t\terr$24 = _r$41;\n\t\t\t/* */ if (!($interfaceIsEqual(err$24, $ifaceNil))) { $s = 136; continue; }\n\t\t\t/* */ $s = 137; continue;\n\t\t\t/* if (!($interfaceIsEqual(err$24, $ifaceNil))) { */ case 136:\n\t\t\t\treturn err$24;\n\t\t\t/* } */ case 137:\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 6; continue; case 7:\n\t\tpv = sv.Addr();\n\t\t_r$42 = pv.Type().Implements(extendableProtoType); /* */ $s = 140; case 140: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }\n\t\t/* */ if (_r$42) { $s = 138; continue; }\n\t\t/* */ $s = 139; continue;\n\t\t/* if (_r$42) { */ case 138:\n\t\t\t_r$43 = writeExtensions(w, pv); /* */ $s = 141; case 141: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }\n\t\t\terr$25 = _r$43;\n\t\t\t/* */ if (!($interfaceIsEqual(err$25, $ifaceNil))) { $s = 142; continue; }\n\t\t\t/* */ $s = 143; continue;\n\t\t\t/* if (!($interfaceIsEqual(err$25, $ifaceNil))) { */ case 142:\n\t\t\t\treturn err$25;\n\t\t\t/* } */ case 143:\n\t\t/* } */ case 139:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: writeStruct }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$10 = err$10; $f.err$11 = err$11; $f.err$12 = err$12; $f.err$13 = err$13; $f.err$14 = err$14; $f.err$15 = err$15; $f.err$16 = err$16; $f.err$17 = err$17; $f.err$18 = err$18; $f.err$19 = err$19; $f.err$2 = err$2; $f.err$20 = err$20; $f.err$21 = err$21; $f.err$22 = err$22; $f.err$23 = err$23; $f.err$24 = err$24; $f.err$25 = err$25; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.err$7 = err$7; $f.err$8 = err$8; $f.err$9 = err$9; $f.fv = fv; $f.i = i; $f.j = j; $f.key = key; $f.keys = keys; $f.name = name; $f.ok = ok; $f.props = props; $f.pv = pv; $f.sprops = sprops; $f.st = st; $f.sv = sv; $f.v = v; $f.val = val; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\twriteRaw = function(w, b) {\n\t\tvar $ptr, _r$5, _r$6, _r$7, _r$8, b, err, err$1, err$2, err$3, w, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r$5 = w.WriteByte(60); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\terr = _r$5;\n\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:\n\t\t\treturn err;\n\t\t/* } */ case 3:\n\t\t/* */ if (!w.compact) { $s = 4; continue; }\n\t\t/* */ $s = 5; continue;\n\t\t/* if (!w.compact) { */ case 4:\n\t\t\t_r$6 = w.WriteByte(10); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\terr$1 = _r$6;\n\t\t\t/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 7; continue; }\n\t\t\t/* */ $s = 8; continue;\n\t\t\t/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 7:\n\t\t\t\treturn err$1;\n\t\t\t/* } */ case 8:\n\t\t/* } */ case 5:\n\t\tw.indent();\n\t\t_r$7 = writeUnknownStruct(w, b); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\terr$2 = _r$7;\n\t\t/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 10; continue; }\n\t\t/* */ $s = 11; continue;\n\t\t/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 10:\n\t\t\treturn err$2;\n\t\t/* } */ case 11:\n\t\t$r = w.unindent(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t_r$8 = w.WriteByte(62); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\terr$3 = _r$8;\n\t\t/* */ if (!($interfaceIsEqual(err$3, $ifaceNil))) { $s = 14; continue; }\n\t\t/* */ $s = 15; continue;\n\t\t/* if (!($interfaceIsEqual(err$3, $ifaceNil))) { */ case 14:\n\t\t\treturn err$3;\n\t\t/* } */ case 15:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: writeRaw }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\twriteAny = function(w, v, props) {\n\t\tvar $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, bra, err, err$1, err$2, err$3, err$4, err$5, err$6, err$7, err$8, ket, ok, props, text, tm, v, w, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; b = $f.b; bra = $f.bra; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; err$7 = $f.err$7; err$8 = $f.err$8; ket = $f.ket; ok = $f.ok; props = $f.props; text = $f.text; tm = $f.tm; v = $f.v; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = v;\n\t\t_r$5 = reflect.Indirect(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tv = _r$5;\n\t\t/* */ if ((v.Kind() === 13) || (v.Kind() === 14)) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if ((v.Kind() === 13) || (v.Kind() === 14)) { */ case 2:\n\t\t\tx = v.Float();\n\t\t\tb = sliceType.nil;\n\t\t\tif (math.IsInf(x, 1)) {\n\t\t\t\tb = posInf;\n\t\t\t} else if (math.IsInf(x, -1)) {\n\t\t\t\tb = negInf;\n\t\t\t} else if (math.IsNaN(x)) {\n\t\t\t\tb = nan;\n\t\t\t}\n\t\t\t/* */ if (!(b === sliceType.nil)) { $s = 4; continue; }\n\t\t\t/* */ $s = 5; continue;\n\t\t\t/* if (!(b === sliceType.nil)) { */ case 4:\n\t\t\t\t_r$6 = w.Write(b); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t\t_tuple = _r$6; err = _tuple[1];\n\t\t\t\treturn err;\n\t\t\t/* } */ case 5:\n\t\t/* } */ case 3:\n\t\t_ref = v.Kind();\n\t\t/* */ if (_ref === 23) { $s = 7; continue; }\n\t\t/* */ if (_ref === 24) { $s = 8; continue; }\n\t\t/* */ if (_ref === 25) { $s = 9; continue; }\n\t\t/* */ $s = 10; continue;\n\t\t/* if (_ref === 23) { */ case 7:\n\t\t\t_arg = w;\n\t\t\t_r$7 = v.Interface(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t_arg$1 = $bytesToString($assertType(_r$7, sliceType));\n\t\t\t_r$8 = writeString(_arg, _arg$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\terr$1 = _r$8;\n\t\t\t/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 14; continue; }\n\t\t\t/* */ $s = 15; continue;\n\t\t\t/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 14:\n\t\t\t\treturn err$1;\n\t\t\t/* } */ case 15:\n\t\t\t$s = 11; continue;\n\t\t/* } else if (_ref === 24) { */ case 8:\n\t\t\t_arg$2 = w;\n\t\t\t_r$9 = v.String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\t_arg$3 = _r$9;\n\t\t\t_r$10 = writeString(_arg$2, _arg$3); /* */ $s = 17; case 17: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\terr$2 = _r$10;\n\t\t\t/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 18; continue; }\n\t\t\t/* */ $s = 19; continue;\n\t\t\t/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 18:\n\t\t\t\treturn err$2;\n\t\t\t/* } */ case 19:\n\t\t\t$s = 11; continue;\n\t\t/* } else if (_ref === 25) { */ case 9:\n\t\t\t_tmp = 60; _tmp$1 = 62; bra = _tmp; ket = _tmp$1;\n\t\t\tif (!(props === ptrType$1.nil) && props.Wire === \"group\") {\n\t\t\t\t_tmp$2 = 123; _tmp$3 = 125; bra = _tmp$2; ket = _tmp$3;\n\t\t\t}\n\t\t\t_r$11 = w.WriteByte(bra); /* */ $s = 20; case 20: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t\terr$3 = _r$11;\n\t\t\t/* */ if (!($interfaceIsEqual(err$3, $ifaceNil))) { $s = 21; continue; }\n\t\t\t/* */ $s = 22; continue;\n\t\t\t/* if (!($interfaceIsEqual(err$3, $ifaceNil))) { */ case 21:\n\t\t\t\treturn err$3;\n\t\t\t/* } */ case 22:\n\t\t\t/* */ if (!w.compact) { $s = 23; continue; }\n\t\t\t/* */ $s = 24; continue;\n\t\t\t/* if (!w.compact) { */ case 23:\n\t\t\t\t_r$12 = w.WriteByte(10); /* */ $s = 25; case 25: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\t\t\terr$4 = _r$12;\n\t\t\t\t/* */ if (!($interfaceIsEqual(err$4, $ifaceNil))) { $s = 26; continue; }\n\t\t\t\t/* */ $s = 27; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err$4, $ifaceNil))) { */ case 26:\n\t\t\t\t\treturn err$4;\n\t\t\t\t/* } */ case 27:\n\t\t\t/* } */ case 24:\n\t\t\tw.indent();\n\t\t\t_r$13 = v.Interface(); /* */ $s = 28; case 28: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }\n\t\t\t_tuple$1 = $assertType(_r$13, encoding.TextMarshaler, true); tm = _tuple$1[0]; ok = _tuple$1[1];\n\t\t\t/* */ if (ok) { $s = 29; continue; }\n\t\t\t/* */ $s = 30; continue;\n\t\t\t/* if (ok) { */ case 29:\n\t\t\t\t_r$14 = tm.MarshalText(); /* */ $s = 32; case 32: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$2 = _r$14; text = _tuple$2[0]; err$5 = _tuple$2[1];\n\t\t\t\tif (!($interfaceIsEqual(err$5, $ifaceNil))) {\n\t\t\t\t\treturn err$5;\n\t\t\t\t}\n\t\t\t\t_r$15 = w.Write(text); /* */ $s = 33; case 33: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$3 = _r$15; err$5 = _tuple$3[1];\n\t\t\t\t/* */ if (!($interfaceIsEqual(err$5, $ifaceNil))) { $s = 34; continue; }\n\t\t\t\t/* */ $s = 35; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err$5, $ifaceNil))) { */ case 34:\n\t\t\t\t\treturn err$5;\n\t\t\t\t/* } */ case 35:\n\t\t\t\t$s = 31; continue;\n\t\t\t/* } else { */ case 30:\n\t\t\t\t_r$16 = writeStruct(w, v); /* */ $s = 36; case 36: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }\n\t\t\t\terr$6 = _r$16;\n\t\t\t\t/* */ if (!($interfaceIsEqual(err$6, $ifaceNil))) { $s = 37; continue; }\n\t\t\t\t/* */ $s = 38; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err$6, $ifaceNil))) { */ case 37:\n\t\t\t\t\treturn err$6;\n\t\t\t\t/* } */ case 38:\n\t\t\t/* } */ case 31:\n\t\t\t$r = w.unindent(); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t_r$17 = w.WriteByte(ket); /* */ $s = 40; case 40: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }\n\t\t\terr$7 = _r$17;\n\t\t\t/* */ if (!($interfaceIsEqual(err$7, $ifaceNil))) { $s = 41; continue; }\n\t\t\t/* */ $s = 42; continue;\n\t\t\t/* if (!($interfaceIsEqual(err$7, $ifaceNil))) { */ case 41:\n\t\t\t\treturn err$7;\n\t\t\t/* } */ case 42:\n\t\t\t$s = 11; continue;\n\t\t/* } else { */ case 10:\n\t\t\t_arg$4 = w;\n\t\t\t_r$18 = v.Interface(); /* */ $s = 43; case 43: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }\n\t\t\t_arg$5 = _r$18;\n\t\t\t_r$19 = fmt.Fprint(_arg$4, new sliceType$2([_arg$5])); /* */ $s = 44; case 44: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }\n\t\t\t_tuple$4 = _r$19; err$8 = _tuple$4[1];\n\t\t\treturn err$8;\n\t\t/* } */ case 11:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: writeAny }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.b = b; $f.bra = bra; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.err$7 = err$7; $f.err$8 = err$8; $f.ket = ket; $f.ok = ok; $f.props = props; $f.text = text; $f.tm = tm; $f.v = v; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tisprint = function(c) {\n\t\tvar $ptr, c;\n\t\treturn c >= 32 && c < 127;\n\t};\n\twriteString = function(w, s) {\n\t\tvar $ptr, _r$10, _r$11, _r$12, _r$13, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, c, err, err$1, i, s, w, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; c = $f.c; err = $f.err; err$1 = $f.err$1; i = $f.i; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r$5 = w.WriteByte(34); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\terr = _r$5;\n\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:\n\t\t\treturn err;\n\t\t/* } */ case 3:\n\t\ti = 0;\n\t\t/* while (true) { */ case 4:\n\t\t\t/* if (!(i < s.length)) { break; } */ if(!(i < s.length)) { $s = 5; continue; }\n\t\t\terr$1 = $ifaceNil;\n\t\t\tc = s.charCodeAt(i);\n\t\t\t_ref = c;\n\t\t\t/* */ if (_ref === 10) { $s = 6; continue; }\n\t\t\t/* */ if (_ref === 13) { $s = 7; continue; }\n\t\t\t/* */ if (_ref === 9) { $s = 8; continue; }\n\t\t\t/* */ if (_ref === 34) { $s = 9; continue; }\n\t\t\t/* */ if (_ref === 92) { $s = 10; continue; }\n\t\t\t/* */ $s = 11; continue;\n\t\t\t/* if (_ref === 10) { */ case 6:\n\t\t\t\t_r$6 = w.w.Write(backslashN); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t\t_tuple = _r$6; err$1 = _tuple[1];\n\t\t\t\t$s = 12; continue;\n\t\t\t/* } else if (_ref === 13) { */ case 7:\n\t\t\t\t_r$7 = w.w.Write(backslashR); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$1 = _r$7; err$1 = _tuple$1[1];\n\t\t\t\t$s = 12; continue;\n\t\t\t/* } else if (_ref === 9) { */ case 8:\n\t\t\t\t_r$8 = w.w.Write(backslashT); /* */ $s = 15; case 15: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$2 = _r$8; err$1 = _tuple$2[1];\n\t\t\t\t$s = 12; continue;\n\t\t\t/* } else if (_ref === 34) { */ case 9:\n\t\t\t\t_r$9 = w.w.Write(backslashDQ); /* */ $s = 16; case 16: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$3 = _r$9; err$1 = _tuple$3[1];\n\t\t\t\t$s = 12; continue;\n\t\t\t/* } else if (_ref === 92) { */ case 10:\n\t\t\t\t_r$10 = w.w.Write(backslashBS); /* */ $s = 17; case 17: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$4 = _r$10; err$1 = _tuple$4[1];\n\t\t\t\t$s = 12; continue;\n\t\t\t/* } else { */ case 11:\n\t\t\t\t/* */ if (isprint(c)) { $s = 18; continue; }\n\t\t\t\t/* */ $s = 19; continue;\n\t\t\t\t/* if (isprint(c)) { */ case 18:\n\t\t\t\t\t_r$11 = w.w.WriteByte(c); /* */ $s = 21; case 21: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t\t\t\terr$1 = _r$11;\n\t\t\t\t\t$s = 20; continue;\n\t\t\t\t/* } else { */ case 19:\n\t\t\t\t\t_r$12 = fmt.Fprintf(w.w, \"\\\\%03o\", new sliceType$2([new $Uint8(c)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\t\t\t\t_tuple$5 = _r$12; err$1 = _tuple$5[1];\n\t\t\t\t/* } */ case 20:\n\t\t\t/* } */ case 12:\n\t\t\tif (!($interfaceIsEqual(err$1, $ifaceNil))) {\n\t\t\t\treturn err$1;\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 4; continue; case 5:\n\t\t_r$13 = w.WriteByte(34); /* */ $s = 23; case 23: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }\n\t\treturn _r$13;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: writeString }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.c = c; $f.err = err; $f.err$1 = err$1; $f.i = i; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\twriteMessageSet = function(w, ms) {\n\t\tvar $ptr, _arg, _arg$1, _arg$2, _arg$3, _entry, _i, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, err, err$1, err$2, err$3, err$4, err$5, err$6, id, item, ms, msd, ok, pb, w, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _entry = $f._entry; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; id = $f.id; item = $f.item; ms = $f.ms; msd = $f.msd; ok = $f.ok; pb = $f.pb; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_ref = ms.Item;\n\t\t_i = 0;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }\n\t\t\titem = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tid = item.TypeId.$get();\n\t\t\t_tuple = (_entry = messageSetMap[id], _entry !== undefined ? [_entry.v, true] : [new messageSetDesc.ptr(), false]); msd = $clone(_tuple[0], messageSetDesc); ok = _tuple[1];\n\t\t\t/* */ if (ok) { $s = 3; continue; }\n\t\t\t/* */ $s = 4; continue;\n\t\t\t/* if (ok) { */ case 3:\n\t\t\t\t_r$5 = fmt.Fprintf(w, \"[%s]: <\\n\", new sliceType$2([new $String(msd.name)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$1 = _r$5; err = _tuple$1[1];\n\t\t\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 7; continue; }\n\t\t\t\t/* */ $s = 8; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 7:\n\t\t\t\t\treturn err;\n\t\t\t\t/* } */ case 8:\n\t\t\t\tw.indent();\n\t\t\t\t_r$6 = msd.t.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t\t_r$7 = reflect.New(_r$6); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t\tpb = _r$7;\n\t\t\t\t_arg = item.Message;\n\t\t\t\t_r$8 = pb.Interface(); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t\t_arg$1 = $assertType(_r$8, Message);\n\t\t\t\t_r$9 = Unmarshal(_arg, _arg$1); /* */ $s = 12; case 12: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\t\terr$1 = _r$9;\n\t\t\t\t/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 13; continue; }\n\t\t\t\t/* */ $s = 14; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 13:\n\t\t\t\t\t_r$10 = fmt.Fprintf(w, \"/* bad message: %v */\\n\", new sliceType$2([err$1])); /* */ $s = 16; case 16: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\t\t\t_tuple$2 = _r$10; err$2 = _tuple$2[1];\n\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 17; continue; }\n\t\t\t\t\t/* */ $s = 18; continue;\n\t\t\t\t\t/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 17:\n\t\t\t\t\t\treturn err$2;\n\t\t\t\t\t/* } */ case 18:\n\t\t\t\t\t$s = 15; continue;\n\t\t\t\t/* } else { */ case 14:\n\t\t\t\t\t_arg$2 = w;\n\t\t\t\t\t_r$11 = pb.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t\t\t\t_arg$3 = _r$11;\n\t\t\t\t\t_r$12 = writeStruct(_arg$2, _arg$3); /* */ $s = 20; case 20: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\t\t\t\terr$3 = _r$12;\n\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$3, $ifaceNil))) { $s = 21; continue; }\n\t\t\t\t\t/* */ $s = 22; continue;\n\t\t\t\t\t/* if (!($interfaceIsEqual(err$3, $ifaceNil))) { */ case 21:\n\t\t\t\t\t\treturn err$3;\n\t\t\t\t\t/* } */ case 22:\n\t\t\t\t/* } */ case 15:\n\t\t\t\t$s = 5; continue;\n\t\t\t/* } else { */ case 4:\n\t\t\t\t_r$13 = fmt.Fprintf(w, \"[%d]: <\\n\", new sliceType$2([new $Int32(id)])); /* */ $s = 23; case 23: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$3 = _r$13; err$4 = _tuple$3[1];\n\t\t\t\t/* */ if (!($interfaceIsEqual(err$4, $ifaceNil))) { $s = 24; continue; }\n\t\t\t\t/* */ $s = 25; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err$4, $ifaceNil))) { */ case 24:\n\t\t\t\t\treturn err$4;\n\t\t\t\t/* } */ case 25:\n\t\t\t\tw.indent();\n\t\t\t\t_r$14 = writeUnknownStruct(w, item.Message); /* */ $s = 26; case 26: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }\n\t\t\t\terr$5 = _r$14;\n\t\t\t\t/* */ if (!($interfaceIsEqual(err$5, $ifaceNil))) { $s = 27; continue; }\n\t\t\t\t/* */ $s = 28; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err$5, $ifaceNil))) { */ case 27:\n\t\t\t\t\treturn err$5;\n\t\t\t\t/* } */ case 28:\n\t\t\t/* } */ case 5:\n\t\t\t$r = w.unindent(); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t_r$15 = w.Write(gtNewline); /* */ $s = 30; case 30: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }\n\t\t\t_tuple$4 = _r$15; err$6 = _tuple$4[1];\n\t\t\t/* */ if (!($interfaceIsEqual(err$6, $ifaceNil))) { $s = 31; continue; }\n\t\t\t/* */ $s = 32; continue;\n\t\t\t/* if (!($interfaceIsEqual(err$6, $ifaceNil))) { */ case 31:\n\t\t\t\treturn err$6;\n\t\t\t/* } */ case 32:\n\t\t\t_i++;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: writeMessageSet }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._entry = _entry; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.id = id; $f.item = item; $f.ms = ms; $f.msd = msd; $f.ok = ok; $f.pb = pb; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\twriteUnknownStruct = function(w, data) {\n\t\tvar $ptr, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, b, buf, data, e, err, err$1, err$2, err$3, err$4, err$5, err$6, err$7, tag, w, wire, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; b = $f.b; buf = $f.buf; data = $f.data; e = $f.e; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; err$7 = $f.err$7; tag = $f.tag; w = $f.w; wire = $f.wire; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\terr = $ifaceNil;\n\t\t/* */ if (!w.compact) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!w.compact) { */ case 1:\n\t\t\t_r$5 = fmt.Fprintf(w, \"/* %d unknown bytes */\\n\", new sliceType$2([new $Int(data.$length)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t_tuple = _r$5; err$1 = _tuple[1];\n\t\t\t/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 4; continue; }\n\t\t\t/* */ $s = 5; continue;\n\t\t\t/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 4:\n\t\t\t\terr = err$1;\n\t\t\t\treturn err;\n\t\t\t/* } */ case 5:\n\t\t/* } */ case 2:\n\t\tb = NewBuffer(data);\n\t\t/* while (true) { */ case 6:\n\t\t\t/* if (!(b.index < b.buf.$length)) { break; } */ if(!(b.index < b.buf.$length)) { $s = 7; continue; }\n\t\t\t_tuple$1 = b.DecodeVarint(); x = _tuple$1[0]; err$2 = _tuple$1[1];\n\t\t\t/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 8; continue; }\n\t\t\t/* */ $s = 9; continue;\n\t\t\t/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 8:\n\t\t\t\t_r$6 = fmt.Fprintf(w, \"/* %v */\\n\", new sliceType$2([err$2])); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$2 = _r$6; err$3 = _tuple$2[1];\n\t\t\t\terr = err$3;\n\t\t\t\treturn err;\n\t\t\t/* } */ case 9:\n\t\t\t_tmp = new $Uint64(x.$high & 0, (x.$low & 7) >>> 0); _tmp$1 = $shiftRightUint64(x, 3); wire = _tmp; tag = _tmp$1;\n\t\t\t/* */ if ((wire.$high === 0 && wire.$low === 4)) { $s = 11; continue; }\n\t\t\t/* */ $s = 12; continue;\n\t\t\t/* if ((wire.$high === 0 && wire.$low === 4)) { */ case 11:\n\t\t\t\t$r = w.unindent(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t_r$7 = w.Write(endBraceNewline); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$3 = _r$7; err$4 = _tuple$3[1];\n\t\t\t\t/* */ if (!($interfaceIsEqual(err$4, $ifaceNil))) { $s = 15; continue; }\n\t\t\t\t/* */ $s = 16; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err$4, $ifaceNil))) { */ case 15:\n\t\t\t\t\terr = err$4;\n\t\t\t\t\treturn err;\n\t\t\t\t/* } */ case 16:\n\t\t\t\t/* continue; */ $s = 6; continue;\n\t\t\t/* } */ case 12:\n\t\t\t_r$8 = fmt.Fprint(w, new sliceType$2([tag])); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t_tuple$4 = _r$8; err$5 = _tuple$4[1];\n\t\t\t/* */ if (!($interfaceIsEqual(err$5, $ifaceNil))) { $s = 18; continue; }\n\t\t\t/* */ $s = 19; continue;\n\t\t\t/* if (!($interfaceIsEqual(err$5, $ifaceNil))) { */ case 18:\n\t\t\t\terr = err$5;\n\t\t\t\treturn err;\n\t\t\t/* } */ case 19:\n\t\t\t/* */ if (!((wire.$high === 0 && wire.$low === 3))) { $s = 20; continue; }\n\t\t\t/* */ $s = 21; continue;\n\t\t\t/* if (!((wire.$high === 0 && wire.$low === 3))) { */ case 20:\n\t\t\t\t_r$9 = w.WriteByte(58); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\t\terr$6 = _r$9;\n\t\t\t\t/* */ if (!($interfaceIsEqual(err$6, $ifaceNil))) { $s = 23; continue; }\n\t\t\t\t/* */ $s = 24; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err$6, $ifaceNil))) { */ case 23:\n\t\t\t\t\terr = err$6;\n\t\t\t\t\treturn err;\n\t\t\t\t/* } */ case 24:\n\t\t\t/* } */ case 21:\n\t\t\t/* */ if (!w.compact || (wire.$high === 0 && wire.$low === 3)) { $s = 25; continue; }\n\t\t\t/* */ $s = 26; continue;\n\t\t\t/* if (!w.compact || (wire.$high === 0 && wire.$low === 3)) { */ case 25:\n\t\t\t\t_r$10 = w.WriteByte(32); /* */ $s = 27; case 27: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\t\terr$7 = _r$10;\n\t\t\t\t/* */ if (!($interfaceIsEqual(err$7, $ifaceNil))) { $s = 28; continue; }\n\t\t\t\t/* */ $s = 29; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err$7, $ifaceNil))) { */ case 28:\n\t\t\t\t\terr = err$7;\n\t\t\t\t\treturn err;\n\t\t\t\t/* } */ case 29:\n\t\t\t/* } */ case 26:\n\t\t\t_ref = wire;\n\t\t\t/* */ if ((_ref.$high === 0 && _ref.$low === 2)) { $s = 30; continue; }\n\t\t\t/* */ if ((_ref.$high === 0 && _ref.$low === 5)) { $s = 31; continue; }\n\t\t\t/* */ if ((_ref.$high === 0 && _ref.$low === 1)) { $s = 32; continue; }\n\t\t\t/* */ if ((_ref.$high === 0 && _ref.$low === 3)) { $s = 33; continue; }\n\t\t\t/* */ if ((_ref.$high === 0 && _ref.$low === 0)) { $s = 34; continue; }\n\t\t\t/* */ $s = 35; continue;\n\t\t\t/* if ((_ref.$high === 0 && _ref.$low === 2)) { */ case 30:\n\t\t\t\t_r$11 = b.DecodeRawBytes(false); /* */ $s = 37; case 37: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$5 = _r$11; buf = _tuple$5[0]; e = _tuple$5[1];\n\t\t\t\t/* */ if ($interfaceIsEqual(e, $ifaceNil)) { $s = 38; continue; }\n\t\t\t\t/* */ $s = 39; continue;\n\t\t\t\t/* if ($interfaceIsEqual(e, $ifaceNil)) { */ case 38:\n\t\t\t\t\t_r$12 = fmt.Fprintf(w, \"%q\", new sliceType$2([buf])); /* */ $s = 41; case 41: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\t\t\t\t_tuple$6 = _r$12; err$2 = _tuple$6[1];\n\t\t\t\t\t$s = 40; continue;\n\t\t\t\t/* } else { */ case 39:\n\t\t\t\t\t_r$13 = fmt.Fprintf(w, \"/* %v */\", new sliceType$2([e])); /* */ $s = 42; case 42: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }\n\t\t\t\t\t_tuple$7 = _r$13; err$2 = _tuple$7[1];\n\t\t\t\t/* } */ case 40:\n\t\t\t\t$s = 36; continue;\n\t\t\t/* } else if ((_ref.$high === 0 && _ref.$low === 5)) { */ case 31:\n\t\t\t\t_tuple$8 = b.DecodeFixed32(); x = _tuple$8[0]; err$2 = _tuple$8[1];\n\t\t\t\t_r$14 = writeUnknownInt(w, x, err$2); /* */ $s = 43; case 43: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }\n\t\t\t\terr$2 = _r$14;\n\t\t\t\t$s = 36; continue;\n\t\t\t/* } else if ((_ref.$high === 0 && _ref.$low === 1)) { */ case 32:\n\t\t\t\t_tuple$9 = b.DecodeFixed64(); x = _tuple$9[0]; err$2 = _tuple$9[1];\n\t\t\t\t_r$15 = writeUnknownInt(w, x, err$2); /* */ $s = 44; case 44: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }\n\t\t\t\terr$2 = _r$15;\n\t\t\t\t$s = 36; continue;\n\t\t\t/* } else if ((_ref.$high === 0 && _ref.$low === 3)) { */ case 33:\n\t\t\t\t_r$16 = w.WriteByte(123); /* */ $s = 45; case 45: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }\n\t\t\t\terr$2 = _r$16;\n\t\t\t\tw.indent();\n\t\t\t\t$s = 36; continue;\n\t\t\t/* } else if ((_ref.$high === 0 && _ref.$low === 0)) { */ case 34:\n\t\t\t\t_tuple$10 = b.DecodeVarint(); x = _tuple$10[0]; err$2 = _tuple$10[1];\n\t\t\t\t_r$17 = writeUnknownInt(w, x, err$2); /* */ $s = 46; case 46: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }\n\t\t\t\terr$2 = _r$17;\n\t\t\t\t$s = 36; continue;\n\t\t\t/* } else { */ case 35:\n\t\t\t\t_r$18 = fmt.Fprintf(w, \"/* unknown wire type %d */\", new sliceType$2([wire])); /* */ $s = 47; case 47: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$11 = _r$18; err$2 = _tuple$11[1];\n\t\t\t/* } */ case 36:\n\t\t\tif (!($interfaceIsEqual(err$2, $ifaceNil))) {\n\t\t\t\terr = err$2;\n\t\t\t\treturn err;\n\t\t\t}\n\t\t\t_r$19 = w.WriteByte(10); /* */ $s = 48; case 48: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }\n\t\t\terr$2 = _r$19;\n\t\t\t/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 49; continue; }\n\t\t\t/* */ $s = 50; continue;\n\t\t\t/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 49:\n\t\t\t\terr = err$2;\n\t\t\t\treturn err;\n\t\t\t/* } */ case 50:\n\t\t/* } */ $s = 6; continue; case 7:\n\t\terr = $ifaceNil;\n\t\treturn err;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: writeUnknownStruct }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.b = b; $f.buf = buf; $f.data = data; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.err$7 = err$7; $f.tag = tag; $f.w = w; $f.wire = wire; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\twriteUnknownInt = function(w, x, err) {\n\t\tvar $ptr, _r$5, _r$6, _tuple, _tuple$1, err, w, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 1:\n\t\t\t_r$5 = fmt.Fprint(w, new sliceType$2([x])); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t_tuple = _r$5; err = _tuple[1];\n\t\t\t$s = 3; continue;\n\t\t/* } else { */ case 2:\n\t\t\t_r$6 = fmt.Fprintf(w, \"/* %v */\", new sliceType$2([err])); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_tuple$1 = _r$6; err = _tuple$1[1];\n\t\t/* } */ case 3:\n\t\treturn err;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: writeUnknownInt }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tint32Slice.prototype.Len = function() {\n\t\tvar $ptr, s;\n\t\ts = this;\n\t\treturn s.$length;\n\t};\n\t$ptrType(int32Slice).prototype.Len = function() { return this.$get().Len(); };\n\tint32Slice.prototype.Less = function(i, j) {\n\t\tvar $ptr, i, j, s;\n\t\ts = this;\n\t\treturn ((i < 0 || i >= s.$length) ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + i]) < ((j < 0 || j >= s.$length) ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + j]);\n\t};\n\t$ptrType(int32Slice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };\n\tint32Slice.prototype.Swap = function(i, j) {\n\t\tvar $ptr, _tmp, _tmp$1, i, j, s;\n\t\ts = this;\n\t\t_tmp = ((j < 0 || j >= s.$length) ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + j]); _tmp$1 = ((i < 0 || i >= s.$length) ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + i]); ((i < 0 || i >= s.$length) ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + i] = _tmp); ((j < 0 || j >= s.$length) ? $throwRuntimeError(\"index out of range\") : s.$array[s.$offset + j] = _tmp$1);\n\t};\n\t$ptrType(int32Slice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };\n\twriteExtensions = function(w, pv) {\n\t\tvar $ptr, _arg, _arg$1, _arg$2, _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _keys, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple, _tuple$1, desc, emap, ep, err, err$1, err$2, err$3, err$4, ext, extNum, i, id, ids, m, pb, pv, v, w, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _keys = $f._keys; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; desc = $f.desc; emap = $f.emap; ep = $f.ep; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; ext = $f.ext; extNum = $f.extNum; i = $f.i; id = $f.id; ids = $f.ids; m = $f.m; pb = $f.pb; pv = $f.pv; v = $f.v; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tpv = pv;\n\t\t_r$5 = pv.Type().Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\temap = (_entry = extensionMaps[_r$5.$key()], _entry !== undefined ? _entry.v : false);\n\t\t_r$6 = pv.Interface(); /* */ $s = 2; case 2: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tep = $assertType(_r$6, extendableProto);\n\t\t_r$7 = ep.ExtensionMap(); /* */ $s = 3; case 3: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\tm = _r$7;\n\t\tids = $makeSlice(sliceType$7, 0, $keys(m).length);\n\t\t_ref = m;\n\t\t_i = 0;\n\t\t_keys = $keys(_ref);\n\t\twhile (true) {\n\t\t\tif (!(_i < _keys.length)) { break; }\n\t\t\t_entry$1 = _ref[_keys[_i]];\n\t\t\tif (_entry$1 === undefined) {\n\t\t\t\t_i++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tid = _entry$1.k;\n\t\t\tids = $append(ids, id);\n\t\t\t_i++;\n\t\t}\n\t\t$r = sort.Sort($subslice(new int32Slice(ids.$array), ids.$offset, ids.$offset + ids.$length)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t_ref$1 = ids;\n\t\t_i$1 = 0;\n\t\t/* while (true) { */ case 5:\n\t\t\t/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 6; continue; }\n\t\t\textNum = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError(\"index out of range\") : _ref$1.$array[_ref$1.$offset + _i$1]);\n\t\t\text = $clone((_entry$2 = m[extNum], _entry$2 !== undefined ? _entry$2.v : new Extension.ptr()), Extension);\n\t\t\tdesc = ptrType$7.nil;\n\t\t\tif (!(emap === false)) {\n\t\t\t\tdesc = (_entry$3 = emap[extNum], _entry$3 !== undefined ? _entry$3.v : ptrType$7.nil);\n\t\t\t}\n\t\t\t/* */ if (desc === ptrType$7.nil) { $s = 7; continue; }\n\t\t\t/* */ $s = 8; continue;\n\t\t\t/* if (desc === ptrType$7.nil) { */ case 7:\n\t\t\t\t_r$8 = writeUnknownStruct(w, ext.enc); /* */ $s = 9; case 9: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t\terr = _r$8;\n\t\t\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 10; continue; }\n\t\t\t\t/* */ $s = 11; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 10:\n\t\t\t\t\treturn err;\n\t\t\t\t/* } */ case 11:\n\t\t\t\t_i$1++;\n\t\t\t\t/* continue; */ $s = 5; continue;\n\t\t\t/* } */ case 8:\n\t\t\t_r$9 = GetExtension(ep, desc); /* */ $s = 12; case 12: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\t_tuple = _r$9; pb = _tuple[0]; err$1 = _tuple[1];\n\t\t\t/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 13; continue; }\n\t\t\t/* */ $s = 14; continue;\n\t\t\t/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 13:\n\t\t\t\t_r$10 = fmt.Fprintln(os.Stderr, new sliceType$2([new $String(\"proto: failed getting extension: \"), err$1])); /* */ $s = 15; case 15: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$1 = _r$10; err$2 = _tuple$1[1];\n\t\t\t\t/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 16; continue; }\n\t\t\t\t/* */ $s = 17; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 16:\n\t\t\t\t\treturn err$2;\n\t\t\t\t/* } */ case 17:\n\t\t\t\t_i$1++;\n\t\t\t\t/* continue; */ $s = 5; continue;\n\t\t\t/* } */ case 14:\n\t\t\t_r$11 = desc.repeated(); /* */ $s = 21; case 21: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\t\t/* */ if (!_r$11) { $s = 18; continue; }\n\t\t\t/* */ $s = 19; continue;\n\t\t\t/* if (!_r$11) { */ case 18:\n\t\t\t\t_r$12 = writeExtension(w, desc.Name, pb); /* */ $s = 22; case 22: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\t\t\terr$3 = _r$12;\n\t\t\t\t/* */ if (!($interfaceIsEqual(err$3, $ifaceNil))) { $s = 23; continue; }\n\t\t\t\t/* */ $s = 24; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err$3, $ifaceNil))) { */ case 23:\n\t\t\t\t\treturn err$3;\n\t\t\t\t/* } */ case 24:\n\t\t\t\t$s = 20; continue;\n\t\t\t/* } else { */ case 19:\n\t\t\t\t_r$13 = reflect.ValueOf(pb); /* */ $s = 25; case 25: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }\n\t\t\t\tv = _r$13;\n\t\t\t\ti = 0;\n\t\t\t\t/* while (true) { */ case 26:\n\t\t\t\t\t/* if (!(i < v.Len())) { break; } */ if(!(i < v.Len())) { $s = 27; continue; }\n\t\t\t\t\t_arg = w;\n\t\t\t\t\t_arg$1 = desc.Name;\n\t\t\t\t\t_r$14 = v.Index(i); /* */ $s = 28; case 28: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$15 = _r$14.Interface(); /* */ $s = 29; case 29: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }\n\t\t\t\t\t_arg$2 = _r$15;\n\t\t\t\t\t_r$16 = writeExtension(_arg, _arg$1, _arg$2); /* */ $s = 30; case 30: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }\n\t\t\t\t\terr$4 = _r$16;\n\t\t\t\t\t/* */ if (!($interfaceIsEqual(err$4, $ifaceNil))) { $s = 31; continue; }\n\t\t\t\t\t/* */ $s = 32; continue;\n\t\t\t\t\t/* if (!($interfaceIsEqual(err$4, $ifaceNil))) { */ case 31:\n\t\t\t\t\t\treturn err$4;\n\t\t\t\t\t/* } */ case 32:\n\t\t\t\t\ti = i + (1) >> 0;\n\t\t\t\t/* } */ $s = 26; continue; case 27:\n\t\t\t/* } */ case 20:\n\t\t\t_i$1++;\n\t\t/* } */ $s = 5; continue; case 6:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: writeExtensions }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._keys = _keys; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.desc = desc; $f.emap = emap; $f.ep = ep; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.ext = ext; $f.extNum = extNum; $f.i = i; $f.id = id; $f.ids = ids; $f.m = m; $f.pb = pb; $f.pv = pv; $f.v = v; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\twriteExtension = function(w, name, pb) {\n\t\tvar $ptr, _arg, _arg$1, _arg$2, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, err, err$1, err$2, err$3, name, pb, w, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; name = $f.name; pb = $f.pb; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r$5 = fmt.Fprintf(w, \"[%s]:\", new sliceType$2([new $String(name)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_tuple = _r$5; err = _tuple[1];\n\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:\n\t\t\treturn err;\n\t\t/* } */ case 3:\n\t\t/* */ if (!w.compact) { $s = 4; continue; }\n\t\t/* */ $s = 5; continue;\n\t\t/* if (!w.compact) { */ case 4:\n\t\t\t_r$6 = w.WriteByte(32); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\terr$1 = _r$6;\n\t\t\t/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 7; continue; }\n\t\t\t/* */ $s = 8; continue;\n\t\t\t/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 7:\n\t\t\t\treturn err$1;\n\t\t\t/* } */ case 8:\n\t\t/* } */ case 5:\n\t\t_arg = w;\n\t\t_r$7 = reflect.ValueOf(pb); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t_arg$1 = _r$7;\n\t\t_arg$2 = ptrType$1.nil;\n\t\t_r$8 = writeAny(_arg, _arg$1, _arg$2); /* */ $s = 10; case 10: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\terr$2 = _r$8;\n\t\t/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 11; continue; }\n\t\t/* */ $s = 12; continue;\n\t\t/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 11:\n\t\t\treturn err$2;\n\t\t/* } */ case 12:\n\t\t_r$9 = w.WriteByte(10); /* */ $s = 13; case 13: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\terr$3 = _r$9;\n\t\t/* */ if (!($interfaceIsEqual(err$3, $ifaceNil))) { $s = 14; continue; }\n\t\t/* */ $s = 15; continue;\n\t\t/* if (!($interfaceIsEqual(err$3, $ifaceNil))) { */ case 14:\n\t\t\treturn err$3;\n\t\t/* } */ case 15:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: writeExtension }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.name = name; $f.pb = pb; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\ttextWriter.ptr.prototype.writeIndent = function() {\n\t\tvar $ptr, _r$5, n, remain, w, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; n = $f.n; remain = $f.remain; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tw = this;\n\t\tif (!w.complete) {\n\t\t\treturn;\n\t\t}\n\t\tremain = w.ind * 2 >> 0;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(remain > 0)) { break; } */ if(!(remain > 0)) { $s = 2; continue; }\n\t\t\tn = remain;\n\t\t\tif (n > spaces.$length) {\n\t\t\t\tn = spaces.$length;\n\t\t\t}\n\t\t\t_r$5 = w.w.Write($subslice(spaces, 0, n)); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t_r$5;\n\t\t\tremain = remain - (n) >> 0;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\tw.complete = false;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: textWriter.ptr.prototype.writeIndent }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.n = n; $f.remain = remain; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\ttextWriter.prototype.writeIndent = function() { return this.$val.writeIndent(); };\n\tmarshalText = function(w, pb, compact) {\n\t\tvar $ptr, _r$10, _r$11, _r$12, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, aw, bw, compact, err, err$1, ok, ok$1, pb, text, tm, v, val, w, ww, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; aw = $f.aw; bw = $f.bw; compact = $f.compact; err = $f.err; err$1 = $f.err$1; ok = $f.ok; ok$1 = $f.ok$1; pb = $f.pb; text = $f.text; tm = $f.tm; v = $f.v; val = $f.val; w = $f.w; ww = $f.ww; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r$5 = reflect.ValueOf(pb); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tval = _r$5;\n\t\t/* */ if ($interfaceIsEqual(pb, $ifaceNil) || val.IsNil()) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if ($interfaceIsEqual(pb, $ifaceNil) || val.IsNil()) { */ case 2:\n\t\t\t_r$6 = w.Write(new sliceType($stringToBytes(\"<nil>\"))); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t_r$6;\n\t\t\treturn $ifaceNil;\n\t\t/* } */ case 3:\n\t\tbw = ptrType$33.nil;\n\t\t_tuple = $assertType(w, writer, true); ww = _tuple[0]; ok = _tuple[1];\n\t\tif (!ok) {\n\t\t\tbw = bufio.NewWriter(w);\n\t\t\tww = bw;\n\t\t}\n\t\taw = new textWriter.ptr(0, true, compact, ww);\n\t\t_tuple$1 = $assertType(pb, encoding.TextMarshaler, true); tm = _tuple$1[0]; ok$1 = _tuple$1[1];\n\t\t/* */ if (ok$1) { $s = 5; continue; }\n\t\t/* */ $s = 6; continue;\n\t\t/* if (ok$1) { */ case 5:\n\t\t\t_r$7 = tm.MarshalText(); /* */ $s = 7; case 7: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t_tuple$2 = _r$7; text = _tuple$2[0]; err = _tuple$2[1];\n\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\treturn err;\n\t\t\t}\n\t\t\t_r$8 = aw.Write(text); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t_tuple$3 = _r$8; err = _tuple$3[1];\n\t\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 9; continue; }\n\t\t\t/* */ $s = 10; continue;\n\t\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 9:\n\t\t\t\treturn err;\n\t\t\t/* } */ case 10:\n\t\t\t/* */ if (!(bw === ptrType$33.nil)) { $s = 11; continue; }\n\t\t\t/* */ $s = 12; continue;\n\t\t\t/* if (!(bw === ptrType$33.nil)) { */ case 11:\n\t\t\t\t_r$9 = bw.Flush(); /* */ $s = 13; case 13: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\t\t\treturn _r$9;\n\t\t\t/* } */ case 12:\n\t\t\treturn $ifaceNil;\n\t\t/* } */ case 6:\n\t\t_r$10 = reflect.Indirect(val); /* */ $s = 14; case 14: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\tv = _r$10;\n\t\t_r$11 = writeStruct(aw, v); /* */ $s = 15; case 15: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\terr$1 = _r$11;\n\t\t/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 16; continue; }\n\t\t/* */ $s = 17; continue;\n\t\t/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 16:\n\t\t\treturn err$1;\n\t\t/* } */ case 17:\n\t\t/* */ if (!(bw === ptrType$33.nil)) { $s = 18; continue; }\n\t\t/* */ $s = 19; continue;\n\t\t/* if (!(bw === ptrType$33.nil)) { */ case 18:\n\t\t\t_r$12 = bw.Flush(); /* */ $s = 20; case 20: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\t\treturn _r$12;\n\t\t/* } */ case 19:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: marshalText }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.aw = aw; $f.bw = bw; $f.compact = compact; $f.err = err; $f.err$1 = err$1; $f.ok = ok; $f.ok$1 = ok$1; $f.pb = pb; $f.text = text; $f.tm = tm; $f.v = v; $f.val = val; $f.w = w; $f.ww = ww; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tCompactTextString = function(pb) {\n\t\tvar $ptr, _r$5, buf, pb, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$5 = $f._r$5; buf = $f.buf; pb = $f.pb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tbuf = [buf];\n\t\tbuf[0] = $clone(new bytes.Buffer.ptr(), bytes.Buffer);\n\t\t_r$5 = marshalText(buf[0], pb, true); /* */ $s = 1; case 1: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_r$5;\n\t\treturn buf[0].String();\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: CompactTextString }; } $f.$ptr = $ptr; $f._r$5 = _r$5; $f.buf = buf; $f.pb = pb; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.CompactTextString = CompactTextString;\n\tptrType$11.methods = [{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$35.methods = [{prop: \"shouldContinue\", name: \"shouldContinue\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([$error, ptrType$1], [$Bool], false)}];\n\tptrType$7.methods = [{prop: \"repeated\", name: \"repeated\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([], [$Bool], false)}];\n\tptrType$31.methods = [{prop: \"DecodeVarint\", name: \"DecodeVarint\", pkg: \"\", typ: $funcType([], [$Uint64, $error], false)}, {prop: \"DecodeFixed64\", name: \"DecodeFixed64\", pkg: \"\", typ: $funcType([], [$Uint64, $error], false)}, {prop: \"DecodeFixed32\", name: \"DecodeFixed32\", pkg: \"\", typ: $funcType([], [$Uint64, $error], false)}, {prop: \"DecodeZigzag64\", name: \"DecodeZigzag64\", pkg: \"\", typ: $funcType([], [$Uint64, $error], false)}, {prop: \"DecodeZigzag32\", name: \"DecodeZigzag32\", pkg: \"\", typ: $funcType([], [$Uint64, $error], false)}, {prop: \"DecodeRawBytes\", name: \"DecodeRawBytes\", pkg: \"\", typ: $funcType([$Bool], [sliceType, $error], false)}, {prop: \"DecodeStringBytes\", name: \"DecodeStringBytes\", pkg: \"\", typ: $funcType([], [$String, $error], false)}, {prop: \"skipAndSave\", name: \"skipAndSave\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([reflect.Type, $Int, $Int, structPointer, field], [$error], false)}, {prop: \"skip\", name: \"skip\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([reflect.Type, $Int, $Int], [$error], false)}, {prop: \"Unmarshal\", name: \"Unmarshal\", pkg: \"\", typ: $funcType([Message], [$error], false)}, {prop: \"unmarshalType\", name: \"unmarshalType\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([reflect.Type, ptrType$32, $Bool, structPointer], [$error], false)}, {prop: \"dec_bool\", name: \"dec_bool\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_proto3_bool\", name: \"dec_proto3_bool\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_int32\", name: \"dec_int32\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_proto3_int32\", name: \"dec_proto3_int32\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_int64\", name: \"dec_int64\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_proto3_int64\", name: \"dec_proto3_int64\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_string\", name: \"dec_string\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_proto3_string\", name: \"dec_proto3_string\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_slice_byte\", name: \"dec_slice_byte\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_slice_bool\", name: \"dec_slice_bool\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_slice_packed_bool\", name: \"dec_slice_packed_bool\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_slice_int32\", name: \"dec_slice_int32\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_slice_packed_int32\", name: \"dec_slice_packed_int32\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_slice_int64\", name: \"dec_slice_int64\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_slice_packed_int64\", name: \"dec_slice_packed_int64\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_slice_string\", name: \"dec_slice_string\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_slice_slice_byte\", name: \"dec_slice_slice_byte\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_new_map\", name: \"dec_new_map\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_struct_group\", name: \"dec_struct_group\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_struct_message\", name: \"dec_struct_message\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_slice_struct_message\", name: \"dec_slice_struct_message\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_slice_struct_group\", name: \"dec_slice_struct_group\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"dec_slice_struct\", name: \"dec_slice_struct\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, $Bool, structPointer], [$error], false)}, {prop: \"EncodeVarint\", name: \"EncodeVarint\", pkg: \"\", typ: $funcType([$Uint64], [$error], false)}, {prop: \"EncodeFixed64\", name: \"EncodeFixed64\", pkg: \"\", typ: $funcType([$Uint64], [$error], false)}, {prop: \"EncodeFixed32\", name: \"EncodeFixed32\", pkg: \"\", typ: $funcType([$Uint64], [$error], false)}, {prop: \"EncodeZigzag64\", name: \"EncodeZigzag64\", pkg: \"\", typ: $funcType([$Uint64], [$error], false)}, {prop: \"EncodeZigzag32\", name: \"EncodeZigzag32\", pkg: \"\", typ: $funcType([$Uint64], [$error], false)}, {prop: \"EncodeRawBytes\", name: \"EncodeRawBytes\", pkg: \"\", typ: $funcType([sliceType], [$error], false)}, {prop: \"EncodeStringBytes\", name: \"EncodeStringBytes\", pkg: \"\", typ: $funcType([$String], [$error], false)}, {prop: \"Marshal\", name: \"Marshal\", pkg: \"\", typ: $funcType([Message], [$error], false)}, {prop: \"enc_bool\", name: \"enc_bool\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_proto3_bool\", name: \"enc_proto3_bool\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_int32\", name: \"enc_int32\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_proto3_int32\", name: \"enc_proto3_int32\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_uint32\", name: \"enc_uint32\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_proto3_uint32\", name: \"enc_proto3_uint32\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_int64\", name: \"enc_int64\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_proto3_int64\", name: \"enc_proto3_int64\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_string\", name: \"enc_string\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_proto3_string\", name: \"enc_proto3_string\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_struct_message\", name: \"enc_struct_message\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_struct_group\", name: \"enc_struct_group\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_slice_bool\", name: \"enc_slice_bool\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_slice_packed_bool\", name: \"enc_slice_packed_bool\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_slice_byte\", name: \"enc_slice_byte\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_proto3_slice_byte\", name: \"enc_proto3_slice_byte\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_slice_int32\", name: \"enc_slice_int32\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_slice_packed_int32\", name: \"enc_slice_packed_int32\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_slice_uint32\", name: \"enc_slice_uint32\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_slice_packed_uint32\", name: \"enc_slice_packed_uint32\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_slice_int64\", name: \"enc_slice_int64\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_slice_packed_int64\", name: \"enc_slice_packed_int64\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_slice_slice_byte\", name: \"enc_slice_slice_byte\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_slice_string\", name: \"enc_slice_string\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_slice_struct_message\", name: \"enc_slice_struct_message\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_slice_struct_group\", name: \"enc_slice_struct_group\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_map\", name: \"enc_map\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_new_map\", name: \"enc_new_map\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$1, structPointer], [$error], false)}, {prop: \"enc_struct\", name: \"enc_struct\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$32, structPointer], [$error], false)}, {prop: \"enc_len_struct\", name: \"enc_len_struct\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([ptrType$32, structPointer, ptrType$35], [$error], false)}, {prop: \"enc_len_thing\", name: \"enc_len_thing\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([funcType, ptrType$35], [$error], false)}, {prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"SetBuf\", name: \"SetBuf\", pkg: \"\", typ: $funcType([sliceType], [], false)}, {prop: \"Bytes\", name: \"Bytes\", pkg: \"\", typ: $funcType([], [sliceType], false)}, {prop: \"DebugPrint\", name: \"DebugPrint\", pkg: \"\", typ: $funcType([$String, sliceType], [], false)}];\n\tmapKeys.methods = [{prop: \"Len\", name: \"Len\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Swap\", name: \"Swap\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"Less\", name: \"Less\", pkg: \"\", typ: $funcType([$Int, $Int], [$Bool], false)}];\n\tptrType$6.methods = [{prop: \"find\", name: \"find\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([Message], [ptrType$26], false)}, {prop: \"Has\", name: \"Has\", pkg: \"\", typ: $funcType([Message], [$Bool], false)}, {prop: \"Unmarshal\", name: \"Unmarshal\", pkg: \"\", typ: $funcType([Message], [$error], false)}, {prop: \"Marshal\", name: \"Marshal\", pkg: \"\", typ: $funcType([Message], [$error], false)}, {prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}];\n\tfield.methods = [{prop: \"IsValid\", name: \"IsValid\", pkg: \"\", typ: $funcType([], [$Bool], false)}];\n\tstructPointerSlice.methods = [{prop: \"Len\", name: \"Len\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Index\", name: \"Index\", pkg: \"\", typ: $funcType([$Int], [structPointer], false)}, {prop: \"Append\", name: \"Append\", pkg: \"\", typ: $funcType([structPointer], [], false)}];\n\tword32Slice.methods = [{prop: \"Append\", name: \"Append\", pkg: \"\", typ: $funcType([$Uint32], [], false)}, {prop: \"Len\", name: \"Len\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Index\", name: \"Index\", pkg: \"\", typ: $funcType([$Int], [$Uint32], false)}];\n\tword64Slice.methods = [{prop: \"Append\", name: \"Append\", pkg: \"\", typ: $funcType([$Uint64], [], false)}, {prop: \"Len\", name: \"Len\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Index\", name: \"Index\", pkg: \"\", typ: $funcType([$Int], [$Uint64], false)}];\n\tptrType$36.methods = [{prop: \"get\", name: \"get\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([$Int], [$Int, $Bool], false)}, {prop: \"put\", name: \"put\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([$Int, $Int], [], false)}];\n\tptrType$32.methods = [{prop: \"Len\", name: \"Len\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Less\", name: \"Less\", pkg: \"\", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: \"Swap\", name: \"Swap\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}];\n\tptrType$1.methods = [{prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Parse\", name: \"Parse\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"setEncAndDec\", name: \"setEncAndDec\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([reflect.Type, ptrType$12, $Bool], [], false)}, {prop: \"Init\", name: \"Init\", pkg: \"\", typ: $funcType([reflect.Type, $String, $String, ptrType$12], [], false)}, {prop: \"init\", name: \"init\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([reflect.Type, $String, $String, ptrType$12, $Bool], [], false)}];\n\tptrType$37.methods = [{prop: \"WriteString\", name: \"WriteString\", pkg: \"\", typ: $funcType([$String], [$Int, $error], false)}, {prop: \"Write\", name: \"Write\", pkg: \"\", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: \"WriteByte\", name: \"WriteByte\", pkg: \"\", typ: $funcType([$Uint8], [$error], false)}, {prop: \"indent\", name: \"indent\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([], [], false)}, {prop: \"unindent\", name: \"unindent\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([], [], false)}, {prop: \"writeIndent\", name: \"writeIndent\", pkg: \"github.com/golang/protobuf/proto\", typ: $funcType([], [], false)}];\n\tint32Slice.methods = [{prop: \"Len\", name: \"Len\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Less\", name: \"Less\", pkg: \"\", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: \"Swap\", name: \"Swap\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}];\n\tUnmarshaler.init([{prop: \"Unmarshal\", name: \"Unmarshal\", pkg: \"\", typ: $funcType([sliceType], [$error], false)}]);\n\tRequiredNotSetError.init([{prop: \"field\", name: \"field\", pkg: \"github.com/golang/protobuf/proto\", typ: $String, tag: \"\"}]);\n\tMarshaler.init([{prop: \"Marshal\", name: \"Marshal\", pkg: \"\", typ: $funcType([], [sliceType, $error], false)}]);\n\terrorState.init([{prop: \"err\", name: \"err\", pkg: \"github.com/golang/protobuf/proto\", typ: $error, tag: \"\"}]);\n\tExtensionRange.init([{prop: \"Start\", name: \"Start\", pkg: \"\", typ: $Int32, tag: \"\"}, {prop: \"End\", name: \"End\", pkg: \"\", typ: $Int32, tag: \"\"}]);\n\textendableProto.init([{prop: \"ExtensionMap\", name: \"ExtensionMap\", pkg: \"\", typ: $funcType([], [mapType$1], false)}, {prop: \"ExtensionRangeArray\", name: \"ExtensionRangeArray\", pkg: \"\", typ: $funcType([], [sliceType$15], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}]);\n\tExtensionDesc.init([{prop: \"ExtendedType\", name: \"ExtendedType\", pkg: \"\", typ: Message, tag: \"\"}, {prop: \"ExtensionType\", name: \"ExtensionType\", pkg: \"\", typ: $emptyInterface, tag: \"\"}, {prop: \"Field\", name: \"Field\", pkg: \"\", typ: $Int32, tag: \"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Tag\", name: \"Tag\", pkg: \"\", typ: $String, tag: \"\"}]);\n\tExtension.init([{prop: \"desc\", name: \"desc\", pkg: \"github.com/golang/protobuf/proto\", typ: ptrType$7, tag: \"\"}, {prop: \"value\", name: \"value\", pkg: \"github.com/golang/protobuf/proto\", typ: $emptyInterface, tag: \"\"}, {prop: \"enc\", name: \"enc\", pkg: \"github.com/golang/protobuf/proto\", typ: sliceType, tag: \"\"}]);\n\textPropKey.init([{prop: \"base\", name: \"base\", pkg: \"github.com/golang/protobuf/proto\", typ: reflect.Type, tag: \"\"}, {prop: \"field\", name: \"field\", pkg: \"github.com/golang/protobuf/proto\", typ: $Int32, tag: \"\"}]);\n\tMessage.init([{prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}]);\n\tBuffer.init([{prop: \"buf\", name: \"buf\", pkg: \"github.com/golang/protobuf/proto\", typ: sliceType, tag: \"\"}, {prop: \"index\", name: \"index\", pkg: \"github.com/golang/protobuf/proto\", typ: $Int, tag: \"\"}, {prop: \"bools\", name: \"bools\", pkg: \"github.com/golang/protobuf/proto\", typ: sliceType$3, tag: \"\"}, {prop: \"uint32s\", name: \"uint32s\", pkg: \"github.com/golang/protobuf/proto\", typ: sliceType$5, tag: \"\"}, {prop: \"uint64s\", name: \"uint64s\", pkg: \"github.com/golang/protobuf/proto\", typ: sliceType$6, tag: \"\"}, {prop: \"int32s\", name: \"int32s\", pkg: \"github.com/golang/protobuf/proto\", typ: sliceType$7, tag: \"\"}, {prop: \"int64s\", name: \"int64s\", pkg: \"github.com/golang/protobuf/proto\", typ: sliceType$8, tag: \"\"}, {prop: \"float32s\", name: \"float32s\", pkg: \"github.com/golang/protobuf/proto\", typ: sliceType$9, tag: \"\"}, {prop: \"float64s\", name: \"float64s\", pkg: \"github.com/golang/protobuf/proto\", typ: sliceType$10, tag: \"\"}]);\n\tmapKeys.init(reflect.Value);\n\t_MessageSet_Item.init([{prop: \"TypeId\", name: \"TypeId\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"varint,2,req,name=type_id\\\"\"}, {prop: \"Message\", name: \"Message\", pkg: \"\", typ: sliceType, tag: \"protobuf:\\\"bytes,3,req,name=message\\\"\"}]);\n\tMessageSet.init([{prop: \"Item\", name: \"Item\", pkg: \"\", typ: sliceType$11, tag: \"protobuf:\\\"group,1,rep\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"\"}]);\n\tmessageTypeIder.init([{prop: \"MessageTypeId\", name: \"MessageTypeId\", pkg: \"\", typ: $funcType([], [$Int32], false)}]);\n\tmessageSetDesc.init([{prop: \"t\", name: \"t\", pkg: \"github.com/golang/protobuf/proto\", typ: reflect.Type, tag: \"\"}, {prop: \"name\", name: \"name\", pkg: \"github.com/golang/protobuf/proto\", typ: $String, tag: \"\"}]);\n\tstructPointer.init([{prop: \"v\", name: \"v\", pkg: \"github.com/golang/protobuf/proto\", typ: reflect.Value, tag: \"\"}]);\n\tfield.init($Int);\n\tstructPointerSlice.init([{prop: \"v\", name: \"v\", pkg: \"github.com/golang/protobuf/proto\", typ: reflect.Value, tag: \"\"}]);\n\tword32.init([{prop: \"v\", name: \"v\", pkg: \"github.com/golang/protobuf/proto\", typ: reflect.Value, tag: \"\"}]);\n\tword32Val.init([{prop: \"v\", name: \"v\", pkg: \"github.com/golang/protobuf/proto\", typ: reflect.Value, tag: \"\"}]);\n\tword32Slice.init([{prop: \"v\", name: \"v\", pkg: \"github.com/golang/protobuf/proto\", typ: reflect.Value, tag: \"\"}]);\n\tword64.init([{prop: \"v\", name: \"v\", pkg: \"github.com/golang/protobuf/proto\", typ: reflect.Value, tag: \"\"}]);\n\tword64Val.init([{prop: \"v\", name: \"v\", pkg: \"github.com/golang/protobuf/proto\", typ: reflect.Value, tag: \"\"}]);\n\tword64Slice.init([{prop: \"v\", name: \"v\", pkg: \"github.com/golang/protobuf/proto\", typ: reflect.Value, tag: \"\"}]);\n\tencoder.init([ptrType$31, ptrType$1, structPointer], [$error], false);\n\tvalueEncoder.init([ptrType$31, $Uint64], [$error], false);\n\tsizer.init([ptrType$1, structPointer], [$Int], false);\n\tvalueSizer.init([$Uint64], [$Int], false);\n\tdecoder.init([ptrType$31, ptrType$1, structPointer], [$error], false);\n\tvalueDecoder.init([ptrType$31], [$Uint64, $error], false);\n\ttagMap.init([{prop: \"fastTags\", name: \"fastTags\", pkg: \"github.com/golang/protobuf/proto\", typ: sliceType$4, tag: \"\"}, {prop: \"slowTags\", name: \"slowTags\", pkg: \"github.com/golang/protobuf/proto\", typ: mapType$2, tag: \"\"}]);\n\tStructProperties.init([{prop: \"Prop\", name: \"Prop\", pkg: \"\", typ: sliceType$14, tag: \"\"}, {prop: \"reqCount\", name: \"reqCount\", pkg: \"github.com/golang/protobuf/proto\", typ: $Int, tag: \"\"}, {prop: \"decoderTags\", name: \"decoderTags\", pkg: \"github.com/golang/protobuf/proto\", typ: tagMap, tag: \"\"}, {prop: \"decoderOrigNames\", name: \"decoderOrigNames\", pkg: \"github.com/golang/protobuf/proto\", typ: mapType$3, tag: \"\"}, {prop: \"order\", name: \"order\", pkg: \"github.com/golang/protobuf/proto\", typ: sliceType$4, tag: \"\"}, {prop: \"unrecField\", name: \"unrecField\", pkg: \"github.com/golang/protobuf/proto\", typ: field, tag: \"\"}, {prop: \"extendable\", name: \"extendable\", pkg: \"github.com/golang/protobuf/proto\", typ: $Bool, tag: \"\"}]);\n\tProperties.init([{prop: \"Name\", name: \"Name\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"OrigName\", name: \"OrigName\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Wire\", name: \"Wire\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"WireType\", name: \"WireType\", pkg: \"\", typ: $Int, tag: \"\"}, {prop: \"Tag\", name: \"Tag\", pkg: \"\", typ: $Int, tag: \"\"}, {prop: \"Required\", name: \"Required\", pkg: \"\", typ: $Bool, tag: \"\"}, {prop: \"Optional\", name: \"Optional\", pkg: \"\", typ: $Bool, tag: \"\"}, {prop: \"Repeated\", name: \"Repeated\", pkg: \"\", typ: $Bool, tag: \"\"}, {prop: \"Packed\", name: \"Packed\", pkg: \"\", typ: $Bool, tag: \"\"}, {prop: \"Enum\", name: \"Enum\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"proto3\", name: \"proto3\", pkg: \"github.com/golang/protobuf/proto\", typ: $Bool, tag: \"\"}, {prop: \"Default\", name: \"Default\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"HasDefault\", name: \"HasDefault\", pkg: \"\", typ: $Bool, tag: \"\"}, {prop: \"def_uint64\", name: \"def_uint64\", pkg: \"github.com/golang/protobuf/proto\", typ: $Uint64, tag: \"\"}, {prop: \"enc\", name: \"enc\", pkg: \"github.com/golang/protobuf/proto\", typ: encoder, tag: \"\"}, {prop: \"valEnc\", name: \"valEnc\", pkg: \"github.com/golang/protobuf/proto\", typ: valueEncoder, tag: \"\"}, {prop: \"field\", name: \"field\", pkg: \"github.com/golang/protobuf/proto\", typ: field, tag: \"\"}, {prop: \"tagcode\", name: \"tagcode\", pkg: \"github.com/golang/protobuf/proto\", typ: sliceType, tag: \"\"}, {prop: \"tagbuf\", name: \"tagbuf\", pkg: \"github.com/golang/protobuf/proto\", typ: arrayType$2, tag: \"\"}, {prop: \"stype\", name: \"stype\", pkg: \"github.com/golang/protobuf/proto\", typ: reflect.Type, tag: \"\"}, {prop: \"sprop\", name: \"sprop\", pkg: \"github.com/golang/protobuf/proto\", typ: ptrType$32, tag: \"\"}, {prop: \"isMarshaler\", name: \"isMarshaler\", pkg: \"github.com/golang/protobuf/proto\", typ: $Bool, tag: \"\"}, {prop: \"isUnmarshaler\", name: \"isUnmarshaler\", pkg: \"github.com/golang/protobuf/proto\", typ: $Bool, tag: \"\"}, {prop: \"mtype\", name: \"mtype\", pkg: \"github.com/golang/protobuf/proto\", typ: reflect.Type, tag: \"\"}, {prop: \"mkeyprop\", name: \"mkeyprop\", pkg: \"github.com/golang/protobuf/proto\", typ: ptrType$1, tag: \"\"}, {prop: \"mvalprop\", name: \"mvalprop\", pkg: \"github.com/golang/protobuf/proto\", typ: ptrType$1, tag: \"\"}, {prop: \"size\", name: \"size\", pkg: \"github.com/golang/protobuf/proto\", typ: sizer, tag: \"\"}, {prop: \"valSize\", name: \"valSize\", pkg: \"github.com/golang/protobuf/proto\", typ: valueSizer, tag: \"\"}, {prop: \"dec\", name: \"dec\", pkg: \"github.com/golang/protobuf/proto\", typ: decoder, tag: \"\"}, {prop: \"valDec\", name: \"valDec\", pkg: \"github.com/golang/protobuf/proto\", typ: valueDecoder, tag: \"\"}, {prop: \"packedDec\", name: \"packedDec\", pkg: \"github.com/golang/protobuf/proto\", typ: decoder, tag: \"\"}]);\n\twriter.init([{prop: \"Write\", name: \"Write\", pkg: \"\", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: \"WriteByte\", name: \"WriteByte\", pkg: \"\", typ: $funcType([$Uint8], [$error], false)}]);\n\ttextWriter.init([{prop: \"ind\", name: \"ind\", pkg: \"github.com/golang/protobuf/proto\", typ: $Int, tag: \"\"}, {prop: \"complete\", name: \"complete\", pkg: \"github.com/golang/protobuf/proto\", typ: $Bool, tag: \"\"}, {prop: \"compact\", name: \"compact\", pkg: \"github.com/golang/protobuf/proto\", typ: $Bool, tag: \"\"}, {prop: \"w\", name: \"w\", pkg: \"github.com/golang/protobuf/proto\", typ: writer, tag: \"\"}]);\n\traw.init([{prop: \"Bytes\", name: \"Bytes\", pkg: \"\", typ: $funcType([], [sliceType], false)}]);\n\tint32Slice.init($Int32);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = bytes.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = encoding.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = json.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = errors.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = fmt.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = log.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = math.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = os.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = reflect.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = sort.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = strconv.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = strings.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = sync.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = utf8.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tzeroes = arrayType.zero();\n\t\tpropertiesMu = new sync.RWMutex.ptr();\n\t\terrOverflow = errors.New(\"proto: integer overflow\");\n\t\terrRepeatedHasNil = errors.New(\"proto: repeated field has nil element\");\n\t\t$pkg.ErrNil = errors.New(\"proto: Marshal called with nil\");\n\t\t$pkg.ErrMissingExtension = errors.New(\"proto: missing extension\");\n\t\t_r = reflect.TypeOf(ptrType.nil).Elem(); /* */ $s = 17; case 17: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\textendableProtoType = _r;\n\t\textProp = new structType.ptr(new sync.RWMutex.ptr(), new $Map());\n\t\textensionMaps = new $Map();\n\t\tdefaults = new $Map();\n\t\tint32PtrType = reflect.TypeOf(ptrType$2.nil);\n\t\t$pkg.ErrNoMessageTypeId = errors.New(\"proto does not have a message type ID\");\n\t\tmessageSetMap = new $Map();\n\t\tinvalidField = field.nil;\n\t\tint32Type = reflect.TypeOf(new $Int32(0));\n\t\tuint32Type = reflect.TypeOf(new $Uint32(0));\n\t\tfloat32Type = reflect.TypeOf(new $Float32(0));\n\t\tint64Type = reflect.TypeOf(new $Int64(0, 0));\n\t\tuint64Type = reflect.TypeOf(new $Uint64(0, 0));\n\t\tfloat64Type = reflect.TypeOf(new $Float64(0));\n\t\t_r$1 = reflect.TypeOf(ptrType$3.nil).Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\tprotoMessageType = _r$1;\n\t\t_r$2 = reflect.TypeOf(ptrType$4.nil).Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\tmarshalerType = _r$2;\n\t\t_r$3 = reflect.TypeOf(ptrType$5.nil).Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\tunmarshalerType = _r$3;\n\t\tpropertiesMap = new $Map();\n\t\tenumValueMaps = new $Map();\n\t\tnewline = new sliceType($stringToBytes(\"\\n\"));\n\t\tspaces = new sliceType($stringToBytes(\"                                        \"));\n\t\tgtNewline = new sliceType($stringToBytes(\">\\n\"));\n\t\tendBraceNewline = new sliceType($stringToBytes(\"}\\n\"));\n\t\tbackslashN = new sliceType([92, 110]);\n\t\tbackslashR = new sliceType([92, 114]);\n\t\tbackslashT = new sliceType([92, 116]);\n\t\tbackslashDQ = new sliceType([92, 34]);\n\t\tbackslashBS = new sliceType([92, 92]);\n\t\tposInf = new sliceType($stringToBytes(\"inf\"));\n\t\tnegInf = new sliceType($stringToBytes(\"-inf\"));\n\t\tnan = new sliceType($stringToBytes(\"nan\"));\n\t\t_r$4 = reflect.TypeOf(ptrType$6.nil).Elem(); /* */ $s = 21; case 21: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\tmessageSetType = _r$4;\n\t\terrBadUTF8 = errors.New(\"proto: bad UTF-8\");\n\t\terrBadHex = errors.New(\"proto: bad hexadecimal\");\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\"] = (function() {\n\tvar $pkg = {}, $init, proto, math, TiletypeShape, TiletypeSpecial, TiletypeMaterial, TiletypeVariant, Tiletype, TiletypeList, MapBlock, MatPair, ColorDefinition, MaterialDefinition, MaterialList, UnitDefinition, UnitList, BlockRequest, BlockList, PlantDef, PlantList, ViewInfo, MapInfo, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, sliceType, ptrType$6, sliceType$1, ptrType$7, sliceType$2, ptrType$8, sliceType$3, ptrType$9, ptrType$10, ptrType$11, sliceType$4, ptrType$12, ptrType$13, ptrType$14, sliceType$5, ptrType$15, ptrType$16, sliceType$6, ptrType$17, ptrType$18, sliceType$7, ptrType$19, ptrType$20, ptrType$21, _map, _key, _map$1, _key$1, _map$2, _key$2, _map$3, _key$3, _map$4, _key$4, _map$5, _key$5, _map$6, _key$6, _map$7, _key$7, init;\n\tproto = $packages[\"github.com/golang/protobuf/proto\"];\n\tmath = $packages[\"math\"];\n\tTiletypeShape = $pkg.TiletypeShape = $newType(4, $kindInt32, \"RemoteFortressReader.TiletypeShape\", \"TiletypeShape\", \"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\", null);\n\tTiletypeSpecial = $pkg.TiletypeSpecial = $newType(4, $kindInt32, \"RemoteFortressReader.TiletypeSpecial\", \"TiletypeSpecial\", \"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\", null);\n\tTiletypeMaterial = $pkg.TiletypeMaterial = $newType(4, $kindInt32, \"RemoteFortressReader.TiletypeMaterial\", \"TiletypeMaterial\", \"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\", null);\n\tTiletypeVariant = $pkg.TiletypeVariant = $newType(4, $kindInt32, \"RemoteFortressReader.TiletypeVariant\", \"TiletypeVariant\", \"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\", null);\n\tTiletype = $pkg.Tiletype = $newType(0, $kindStruct, \"RemoteFortressReader.Tiletype\", \"Tiletype\", \"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\", function(Id_, Name_, Caption_, Shape_, Special_, Material_, Variant_, Direction_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Id = ptrType$4.nil;\n\t\t\tthis.Name = ptrType$5.nil;\n\t\t\tthis.Caption = ptrType$5.nil;\n\t\t\tthis.Shape = ptrType.nil;\n\t\t\tthis.Special = ptrType$1.nil;\n\t\t\tthis.Material = ptrType$2.nil;\n\t\t\tthis.Variant = ptrType$3.nil;\n\t\t\tthis.Direction = ptrType$5.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Id = Id_;\n\t\tthis.Name = Name_;\n\t\tthis.Caption = Caption_;\n\t\tthis.Shape = Shape_;\n\t\tthis.Special = Special_;\n\t\tthis.Material = Material_;\n\t\tthis.Variant = Variant_;\n\t\tthis.Direction = Direction_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tTiletypeList = $pkg.TiletypeList = $newType(0, $kindStruct, \"RemoteFortressReader.TiletypeList\", \"TiletypeList\", \"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\", function(TiletypeList_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.TiletypeList = sliceType$1.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.TiletypeList = TiletypeList_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tMapBlock = $pkg.MapBlock = $newType(0, $kindStruct, \"RemoteFortressReader.MapBlock\", \"MapBlock\", \"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\", function(MapX_, MapY_, MapZ_, Tiles_, Materials_, LayerMaterials_, VeinMaterials_, BaseMaterials_, Magma_, Water_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.MapX = ptrType$4.nil;\n\t\t\tthis.MapY = ptrType$4.nil;\n\t\t\tthis.MapZ = ptrType$4.nil;\n\t\t\tthis.Tiles = sliceType$2.nil;\n\t\t\tthis.Materials = sliceType$3.nil;\n\t\t\tthis.LayerMaterials = sliceType$3.nil;\n\t\t\tthis.VeinMaterials = sliceType$3.nil;\n\t\t\tthis.BaseMaterials = sliceType$3.nil;\n\t\t\tthis.Magma = sliceType$2.nil;\n\t\t\tthis.Water = sliceType$2.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.MapX = MapX_;\n\t\tthis.MapY = MapY_;\n\t\tthis.MapZ = MapZ_;\n\t\tthis.Tiles = Tiles_;\n\t\tthis.Materials = Materials_;\n\t\tthis.LayerMaterials = LayerMaterials_;\n\t\tthis.VeinMaterials = VeinMaterials_;\n\t\tthis.BaseMaterials = BaseMaterials_;\n\t\tthis.Magma = Magma_;\n\t\tthis.Water = Water_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tMatPair = $pkg.MatPair = $newType(0, $kindStruct, \"RemoteFortressReader.MatPair\", \"MatPair\", \"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\", function(MatType_, MatIndex_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.MatType = ptrType$4.nil;\n\t\t\tthis.MatIndex = ptrType$4.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.MatType = MatType_;\n\t\tthis.MatIndex = MatIndex_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tColorDefinition = $pkg.ColorDefinition = $newType(0, $kindStruct, \"RemoteFortressReader.ColorDefinition\", \"ColorDefinition\", \"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\", function(Red_, Green_, Blue_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Red = ptrType$4.nil;\n\t\t\tthis.Green = ptrType$4.nil;\n\t\t\tthis.Blue = ptrType$4.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Red = Red_;\n\t\tthis.Green = Green_;\n\t\tthis.Blue = Blue_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tMaterialDefinition = $pkg.MaterialDefinition = $newType(0, $kindStruct, \"RemoteFortressReader.MaterialDefinition\", \"MaterialDefinition\", \"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\", function(MatPair_, Id_, Name_, StateColor_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.MatPair = ptrType$8.nil;\n\t\t\tthis.Id = ptrType$5.nil;\n\t\t\tthis.Name = ptrType$5.nil;\n\t\t\tthis.StateColor = ptrType$10.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.MatPair = MatPair_;\n\t\tthis.Id = Id_;\n\t\tthis.Name = Name_;\n\t\tthis.StateColor = StateColor_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tMaterialList = $pkg.MaterialList = $newType(0, $kindStruct, \"RemoteFortressReader.MaterialList\", \"MaterialList\", \"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\", function(MaterialList_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.MaterialList = sliceType$4.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.MaterialList = MaterialList_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tUnitDefinition = $pkg.UnitDefinition = $newType(0, $kindStruct, \"RemoteFortressReader.UnitDefinition\", \"UnitDefinition\", \"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\", function(Id_, IsValid_, PosX_, PosY_, PosZ_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Id = ptrType$4.nil;\n\t\t\tthis.IsValid = ptrType$13.nil;\n\t\t\tthis.PosX = ptrType$4.nil;\n\t\t\tthis.PosY = ptrType$4.nil;\n\t\t\tthis.PosZ = ptrType$4.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Id = Id_;\n\t\tthis.IsValid = IsValid_;\n\t\tthis.PosX = PosX_;\n\t\tthis.PosY = PosY_;\n\t\tthis.PosZ = PosZ_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tUnitList = $pkg.UnitList = $newType(0, $kindStruct, \"RemoteFortressReader.UnitList\", \"UnitList\", \"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\", function(CreatureList_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.CreatureList = sliceType$5.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.CreatureList = CreatureList_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tBlockRequest = $pkg.BlockRequest = $newType(0, $kindStruct, \"RemoteFortressReader.BlockRequest\", \"BlockRequest\", \"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\", function(BlocksNeeded_, MinX_, MaxX_, MinY_, MaxY_, MinZ_, MaxZ_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BlocksNeeded = ptrType$4.nil;\n\t\t\tthis.MinX = ptrType$4.nil;\n\t\t\tthis.MaxX = ptrType$4.nil;\n\t\t\tthis.MinY = ptrType$4.nil;\n\t\t\tthis.MaxY = ptrType$4.nil;\n\t\t\tthis.MinZ = ptrType$4.nil;\n\t\t\tthis.MaxZ = ptrType$4.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BlocksNeeded = BlocksNeeded_;\n\t\tthis.MinX = MinX_;\n\t\tthis.MaxX = MaxX_;\n\t\tthis.MinY = MinY_;\n\t\tthis.MaxY = MaxY_;\n\t\tthis.MinZ = MinZ_;\n\t\tthis.MaxZ = MaxZ_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tBlockList = $pkg.BlockList = $newType(0, $kindStruct, \"RemoteFortressReader.BlockList\", \"BlockList\", \"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\", function(MapBlocks_, MapX_, MapY_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.MapBlocks = sliceType$6.nil;\n\t\t\tthis.MapX = ptrType$4.nil;\n\t\t\tthis.MapY = ptrType$4.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.MapBlocks = MapBlocks_;\n\t\tthis.MapX = MapX_;\n\t\tthis.MapY = MapY_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tPlantDef = $pkg.PlantDef = $newType(0, $kindStruct, \"RemoteFortressReader.PlantDef\", \"PlantDef\", \"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\", function(PosX_, PosY_, PosZ_, Index_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.PosX = ptrType$4.nil;\n\t\t\tthis.PosY = ptrType$4.nil;\n\t\t\tthis.PosZ = ptrType$4.nil;\n\t\t\tthis.Index = ptrType$4.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.PosX = PosX_;\n\t\tthis.PosY = PosY_;\n\t\tthis.PosZ = PosZ_;\n\t\tthis.Index = Index_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tPlantList = $pkg.PlantList = $newType(0, $kindStruct, \"RemoteFortressReader.PlantList\", \"PlantList\", \"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\", function(PlantList_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.PlantList = sliceType$7.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.PlantList = PlantList_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tViewInfo = $pkg.ViewInfo = $newType(0, $kindStruct, \"RemoteFortressReader.ViewInfo\", \"ViewInfo\", \"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\", function(ViewPosX_, ViewPosY_, ViewPosZ_, ViewSizeX_, ViewSizeY_, CursorPosX_, CursorPosY_, CursorPosZ_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.ViewPosX = ptrType$4.nil;\n\t\t\tthis.ViewPosY = ptrType$4.nil;\n\t\t\tthis.ViewPosZ = ptrType$4.nil;\n\t\t\tthis.ViewSizeX = ptrType$4.nil;\n\t\t\tthis.ViewSizeY = ptrType$4.nil;\n\t\t\tthis.CursorPosX = ptrType$4.nil;\n\t\t\tthis.CursorPosY = ptrType$4.nil;\n\t\t\tthis.CursorPosZ = ptrType$4.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.ViewPosX = ViewPosX_;\n\t\tthis.ViewPosY = ViewPosY_;\n\t\tthis.ViewPosZ = ViewPosZ_;\n\t\tthis.ViewSizeX = ViewSizeX_;\n\t\tthis.ViewSizeY = ViewSizeY_;\n\t\tthis.CursorPosX = CursorPosX_;\n\t\tthis.CursorPosY = CursorPosY_;\n\t\tthis.CursorPosZ = CursorPosZ_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tMapInfo = $pkg.MapInfo = $newType(0, $kindStruct, \"RemoteFortressReader.MapInfo\", \"MapInfo\", \"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\", function(BlockSizeX_, BlockSizeY_, BlockSizeZ_, BlockPosX_, BlockPosY_, BlockPosZ_, WorldName_, WorldNameEnglish_, SaveName_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BlockSizeX = ptrType$4.nil;\n\t\t\tthis.BlockSizeY = ptrType$4.nil;\n\t\t\tthis.BlockSizeZ = ptrType$4.nil;\n\t\t\tthis.BlockPosX = ptrType$4.nil;\n\t\t\tthis.BlockPosY = ptrType$4.nil;\n\t\t\tthis.BlockPosZ = ptrType$4.nil;\n\t\t\tthis.WorldName = ptrType$5.nil;\n\t\t\tthis.WorldNameEnglish = ptrType$5.nil;\n\t\t\tthis.SaveName = ptrType$5.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BlockSizeX = BlockSizeX_;\n\t\tthis.BlockSizeY = BlockSizeY_;\n\t\tthis.BlockSizeZ = BlockSizeZ_;\n\t\tthis.BlockPosX = BlockPosX_;\n\t\tthis.BlockPosY = BlockPosY_;\n\t\tthis.BlockPosZ = BlockPosZ_;\n\t\tthis.WorldName = WorldName_;\n\t\tthis.WorldNameEnglish = WorldNameEnglish_;\n\t\tthis.SaveName = SaveName_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tptrType = $ptrType(TiletypeShape);\n\tptrType$1 = $ptrType(TiletypeSpecial);\n\tptrType$2 = $ptrType(TiletypeMaterial);\n\tptrType$3 = $ptrType(TiletypeVariant);\n\tptrType$4 = $ptrType($Int32);\n\tptrType$5 = $ptrType($String);\n\tsliceType = $sliceType($Uint8);\n\tptrType$6 = $ptrType(Tiletype);\n\tsliceType$1 = $sliceType(ptrType$6);\n\tptrType$7 = $ptrType(TiletypeList);\n\tsliceType$2 = $sliceType($Int32);\n\tptrType$8 = $ptrType(MatPair);\n\tsliceType$3 = $sliceType(ptrType$8);\n\tptrType$9 = $ptrType(MapBlock);\n\tptrType$10 = $ptrType(ColorDefinition);\n\tptrType$11 = $ptrType(MaterialDefinition);\n\tsliceType$4 = $sliceType(ptrType$11);\n\tptrType$12 = $ptrType(MaterialList);\n\tptrType$13 = $ptrType($Bool);\n\tptrType$14 = $ptrType(UnitDefinition);\n\tsliceType$5 = $sliceType(ptrType$14);\n\tptrType$15 = $ptrType(UnitList);\n\tptrType$16 = $ptrType(BlockRequest);\n\tsliceType$6 = $sliceType(ptrType$9);\n\tptrType$17 = $ptrType(BlockList);\n\tptrType$18 = $ptrType(PlantDef);\n\tsliceType$7 = $sliceType(ptrType$18);\n\tptrType$19 = $ptrType(PlantList);\n\tptrType$20 = $ptrType(ViewInfo);\n\tptrType$21 = $ptrType(MapInfo);\n\tTiletypeShape.prototype.Enum = function() {\n\t\tvar $ptr, p, x;\n\t\tx = this.$val;\n\t\tp = $newDataPointer(0, ptrType);\n\t\tp.$set(x);\n\t\treturn p;\n\t};\n\t$ptrType(TiletypeShape).prototype.Enum = function() { return new TiletypeShape(this.$get()).Enum(); };\n\tTiletypeShape.prototype.String = function() {\n\t\tvar $ptr, x;\n\t\tx = this.$val;\n\t\treturn proto.EnumName($pkg.TiletypeShape_name, (x >> 0));\n\t};\n\t$ptrType(TiletypeShape).prototype.String = function() { return new TiletypeShape(this.$get()).String(); };\n\t$ptrType(TiletypeShape).prototype.UnmarshalJSON = function(data) {\n\t\tvar $ptr, _r, _tuple, data, err, value, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; data = $f.data; err = $f.err; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tx = this;\n\t\t_r = proto.UnmarshalJSONEnum($pkg.TiletypeShape_value, data, \"TiletypeShape\"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; value = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\tx.$set((value >> 0));\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $ptrType(TiletypeShape).prototype.UnmarshalJSON }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTiletypeSpecial.prototype.Enum = function() {\n\t\tvar $ptr, p, x;\n\t\tx = this.$val;\n\t\tp = $newDataPointer(0, ptrType$1);\n\t\tp.$set(x);\n\t\treturn p;\n\t};\n\t$ptrType(TiletypeSpecial).prototype.Enum = function() { return new TiletypeSpecial(this.$get()).Enum(); };\n\tTiletypeSpecial.prototype.String = function() {\n\t\tvar $ptr, x;\n\t\tx = this.$val;\n\t\treturn proto.EnumName($pkg.TiletypeSpecial_name, (x >> 0));\n\t};\n\t$ptrType(TiletypeSpecial).prototype.String = function() { return new TiletypeSpecial(this.$get()).String(); };\n\t$ptrType(TiletypeSpecial).prototype.UnmarshalJSON = function(data) {\n\t\tvar $ptr, _r, _tuple, data, err, value, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; data = $f.data; err = $f.err; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tx = this;\n\t\t_r = proto.UnmarshalJSONEnum($pkg.TiletypeSpecial_value, data, \"TiletypeSpecial\"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; value = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\tx.$set((value >> 0));\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $ptrType(TiletypeSpecial).prototype.UnmarshalJSON }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTiletypeMaterial.prototype.Enum = function() {\n\t\tvar $ptr, p, x;\n\t\tx = this.$val;\n\t\tp = $newDataPointer(0, ptrType$2);\n\t\tp.$set(x);\n\t\treturn p;\n\t};\n\t$ptrType(TiletypeMaterial).prototype.Enum = function() { return new TiletypeMaterial(this.$get()).Enum(); };\n\tTiletypeMaterial.prototype.String = function() {\n\t\tvar $ptr, x;\n\t\tx = this.$val;\n\t\treturn proto.EnumName($pkg.TiletypeMaterial_name, (x >> 0));\n\t};\n\t$ptrType(TiletypeMaterial).prototype.String = function() { return new TiletypeMaterial(this.$get()).String(); };\n\t$ptrType(TiletypeMaterial).prototype.UnmarshalJSON = function(data) {\n\t\tvar $ptr, _r, _tuple, data, err, value, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; data = $f.data; err = $f.err; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tx = this;\n\t\t_r = proto.UnmarshalJSONEnum($pkg.TiletypeMaterial_value, data, \"TiletypeMaterial\"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; value = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\tx.$set((value >> 0));\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $ptrType(TiletypeMaterial).prototype.UnmarshalJSON }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTiletypeVariant.prototype.Enum = function() {\n\t\tvar $ptr, p, x;\n\t\tx = this.$val;\n\t\tp = $newDataPointer(0, ptrType$3);\n\t\tp.$set(x);\n\t\treturn p;\n\t};\n\t$ptrType(TiletypeVariant).prototype.Enum = function() { return new TiletypeVariant(this.$get()).Enum(); };\n\tTiletypeVariant.prototype.String = function() {\n\t\tvar $ptr, x;\n\t\tx = this.$val;\n\t\treturn proto.EnumName($pkg.TiletypeVariant_name, (x >> 0));\n\t};\n\t$ptrType(TiletypeVariant).prototype.String = function() { return new TiletypeVariant(this.$get()).String(); };\n\t$ptrType(TiletypeVariant).prototype.UnmarshalJSON = function(data) {\n\t\tvar $ptr, _r, _tuple, data, err, value, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; data = $f.data; err = $f.err; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tx = this;\n\t\t_r = proto.UnmarshalJSONEnum($pkg.TiletypeVariant_value, data, \"TiletypeVariant\"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; value = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\tx.$set((value >> 0));\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $ptrType(TiletypeVariant).prototype.UnmarshalJSON }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTiletype.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new Tiletype.ptr(ptrType$4.nil, ptrType$5.nil, ptrType$5.nil, ptrType.nil, ptrType$1.nil, ptrType$2.nil, ptrType$3.nil, ptrType$5.nil, sliceType.nil), Tiletype);\n\t};\n\tTiletype.prototype.Reset = function() { return this.$val.Reset(); };\n\tTiletype.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Tiletype.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTiletype.prototype.String = function() { return this.$val.String(); };\n\tTiletype.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tTiletype.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tTiletype.ptr.prototype.GetId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil) && !(m.Id === ptrType$4.nil)) {\n\t\t\treturn m.Id.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tTiletype.prototype.GetId = function() { return this.$val.GetId(); };\n\tTiletype.ptr.prototype.GetName = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil) && !(m.Name === ptrType$5.nil)) {\n\t\t\treturn m.Name.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tTiletype.prototype.GetName = function() { return this.$val.GetName(); };\n\tTiletype.ptr.prototype.GetCaption = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil) && !(m.Caption === ptrType$5.nil)) {\n\t\t\treturn m.Caption.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tTiletype.prototype.GetCaption = function() { return this.$val.GetCaption(); };\n\tTiletype.ptr.prototype.GetShape = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil) && !(m.Shape === ptrType.nil)) {\n\t\t\treturn m.Shape.$get();\n\t\t}\n\t\treturn -1;\n\t};\n\tTiletype.prototype.GetShape = function() { return this.$val.GetShape(); };\n\tTiletype.ptr.prototype.GetSpecial = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil) && !(m.Special === ptrType$1.nil)) {\n\t\t\treturn m.Special.$get();\n\t\t}\n\t\treturn -1;\n\t};\n\tTiletype.prototype.GetSpecial = function() { return this.$val.GetSpecial(); };\n\tTiletype.ptr.prototype.GetMaterial = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil) && !(m.Material === ptrType$2.nil)) {\n\t\t\treturn m.Material.$get();\n\t\t}\n\t\treturn -1;\n\t};\n\tTiletype.prototype.GetMaterial = function() { return this.$val.GetMaterial(); };\n\tTiletype.ptr.prototype.GetVariant = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil) && !(m.Variant === ptrType$3.nil)) {\n\t\t\treturn m.Variant.$get();\n\t\t}\n\t\treturn -1;\n\t};\n\tTiletype.prototype.GetVariant = function() { return this.$val.GetVariant(); };\n\tTiletype.ptr.prototype.GetDirection = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil) && !(m.Direction === ptrType$5.nil)) {\n\t\t\treturn m.Direction.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tTiletype.prototype.GetDirection = function() { return this.$val.GetDirection(); };\n\tTiletypeList.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new TiletypeList.ptr(sliceType$1.nil, sliceType.nil), TiletypeList);\n\t};\n\tTiletypeList.prototype.Reset = function() { return this.$val.Reset(); };\n\tTiletypeList.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TiletypeList.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tTiletypeList.prototype.String = function() { return this.$val.String(); };\n\tTiletypeList.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tTiletypeList.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tTiletypeList.ptr.prototype.GetTiletypeList = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$7.nil)) {\n\t\t\treturn m.TiletypeList;\n\t\t}\n\t\treturn sliceType$1.nil;\n\t};\n\tTiletypeList.prototype.GetTiletypeList = function() { return this.$val.GetTiletypeList(); };\n\tMapBlock.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new MapBlock.ptr(ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, sliceType$2.nil, sliceType$3.nil, sliceType$3.nil, sliceType$3.nil, sliceType$3.nil, sliceType$2.nil, sliceType$2.nil, sliceType.nil), MapBlock);\n\t};\n\tMapBlock.prototype.Reset = function() { return this.$val.Reset(); };\n\tMapBlock.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MapBlock.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tMapBlock.prototype.String = function() { return this.$val.String(); };\n\tMapBlock.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tMapBlock.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tMapBlock.ptr.prototype.GetMapX = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$9.nil) && !(m.MapX === ptrType$4.nil)) {\n\t\t\treturn m.MapX.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tMapBlock.prototype.GetMapX = function() { return this.$val.GetMapX(); };\n\tMapBlock.ptr.prototype.GetMapY = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$9.nil) && !(m.MapY === ptrType$4.nil)) {\n\t\t\treturn m.MapY.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tMapBlock.prototype.GetMapY = function() { return this.$val.GetMapY(); };\n\tMapBlock.ptr.prototype.GetMapZ = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$9.nil) && !(m.MapZ === ptrType$4.nil)) {\n\t\t\treturn m.MapZ.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tMapBlock.prototype.GetMapZ = function() { return this.$val.GetMapZ(); };\n\tMapBlock.ptr.prototype.GetTiles = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$9.nil)) {\n\t\t\treturn m.Tiles;\n\t\t}\n\t\treturn sliceType$2.nil;\n\t};\n\tMapBlock.prototype.GetTiles = function() { return this.$val.GetTiles(); };\n\tMapBlock.ptr.prototype.GetMaterials = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$9.nil)) {\n\t\t\treturn m.Materials;\n\t\t}\n\t\treturn sliceType$3.nil;\n\t};\n\tMapBlock.prototype.GetMaterials = function() { return this.$val.GetMaterials(); };\n\tMapBlock.ptr.prototype.GetLayerMaterials = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$9.nil)) {\n\t\t\treturn m.LayerMaterials;\n\t\t}\n\t\treturn sliceType$3.nil;\n\t};\n\tMapBlock.prototype.GetLayerMaterials = function() { return this.$val.GetLayerMaterials(); };\n\tMapBlock.ptr.prototype.GetVeinMaterials = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$9.nil)) {\n\t\t\treturn m.VeinMaterials;\n\t\t}\n\t\treturn sliceType$3.nil;\n\t};\n\tMapBlock.prototype.GetVeinMaterials = function() { return this.$val.GetVeinMaterials(); };\n\tMapBlock.ptr.prototype.GetBaseMaterials = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$9.nil)) {\n\t\t\treturn m.BaseMaterials;\n\t\t}\n\t\treturn sliceType$3.nil;\n\t};\n\tMapBlock.prototype.GetBaseMaterials = function() { return this.$val.GetBaseMaterials(); };\n\tMapBlock.ptr.prototype.GetMagma = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$9.nil)) {\n\t\t\treturn m.Magma;\n\t\t}\n\t\treturn sliceType$2.nil;\n\t};\n\tMapBlock.prototype.GetMagma = function() { return this.$val.GetMagma(); };\n\tMapBlock.ptr.prototype.GetWater = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$9.nil)) {\n\t\t\treturn m.Water;\n\t\t}\n\t\treturn sliceType$2.nil;\n\t};\n\tMapBlock.prototype.GetWater = function() { return this.$val.GetWater(); };\n\tMatPair.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new MatPair.ptr(ptrType$4.nil, ptrType$4.nil, sliceType.nil), MatPair);\n\t};\n\tMatPair.prototype.Reset = function() { return this.$val.Reset(); };\n\tMatPair.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MatPair.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tMatPair.prototype.String = function() { return this.$val.String(); };\n\tMatPair.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tMatPair.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tMatPair.ptr.prototype.GetMatType = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$8.nil) && !(m.MatType === ptrType$4.nil)) {\n\t\t\treturn m.MatType.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tMatPair.prototype.GetMatType = function() { return this.$val.GetMatType(); };\n\tMatPair.ptr.prototype.GetMatIndex = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$8.nil) && !(m.MatIndex === ptrType$4.nil)) {\n\t\t\treturn m.MatIndex.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tMatPair.prototype.GetMatIndex = function() { return this.$val.GetMatIndex(); };\n\tColorDefinition.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new ColorDefinition.ptr(ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, sliceType.nil), ColorDefinition);\n\t};\n\tColorDefinition.prototype.Reset = function() { return this.$val.Reset(); };\n\tColorDefinition.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ColorDefinition.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tColorDefinition.prototype.String = function() { return this.$val.String(); };\n\tColorDefinition.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tColorDefinition.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tColorDefinition.ptr.prototype.GetRed = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$10.nil) && !(m.Red === ptrType$4.nil)) {\n\t\t\treturn m.Red.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tColorDefinition.prototype.GetRed = function() { return this.$val.GetRed(); };\n\tColorDefinition.ptr.prototype.GetGreen = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$10.nil) && !(m.Green === ptrType$4.nil)) {\n\t\t\treturn m.Green.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tColorDefinition.prototype.GetGreen = function() { return this.$val.GetGreen(); };\n\tColorDefinition.ptr.prototype.GetBlue = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$10.nil) && !(m.Blue === ptrType$4.nil)) {\n\t\t\treturn m.Blue.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tColorDefinition.prototype.GetBlue = function() { return this.$val.GetBlue(); };\n\tMaterialDefinition.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new MaterialDefinition.ptr(ptrType$8.nil, ptrType$5.nil, ptrType$5.nil, ptrType$10.nil, sliceType.nil), MaterialDefinition);\n\t};\n\tMaterialDefinition.prototype.Reset = function() { return this.$val.Reset(); };\n\tMaterialDefinition.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MaterialDefinition.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tMaterialDefinition.prototype.String = function() { return this.$val.String(); };\n\tMaterialDefinition.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tMaterialDefinition.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tMaterialDefinition.ptr.prototype.GetMatPair = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$11.nil)) {\n\t\t\treturn m.MatPair;\n\t\t}\n\t\treturn ptrType$8.nil;\n\t};\n\tMaterialDefinition.prototype.GetMatPair = function() { return this.$val.GetMatPair(); };\n\tMaterialDefinition.ptr.prototype.GetId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$11.nil) && !(m.Id === ptrType$5.nil)) {\n\t\t\treturn m.Id.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tMaterialDefinition.prototype.GetId = function() { return this.$val.GetId(); };\n\tMaterialDefinition.ptr.prototype.GetName = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$11.nil) && !(m.Name === ptrType$5.nil)) {\n\t\t\treturn m.Name.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tMaterialDefinition.prototype.GetName = function() { return this.$val.GetName(); };\n\tMaterialDefinition.ptr.prototype.GetStateColor = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$11.nil)) {\n\t\t\treturn m.StateColor;\n\t\t}\n\t\treturn ptrType$10.nil;\n\t};\n\tMaterialDefinition.prototype.GetStateColor = function() { return this.$val.GetStateColor(); };\n\tMaterialList.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new MaterialList.ptr(sliceType$4.nil, sliceType.nil), MaterialList);\n\t};\n\tMaterialList.prototype.Reset = function() { return this.$val.Reset(); };\n\tMaterialList.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MaterialList.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tMaterialList.prototype.String = function() { return this.$val.String(); };\n\tMaterialList.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tMaterialList.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tMaterialList.ptr.prototype.GetMaterialList = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$12.nil)) {\n\t\t\treturn m.MaterialList;\n\t\t}\n\t\treturn sliceType$4.nil;\n\t};\n\tMaterialList.prototype.GetMaterialList = function() { return this.$val.GetMaterialList(); };\n\tUnitDefinition.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new UnitDefinition.ptr(ptrType$4.nil, ptrType$13.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, sliceType.nil), UnitDefinition);\n\t};\n\tUnitDefinition.prototype.Reset = function() { return this.$val.Reset(); };\n\tUnitDefinition.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: UnitDefinition.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tUnitDefinition.prototype.String = function() { return this.$val.String(); };\n\tUnitDefinition.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tUnitDefinition.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tUnitDefinition.ptr.prototype.GetId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$14.nil) && !(m.Id === ptrType$4.nil)) {\n\t\t\treturn m.Id.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tUnitDefinition.prototype.GetId = function() { return this.$val.GetId(); };\n\tUnitDefinition.ptr.prototype.GetIsValid = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$14.nil) && !(m.IsValid === ptrType$13.nil)) {\n\t\t\treturn m.IsValid.$get();\n\t\t}\n\t\treturn false;\n\t};\n\tUnitDefinition.prototype.GetIsValid = function() { return this.$val.GetIsValid(); };\n\tUnitDefinition.ptr.prototype.GetPosX = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$14.nil) && !(m.PosX === ptrType$4.nil)) {\n\t\t\treturn m.PosX.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tUnitDefinition.prototype.GetPosX = function() { return this.$val.GetPosX(); };\n\tUnitDefinition.ptr.prototype.GetPosY = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$14.nil) && !(m.PosY === ptrType$4.nil)) {\n\t\t\treturn m.PosY.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tUnitDefinition.prototype.GetPosY = function() { return this.$val.GetPosY(); };\n\tUnitDefinition.ptr.prototype.GetPosZ = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$14.nil) && !(m.PosZ === ptrType$4.nil)) {\n\t\t\treturn m.PosZ.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tUnitDefinition.prototype.GetPosZ = function() { return this.$val.GetPosZ(); };\n\tUnitList.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new UnitList.ptr(sliceType$5.nil, sliceType.nil), UnitList);\n\t};\n\tUnitList.prototype.Reset = function() { return this.$val.Reset(); };\n\tUnitList.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: UnitList.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tUnitList.prototype.String = function() { return this.$val.String(); };\n\tUnitList.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tUnitList.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tUnitList.ptr.prototype.GetCreatureList = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$15.nil)) {\n\t\t\treturn m.CreatureList;\n\t\t}\n\t\treturn sliceType$5.nil;\n\t};\n\tUnitList.prototype.GetCreatureList = function() { return this.$val.GetCreatureList(); };\n\tBlockRequest.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new BlockRequest.ptr(ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, sliceType.nil), BlockRequest);\n\t};\n\tBlockRequest.prototype.Reset = function() { return this.$val.Reset(); };\n\tBlockRequest.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BlockRequest.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBlockRequest.prototype.String = function() { return this.$val.String(); };\n\tBlockRequest.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tBlockRequest.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tBlockRequest.ptr.prototype.GetBlocksNeeded = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$16.nil) && !(m.BlocksNeeded === ptrType$4.nil)) {\n\t\t\treturn m.BlocksNeeded.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBlockRequest.prototype.GetBlocksNeeded = function() { return this.$val.GetBlocksNeeded(); };\n\tBlockRequest.ptr.prototype.GetMinX = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$16.nil) && !(m.MinX === ptrType$4.nil)) {\n\t\t\treturn m.MinX.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBlockRequest.prototype.GetMinX = function() { return this.$val.GetMinX(); };\n\tBlockRequest.ptr.prototype.GetMaxX = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$16.nil) && !(m.MaxX === ptrType$4.nil)) {\n\t\t\treturn m.MaxX.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBlockRequest.prototype.GetMaxX = function() { return this.$val.GetMaxX(); };\n\tBlockRequest.ptr.prototype.GetMinY = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$16.nil) && !(m.MinY === ptrType$4.nil)) {\n\t\t\treturn m.MinY.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBlockRequest.prototype.GetMinY = function() { return this.$val.GetMinY(); };\n\tBlockRequest.ptr.prototype.GetMaxY = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$16.nil) && !(m.MaxY === ptrType$4.nil)) {\n\t\t\treturn m.MaxY.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBlockRequest.prototype.GetMaxY = function() { return this.$val.GetMaxY(); };\n\tBlockRequest.ptr.prototype.GetMinZ = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$16.nil) && !(m.MinZ === ptrType$4.nil)) {\n\t\t\treturn m.MinZ.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBlockRequest.prototype.GetMinZ = function() { return this.$val.GetMinZ(); };\n\tBlockRequest.ptr.prototype.GetMaxZ = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$16.nil) && !(m.MaxZ === ptrType$4.nil)) {\n\t\t\treturn m.MaxZ.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBlockRequest.prototype.GetMaxZ = function() { return this.$val.GetMaxZ(); };\n\tBlockList.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new BlockList.ptr(sliceType$6.nil, ptrType$4.nil, ptrType$4.nil, sliceType.nil), BlockList);\n\t};\n\tBlockList.prototype.Reset = function() { return this.$val.Reset(); };\n\tBlockList.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BlockList.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBlockList.prototype.String = function() { return this.$val.String(); };\n\tBlockList.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tBlockList.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tBlockList.ptr.prototype.GetMapBlocks = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$17.nil)) {\n\t\t\treturn m.MapBlocks;\n\t\t}\n\t\treturn sliceType$6.nil;\n\t};\n\tBlockList.prototype.GetMapBlocks = function() { return this.$val.GetMapBlocks(); };\n\tBlockList.ptr.prototype.GetMapX = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$17.nil) && !(m.MapX === ptrType$4.nil)) {\n\t\t\treturn m.MapX.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBlockList.prototype.GetMapX = function() { return this.$val.GetMapX(); };\n\tBlockList.ptr.prototype.GetMapY = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$17.nil) && !(m.MapY === ptrType$4.nil)) {\n\t\t\treturn m.MapY.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBlockList.prototype.GetMapY = function() { return this.$val.GetMapY(); };\n\tPlantDef.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new PlantDef.ptr(ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, sliceType.nil), PlantDef);\n\t};\n\tPlantDef.prototype.Reset = function() { return this.$val.Reset(); };\n\tPlantDef.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PlantDef.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tPlantDef.prototype.String = function() { return this.$val.String(); };\n\tPlantDef.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tPlantDef.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tPlantDef.ptr.prototype.GetPosX = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.PosX === ptrType$4.nil)) {\n\t\t\treturn m.PosX.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tPlantDef.prototype.GetPosX = function() { return this.$val.GetPosX(); };\n\tPlantDef.ptr.prototype.GetPosY = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.PosY === ptrType$4.nil)) {\n\t\t\treturn m.PosY.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tPlantDef.prototype.GetPosY = function() { return this.$val.GetPosY(); };\n\tPlantDef.ptr.prototype.GetPosZ = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.PosZ === ptrType$4.nil)) {\n\t\t\treturn m.PosZ.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tPlantDef.prototype.GetPosZ = function() { return this.$val.GetPosZ(); };\n\tPlantDef.ptr.prototype.GetIndex = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.Index === ptrType$4.nil)) {\n\t\t\treturn m.Index.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tPlantDef.prototype.GetIndex = function() { return this.$val.GetIndex(); };\n\tPlantList.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new PlantList.ptr(sliceType$7.nil, sliceType.nil), PlantList);\n\t};\n\tPlantList.prototype.Reset = function() { return this.$val.Reset(); };\n\tPlantList.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PlantList.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tPlantList.prototype.String = function() { return this.$val.String(); };\n\tPlantList.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tPlantList.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tPlantList.ptr.prototype.GetPlantList = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$19.nil)) {\n\t\t\treturn m.PlantList;\n\t\t}\n\t\treturn sliceType$7.nil;\n\t};\n\tPlantList.prototype.GetPlantList = function() { return this.$val.GetPlantList(); };\n\tViewInfo.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new ViewInfo.ptr(ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, sliceType.nil), ViewInfo);\n\t};\n\tViewInfo.prototype.Reset = function() { return this.$val.Reset(); };\n\tViewInfo.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ViewInfo.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tViewInfo.prototype.String = function() { return this.$val.String(); };\n\tViewInfo.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tViewInfo.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tViewInfo.ptr.prototype.GetViewPosX = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$20.nil) && !(m.ViewPosX === ptrType$4.nil)) {\n\t\t\treturn m.ViewPosX.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tViewInfo.prototype.GetViewPosX = function() { return this.$val.GetViewPosX(); };\n\tViewInfo.ptr.prototype.GetViewPosY = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$20.nil) && !(m.ViewPosY === ptrType$4.nil)) {\n\t\t\treturn m.ViewPosY.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tViewInfo.prototype.GetViewPosY = function() { return this.$val.GetViewPosY(); };\n\tViewInfo.ptr.prototype.GetViewPosZ = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$20.nil) && !(m.ViewPosZ === ptrType$4.nil)) {\n\t\t\treturn m.ViewPosZ.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tViewInfo.prototype.GetViewPosZ = function() { return this.$val.GetViewPosZ(); };\n\tViewInfo.ptr.prototype.GetViewSizeX = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$20.nil) && !(m.ViewSizeX === ptrType$4.nil)) {\n\t\t\treturn m.ViewSizeX.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tViewInfo.prototype.GetViewSizeX = function() { return this.$val.GetViewSizeX(); };\n\tViewInfo.ptr.prototype.GetViewSizeY = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$20.nil) && !(m.ViewSizeY === ptrType$4.nil)) {\n\t\t\treturn m.ViewSizeY.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tViewInfo.prototype.GetViewSizeY = function() { return this.$val.GetViewSizeY(); };\n\tViewInfo.ptr.prototype.GetCursorPosX = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$20.nil) && !(m.CursorPosX === ptrType$4.nil)) {\n\t\t\treturn m.CursorPosX.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tViewInfo.prototype.GetCursorPosX = function() { return this.$val.GetCursorPosX(); };\n\tViewInfo.ptr.prototype.GetCursorPosY = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$20.nil) && !(m.CursorPosY === ptrType$4.nil)) {\n\t\t\treturn m.CursorPosY.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tViewInfo.prototype.GetCursorPosY = function() { return this.$val.GetCursorPosY(); };\n\tViewInfo.ptr.prototype.GetCursorPosZ = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$20.nil) && !(m.CursorPosZ === ptrType$4.nil)) {\n\t\t\treturn m.CursorPosZ.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tViewInfo.prototype.GetCursorPosZ = function() { return this.$val.GetCursorPosZ(); };\n\tMapInfo.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new MapInfo.ptr(ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$5.nil, ptrType$5.nil, ptrType$5.nil, sliceType.nil), MapInfo);\n\t};\n\tMapInfo.prototype.Reset = function() { return this.$val.Reset(); };\n\tMapInfo.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MapInfo.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tMapInfo.prototype.String = function() { return this.$val.String(); };\n\tMapInfo.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tMapInfo.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tMapInfo.ptr.prototype.GetBlockSizeX = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$21.nil) && !(m.BlockSizeX === ptrType$4.nil)) {\n\t\t\treturn m.BlockSizeX.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tMapInfo.prototype.GetBlockSizeX = function() { return this.$val.GetBlockSizeX(); };\n\tMapInfo.ptr.prototype.GetBlockSizeY = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$21.nil) && !(m.BlockSizeY === ptrType$4.nil)) {\n\t\t\treturn m.BlockSizeY.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tMapInfo.prototype.GetBlockSizeY = function() { return this.$val.GetBlockSizeY(); };\n\tMapInfo.ptr.prototype.GetBlockSizeZ = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$21.nil) && !(m.BlockSizeZ === ptrType$4.nil)) {\n\t\t\treturn m.BlockSizeZ.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tMapInfo.prototype.GetBlockSizeZ = function() { return this.$val.GetBlockSizeZ(); };\n\tMapInfo.ptr.prototype.GetBlockPosX = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$21.nil) && !(m.BlockPosX === ptrType$4.nil)) {\n\t\t\treturn m.BlockPosX.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tMapInfo.prototype.GetBlockPosX = function() { return this.$val.GetBlockPosX(); };\n\tMapInfo.ptr.prototype.GetBlockPosY = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$21.nil) && !(m.BlockPosY === ptrType$4.nil)) {\n\t\t\treturn m.BlockPosY.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tMapInfo.prototype.GetBlockPosY = function() { return this.$val.GetBlockPosY(); };\n\tMapInfo.ptr.prototype.GetBlockPosZ = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$21.nil) && !(m.BlockPosZ === ptrType$4.nil)) {\n\t\t\treturn m.BlockPosZ.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tMapInfo.prototype.GetBlockPosZ = function() { return this.$val.GetBlockPosZ(); };\n\tMapInfo.ptr.prototype.GetWorldName = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$21.nil) && !(m.WorldName === ptrType$5.nil)) {\n\t\t\treturn m.WorldName.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tMapInfo.prototype.GetWorldName = function() { return this.$val.GetWorldName(); };\n\tMapInfo.ptr.prototype.GetWorldNameEnglish = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$21.nil) && !(m.WorldNameEnglish === ptrType$5.nil)) {\n\t\t\treturn m.WorldNameEnglish.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tMapInfo.prototype.GetWorldNameEnglish = function() { return this.$val.GetWorldNameEnglish(); };\n\tMapInfo.ptr.prototype.GetSaveName = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$21.nil) && !(m.SaveName === ptrType$5.nil)) {\n\t\t\treturn m.SaveName.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tMapInfo.prototype.GetSaveName = function() { return this.$val.GetSaveName(); };\n\tinit = function() {\n\t\tvar $ptr;\n\t\tproto.RegisterEnum(\"RemoteFortressReader.TiletypeShape\", $pkg.TiletypeShape_name, $pkg.TiletypeShape_value);\n\t\tproto.RegisterEnum(\"RemoteFortressReader.TiletypeSpecial\", $pkg.TiletypeSpecial_name, $pkg.TiletypeSpecial_value);\n\t\tproto.RegisterEnum(\"RemoteFortressReader.TiletypeMaterial\", $pkg.TiletypeMaterial_name, $pkg.TiletypeMaterial_value);\n\t\tproto.RegisterEnum(\"RemoteFortressReader.TiletypeVariant\", $pkg.TiletypeVariant_name, $pkg.TiletypeVariant_value);\n\t};\n\tTiletypeShape.methods = [{prop: \"Enum\", name: \"Enum\", pkg: \"\", typ: $funcType([], [ptrType], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType.methods = [{prop: \"UnmarshalJSON\", name: \"UnmarshalJSON\", pkg: \"\", typ: $funcType([sliceType], [$error], false)}];\n\tTiletypeSpecial.methods = [{prop: \"Enum\", name: \"Enum\", pkg: \"\", typ: $funcType([], [ptrType$1], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$1.methods = [{prop: \"UnmarshalJSON\", name: \"UnmarshalJSON\", pkg: \"\", typ: $funcType([sliceType], [$error], false)}];\n\tTiletypeMaterial.methods = [{prop: \"Enum\", name: \"Enum\", pkg: \"\", typ: $funcType([], [ptrType$2], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$2.methods = [{prop: \"UnmarshalJSON\", name: \"UnmarshalJSON\", pkg: \"\", typ: $funcType([sliceType], [$error], false)}];\n\tTiletypeVariant.methods = [{prop: \"Enum\", name: \"Enum\", pkg: \"\", typ: $funcType([], [ptrType$3], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$3.methods = [{prop: \"UnmarshalJSON\", name: \"UnmarshalJSON\", pkg: \"\", typ: $funcType([sliceType], [$error], false)}];\n\tptrType$6.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetId\", name: \"GetId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetName\", name: \"GetName\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetCaption\", name: \"GetCaption\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetShape\", name: \"GetShape\", pkg: \"\", typ: $funcType([], [TiletypeShape], false)}, {prop: \"GetSpecial\", name: \"GetSpecial\", pkg: \"\", typ: $funcType([], [TiletypeSpecial], false)}, {prop: \"GetMaterial\", name: \"GetMaterial\", pkg: \"\", typ: $funcType([], [TiletypeMaterial], false)}, {prop: \"GetVariant\", name: \"GetVariant\", pkg: \"\", typ: $funcType([], [TiletypeVariant], false)}, {prop: \"GetDirection\", name: \"GetDirection\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$7.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetTiletypeList\", name: \"GetTiletypeList\", pkg: \"\", typ: $funcType([], [sliceType$1], false)}];\n\tptrType$9.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetMapX\", name: \"GetMapX\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetMapY\", name: \"GetMapY\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetMapZ\", name: \"GetMapZ\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetTiles\", name: \"GetTiles\", pkg: \"\", typ: $funcType([], [sliceType$2], false)}, {prop: \"GetMaterials\", name: \"GetMaterials\", pkg: \"\", typ: $funcType([], [sliceType$3], false)}, {prop: \"GetLayerMaterials\", name: \"GetLayerMaterials\", pkg: \"\", typ: $funcType([], [sliceType$3], false)}, {prop: \"GetVeinMaterials\", name: \"GetVeinMaterials\", pkg: \"\", typ: $funcType([], [sliceType$3], false)}, {prop: \"GetBaseMaterials\", name: \"GetBaseMaterials\", pkg: \"\", typ: $funcType([], [sliceType$3], false)}, {prop: \"GetMagma\", name: \"GetMagma\", pkg: \"\", typ: $funcType([], [sliceType$2], false)}, {prop: \"GetWater\", name: \"GetWater\", pkg: \"\", typ: $funcType([], [sliceType$2], false)}];\n\tptrType$8.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetMatType\", name: \"GetMatType\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetMatIndex\", name: \"GetMatIndex\", pkg: \"\", typ: $funcType([], [$Int32], false)}];\n\tptrType$10.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetRed\", name: \"GetRed\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetGreen\", name: \"GetGreen\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetBlue\", name: \"GetBlue\", pkg: \"\", typ: $funcType([], [$Int32], false)}];\n\tptrType$11.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetMatPair\", name: \"GetMatPair\", pkg: \"\", typ: $funcType([], [ptrType$8], false)}, {prop: \"GetId\", name: \"GetId\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetName\", name: \"GetName\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetStateColor\", name: \"GetStateColor\", pkg: \"\", typ: $funcType([], [ptrType$10], false)}];\n\tptrType$12.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetMaterialList\", name: \"GetMaterialList\", pkg: \"\", typ: $funcType([], [sliceType$4], false)}];\n\tptrType$14.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetId\", name: \"GetId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetIsValid\", name: \"GetIsValid\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"GetPosX\", name: \"GetPosX\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetPosY\", name: \"GetPosY\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetPosZ\", name: \"GetPosZ\", pkg: \"\", typ: $funcType([], [$Int32], false)}];\n\tptrType$15.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetCreatureList\", name: \"GetCreatureList\", pkg: \"\", typ: $funcType([], [sliceType$5], false)}];\n\tptrType$16.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetBlocksNeeded\", name: \"GetBlocksNeeded\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetMinX\", name: \"GetMinX\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetMaxX\", name: \"GetMaxX\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetMinY\", name: \"GetMinY\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetMaxY\", name: \"GetMaxY\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetMinZ\", name: \"GetMinZ\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetMaxZ\", name: \"GetMaxZ\", pkg: \"\", typ: $funcType([], [$Int32], false)}];\n\tptrType$17.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetMapBlocks\", name: \"GetMapBlocks\", pkg: \"\", typ: $funcType([], [sliceType$6], false)}, {prop: \"GetMapX\", name: \"GetMapX\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetMapY\", name: \"GetMapY\", pkg: \"\", typ: $funcType([], [$Int32], false)}];\n\tptrType$18.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetPosX\", name: \"GetPosX\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetPosY\", name: \"GetPosY\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetPosZ\", name: \"GetPosZ\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetIndex\", name: \"GetIndex\", pkg: \"\", typ: $funcType([], [$Int32], false)}];\n\tptrType$19.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetPlantList\", name: \"GetPlantList\", pkg: \"\", typ: $funcType([], [sliceType$7], false)}];\n\tptrType$20.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetViewPosX\", name: \"GetViewPosX\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetViewPosY\", name: \"GetViewPosY\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetViewPosZ\", name: \"GetViewPosZ\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetViewSizeX\", name: \"GetViewSizeX\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetViewSizeY\", name: \"GetViewSizeY\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetCursorPosX\", name: \"GetCursorPosX\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetCursorPosY\", name: \"GetCursorPosY\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetCursorPosZ\", name: \"GetCursorPosZ\", pkg: \"\", typ: $funcType([], [$Int32], false)}];\n\tptrType$21.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetBlockSizeX\", name: \"GetBlockSizeX\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetBlockSizeY\", name: \"GetBlockSizeY\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetBlockSizeZ\", name: \"GetBlockSizeZ\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetBlockPosX\", name: \"GetBlockPosX\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetBlockPosY\", name: \"GetBlockPosY\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetBlockPosZ\", name: \"GetBlockPosZ\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetWorldName\", name: \"GetWorldName\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetWorldNameEnglish\", name: \"GetWorldNameEnglish\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetSaveName\", name: \"GetSaveName\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tTiletype.init([{prop: \"Id\", name: \"Id\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,1,req,name=id\\\" json:\\\"id,omitempty\\\"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: ptrType$5, tag: \"protobuf:\\\"bytes,2,opt,name=name\\\" json:\\\"name,omitempty\\\"\"}, {prop: \"Caption\", name: \"Caption\", pkg: \"\", typ: ptrType$5, tag: \"protobuf:\\\"bytes,3,opt,name=caption\\\" json:\\\"caption,omitempty\\\"\"}, {prop: \"Shape\", name: \"Shape\", pkg: \"\", typ: ptrType, tag: \"protobuf:\\\"varint,4,opt,name=shape,enum=RemoteFortressReader.TiletypeShape\\\" json:\\\"shape,omitempty\\\"\"}, {prop: \"Special\", name: \"Special\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,5,opt,name=special,enum=RemoteFortressReader.TiletypeSpecial\\\" json:\\\"special,omitempty\\\"\"}, {prop: \"Material\", name: \"Material\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"varint,6,opt,name=material,enum=RemoteFortressReader.TiletypeMaterial\\\" json:\\\"material,omitempty\\\"\"}, {prop: \"Variant\", name: \"Variant\", pkg: \"\", typ: ptrType$3, tag: \"protobuf:\\\"varint,7,opt,name=variant,enum=RemoteFortressReader.TiletypeVariant\\\" json:\\\"variant,omitempty\\\"\"}, {prop: \"Direction\", name: \"Direction\", pkg: \"\", typ: ptrType$5, tag: \"protobuf:\\\"bytes,8,opt,name=direction\\\" json:\\\"direction,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tTiletypeList.init([{prop: \"TiletypeList\", name: \"TiletypeList\", pkg: \"\", typ: sliceType$1, tag: \"protobuf:\\\"bytes,1,rep,name=tiletype_list\\\" json:\\\"tiletype_list,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tMapBlock.init([{prop: \"MapX\", name: \"MapX\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,1,req,name=map_x\\\" json:\\\"map_x,omitempty\\\"\"}, {prop: \"MapY\", name: \"MapY\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,2,req,name=map_y\\\" json:\\\"map_y,omitempty\\\"\"}, {prop: \"MapZ\", name: \"MapZ\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,3,req,name=map_z\\\" json:\\\"map_z,omitempty\\\"\"}, {prop: \"Tiles\", name: \"Tiles\", pkg: \"\", typ: sliceType$2, tag: \"protobuf:\\\"varint,4,rep,name=tiles\\\" json:\\\"tiles,omitempty\\\"\"}, {prop: \"Materials\", name: \"Materials\", pkg: \"\", typ: sliceType$3, tag: \"protobuf:\\\"bytes,5,rep,name=materials\\\" json:\\\"materials,omitempty\\\"\"}, {prop: \"LayerMaterials\", name: \"LayerMaterials\", pkg: \"\", typ: sliceType$3, tag: \"protobuf:\\\"bytes,6,rep,name=layer_materials\\\" json:\\\"layer_materials,omitempty\\\"\"}, {prop: \"VeinMaterials\", name: \"VeinMaterials\", pkg: \"\", typ: sliceType$3, tag: \"protobuf:\\\"bytes,7,rep,name=vein_materials\\\" json:\\\"vein_materials,omitempty\\\"\"}, {prop: \"BaseMaterials\", name: \"BaseMaterials\", pkg: \"\", typ: sliceType$3, tag: \"protobuf:\\\"bytes,8,rep,name=base_materials\\\" json:\\\"base_materials,omitempty\\\"\"}, {prop: \"Magma\", name: \"Magma\", pkg: \"\", typ: sliceType$2, tag: \"protobuf:\\\"varint,9,rep,name=magma\\\" json:\\\"magma,omitempty\\\"\"}, {prop: \"Water\", name: \"Water\", pkg: \"\", typ: sliceType$2, tag: \"protobuf:\\\"varint,10,rep,name=water\\\" json:\\\"water,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tMatPair.init([{prop: \"MatType\", name: \"MatType\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,1,req,name=mat_type\\\" json:\\\"mat_type,omitempty\\\"\"}, {prop: \"MatIndex\", name: \"MatIndex\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,2,req,name=mat_index\\\" json:\\\"mat_index,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tColorDefinition.init([{prop: \"Red\", name: \"Red\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,1,req,name=red\\\" json:\\\"red,omitempty\\\"\"}, {prop: \"Green\", name: \"Green\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,2,req,name=green\\\" json:\\\"green,omitempty\\\"\"}, {prop: \"Blue\", name: \"Blue\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,3,req,name=blue\\\" json:\\\"blue,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tMaterialDefinition.init([{prop: \"MatPair\", name: \"MatPair\", pkg: \"\", typ: ptrType$8, tag: \"protobuf:\\\"bytes,1,req,name=mat_pair\\\" json:\\\"mat_pair,omitempty\\\"\"}, {prop: \"Id\", name: \"Id\", pkg: \"\", typ: ptrType$5, tag: \"protobuf:\\\"bytes,2,opt,name=id\\\" json:\\\"id,omitempty\\\"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: ptrType$5, tag: \"protobuf:\\\"bytes,3,opt,name=name\\\" json:\\\"name,omitempty\\\"\"}, {prop: \"StateColor\", name: \"StateColor\", pkg: \"\", typ: ptrType$10, tag: \"protobuf:\\\"bytes,4,opt,name=state_color\\\" json:\\\"state_color,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tMaterialList.init([{prop: \"MaterialList\", name: \"MaterialList\", pkg: \"\", typ: sliceType$4, tag: \"protobuf:\\\"bytes,1,rep,name=material_list\\\" json:\\\"material_list,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tUnitDefinition.init([{prop: \"Id\", name: \"Id\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,1,req,name=id\\\" json:\\\"id,omitempty\\\"\"}, {prop: \"IsValid\", name: \"IsValid\", pkg: \"\", typ: ptrType$13, tag: \"protobuf:\\\"varint,2,opt,name=isValid\\\" json:\\\"isValid,omitempty\\\"\"}, {prop: \"PosX\", name: \"PosX\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,3,opt,name=pos_x\\\" json:\\\"pos_x,omitempty\\\"\"}, {prop: \"PosY\", name: \"PosY\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,4,opt,name=pos_y\\\" json:\\\"pos_y,omitempty\\\"\"}, {prop: \"PosZ\", name: \"PosZ\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,5,opt,name=pos_z\\\" json:\\\"pos_z,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tUnitList.init([{prop: \"CreatureList\", name: \"CreatureList\", pkg: \"\", typ: sliceType$5, tag: \"protobuf:\\\"bytes,1,rep,name=creature_list\\\" json:\\\"creature_list,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tBlockRequest.init([{prop: \"BlocksNeeded\", name: \"BlocksNeeded\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,1,opt,name=blocks_needed\\\" json:\\\"blocks_needed,omitempty\\\"\"}, {prop: \"MinX\", name: \"MinX\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,2,opt,name=min_x\\\" json:\\\"min_x,omitempty\\\"\"}, {prop: \"MaxX\", name: \"MaxX\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,3,opt,name=max_x\\\" json:\\\"max_x,omitempty\\\"\"}, {prop: \"MinY\", name: \"MinY\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,4,opt,name=min_y\\\" json:\\\"min_y,omitempty\\\"\"}, {prop: \"MaxY\", name: \"MaxY\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,5,opt,name=max_y\\\" json:\\\"max_y,omitempty\\\"\"}, {prop: \"MinZ\", name: \"MinZ\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,6,opt,name=min_z\\\" json:\\\"min_z,omitempty\\\"\"}, {prop: \"MaxZ\", name: \"MaxZ\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,7,opt,name=max_z\\\" json:\\\"max_z,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tBlockList.init([{prop: \"MapBlocks\", name: \"MapBlocks\", pkg: \"\", typ: sliceType$6, tag: \"protobuf:\\\"bytes,1,rep,name=map_blocks\\\" json:\\\"map_blocks,omitempty\\\"\"}, {prop: \"MapX\", name: \"MapX\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,2,opt,name=map_x\\\" json:\\\"map_x,omitempty\\\"\"}, {prop: \"MapY\", name: \"MapY\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,3,opt,name=map_y\\\" json:\\\"map_y,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tPlantDef.init([{prop: \"PosX\", name: \"PosX\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,1,req,name=pos_x\\\" json:\\\"pos_x,omitempty\\\"\"}, {prop: \"PosY\", name: \"PosY\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,2,req,name=pos_y\\\" json:\\\"pos_y,omitempty\\\"\"}, {prop: \"PosZ\", name: \"PosZ\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,3,req,name=pos_z\\\" json:\\\"pos_z,omitempty\\\"\"}, {prop: \"Index\", name: \"Index\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,4,req,name=index\\\" json:\\\"index,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tPlantList.init([{prop: \"PlantList\", name: \"PlantList\", pkg: \"\", typ: sliceType$7, tag: \"protobuf:\\\"bytes,1,rep,name=plant_list\\\" json:\\\"plant_list,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tViewInfo.init([{prop: \"ViewPosX\", name: \"ViewPosX\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,1,opt,name=view_pos_x\\\" json:\\\"view_pos_x,omitempty\\\"\"}, {prop: \"ViewPosY\", name: \"ViewPosY\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,2,opt,name=view_pos_y\\\" json:\\\"view_pos_y,omitempty\\\"\"}, {prop: \"ViewPosZ\", name: \"ViewPosZ\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,3,opt,name=view_pos_z\\\" json:\\\"view_pos_z,omitempty\\\"\"}, {prop: \"ViewSizeX\", name: \"ViewSizeX\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,4,opt,name=view_size_x\\\" json:\\\"view_size_x,omitempty\\\"\"}, {prop: \"ViewSizeY\", name: \"ViewSizeY\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,5,opt,name=view_size_y\\\" json:\\\"view_size_y,omitempty\\\"\"}, {prop: \"CursorPosX\", name: \"CursorPosX\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,6,opt,name=cursor_pos_x\\\" json:\\\"cursor_pos_x,omitempty\\\"\"}, {prop: \"CursorPosY\", name: \"CursorPosY\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,7,opt,name=cursor_pos_y\\\" json:\\\"cursor_pos_y,omitempty\\\"\"}, {prop: \"CursorPosZ\", name: \"CursorPosZ\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,8,opt,name=cursor_pos_z\\\" json:\\\"cursor_pos_z,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tMapInfo.init([{prop: \"BlockSizeX\", name: \"BlockSizeX\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,1,opt,name=block_size_x\\\" json:\\\"block_size_x,omitempty\\\"\"}, {prop: \"BlockSizeY\", name: \"BlockSizeY\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,2,opt,name=block_size_y\\\" json:\\\"block_size_y,omitempty\\\"\"}, {prop: \"BlockSizeZ\", name: \"BlockSizeZ\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,3,opt,name=block_size_z\\\" json:\\\"block_size_z,omitempty\\\"\"}, {prop: \"BlockPosX\", name: \"BlockPosX\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,4,opt,name=block_pos_x\\\" json:\\\"block_pos_x,omitempty\\\"\"}, {prop: \"BlockPosY\", name: \"BlockPosY\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,5,opt,name=block_pos_y\\\" json:\\\"block_pos_y,omitempty\\\"\"}, {prop: \"BlockPosZ\", name: \"BlockPosZ\", pkg: \"\", typ: ptrType$4, tag: \"protobuf:\\\"varint,6,opt,name=block_pos_z\\\" json:\\\"block_pos_z,omitempty\\\"\"}, {prop: \"WorldName\", name: \"WorldName\", pkg: \"\", typ: ptrType$5, tag: \"protobuf:\\\"bytes,7,opt,name=world_name\\\" json:\\\"world_name,omitempty\\\"\"}, {prop: \"WorldNameEnglish\", name: \"WorldNameEnglish\", pkg: \"\", typ: ptrType$5, tag: \"protobuf:\\\"bytes,8,opt,name=world_name_english\\\" json:\\\"world_name_english,omitempty\\\"\"}, {prop: \"SaveName\", name: \"SaveName\", pkg: \"\", typ: ptrType$5, tag: \"protobuf:\\\"bytes,9,opt,name=save_name\\\" json:\\\"save_name,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = proto.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$pkg.TiletypeShape_name = (_map = new $Map(), _key = -1, _map[_key] = { k: _key, v: \"NO_SHAPE\" }, _key = 0, _map[_key] = { k: _key, v: \"EMPTY\" }, _key = 1, _map[_key] = { k: _key, v: \"FLOOR\" }, _key = 2, _map[_key] = { k: _key, v: \"BOULDER\" }, _key = 3, _map[_key] = { k: _key, v: \"PEBBLES\" }, _key = 4, _map[_key] = { k: _key, v: \"WALL\" }, _key = 5, _map[_key] = { k: _key, v: \"FORTIFICATION\" }, _key = 6, _map[_key] = { k: _key, v: \"STAIR_UP\" }, _key = 7, _map[_key] = { k: _key, v: \"STAIR_DOWN\" }, _key = 8, _map[_key] = { k: _key, v: \"STAIR_UPDOWN\" }, _key = 9, _map[_key] = { k: _key, v: \"RAMP\" }, _key = 10, _map[_key] = { k: _key, v: \"RAMP_TOP\" }, _key = 11, _map[_key] = { k: _key, v: \"BROOK_BED\" }, _key = 12, _map[_key] = { k: _key, v: \"BROOK_TOP\" }, _key = 13, _map[_key] = { k: _key, v: \"TREE_SHAPE\" }, _key = 14, _map[_key] = { k: _key, v: \"SAPLING\" }, _key = 15, _map[_key] = { k: _key, v: \"SHRUB\" }, _key = 16, _map[_key] = { k: _key, v: \"ENDLESS_PIT\" }, _key = 17, _map[_key] = { k: _key, v: \"BRANCH\" }, _key = 18, _map[_key] = { k: _key, v: \"TRUNK_BRANCH\" }, _key = 19, _map[_key] = { k: _key, v: \"TWIG\" }, _map);\n\t\t$pkg.TiletypeShape_value = (_map$1 = new $Map(), _key$1 = \"NO_SHAPE\", _map$1[_key$1] = { k: _key$1, v: -1 }, _key$1 = \"EMPTY\", _map$1[_key$1] = { k: _key$1, v: 0 }, _key$1 = \"FLOOR\", _map$1[_key$1] = { k: _key$1, v: 1 }, _key$1 = \"BOULDER\", _map$1[_key$1] = { k: _key$1, v: 2 }, _key$1 = \"PEBBLES\", _map$1[_key$1] = { k: _key$1, v: 3 }, _key$1 = \"WALL\", _map$1[_key$1] = { k: _key$1, v: 4 }, _key$1 = \"FORTIFICATION\", _map$1[_key$1] = { k: _key$1, v: 5 }, _key$1 = \"STAIR_UP\", _map$1[_key$1] = { k: _key$1, v: 6 }, _key$1 = \"STAIR_DOWN\", _map$1[_key$1] = { k: _key$1, v: 7 }, _key$1 = \"STAIR_UPDOWN\", _map$1[_key$1] = { k: _key$1, v: 8 }, _key$1 = \"RAMP\", _map$1[_key$1] = { k: _key$1, v: 9 }, _key$1 = \"RAMP_TOP\", _map$1[_key$1] = { k: _key$1, v: 10 }, _key$1 = \"BROOK_BED\", _map$1[_key$1] = { k: _key$1, v: 11 }, _key$1 = \"BROOK_TOP\", _map$1[_key$1] = { k: _key$1, v: 12 }, _key$1 = \"TREE_SHAPE\", _map$1[_key$1] = { k: _key$1, v: 13 }, _key$1 = \"SAPLING\", _map$1[_key$1] = { k: _key$1, v: 14 }, _key$1 = \"SHRUB\", _map$1[_key$1] = { k: _key$1, v: 15 }, _key$1 = \"ENDLESS_PIT\", _map$1[_key$1] = { k: _key$1, v: 16 }, _key$1 = \"BRANCH\", _map$1[_key$1] = { k: _key$1, v: 17 }, _key$1 = \"TRUNK_BRANCH\", _map$1[_key$1] = { k: _key$1, v: 18 }, _key$1 = \"TWIG\", _map$1[_key$1] = { k: _key$1, v: 19 }, _map$1);\n\t\t$pkg.TiletypeSpecial_name = (_map$2 = new $Map(), _key$2 = -1, _map$2[_key$2] = { k: _key$2, v: \"NO_SPECIAL\" }, _key$2 = 0, _map$2[_key$2] = { k: _key$2, v: \"NORMAL\" }, _key$2 = 1, _map$2[_key$2] = { k: _key$2, v: \"RIVER_SOURCE\" }, _key$2 = 2, _map$2[_key$2] = { k: _key$2, v: \"WATERFALL\" }, _key$2 = 3, _map$2[_key$2] = { k: _key$2, v: \"SMOOTH\" }, _key$2 = 4, _map$2[_key$2] = { k: _key$2, v: \"FURROWED\" }, _key$2 = 5, _map$2[_key$2] = { k: _key$2, v: \"WET\" }, _key$2 = 6, _map$2[_key$2] = { k: _key$2, v: \"DEAD\" }, _key$2 = 7, _map$2[_key$2] = { k: _key$2, v: \"WORN_1\" }, _key$2 = 8, _map$2[_key$2] = { k: _key$2, v: \"WORN_2\" }, _key$2 = 9, _map$2[_key$2] = { k: _key$2, v: \"WORN_3\" }, _key$2 = 10, _map$2[_key$2] = { k: _key$2, v: \"TRACK\" }, _key$2 = 11, _map$2[_key$2] = { k: _key$2, v: \"SMOOTH_DEAD\" }, _map$2);\n\t\t$pkg.TiletypeSpecial_value = (_map$3 = new $Map(), _key$3 = \"NO_SPECIAL\", _map$3[_key$3] = { k: _key$3, v: -1 }, _key$3 = \"NORMAL\", _map$3[_key$3] = { k: _key$3, v: 0 }, _key$3 = \"RIVER_SOURCE\", _map$3[_key$3] = { k: _key$3, v: 1 }, _key$3 = \"WATERFALL\", _map$3[_key$3] = { k: _key$3, v: 2 }, _key$3 = \"SMOOTH\", _map$3[_key$3] = { k: _key$3, v: 3 }, _key$3 = \"FURROWED\", _map$3[_key$3] = { k: _key$3, v: 4 }, _key$3 = \"WET\", _map$3[_key$3] = { k: _key$3, v: 5 }, _key$3 = \"DEAD\", _map$3[_key$3] = { k: _key$3, v: 6 }, _key$3 = \"WORN_1\", _map$3[_key$3] = { k: _key$3, v: 7 }, _key$3 = \"WORN_2\", _map$3[_key$3] = { k: _key$3, v: 8 }, _key$3 = \"WORN_3\", _map$3[_key$3] = { k: _key$3, v: 9 }, _key$3 = \"TRACK\", _map$3[_key$3] = { k: _key$3, v: 10 }, _key$3 = \"SMOOTH_DEAD\", _map$3[_key$3] = { k: _key$3, v: 11 }, _map$3);\n\t\t$pkg.TiletypeMaterial_name = (_map$4 = new $Map(), _key$4 = -1, _map$4[_key$4] = { k: _key$4, v: \"NO_MATERIAL\" }, _key$4 = 0, _map$4[_key$4] = { k: _key$4, v: \"AIR\" }, _key$4 = 1, _map$4[_key$4] = { k: _key$4, v: \"SOIL\" }, _key$4 = 2, _map$4[_key$4] = { k: _key$4, v: \"STONE\" }, _key$4 = 3, _map$4[_key$4] = { k: _key$4, v: \"FEATURE\" }, _key$4 = 4, _map$4[_key$4] = { k: _key$4, v: \"LAVA_STONE\" }, _key$4 = 5, _map$4[_key$4] = { k: _key$4, v: \"MINERAL\" }, _key$4 = 6, _map$4[_key$4] = { k: _key$4, v: \"FROZEN_LIQUID\" }, _key$4 = 7, _map$4[_key$4] = { k: _key$4, v: \"CONSTRUCTION\" }, _key$4 = 8, _map$4[_key$4] = { k: _key$4, v: \"GRASS_LIGHT\" }, _key$4 = 9, _map$4[_key$4] = { k: _key$4, v: \"GRASS_DARK\" }, _key$4 = 10, _map$4[_key$4] = { k: _key$4, v: \"GRASS_DRY\" }, _key$4 = 11, _map$4[_key$4] = { k: _key$4, v: \"GRASS_DEAD\" }, _key$4 = 12, _map$4[_key$4] = { k: _key$4, v: \"PLANT\" }, _key$4 = 13, _map$4[_key$4] = { k: _key$4, v: \"HFS\" }, _key$4 = 14, _map$4[_key$4] = { k: _key$4, v: \"CAMPFIRE\" }, _key$4 = 15, _map$4[_key$4] = { k: _key$4, v: \"FIRE\" }, _key$4 = 16, _map$4[_key$4] = { k: _key$4, v: \"ASHES\" }, _key$4 = 17, _map$4[_key$4] = { k: _key$4, v: \"MAGMA\" }, _key$4 = 18, _map$4[_key$4] = { k: _key$4, v: \"DRIFTWOOD\" }, _key$4 = 19, _map$4[_key$4] = { k: _key$4, v: \"POOL\" }, _key$4 = 20, _map$4[_key$4] = { k: _key$4, v: \"BROOK\" }, _key$4 = 21, _map$4[_key$4] = { k: _key$4, v: \"RIVER\" }, _key$4 = 22, _map$4[_key$4] = { k: _key$4, v: \"ROOT\" }, _key$4 = 23, _map$4[_key$4] = { k: _key$4, v: \"TREE_MATERIAL\" }, _key$4 = 24, _map$4[_key$4] = { k: _key$4, v: \"MUSHROOM\" }, _key$4 = 25, _map$4[_key$4] = { k: _key$4, v: \"UNDERWORLD_GATE\" }, _map$4);\n\t\t$pkg.TiletypeMaterial_value = (_map$5 = new $Map(), _key$5 = \"NO_MATERIAL\", _map$5[_key$5] = { k: _key$5, v: -1 }, _key$5 = \"AIR\", _map$5[_key$5] = { k: _key$5, v: 0 }, _key$5 = \"SOIL\", _map$5[_key$5] = { k: _key$5, v: 1 }, _key$5 = \"STONE\", _map$5[_key$5] = { k: _key$5, v: 2 }, _key$5 = \"FEATURE\", _map$5[_key$5] = { k: _key$5, v: 3 }, _key$5 = \"LAVA_STONE\", _map$5[_key$5] = { k: _key$5, v: 4 }, _key$5 = \"MINERAL\", _map$5[_key$5] = { k: _key$5, v: 5 }, _key$5 = \"FROZEN_LIQUID\", _map$5[_key$5] = { k: _key$5, v: 6 }, _key$5 = \"CONSTRUCTION\", _map$5[_key$5] = { k: _key$5, v: 7 }, _key$5 = \"GRASS_LIGHT\", _map$5[_key$5] = { k: _key$5, v: 8 }, _key$5 = \"GRASS_DARK\", _map$5[_key$5] = { k: _key$5, v: 9 }, _key$5 = \"GRASS_DRY\", _map$5[_key$5] = { k: _key$5, v: 10 }, _key$5 = \"GRASS_DEAD\", _map$5[_key$5] = { k: _key$5, v: 11 }, _key$5 = \"PLANT\", _map$5[_key$5] = { k: _key$5, v: 12 }, _key$5 = \"HFS\", _map$5[_key$5] = { k: _key$5, v: 13 }, _key$5 = \"CAMPFIRE\", _map$5[_key$5] = { k: _key$5, v: 14 }, _key$5 = \"FIRE\", _map$5[_key$5] = { k: _key$5, v: 15 }, _key$5 = \"ASHES\", _map$5[_key$5] = { k: _key$5, v: 16 }, _key$5 = \"MAGMA\", _map$5[_key$5] = { k: _key$5, v: 17 }, _key$5 = \"DRIFTWOOD\", _map$5[_key$5] = { k: _key$5, v: 18 }, _key$5 = \"POOL\", _map$5[_key$5] = { k: _key$5, v: 19 }, _key$5 = \"BROOK\", _map$5[_key$5] = { k: _key$5, v: 20 }, _key$5 = \"RIVER\", _map$5[_key$5] = { k: _key$5, v: 21 }, _key$5 = \"ROOT\", _map$5[_key$5] = { k: _key$5, v: 22 }, _key$5 = \"TREE_MATERIAL\", _map$5[_key$5] = { k: _key$5, v: 23 }, _key$5 = \"MUSHROOM\", _map$5[_key$5] = { k: _key$5, v: 24 }, _key$5 = \"UNDERWORLD_GATE\", _map$5[_key$5] = { k: _key$5, v: 25 }, _map$5);\n\t\t$pkg.TiletypeVariant_name = (_map$6 = new $Map(), _key$6 = -1, _map$6[_key$6] = { k: _key$6, v: \"NO_VARIANT\" }, _key$6 = 0, _map$6[_key$6] = { k: _key$6, v: \"VAR_1\" }, _key$6 = 1, _map$6[_key$6] = { k: _key$6, v: \"VAR_2\" }, _key$6 = 2, _map$6[_key$6] = { k: _key$6, v: \"VAR_3\" }, _key$6 = 3, _map$6[_key$6] = { k: _key$6, v: \"VAR_4\" }, _map$6);\n\t\t$pkg.TiletypeVariant_value = (_map$7 = new $Map(), _key$7 = \"NO_VARIANT\", _map$7[_key$7] = { k: _key$7, v: -1 }, _key$7 = \"VAR_1\", _map$7[_key$7] = { k: _key$7, v: 0 }, _key$7 = \"VAR_2\", _map$7[_key$7] = { k: _key$7, v: 1 }, _key$7 = \"VAR_3\", _map$7[_key$7] = { k: _key$7, v: 2 }, _key$7 = \"VAR_4\", _map$7[_key$7] = { k: _key$7, v: 3 }, _map$7);\n\t\tinit();\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"github.com/BenLubar/arm_ok/dfhack/dfproto\"] = (function() {\n\tvar $pkg = {}, $init, proto, math, BasicMaterialInfoMask_StateType, EnumItemName, BasicMaterialId, BasicMaterialInfo, BasicMaterialInfo_Product, BasicMaterialInfoMask, JobSkillAttr, ProfessionAttr, UnitLaborAttr, NameInfo, NameTriple, UnitCurseInfo, SkillInfo, UnitMiscTrait, BasicUnitInfo, BasicUnitInfoMask, BasicSquadInfo, UnitLaborState, GetWorldInfoOut_Mode, GetWorldInfoOut, ListEnumsOut, ListJobSkillsOut, ListMaterialsIn, ListMaterialsOut, ListUnitsIn, ListUnitsOut, ListSquadsIn, ListSquadsOut, SetUnitLaborsIn, CoreTextFragment_Color, CoreTextFragment, CoreTextNotification, EmptyMessage, IntMessage, StringMessage, StringListMessage, CoreBindRequest, CoreBindReply, CoreRunCommandRequest, CoreRunLuaRequest, ptrType, ptrType$1, ptrType$2, sliceType, ptrType$3, ptrType$4, sliceType$1, sliceType$2, sliceType$3, ptrType$5, sliceType$4, ptrType$6, sliceType$5, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, ptrType$17, sliceType$6, sliceType$7, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, ptrType$23, sliceType$8, ptrType$24, sliceType$9, sliceType$10, sliceType$11, ptrType$25, sliceType$12, ptrType$26, sliceType$13, ptrType$27, ptrType$28, sliceType$14, ptrType$29, sliceType$15, ptrType$30, sliceType$16, ptrType$31, ptrType$32, ptrType$34, sliceType$17, ptrType$35, ptrType$37, ptrType$39, ptrType$40, ptrType$41, ptrType$42, ptrType$43, ptrType$44, ptrType$45, ptrType$46, _map, _key, _map$1, _key$1, _map$2, _key$2, _map$3, _key$3, _map$4, _key$4, _map$5, _key$5, _map$6, _key$6, _map$7, _key$7, init, init$1, init$2;\n\tproto = $packages[\"github.com/golang/protobuf/proto\"];\n\tmath = $packages[\"math\"];\n\tBasicMaterialInfoMask_StateType = $pkg.BasicMaterialInfoMask_StateType = $newType(4, $kindInt32, \"dfproto.BasicMaterialInfoMask_StateType\", \"BasicMaterialInfoMask_StateType\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", null);\n\tEnumItemName = $pkg.EnumItemName = $newType(0, $kindStruct, \"dfproto.EnumItemName\", \"EnumItemName\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Value_, Name_, BitSize_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Value = ptrType$1.nil;\n\t\t\tthis.Name = ptrType$2.nil;\n\t\t\tthis.BitSize = ptrType$1.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Value = Value_;\n\t\tthis.Name = Name_;\n\t\tthis.BitSize = BitSize_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tBasicMaterialId = $pkg.BasicMaterialId = $newType(0, $kindStruct, \"dfproto.BasicMaterialId\", \"BasicMaterialId\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Type_, Index_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Type = ptrType$1.nil;\n\t\t\tthis.Index = ptrType$1.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Type = Type_;\n\t\tthis.Index = Index_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tBasicMaterialInfo = $pkg.BasicMaterialInfo = $newType(0, $kindStruct, \"dfproto.BasicMaterialInfo\", \"BasicMaterialInfo\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Type_, Index_, Token_, Flags_, Subtype_, CreatureId_, PlantId_, HistfigId_, NamePrefix_, StateColor_, StateName_, StateAdj_, ReactionClass_, ReactionProduct_, InorganicFlags_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Type = ptrType$1.nil;\n\t\t\tthis.Index = ptrType$1.nil;\n\t\t\tthis.Token = ptrType$2.nil;\n\t\t\tthis.Flags = sliceType$1.nil;\n\t\t\tthis.Subtype = ptrType$1.nil;\n\t\t\tthis.CreatureId = ptrType$1.nil;\n\t\t\tthis.PlantId = ptrType$1.nil;\n\t\t\tthis.HistfigId = ptrType$1.nil;\n\t\t\tthis.NamePrefix = ptrType$2.nil;\n\t\t\tthis.StateColor = sliceType$2.nil;\n\t\t\tthis.StateName = sliceType$3.nil;\n\t\t\tthis.StateAdj = sliceType$3.nil;\n\t\t\tthis.ReactionClass = sliceType$3.nil;\n\t\t\tthis.ReactionProduct = sliceType$4.nil;\n\t\t\tthis.InorganicFlags = sliceType$1.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Type = Type_;\n\t\tthis.Index = Index_;\n\t\tthis.Token = Token_;\n\t\tthis.Flags = Flags_;\n\t\tthis.Subtype = Subtype_;\n\t\tthis.CreatureId = CreatureId_;\n\t\tthis.PlantId = PlantId_;\n\t\tthis.HistfigId = HistfigId_;\n\t\tthis.NamePrefix = NamePrefix_;\n\t\tthis.StateColor = StateColor_;\n\t\tthis.StateName = StateName_;\n\t\tthis.StateAdj = StateAdj_;\n\t\tthis.ReactionClass = ReactionClass_;\n\t\tthis.ReactionProduct = ReactionProduct_;\n\t\tthis.InorganicFlags = InorganicFlags_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tBasicMaterialInfo_Product = $pkg.BasicMaterialInfo_Product = $newType(0, $kindStruct, \"dfproto.BasicMaterialInfo_Product\", \"BasicMaterialInfo_Product\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Id_, Type_, Index_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Id = ptrType$2.nil;\n\t\t\tthis.Type = ptrType$1.nil;\n\t\t\tthis.Index = ptrType$1.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Id = Id_;\n\t\tthis.Type = Type_;\n\t\tthis.Index = Index_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tBasicMaterialInfoMask = $pkg.BasicMaterialInfoMask = $newType(0, $kindStruct, \"dfproto.BasicMaterialInfoMask\", \"BasicMaterialInfoMask\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(States_, Temperature_, Flags_, Reaction_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.States = sliceType$5.nil;\n\t\t\tthis.Temperature = ptrType$1.nil;\n\t\t\tthis.Flags = ptrType$7.nil;\n\t\t\tthis.Reaction = ptrType$7.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.States = States_;\n\t\tthis.Temperature = Temperature_;\n\t\tthis.Flags = Flags_;\n\t\tthis.Reaction = Reaction_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tJobSkillAttr = $pkg.JobSkillAttr = $newType(0, $kindStruct, \"dfproto.JobSkillAttr\", \"JobSkillAttr\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Id_, Key_, Caption_, CaptionNoun_, Profession_, Labor_, Type_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Id = ptrType$1.nil;\n\t\t\tthis.Key = ptrType$2.nil;\n\t\t\tthis.Caption = ptrType$2.nil;\n\t\t\tthis.CaptionNoun = ptrType$2.nil;\n\t\t\tthis.Profession = ptrType$1.nil;\n\t\t\tthis.Labor = ptrType$1.nil;\n\t\t\tthis.Type = ptrType$2.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Id = Id_;\n\t\tthis.Key = Key_;\n\t\tthis.Caption = Caption_;\n\t\tthis.CaptionNoun = CaptionNoun_;\n\t\tthis.Profession = Profession_;\n\t\tthis.Labor = Labor_;\n\t\tthis.Type = Type_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tProfessionAttr = $pkg.ProfessionAttr = $newType(0, $kindStruct, \"dfproto.ProfessionAttr\", \"ProfessionAttr\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Id_, Key_, Caption_, Military_, CanAssignLabor_, Parent_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Id = ptrType$1.nil;\n\t\t\tthis.Key = ptrType$2.nil;\n\t\t\tthis.Caption = ptrType$2.nil;\n\t\t\tthis.Military = ptrType$7.nil;\n\t\t\tthis.CanAssignLabor = ptrType$7.nil;\n\t\t\tthis.Parent = ptrType$1.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Id = Id_;\n\t\tthis.Key = Key_;\n\t\tthis.Caption = Caption_;\n\t\tthis.Military = Military_;\n\t\tthis.CanAssignLabor = CanAssignLabor_;\n\t\tthis.Parent = Parent_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tUnitLaborAttr = $pkg.UnitLaborAttr = $newType(0, $kindStruct, \"dfproto.UnitLaborAttr\", \"UnitLaborAttr\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Id_, Key_, Caption_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Id = ptrType$1.nil;\n\t\t\tthis.Key = ptrType$2.nil;\n\t\t\tthis.Caption = ptrType$2.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Id = Id_;\n\t\tthis.Key = Key_;\n\t\tthis.Caption = Caption_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tNameInfo = $pkg.NameInfo = $newType(0, $kindStruct, \"dfproto.NameInfo\", \"NameInfo\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(FirstName_, Nickname_, LanguageId_, LastName_, EnglishName_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.FirstName = ptrType$2.nil;\n\t\t\tthis.Nickname = ptrType$2.nil;\n\t\t\tthis.LanguageId = ptrType$1.nil;\n\t\t\tthis.LastName = ptrType$2.nil;\n\t\t\tthis.EnglishName = ptrType$2.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.FirstName = FirstName_;\n\t\tthis.Nickname = Nickname_;\n\t\tthis.LanguageId = LanguageId_;\n\t\tthis.LastName = LastName_;\n\t\tthis.EnglishName = EnglishName_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tNameTriple = $pkg.NameTriple = $newType(0, $kindStruct, \"dfproto.NameTriple\", \"NameTriple\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Normal_, Plural_, Adjective_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Normal = ptrType$2.nil;\n\t\t\tthis.Plural = ptrType$2.nil;\n\t\t\tthis.Adjective = ptrType$2.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Normal = Normal_;\n\t\tthis.Plural = Plural_;\n\t\tthis.Adjective = Adjective_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tUnitCurseInfo = $pkg.UnitCurseInfo = $newType(0, $kindStruct, \"dfproto.UnitCurseInfo\", \"UnitCurseInfo\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(AddTags1_, RemTags1_, AddTags2_, RemTags2_, Name_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.AddTags1 = ptrType$14.nil;\n\t\t\tthis.RemTags1 = ptrType$14.nil;\n\t\t\tthis.AddTags2 = ptrType$14.nil;\n\t\t\tthis.RemTags2 = ptrType$14.nil;\n\t\t\tthis.Name = ptrType$13.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.AddTags1 = AddTags1_;\n\t\tthis.RemTags1 = RemTags1_;\n\t\tthis.AddTags2 = AddTags2_;\n\t\tthis.RemTags2 = RemTags2_;\n\t\tthis.Name = Name_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tSkillInfo = $pkg.SkillInfo = $newType(0, $kindStruct, \"dfproto.SkillInfo\", \"SkillInfo\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Id_, Level_, Experience_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Id = ptrType$1.nil;\n\t\t\tthis.Level = ptrType$1.nil;\n\t\t\tthis.Experience = ptrType$1.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Id = Id_;\n\t\tthis.Level = Level_;\n\t\tthis.Experience = Experience_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tUnitMiscTrait = $pkg.UnitMiscTrait = $newType(0, $kindStruct, \"dfproto.UnitMiscTrait\", \"UnitMiscTrait\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Id_, Value_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Id = ptrType$1.nil;\n\t\t\tthis.Value = ptrType$1.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Id = Id_;\n\t\tthis.Value = Value_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tBasicUnitInfo = $pkg.BasicUnitInfo = $newType(0, $kindStruct, \"dfproto.BasicUnitInfo\", \"BasicUnitInfo\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(UnitId_, PosX_, PosY_, PosZ_, Name_, Flags1_, Flags2_, Flags3_, Race_, Caste_, Gender_, CivId_, HistfigId_, DeathId_, DeathFlags_, SquadId_, SquadPosition_, Profession_, CustomProfession_, Labors_, Skills_, MiscTraits_, Curse_, Burrows_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.UnitId = ptrType$1.nil;\n\t\t\tthis.PosX = ptrType$1.nil;\n\t\t\tthis.PosY = ptrType$1.nil;\n\t\t\tthis.PosZ = ptrType$1.nil;\n\t\t\tthis.Name = ptrType$12.nil;\n\t\t\tthis.Flags1 = ptrType$14.nil;\n\t\t\tthis.Flags2 = ptrType$14.nil;\n\t\t\tthis.Flags3 = ptrType$14.nil;\n\t\t\tthis.Race = ptrType$1.nil;\n\t\t\tthis.Caste = ptrType$1.nil;\n\t\t\tthis.Gender = ptrType$1.nil;\n\t\t\tthis.CivId = ptrType$1.nil;\n\t\t\tthis.HistfigId = ptrType$1.nil;\n\t\t\tthis.DeathId = ptrType$1.nil;\n\t\t\tthis.DeathFlags = ptrType$14.nil;\n\t\t\tthis.SquadId = ptrType$1.nil;\n\t\t\tthis.SquadPosition = ptrType$1.nil;\n\t\t\tthis.Profession = ptrType$1.nil;\n\t\t\tthis.CustomProfession = ptrType$2.nil;\n\t\t\tthis.Labors = sliceType$1.nil;\n\t\t\tthis.Skills = sliceType$6.nil;\n\t\t\tthis.MiscTraits = sliceType$7.nil;\n\t\t\tthis.Curse = ptrType$15.nil;\n\t\t\tthis.Burrows = sliceType$1.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.UnitId = UnitId_;\n\t\tthis.PosX = PosX_;\n\t\tthis.PosY = PosY_;\n\t\tthis.PosZ = PosZ_;\n\t\tthis.Name = Name_;\n\t\tthis.Flags1 = Flags1_;\n\t\tthis.Flags2 = Flags2_;\n\t\tthis.Flags3 = Flags3_;\n\t\tthis.Race = Race_;\n\t\tthis.Caste = Caste_;\n\t\tthis.Gender = Gender_;\n\t\tthis.CivId = CivId_;\n\t\tthis.HistfigId = HistfigId_;\n\t\tthis.DeathId = DeathId_;\n\t\tthis.DeathFlags = DeathFlags_;\n\t\tthis.SquadId = SquadId_;\n\t\tthis.SquadPosition = SquadPosition_;\n\t\tthis.Profession = Profession_;\n\t\tthis.CustomProfession = CustomProfession_;\n\t\tthis.Labors = Labors_;\n\t\tthis.Skills = Skills_;\n\t\tthis.MiscTraits = MiscTraits_;\n\t\tthis.Curse = Curse_;\n\t\tthis.Burrows = Burrows_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tBasicUnitInfoMask = $pkg.BasicUnitInfoMask = $newType(0, $kindStruct, \"dfproto.BasicUnitInfoMask\", \"BasicUnitInfoMask\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Labors_, Skills_, Profession_, MiscTraits_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Labors = ptrType$7.nil;\n\t\t\tthis.Skills = ptrType$7.nil;\n\t\t\tthis.Profession = ptrType$7.nil;\n\t\t\tthis.MiscTraits = ptrType$7.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Labors = Labors_;\n\t\tthis.Skills = Skills_;\n\t\tthis.Profession = Profession_;\n\t\tthis.MiscTraits = MiscTraits_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tBasicSquadInfo = $pkg.BasicSquadInfo = $newType(0, $kindStruct, \"dfproto.BasicSquadInfo\", \"BasicSquadInfo\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(SquadId_, Name_, Alias_, Members_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.SquadId = ptrType$1.nil;\n\t\t\tthis.Name = ptrType$12.nil;\n\t\t\tthis.Alias = ptrType$2.nil;\n\t\t\tthis.Members = sliceType$1.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.SquadId = SquadId_;\n\t\tthis.Name = Name_;\n\t\tthis.Alias = Alias_;\n\t\tthis.Members = Members_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tUnitLaborState = $pkg.UnitLaborState = $newType(0, $kindStruct, \"dfproto.UnitLaborState\", \"UnitLaborState\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(UnitId_, Labor_, Value_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.UnitId = ptrType$1.nil;\n\t\t\tthis.Labor = ptrType$1.nil;\n\t\t\tthis.Value = ptrType$7.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.UnitId = UnitId_;\n\t\tthis.Labor = Labor_;\n\t\tthis.Value = Value_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tGetWorldInfoOut_Mode = $pkg.GetWorldInfoOut_Mode = $newType(4, $kindInt32, \"dfproto.GetWorldInfoOut_Mode\", \"GetWorldInfoOut_Mode\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", null);\n\tGetWorldInfoOut = $pkg.GetWorldInfoOut = $newType(0, $kindStruct, \"dfproto.GetWorldInfoOut\", \"GetWorldInfoOut\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Mode_, SaveDir_, WorldName_, CivId_, SiteId_, GroupId_, RaceId_, PlayerUnitId_, PlayerHistfigId_, CompanionHistfigIds_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Mode = ptrType$22.nil;\n\t\t\tthis.SaveDir = ptrType$2.nil;\n\t\t\tthis.WorldName = ptrType$12.nil;\n\t\t\tthis.CivId = ptrType$1.nil;\n\t\t\tthis.SiteId = ptrType$1.nil;\n\t\t\tthis.GroupId = ptrType$1.nil;\n\t\t\tthis.RaceId = ptrType$1.nil;\n\t\t\tthis.PlayerUnitId = ptrType$1.nil;\n\t\t\tthis.PlayerHistfigId = ptrType$1.nil;\n\t\t\tthis.CompanionHistfigIds = sliceType$1.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Mode = Mode_;\n\t\tthis.SaveDir = SaveDir_;\n\t\tthis.WorldName = WorldName_;\n\t\tthis.CivId = CivId_;\n\t\tthis.SiteId = SiteId_;\n\t\tthis.GroupId = GroupId_;\n\t\tthis.RaceId = RaceId_;\n\t\tthis.PlayerUnitId = PlayerUnitId_;\n\t\tthis.PlayerHistfigId = PlayerHistfigId_;\n\t\tthis.CompanionHistfigIds = CompanionHistfigIds_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tListEnumsOut = $pkg.ListEnumsOut = $newType(0, $kindStruct, \"dfproto.ListEnumsOut\", \"ListEnumsOut\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(MaterialFlags_, InorganicFlags_, UnitFlags1_, UnitFlags2_, UnitFlags3_, UnitLabor_, JobSkill_, CieAddTagMask1_, CieAddTagMask2_, DeathInfoFlags_, Profession_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.MaterialFlags = sliceType$8.nil;\n\t\t\tthis.InorganicFlags = sliceType$8.nil;\n\t\t\tthis.UnitFlags1 = sliceType$8.nil;\n\t\t\tthis.UnitFlags2 = sliceType$8.nil;\n\t\t\tthis.UnitFlags3 = sliceType$8.nil;\n\t\t\tthis.UnitLabor = sliceType$8.nil;\n\t\t\tthis.JobSkill = sliceType$8.nil;\n\t\t\tthis.CieAddTagMask1 = sliceType$8.nil;\n\t\t\tthis.CieAddTagMask2 = sliceType$8.nil;\n\t\t\tthis.DeathInfoFlags = sliceType$8.nil;\n\t\t\tthis.Profession = sliceType$8.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.MaterialFlags = MaterialFlags_;\n\t\tthis.InorganicFlags = InorganicFlags_;\n\t\tthis.UnitFlags1 = UnitFlags1_;\n\t\tthis.UnitFlags2 = UnitFlags2_;\n\t\tthis.UnitFlags3 = UnitFlags3_;\n\t\tthis.UnitLabor = UnitLabor_;\n\t\tthis.JobSkill = JobSkill_;\n\t\tthis.CieAddTagMask1 = CieAddTagMask1_;\n\t\tthis.CieAddTagMask2 = CieAddTagMask2_;\n\t\tthis.DeathInfoFlags = DeathInfoFlags_;\n\t\tthis.Profession = Profession_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tListJobSkillsOut = $pkg.ListJobSkillsOut = $newType(0, $kindStruct, \"dfproto.ListJobSkillsOut\", \"ListJobSkillsOut\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Skill_, Profession_, Labor_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Skill = sliceType$9.nil;\n\t\t\tthis.Profession = sliceType$10.nil;\n\t\t\tthis.Labor = sliceType$11.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Skill = Skill_;\n\t\tthis.Profession = Profession_;\n\t\tthis.Labor = Labor_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tListMaterialsIn = $pkg.ListMaterialsIn = $newType(0, $kindStruct, \"dfproto.ListMaterialsIn\", \"ListMaterialsIn\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Mask_, IdList_, Builtin_, Inorganic_, Creatures_, Plants_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Mask = ptrType$8.nil;\n\t\t\tthis.IdList = sliceType$12.nil;\n\t\t\tthis.Builtin = ptrType$7.nil;\n\t\t\tthis.Inorganic = ptrType$7.nil;\n\t\t\tthis.Creatures = ptrType$7.nil;\n\t\t\tthis.Plants = ptrType$7.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Mask = Mask_;\n\t\tthis.IdList = IdList_;\n\t\tthis.Builtin = Builtin_;\n\t\tthis.Inorganic = Inorganic_;\n\t\tthis.Creatures = Creatures_;\n\t\tthis.Plants = Plants_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tListMaterialsOut = $pkg.ListMaterialsOut = $newType(0, $kindStruct, \"dfproto.ListMaterialsOut\", \"ListMaterialsOut\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Value_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Value = sliceType$13.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Value = Value_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tListUnitsIn = $pkg.ListUnitsIn = $newType(0, $kindStruct, \"dfproto.ListUnitsIn\", \"ListUnitsIn\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Mask_, IdList_, ScanAll_, Race_, CivId_, Dead_, Alive_, Sane_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Mask = ptrType$19.nil;\n\t\t\tthis.IdList = sliceType$1.nil;\n\t\t\tthis.ScanAll = ptrType$7.nil;\n\t\t\tthis.Race = ptrType$1.nil;\n\t\t\tthis.CivId = ptrType$1.nil;\n\t\t\tthis.Dead = ptrType$7.nil;\n\t\t\tthis.Alive = ptrType$7.nil;\n\t\t\tthis.Sane = ptrType$7.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Mask = Mask_;\n\t\tthis.IdList = IdList_;\n\t\tthis.ScanAll = ScanAll_;\n\t\tthis.Race = Race_;\n\t\tthis.CivId = CivId_;\n\t\tthis.Dead = Dead_;\n\t\tthis.Alive = Alive_;\n\t\tthis.Sane = Sane_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tListUnitsOut = $pkg.ListUnitsOut = $newType(0, $kindStruct, \"dfproto.ListUnitsOut\", \"ListUnitsOut\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Value_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Value = sliceType$14.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Value = Value_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tListSquadsIn = $pkg.ListSquadsIn = $newType(0, $kindStruct, \"dfproto.ListSquadsIn\", \"ListSquadsIn\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tListSquadsOut = $pkg.ListSquadsOut = $newType(0, $kindStruct, \"dfproto.ListSquadsOut\", \"ListSquadsOut\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Value_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Value = sliceType$15.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Value = Value_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tSetUnitLaborsIn = $pkg.SetUnitLaborsIn = $newType(0, $kindStruct, \"dfproto.SetUnitLaborsIn\", \"SetUnitLaborsIn\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Change_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Change = sliceType$16.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Change = Change_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tCoreTextFragment_Color = $pkg.CoreTextFragment_Color = $newType(4, $kindInt32, \"dfproto.CoreTextFragment_Color\", \"CoreTextFragment_Color\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", null);\n\tCoreTextFragment = $pkg.CoreTextFragment = $newType(0, $kindStruct, \"dfproto.CoreTextFragment\", \"CoreTextFragment\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Text_, Color_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Text = ptrType$2.nil;\n\t\t\tthis.Color = ptrType$32.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Text = Text_;\n\t\tthis.Color = Color_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tCoreTextNotification = $pkg.CoreTextNotification = $newType(0, $kindStruct, \"dfproto.CoreTextNotification\", \"CoreTextNotification\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Fragments_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Fragments = sliceType$17.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Fragments = Fragments_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tEmptyMessage = $pkg.EmptyMessage = $newType(0, $kindStruct, \"dfproto.EmptyMessage\", \"EmptyMessage\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tIntMessage = $pkg.IntMessage = $newType(0, $kindStruct, \"dfproto.IntMessage\", \"IntMessage\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Value_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Value = ptrType$1.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Value = Value_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tStringMessage = $pkg.StringMessage = $newType(0, $kindStruct, \"dfproto.StringMessage\", \"StringMessage\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Value_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Value = ptrType$2.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Value = Value_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tStringListMessage = $pkg.StringListMessage = $newType(0, $kindStruct, \"dfproto.StringListMessage\", \"StringListMessage\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Value_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Value = sliceType$3.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Value = Value_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tCoreBindRequest = $pkg.CoreBindRequest = $newType(0, $kindStruct, \"dfproto.CoreBindRequest\", \"CoreBindRequest\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Method_, InputMsg_, OutputMsg_, Plugin_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Method = ptrType$2.nil;\n\t\t\tthis.InputMsg = ptrType$2.nil;\n\t\t\tthis.OutputMsg = ptrType$2.nil;\n\t\t\tthis.Plugin = ptrType$2.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Method = Method_;\n\t\tthis.InputMsg = InputMsg_;\n\t\tthis.OutputMsg = OutputMsg_;\n\t\tthis.Plugin = Plugin_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tCoreBindReply = $pkg.CoreBindReply = $newType(0, $kindStruct, \"dfproto.CoreBindReply\", \"CoreBindReply\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(AssignedId_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.AssignedId = ptrType$1.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.AssignedId = AssignedId_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tCoreRunCommandRequest = $pkg.CoreRunCommandRequest = $newType(0, $kindStruct, \"dfproto.CoreRunCommandRequest\", \"CoreRunCommandRequest\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Command_, Arguments_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Command = ptrType$2.nil;\n\t\t\tthis.Arguments = sliceType$3.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Command = Command_;\n\t\tthis.Arguments = Arguments_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tCoreRunLuaRequest = $pkg.CoreRunLuaRequest = $newType(0, $kindStruct, \"dfproto.CoreRunLuaRequest\", \"CoreRunLuaRequest\", \"github.com/BenLubar/arm_ok/dfhack/dfproto\", function(Module_, Function_, Arguments_, XXX_unrecognized_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Module = ptrType$2.nil;\n\t\t\tthis.Function = ptrType$2.nil;\n\t\t\tthis.Arguments = sliceType$3.nil;\n\t\t\tthis.XXX_unrecognized = sliceType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Module = Module_;\n\t\tthis.Function = Function_;\n\t\tthis.Arguments = Arguments_;\n\t\tthis.XXX_unrecognized = XXX_unrecognized_;\n\t});\n\tptrType = $ptrType(BasicMaterialInfoMask_StateType);\n\tptrType$1 = $ptrType($Int32);\n\tptrType$2 = $ptrType($String);\n\tsliceType = $sliceType($Uint8);\n\tptrType$3 = $ptrType(EnumItemName);\n\tptrType$4 = $ptrType(BasicMaterialId);\n\tsliceType$1 = $sliceType($Int32);\n\tsliceType$2 = $sliceType($Uint32);\n\tsliceType$3 = $sliceType($String);\n\tptrType$5 = $ptrType(BasicMaterialInfo_Product);\n\tsliceType$4 = $sliceType(ptrType$5);\n\tptrType$6 = $ptrType(BasicMaterialInfo);\n\tsliceType$5 = $sliceType(BasicMaterialInfoMask_StateType);\n\tptrType$7 = $ptrType($Bool);\n\tptrType$8 = $ptrType(BasicMaterialInfoMask);\n\tptrType$9 = $ptrType(JobSkillAttr);\n\tptrType$10 = $ptrType(ProfessionAttr);\n\tptrType$11 = $ptrType(UnitLaborAttr);\n\tptrType$12 = $ptrType(NameInfo);\n\tptrType$13 = $ptrType(NameTriple);\n\tptrType$14 = $ptrType($Uint32);\n\tptrType$15 = $ptrType(UnitCurseInfo);\n\tptrType$16 = $ptrType(SkillInfo);\n\tptrType$17 = $ptrType(UnitMiscTrait);\n\tsliceType$6 = $sliceType(ptrType$16);\n\tsliceType$7 = $sliceType(ptrType$17);\n\tptrType$18 = $ptrType(BasicUnitInfo);\n\tptrType$19 = $ptrType(BasicUnitInfoMask);\n\tptrType$20 = $ptrType(BasicSquadInfo);\n\tptrType$21 = $ptrType(UnitLaborState);\n\tptrType$22 = $ptrType(GetWorldInfoOut_Mode);\n\tptrType$23 = $ptrType(GetWorldInfoOut);\n\tsliceType$8 = $sliceType(ptrType$3);\n\tptrType$24 = $ptrType(ListEnumsOut);\n\tsliceType$9 = $sliceType(ptrType$9);\n\tsliceType$10 = $sliceType(ptrType$10);\n\tsliceType$11 = $sliceType(ptrType$11);\n\tptrType$25 = $ptrType(ListJobSkillsOut);\n\tsliceType$12 = $sliceType(ptrType$4);\n\tptrType$26 = $ptrType(ListMaterialsIn);\n\tsliceType$13 = $sliceType(ptrType$6);\n\tptrType$27 = $ptrType(ListMaterialsOut);\n\tptrType$28 = $ptrType(ListUnitsIn);\n\tsliceType$14 = $sliceType(ptrType$18);\n\tptrType$29 = $ptrType(ListUnitsOut);\n\tsliceType$15 = $sliceType(ptrType$20);\n\tptrType$30 = $ptrType(ListSquadsOut);\n\tsliceType$16 = $sliceType(ptrType$21);\n\tptrType$31 = $ptrType(SetUnitLaborsIn);\n\tptrType$32 = $ptrType(CoreTextFragment_Color);\n\tptrType$34 = $ptrType(CoreTextFragment);\n\tsliceType$17 = $sliceType(ptrType$34);\n\tptrType$35 = $ptrType(CoreTextNotification);\n\tptrType$37 = $ptrType(IntMessage);\n\tptrType$39 = $ptrType(StringMessage);\n\tptrType$40 = $ptrType(StringListMessage);\n\tptrType$41 = $ptrType(CoreBindRequest);\n\tptrType$42 = $ptrType(CoreBindReply);\n\tptrType$43 = $ptrType(CoreRunCommandRequest);\n\tptrType$44 = $ptrType(CoreRunLuaRequest);\n\tptrType$45 = $ptrType(ListSquadsIn);\n\tptrType$46 = $ptrType(EmptyMessage);\n\tBasicMaterialInfoMask_StateType.prototype.Enum = function() {\n\t\tvar $ptr, p, x;\n\t\tx = this.$val;\n\t\tp = $newDataPointer(0, ptrType);\n\t\tp.$set(x);\n\t\treturn p;\n\t};\n\t$ptrType(BasicMaterialInfoMask_StateType).prototype.Enum = function() { return new BasicMaterialInfoMask_StateType(this.$get()).Enum(); };\n\tBasicMaterialInfoMask_StateType.prototype.String = function() {\n\t\tvar $ptr, x;\n\t\tx = this.$val;\n\t\treturn proto.EnumName($pkg.BasicMaterialInfoMask_StateType_name, (x >> 0));\n\t};\n\t$ptrType(BasicMaterialInfoMask_StateType).prototype.String = function() { return new BasicMaterialInfoMask_StateType(this.$get()).String(); };\n\t$ptrType(BasicMaterialInfoMask_StateType).prototype.UnmarshalJSON = function(data) {\n\t\tvar $ptr, _r, _tuple, data, err, value, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; data = $f.data; err = $f.err; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tx = this;\n\t\t_r = proto.UnmarshalJSONEnum($pkg.BasicMaterialInfoMask_StateType_value, data, \"BasicMaterialInfoMask_StateType\"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; value = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\tx.$set((value >> 0));\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $ptrType(BasicMaterialInfoMask_StateType).prototype.UnmarshalJSON }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tEnumItemName.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new EnumItemName.ptr(ptrType$1.nil, ptrType$2.nil, ptrType$1.nil, sliceType.nil), EnumItemName);\n\t};\n\tEnumItemName.prototype.Reset = function() { return this.$val.Reset(); };\n\tEnumItemName.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: EnumItemName.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tEnumItemName.prototype.String = function() { return this.$val.String(); };\n\tEnumItemName.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tEnumItemName.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tEnumItemName.ptr.prototype.GetValue = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$3.nil) && !(m.Value === ptrType$1.nil)) {\n\t\t\treturn m.Value.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tEnumItemName.prototype.GetValue = function() { return this.$val.GetValue(); };\n\tEnumItemName.ptr.prototype.GetName = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$3.nil) && !(m.Name === ptrType$2.nil)) {\n\t\t\treturn m.Name.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tEnumItemName.prototype.GetName = function() { return this.$val.GetName(); };\n\tEnumItemName.ptr.prototype.GetBitSize = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$3.nil) && !(m.BitSize === ptrType$1.nil)) {\n\t\t\treturn m.BitSize.$get();\n\t\t}\n\t\treturn 1;\n\t};\n\tEnumItemName.prototype.GetBitSize = function() { return this.$val.GetBitSize(); };\n\tBasicMaterialId.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new BasicMaterialId.ptr(ptrType$1.nil, ptrType$1.nil, sliceType.nil), BasicMaterialId);\n\t};\n\tBasicMaterialId.prototype.Reset = function() { return this.$val.Reset(); };\n\tBasicMaterialId.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BasicMaterialId.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBasicMaterialId.prototype.String = function() { return this.$val.String(); };\n\tBasicMaterialId.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tBasicMaterialId.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tBasicMaterialId.ptr.prototype.GetType = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$4.nil) && !(m.Type === ptrType$1.nil)) {\n\t\t\treturn m.Type.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBasicMaterialId.prototype.GetType = function() { return this.$val.GetType(); };\n\tBasicMaterialId.ptr.prototype.GetIndex = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$4.nil) && !(m.Index === ptrType$1.nil)) {\n\t\t\treturn m.Index.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBasicMaterialId.prototype.GetIndex = function() { return this.$val.GetIndex(); };\n\tBasicMaterialInfo.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new BasicMaterialInfo.ptr(ptrType$1.nil, ptrType$1.nil, ptrType$2.nil, sliceType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$2.nil, sliceType$2.nil, sliceType$3.nil, sliceType$3.nil, sliceType$3.nil, sliceType$4.nil, sliceType$1.nil, sliceType.nil), BasicMaterialInfo);\n\t};\n\tBasicMaterialInfo.prototype.Reset = function() { return this.$val.Reset(); };\n\tBasicMaterialInfo.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BasicMaterialInfo.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBasicMaterialInfo.prototype.String = function() { return this.$val.String(); };\n\tBasicMaterialInfo.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tBasicMaterialInfo.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tBasicMaterialInfo.ptr.prototype.GetType = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil) && !(m.Type === ptrType$1.nil)) {\n\t\t\treturn m.Type.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBasicMaterialInfo.prototype.GetType = function() { return this.$val.GetType(); };\n\tBasicMaterialInfo.ptr.prototype.GetIndex = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil) && !(m.Index === ptrType$1.nil)) {\n\t\t\treturn m.Index.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBasicMaterialInfo.prototype.GetIndex = function() { return this.$val.GetIndex(); };\n\tBasicMaterialInfo.ptr.prototype.GetToken = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil) && !(m.Token === ptrType$2.nil)) {\n\t\t\treturn m.Token.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tBasicMaterialInfo.prototype.GetToken = function() { return this.$val.GetToken(); };\n\tBasicMaterialInfo.ptr.prototype.GetFlags = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil)) {\n\t\t\treturn m.Flags;\n\t\t}\n\t\treturn sliceType$1.nil;\n\t};\n\tBasicMaterialInfo.prototype.GetFlags = function() { return this.$val.GetFlags(); };\n\tBasicMaterialInfo.ptr.prototype.GetSubtype = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil) && !(m.Subtype === ptrType$1.nil)) {\n\t\t\treturn m.Subtype.$get();\n\t\t}\n\t\treturn -1;\n\t};\n\tBasicMaterialInfo.prototype.GetSubtype = function() { return this.$val.GetSubtype(); };\n\tBasicMaterialInfo.ptr.prototype.GetCreatureId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil) && !(m.CreatureId === ptrType$1.nil)) {\n\t\t\treturn m.CreatureId.$get();\n\t\t}\n\t\treturn -1;\n\t};\n\tBasicMaterialInfo.prototype.GetCreatureId = function() { return this.$val.GetCreatureId(); };\n\tBasicMaterialInfo.ptr.prototype.GetPlantId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil) && !(m.PlantId === ptrType$1.nil)) {\n\t\t\treturn m.PlantId.$get();\n\t\t}\n\t\treturn -1;\n\t};\n\tBasicMaterialInfo.prototype.GetPlantId = function() { return this.$val.GetPlantId(); };\n\tBasicMaterialInfo.ptr.prototype.GetHistfigId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil) && !(m.HistfigId === ptrType$1.nil)) {\n\t\t\treturn m.HistfigId.$get();\n\t\t}\n\t\treturn -1;\n\t};\n\tBasicMaterialInfo.prototype.GetHistfigId = function() { return this.$val.GetHistfigId(); };\n\tBasicMaterialInfo.ptr.prototype.GetNamePrefix = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil) && !(m.NamePrefix === ptrType$2.nil)) {\n\t\t\treturn m.NamePrefix.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tBasicMaterialInfo.prototype.GetNamePrefix = function() { return this.$val.GetNamePrefix(); };\n\tBasicMaterialInfo.ptr.prototype.GetStateColor = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil)) {\n\t\t\treturn m.StateColor;\n\t\t}\n\t\treturn sliceType$2.nil;\n\t};\n\tBasicMaterialInfo.prototype.GetStateColor = function() { return this.$val.GetStateColor(); };\n\tBasicMaterialInfo.ptr.prototype.GetStateName = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil)) {\n\t\t\treturn m.StateName;\n\t\t}\n\t\treturn sliceType$3.nil;\n\t};\n\tBasicMaterialInfo.prototype.GetStateName = function() { return this.$val.GetStateName(); };\n\tBasicMaterialInfo.ptr.prototype.GetStateAdj = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil)) {\n\t\t\treturn m.StateAdj;\n\t\t}\n\t\treturn sliceType$3.nil;\n\t};\n\tBasicMaterialInfo.prototype.GetStateAdj = function() { return this.$val.GetStateAdj(); };\n\tBasicMaterialInfo.ptr.prototype.GetReactionClass = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil)) {\n\t\t\treturn m.ReactionClass;\n\t\t}\n\t\treturn sliceType$3.nil;\n\t};\n\tBasicMaterialInfo.prototype.GetReactionClass = function() { return this.$val.GetReactionClass(); };\n\tBasicMaterialInfo.ptr.prototype.GetReactionProduct = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil)) {\n\t\t\treturn m.ReactionProduct;\n\t\t}\n\t\treturn sliceType$4.nil;\n\t};\n\tBasicMaterialInfo.prototype.GetReactionProduct = function() { return this.$val.GetReactionProduct(); };\n\tBasicMaterialInfo.ptr.prototype.GetInorganicFlags = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$6.nil)) {\n\t\t\treturn m.InorganicFlags;\n\t\t}\n\t\treturn sliceType$1.nil;\n\t};\n\tBasicMaterialInfo.prototype.GetInorganicFlags = function() { return this.$val.GetInorganicFlags(); };\n\tBasicMaterialInfo_Product.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new BasicMaterialInfo_Product.ptr(ptrType$2.nil, ptrType$1.nil, ptrType$1.nil, sliceType.nil), BasicMaterialInfo_Product);\n\t};\n\tBasicMaterialInfo_Product.prototype.Reset = function() { return this.$val.Reset(); };\n\tBasicMaterialInfo_Product.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BasicMaterialInfo_Product.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBasicMaterialInfo_Product.prototype.String = function() { return this.$val.String(); };\n\tBasicMaterialInfo_Product.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tBasicMaterialInfo_Product.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tBasicMaterialInfo_Product.ptr.prototype.GetId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$5.nil) && !(m.Id === ptrType$2.nil)) {\n\t\t\treturn m.Id.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tBasicMaterialInfo_Product.prototype.GetId = function() { return this.$val.GetId(); };\n\tBasicMaterialInfo_Product.ptr.prototype.GetType = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$5.nil) && !(m.Type === ptrType$1.nil)) {\n\t\t\treturn m.Type.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBasicMaterialInfo_Product.prototype.GetType = function() { return this.$val.GetType(); };\n\tBasicMaterialInfo_Product.ptr.prototype.GetIndex = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$5.nil) && !(m.Index === ptrType$1.nil)) {\n\t\t\treturn m.Index.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBasicMaterialInfo_Product.prototype.GetIndex = function() { return this.$val.GetIndex(); };\n\tBasicMaterialInfoMask.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new BasicMaterialInfoMask.ptr(sliceType$5.nil, ptrType$1.nil, ptrType$7.nil, ptrType$7.nil, sliceType.nil), BasicMaterialInfoMask);\n\t};\n\tBasicMaterialInfoMask.prototype.Reset = function() { return this.$val.Reset(); };\n\tBasicMaterialInfoMask.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BasicMaterialInfoMask.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBasicMaterialInfoMask.prototype.String = function() { return this.$val.String(); };\n\tBasicMaterialInfoMask.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tBasicMaterialInfoMask.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tBasicMaterialInfoMask.ptr.prototype.GetStates = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$8.nil)) {\n\t\t\treturn m.States;\n\t\t}\n\t\treturn sliceType$5.nil;\n\t};\n\tBasicMaterialInfoMask.prototype.GetStates = function() { return this.$val.GetStates(); };\n\tBasicMaterialInfoMask.ptr.prototype.GetTemperature = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$8.nil) && !(m.Temperature === ptrType$1.nil)) {\n\t\t\treturn m.Temperature.$get();\n\t\t}\n\t\treturn 10015;\n\t};\n\tBasicMaterialInfoMask.prototype.GetTemperature = function() { return this.$val.GetTemperature(); };\n\tBasicMaterialInfoMask.ptr.prototype.GetFlags = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$8.nil) && !(m.Flags === ptrType$7.nil)) {\n\t\t\treturn m.Flags.$get();\n\t\t}\n\t\treturn false;\n\t};\n\tBasicMaterialInfoMask.prototype.GetFlags = function() { return this.$val.GetFlags(); };\n\tBasicMaterialInfoMask.ptr.prototype.GetReaction = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$8.nil) && !(m.Reaction === ptrType$7.nil)) {\n\t\t\treturn m.Reaction.$get();\n\t\t}\n\t\treturn false;\n\t};\n\tBasicMaterialInfoMask.prototype.GetReaction = function() { return this.$val.GetReaction(); };\n\tJobSkillAttr.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new JobSkillAttr.ptr(ptrType$1.nil, ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, ptrType$1.nil, ptrType$1.nil, ptrType$2.nil, sliceType.nil), JobSkillAttr);\n\t};\n\tJobSkillAttr.prototype.Reset = function() { return this.$val.Reset(); };\n\tJobSkillAttr.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: JobSkillAttr.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tJobSkillAttr.prototype.String = function() { return this.$val.String(); };\n\tJobSkillAttr.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tJobSkillAttr.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tJobSkillAttr.ptr.prototype.GetId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$9.nil) && !(m.Id === ptrType$1.nil)) {\n\t\t\treturn m.Id.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tJobSkillAttr.prototype.GetId = function() { return this.$val.GetId(); };\n\tJobSkillAttr.ptr.prototype.GetKey = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$9.nil) && !(m.Key === ptrType$2.nil)) {\n\t\t\treturn m.Key.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tJobSkillAttr.prototype.GetKey = function() { return this.$val.GetKey(); };\n\tJobSkillAttr.ptr.prototype.GetCaption = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$9.nil) && !(m.Caption === ptrType$2.nil)) {\n\t\t\treturn m.Caption.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tJobSkillAttr.prototype.GetCaption = function() { return this.$val.GetCaption(); };\n\tJobSkillAttr.ptr.prototype.GetCaptionNoun = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$9.nil) && !(m.CaptionNoun === ptrType$2.nil)) {\n\t\t\treturn m.CaptionNoun.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tJobSkillAttr.prototype.GetCaptionNoun = function() { return this.$val.GetCaptionNoun(); };\n\tJobSkillAttr.ptr.prototype.GetProfession = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$9.nil) && !(m.Profession === ptrType$1.nil)) {\n\t\t\treturn m.Profession.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tJobSkillAttr.prototype.GetProfession = function() { return this.$val.GetProfession(); };\n\tJobSkillAttr.ptr.prototype.GetLabor = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$9.nil) && !(m.Labor === ptrType$1.nil)) {\n\t\t\treturn m.Labor.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tJobSkillAttr.prototype.GetLabor = function() { return this.$val.GetLabor(); };\n\tJobSkillAttr.ptr.prototype.GetType = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$9.nil) && !(m.Type === ptrType$2.nil)) {\n\t\t\treturn m.Type.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tJobSkillAttr.prototype.GetType = function() { return this.$val.GetType(); };\n\tProfessionAttr.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new ProfessionAttr.ptr(ptrType$1.nil, ptrType$2.nil, ptrType$2.nil, ptrType$7.nil, ptrType$7.nil, ptrType$1.nil, sliceType.nil), ProfessionAttr);\n\t};\n\tProfessionAttr.prototype.Reset = function() { return this.$val.Reset(); };\n\tProfessionAttr.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ProfessionAttr.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tProfessionAttr.prototype.String = function() { return this.$val.String(); };\n\tProfessionAttr.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tProfessionAttr.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tProfessionAttr.ptr.prototype.GetId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$10.nil) && !(m.Id === ptrType$1.nil)) {\n\t\t\treturn m.Id.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tProfessionAttr.prototype.GetId = function() { return this.$val.GetId(); };\n\tProfessionAttr.ptr.prototype.GetKey = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$10.nil) && !(m.Key === ptrType$2.nil)) {\n\t\t\treturn m.Key.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tProfessionAttr.prototype.GetKey = function() { return this.$val.GetKey(); };\n\tProfessionAttr.ptr.prototype.GetCaption = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$10.nil) && !(m.Caption === ptrType$2.nil)) {\n\t\t\treturn m.Caption.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tProfessionAttr.prototype.GetCaption = function() { return this.$val.GetCaption(); };\n\tProfessionAttr.ptr.prototype.GetMilitary = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$10.nil) && !(m.Military === ptrType$7.nil)) {\n\t\t\treturn m.Military.$get();\n\t\t}\n\t\treturn false;\n\t};\n\tProfessionAttr.prototype.GetMilitary = function() { return this.$val.GetMilitary(); };\n\tProfessionAttr.ptr.prototype.GetCanAssignLabor = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$10.nil) && !(m.CanAssignLabor === ptrType$7.nil)) {\n\t\t\treturn m.CanAssignLabor.$get();\n\t\t}\n\t\treturn false;\n\t};\n\tProfessionAttr.prototype.GetCanAssignLabor = function() { return this.$val.GetCanAssignLabor(); };\n\tProfessionAttr.ptr.prototype.GetParent = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$10.nil) && !(m.Parent === ptrType$1.nil)) {\n\t\t\treturn m.Parent.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tProfessionAttr.prototype.GetParent = function() { return this.$val.GetParent(); };\n\tUnitLaborAttr.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new UnitLaborAttr.ptr(ptrType$1.nil, ptrType$2.nil, ptrType$2.nil, sliceType.nil), UnitLaborAttr);\n\t};\n\tUnitLaborAttr.prototype.Reset = function() { return this.$val.Reset(); };\n\tUnitLaborAttr.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: UnitLaborAttr.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tUnitLaborAttr.prototype.String = function() { return this.$val.String(); };\n\tUnitLaborAttr.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tUnitLaborAttr.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tUnitLaborAttr.ptr.prototype.GetId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$11.nil) && !(m.Id === ptrType$1.nil)) {\n\t\t\treturn m.Id.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tUnitLaborAttr.prototype.GetId = function() { return this.$val.GetId(); };\n\tUnitLaborAttr.ptr.prototype.GetKey = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$11.nil) && !(m.Key === ptrType$2.nil)) {\n\t\t\treturn m.Key.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tUnitLaborAttr.prototype.GetKey = function() { return this.$val.GetKey(); };\n\tUnitLaborAttr.ptr.prototype.GetCaption = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$11.nil) && !(m.Caption === ptrType$2.nil)) {\n\t\t\treturn m.Caption.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tUnitLaborAttr.prototype.GetCaption = function() { return this.$val.GetCaption(); };\n\tNameInfo.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new NameInfo.ptr(ptrType$2.nil, ptrType$2.nil, ptrType$1.nil, ptrType$2.nil, ptrType$2.nil, sliceType.nil), NameInfo);\n\t};\n\tNameInfo.prototype.Reset = function() { return this.$val.Reset(); };\n\tNameInfo.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NameInfo.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tNameInfo.prototype.String = function() { return this.$val.String(); };\n\tNameInfo.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tNameInfo.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tNameInfo.ptr.prototype.GetFirstName = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$12.nil) && !(m.FirstName === ptrType$2.nil)) {\n\t\t\treturn m.FirstName.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tNameInfo.prototype.GetFirstName = function() { return this.$val.GetFirstName(); };\n\tNameInfo.ptr.prototype.GetNickname = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$12.nil) && !(m.Nickname === ptrType$2.nil)) {\n\t\t\treturn m.Nickname.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tNameInfo.prototype.GetNickname = function() { return this.$val.GetNickname(); };\n\tNameInfo.ptr.prototype.GetLanguageId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$12.nil) && !(m.LanguageId === ptrType$1.nil)) {\n\t\t\treturn m.LanguageId.$get();\n\t\t}\n\t\treturn -1;\n\t};\n\tNameInfo.prototype.GetLanguageId = function() { return this.$val.GetLanguageId(); };\n\tNameInfo.ptr.prototype.GetLastName = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$12.nil) && !(m.LastName === ptrType$2.nil)) {\n\t\t\treturn m.LastName.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tNameInfo.prototype.GetLastName = function() { return this.$val.GetLastName(); };\n\tNameInfo.ptr.prototype.GetEnglishName = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$12.nil) && !(m.EnglishName === ptrType$2.nil)) {\n\t\t\treturn m.EnglishName.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tNameInfo.prototype.GetEnglishName = function() { return this.$val.GetEnglishName(); };\n\tNameTriple.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new NameTriple.ptr(ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, sliceType.nil), NameTriple);\n\t};\n\tNameTriple.prototype.Reset = function() { return this.$val.Reset(); };\n\tNameTriple.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NameTriple.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tNameTriple.prototype.String = function() { return this.$val.String(); };\n\tNameTriple.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tNameTriple.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tNameTriple.ptr.prototype.GetNormal = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$13.nil) && !(m.Normal === ptrType$2.nil)) {\n\t\t\treturn m.Normal.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tNameTriple.prototype.GetNormal = function() { return this.$val.GetNormal(); };\n\tNameTriple.ptr.prototype.GetPlural = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$13.nil) && !(m.Plural === ptrType$2.nil)) {\n\t\t\treturn m.Plural.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tNameTriple.prototype.GetPlural = function() { return this.$val.GetPlural(); };\n\tNameTriple.ptr.prototype.GetAdjective = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$13.nil) && !(m.Adjective === ptrType$2.nil)) {\n\t\t\treturn m.Adjective.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tNameTriple.prototype.GetAdjective = function() { return this.$val.GetAdjective(); };\n\tUnitCurseInfo.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new UnitCurseInfo.ptr(ptrType$14.nil, ptrType$14.nil, ptrType$14.nil, ptrType$14.nil, ptrType$13.nil, sliceType.nil), UnitCurseInfo);\n\t};\n\tUnitCurseInfo.prototype.Reset = function() { return this.$val.Reset(); };\n\tUnitCurseInfo.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: UnitCurseInfo.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tUnitCurseInfo.prototype.String = function() { return this.$val.String(); };\n\tUnitCurseInfo.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tUnitCurseInfo.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tUnitCurseInfo.ptr.prototype.GetAddTags1 = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$15.nil) && !(m.AddTags1 === ptrType$14.nil)) {\n\t\t\treturn m.AddTags1.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tUnitCurseInfo.prototype.GetAddTags1 = function() { return this.$val.GetAddTags1(); };\n\tUnitCurseInfo.ptr.prototype.GetRemTags1 = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$15.nil) && !(m.RemTags1 === ptrType$14.nil)) {\n\t\t\treturn m.RemTags1.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tUnitCurseInfo.prototype.GetRemTags1 = function() { return this.$val.GetRemTags1(); };\n\tUnitCurseInfo.ptr.prototype.GetAddTags2 = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$15.nil) && !(m.AddTags2 === ptrType$14.nil)) {\n\t\t\treturn m.AddTags2.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tUnitCurseInfo.prototype.GetAddTags2 = function() { return this.$val.GetAddTags2(); };\n\tUnitCurseInfo.ptr.prototype.GetRemTags2 = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$15.nil) && !(m.RemTags2 === ptrType$14.nil)) {\n\t\t\treturn m.RemTags2.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tUnitCurseInfo.prototype.GetRemTags2 = function() { return this.$val.GetRemTags2(); };\n\tUnitCurseInfo.ptr.prototype.GetName = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$15.nil)) {\n\t\t\treturn m.Name;\n\t\t}\n\t\treturn ptrType$13.nil;\n\t};\n\tUnitCurseInfo.prototype.GetName = function() { return this.$val.GetName(); };\n\tSkillInfo.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new SkillInfo.ptr(ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, sliceType.nil), SkillInfo);\n\t};\n\tSkillInfo.prototype.Reset = function() { return this.$val.Reset(); };\n\tSkillInfo.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: SkillInfo.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tSkillInfo.prototype.String = function() { return this.$val.String(); };\n\tSkillInfo.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tSkillInfo.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tSkillInfo.ptr.prototype.GetId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$16.nil) && !(m.Id === ptrType$1.nil)) {\n\t\t\treturn m.Id.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tSkillInfo.prototype.GetId = function() { return this.$val.GetId(); };\n\tSkillInfo.ptr.prototype.GetLevel = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$16.nil) && !(m.Level === ptrType$1.nil)) {\n\t\t\treturn m.Level.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tSkillInfo.prototype.GetLevel = function() { return this.$val.GetLevel(); };\n\tSkillInfo.ptr.prototype.GetExperience = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$16.nil) && !(m.Experience === ptrType$1.nil)) {\n\t\t\treturn m.Experience.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tSkillInfo.prototype.GetExperience = function() { return this.$val.GetExperience(); };\n\tUnitMiscTrait.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new UnitMiscTrait.ptr(ptrType$1.nil, ptrType$1.nil, sliceType.nil), UnitMiscTrait);\n\t};\n\tUnitMiscTrait.prototype.Reset = function() { return this.$val.Reset(); };\n\tUnitMiscTrait.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: UnitMiscTrait.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tUnitMiscTrait.prototype.String = function() { return this.$val.String(); };\n\tUnitMiscTrait.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tUnitMiscTrait.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tUnitMiscTrait.ptr.prototype.GetId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$17.nil) && !(m.Id === ptrType$1.nil)) {\n\t\t\treturn m.Id.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tUnitMiscTrait.prototype.GetId = function() { return this.$val.GetId(); };\n\tUnitMiscTrait.ptr.prototype.GetValue = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$17.nil) && !(m.Value === ptrType$1.nil)) {\n\t\t\treturn m.Value.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tUnitMiscTrait.prototype.GetValue = function() { return this.$val.GetValue(); };\n\tBasicUnitInfo.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new BasicUnitInfo.ptr(ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$12.nil, ptrType$14.nil, ptrType$14.nil, ptrType$14.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$14.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$2.nil, sliceType$1.nil, sliceType$6.nil, sliceType$7.nil, ptrType$15.nil, sliceType$1.nil, sliceType.nil), BasicUnitInfo);\n\t};\n\tBasicUnitInfo.prototype.Reset = function() { return this.$val.Reset(); };\n\tBasicUnitInfo.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BasicUnitInfo.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBasicUnitInfo.prototype.String = function() { return this.$val.String(); };\n\tBasicUnitInfo.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tBasicUnitInfo.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tBasicUnitInfo.ptr.prototype.GetUnitId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.UnitId === ptrType$1.nil)) {\n\t\t\treturn m.UnitId.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBasicUnitInfo.prototype.GetUnitId = function() { return this.$val.GetUnitId(); };\n\tBasicUnitInfo.ptr.prototype.GetPosX = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.PosX === ptrType$1.nil)) {\n\t\t\treturn m.PosX.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBasicUnitInfo.prototype.GetPosX = function() { return this.$val.GetPosX(); };\n\tBasicUnitInfo.ptr.prototype.GetPosY = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.PosY === ptrType$1.nil)) {\n\t\t\treturn m.PosY.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBasicUnitInfo.prototype.GetPosY = function() { return this.$val.GetPosY(); };\n\tBasicUnitInfo.ptr.prototype.GetPosZ = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.PosZ === ptrType$1.nil)) {\n\t\t\treturn m.PosZ.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBasicUnitInfo.prototype.GetPosZ = function() { return this.$val.GetPosZ(); };\n\tBasicUnitInfo.ptr.prototype.GetName = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil)) {\n\t\t\treturn m.Name;\n\t\t}\n\t\treturn ptrType$12.nil;\n\t};\n\tBasicUnitInfo.prototype.GetName = function() { return this.$val.GetName(); };\n\tBasicUnitInfo.ptr.prototype.GetFlags1 = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.Flags1 === ptrType$14.nil)) {\n\t\t\treturn m.Flags1.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBasicUnitInfo.prototype.GetFlags1 = function() { return this.$val.GetFlags1(); };\n\tBasicUnitInfo.ptr.prototype.GetFlags2 = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.Flags2 === ptrType$14.nil)) {\n\t\t\treturn m.Flags2.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBasicUnitInfo.prototype.GetFlags2 = function() { return this.$val.GetFlags2(); };\n\tBasicUnitInfo.ptr.prototype.GetFlags3 = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.Flags3 === ptrType$14.nil)) {\n\t\t\treturn m.Flags3.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBasicUnitInfo.prototype.GetFlags3 = function() { return this.$val.GetFlags3(); };\n\tBasicUnitInfo.ptr.prototype.GetRace = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.Race === ptrType$1.nil)) {\n\t\t\treturn m.Race.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBasicUnitInfo.prototype.GetRace = function() { return this.$val.GetRace(); };\n\tBasicUnitInfo.ptr.prototype.GetCaste = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.Caste === ptrType$1.nil)) {\n\t\t\treturn m.Caste.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBasicUnitInfo.prototype.GetCaste = function() { return this.$val.GetCaste(); };\n\tBasicUnitInfo.ptr.prototype.GetGender = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.Gender === ptrType$1.nil)) {\n\t\t\treturn m.Gender.$get();\n\t\t}\n\t\treturn -1;\n\t};\n\tBasicUnitInfo.prototype.GetGender = function() { return this.$val.GetGender(); };\n\tBasicUnitInfo.ptr.prototype.GetCivId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.CivId === ptrType$1.nil)) {\n\t\t\treturn m.CivId.$get();\n\t\t}\n\t\treturn -1;\n\t};\n\tBasicUnitInfo.prototype.GetCivId = function() { return this.$val.GetCivId(); };\n\tBasicUnitInfo.ptr.prototype.GetHistfigId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.HistfigId === ptrType$1.nil)) {\n\t\t\treturn m.HistfigId.$get();\n\t\t}\n\t\treturn -1;\n\t};\n\tBasicUnitInfo.prototype.GetHistfigId = function() { return this.$val.GetHistfigId(); };\n\tBasicUnitInfo.ptr.prototype.GetDeathId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.DeathId === ptrType$1.nil)) {\n\t\t\treturn m.DeathId.$get();\n\t\t}\n\t\treturn -1;\n\t};\n\tBasicUnitInfo.prototype.GetDeathId = function() { return this.$val.GetDeathId(); };\n\tBasicUnitInfo.ptr.prototype.GetDeathFlags = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.DeathFlags === ptrType$14.nil)) {\n\t\t\treturn m.DeathFlags.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBasicUnitInfo.prototype.GetDeathFlags = function() { return this.$val.GetDeathFlags(); };\n\tBasicUnitInfo.ptr.prototype.GetSquadId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.SquadId === ptrType$1.nil)) {\n\t\t\treturn m.SquadId.$get();\n\t\t}\n\t\treturn -1;\n\t};\n\tBasicUnitInfo.prototype.GetSquadId = function() { return this.$val.GetSquadId(); };\n\tBasicUnitInfo.ptr.prototype.GetSquadPosition = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.SquadPosition === ptrType$1.nil)) {\n\t\t\treturn m.SquadPosition.$get();\n\t\t}\n\t\treturn -1;\n\t};\n\tBasicUnitInfo.prototype.GetSquadPosition = function() { return this.$val.GetSquadPosition(); };\n\tBasicUnitInfo.ptr.prototype.GetProfession = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.Profession === ptrType$1.nil)) {\n\t\t\treturn m.Profession.$get();\n\t\t}\n\t\treturn -1;\n\t};\n\tBasicUnitInfo.prototype.GetProfession = function() { return this.$val.GetProfession(); };\n\tBasicUnitInfo.ptr.prototype.GetCustomProfession = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil) && !(m.CustomProfession === ptrType$2.nil)) {\n\t\t\treturn m.CustomProfession.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tBasicUnitInfo.prototype.GetCustomProfession = function() { return this.$val.GetCustomProfession(); };\n\tBasicUnitInfo.ptr.prototype.GetLabors = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil)) {\n\t\t\treturn m.Labors;\n\t\t}\n\t\treturn sliceType$1.nil;\n\t};\n\tBasicUnitInfo.prototype.GetLabors = function() { return this.$val.GetLabors(); };\n\tBasicUnitInfo.ptr.prototype.GetSkills = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil)) {\n\t\t\treturn m.Skills;\n\t\t}\n\t\treturn sliceType$6.nil;\n\t};\n\tBasicUnitInfo.prototype.GetSkills = function() { return this.$val.GetSkills(); };\n\tBasicUnitInfo.ptr.prototype.GetMiscTraits = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil)) {\n\t\t\treturn m.MiscTraits;\n\t\t}\n\t\treturn sliceType$7.nil;\n\t};\n\tBasicUnitInfo.prototype.GetMiscTraits = function() { return this.$val.GetMiscTraits(); };\n\tBasicUnitInfo.ptr.prototype.GetCurse = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil)) {\n\t\t\treturn m.Curse;\n\t\t}\n\t\treturn ptrType$15.nil;\n\t};\n\tBasicUnitInfo.prototype.GetCurse = function() { return this.$val.GetCurse(); };\n\tBasicUnitInfo.ptr.prototype.GetBurrows = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$18.nil)) {\n\t\t\treturn m.Burrows;\n\t\t}\n\t\treturn sliceType$1.nil;\n\t};\n\tBasicUnitInfo.prototype.GetBurrows = function() { return this.$val.GetBurrows(); };\n\tBasicUnitInfoMask.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new BasicUnitInfoMask.ptr(ptrType$7.nil, ptrType$7.nil, ptrType$7.nil, ptrType$7.nil, sliceType.nil), BasicUnitInfoMask);\n\t};\n\tBasicUnitInfoMask.prototype.Reset = function() { return this.$val.Reset(); };\n\tBasicUnitInfoMask.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BasicUnitInfoMask.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBasicUnitInfoMask.prototype.String = function() { return this.$val.String(); };\n\tBasicUnitInfoMask.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tBasicUnitInfoMask.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tBasicUnitInfoMask.ptr.prototype.GetLabors = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$19.nil) && !(m.Labors === ptrType$7.nil)) {\n\t\t\treturn m.Labors.$get();\n\t\t}\n\t\treturn false;\n\t};\n\tBasicUnitInfoMask.prototype.GetLabors = function() { return this.$val.GetLabors(); };\n\tBasicUnitInfoMask.ptr.prototype.GetSkills = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$19.nil) && !(m.Skills === ptrType$7.nil)) {\n\t\t\treturn m.Skills.$get();\n\t\t}\n\t\treturn false;\n\t};\n\tBasicUnitInfoMask.prototype.GetSkills = function() { return this.$val.GetSkills(); };\n\tBasicUnitInfoMask.ptr.prototype.GetProfession = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$19.nil) && !(m.Profession === ptrType$7.nil)) {\n\t\t\treturn m.Profession.$get();\n\t\t}\n\t\treturn false;\n\t};\n\tBasicUnitInfoMask.prototype.GetProfession = function() { return this.$val.GetProfession(); };\n\tBasicUnitInfoMask.ptr.prototype.GetMiscTraits = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$19.nil) && !(m.MiscTraits === ptrType$7.nil)) {\n\t\t\treturn m.MiscTraits.$get();\n\t\t}\n\t\treturn false;\n\t};\n\tBasicUnitInfoMask.prototype.GetMiscTraits = function() { return this.$val.GetMiscTraits(); };\n\tBasicSquadInfo.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new BasicSquadInfo.ptr(ptrType$1.nil, ptrType$12.nil, ptrType$2.nil, sliceType$1.nil, sliceType.nil), BasicSquadInfo);\n\t};\n\tBasicSquadInfo.prototype.Reset = function() { return this.$val.Reset(); };\n\tBasicSquadInfo.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BasicSquadInfo.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBasicSquadInfo.prototype.String = function() { return this.$val.String(); };\n\tBasicSquadInfo.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tBasicSquadInfo.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tBasicSquadInfo.ptr.prototype.GetSquadId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$20.nil) && !(m.SquadId === ptrType$1.nil)) {\n\t\t\treturn m.SquadId.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tBasicSquadInfo.prototype.GetSquadId = function() { return this.$val.GetSquadId(); };\n\tBasicSquadInfo.ptr.prototype.GetName = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$20.nil)) {\n\t\t\treturn m.Name;\n\t\t}\n\t\treturn ptrType$12.nil;\n\t};\n\tBasicSquadInfo.prototype.GetName = function() { return this.$val.GetName(); };\n\tBasicSquadInfo.ptr.prototype.GetAlias = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$20.nil) && !(m.Alias === ptrType$2.nil)) {\n\t\t\treturn m.Alias.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tBasicSquadInfo.prototype.GetAlias = function() { return this.$val.GetAlias(); };\n\tBasicSquadInfo.ptr.prototype.GetMembers = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$20.nil)) {\n\t\t\treturn m.Members;\n\t\t}\n\t\treturn sliceType$1.nil;\n\t};\n\tBasicSquadInfo.prototype.GetMembers = function() { return this.$val.GetMembers(); };\n\tUnitLaborState.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new UnitLaborState.ptr(ptrType$1.nil, ptrType$1.nil, ptrType$7.nil, sliceType.nil), UnitLaborState);\n\t};\n\tUnitLaborState.prototype.Reset = function() { return this.$val.Reset(); };\n\tUnitLaborState.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: UnitLaborState.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tUnitLaborState.prototype.String = function() { return this.$val.String(); };\n\tUnitLaborState.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tUnitLaborState.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tUnitLaborState.ptr.prototype.GetUnitId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$21.nil) && !(m.UnitId === ptrType$1.nil)) {\n\t\t\treturn m.UnitId.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tUnitLaborState.prototype.GetUnitId = function() { return this.$val.GetUnitId(); };\n\tUnitLaborState.ptr.prototype.GetLabor = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$21.nil) && !(m.Labor === ptrType$1.nil)) {\n\t\t\treturn m.Labor.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tUnitLaborState.prototype.GetLabor = function() { return this.$val.GetLabor(); };\n\tUnitLaborState.ptr.prototype.GetValue = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$21.nil) && !(m.Value === ptrType$7.nil)) {\n\t\t\treturn m.Value.$get();\n\t\t}\n\t\treturn false;\n\t};\n\tUnitLaborState.prototype.GetValue = function() { return this.$val.GetValue(); };\n\tinit = function() {\n\t\tvar $ptr;\n\t\tproto.RegisterEnum(\"dfproto.BasicMaterialInfoMask_StateType\", $pkg.BasicMaterialInfoMask_StateType_name, $pkg.BasicMaterialInfoMask_StateType_value);\n\t};\n\tGetWorldInfoOut_Mode.prototype.Enum = function() {\n\t\tvar $ptr, p, x;\n\t\tx = this.$val;\n\t\tp = $newDataPointer(0, ptrType$22);\n\t\tp.$set(x);\n\t\treturn p;\n\t};\n\t$ptrType(GetWorldInfoOut_Mode).prototype.Enum = function() { return new GetWorldInfoOut_Mode(this.$get()).Enum(); };\n\tGetWorldInfoOut_Mode.prototype.String = function() {\n\t\tvar $ptr, x;\n\t\tx = this.$val;\n\t\treturn proto.EnumName($pkg.GetWorldInfoOut_Mode_name, (x >> 0));\n\t};\n\t$ptrType(GetWorldInfoOut_Mode).prototype.String = function() { return new GetWorldInfoOut_Mode(this.$get()).String(); };\n\t$ptrType(GetWorldInfoOut_Mode).prototype.UnmarshalJSON = function(data) {\n\t\tvar $ptr, _r, _tuple, data, err, value, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; data = $f.data; err = $f.err; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tx = this;\n\t\t_r = proto.UnmarshalJSONEnum($pkg.GetWorldInfoOut_Mode_value, data, \"GetWorldInfoOut_Mode\"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; value = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\tx.$set((value >> 0));\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $ptrType(GetWorldInfoOut_Mode).prototype.UnmarshalJSON }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tGetWorldInfoOut.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new GetWorldInfoOut.ptr(ptrType$22.nil, ptrType$2.nil, ptrType$12.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, sliceType$1.nil, sliceType.nil), GetWorldInfoOut);\n\t};\n\tGetWorldInfoOut.prototype.Reset = function() { return this.$val.Reset(); };\n\tGetWorldInfoOut.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: GetWorldInfoOut.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tGetWorldInfoOut.prototype.String = function() { return this.$val.String(); };\n\tGetWorldInfoOut.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tGetWorldInfoOut.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tGetWorldInfoOut.ptr.prototype.GetMode = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$23.nil) && !(m.Mode === ptrType$22.nil)) {\n\t\t\treturn m.Mode.$get();\n\t\t}\n\t\treturn 1;\n\t};\n\tGetWorldInfoOut.prototype.GetMode = function() { return this.$val.GetMode(); };\n\tGetWorldInfoOut.ptr.prototype.GetSaveDir = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$23.nil) && !(m.SaveDir === ptrType$2.nil)) {\n\t\t\treturn m.SaveDir.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tGetWorldInfoOut.prototype.GetSaveDir = function() { return this.$val.GetSaveDir(); };\n\tGetWorldInfoOut.ptr.prototype.GetWorldName = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$23.nil)) {\n\t\t\treturn m.WorldName;\n\t\t}\n\t\treturn ptrType$12.nil;\n\t};\n\tGetWorldInfoOut.prototype.GetWorldName = function() { return this.$val.GetWorldName(); };\n\tGetWorldInfoOut.ptr.prototype.GetCivId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$23.nil) && !(m.CivId === ptrType$1.nil)) {\n\t\t\treturn m.CivId.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tGetWorldInfoOut.prototype.GetCivId = function() { return this.$val.GetCivId(); };\n\tGetWorldInfoOut.ptr.prototype.GetSiteId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$23.nil) && !(m.SiteId === ptrType$1.nil)) {\n\t\t\treturn m.SiteId.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tGetWorldInfoOut.prototype.GetSiteId = function() { return this.$val.GetSiteId(); };\n\tGetWorldInfoOut.ptr.prototype.GetGroupId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$23.nil) && !(m.GroupId === ptrType$1.nil)) {\n\t\t\treturn m.GroupId.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tGetWorldInfoOut.prototype.GetGroupId = function() { return this.$val.GetGroupId(); };\n\tGetWorldInfoOut.ptr.prototype.GetRaceId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$23.nil) && !(m.RaceId === ptrType$1.nil)) {\n\t\t\treturn m.RaceId.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tGetWorldInfoOut.prototype.GetRaceId = function() { return this.$val.GetRaceId(); };\n\tGetWorldInfoOut.ptr.prototype.GetPlayerUnitId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$23.nil) && !(m.PlayerUnitId === ptrType$1.nil)) {\n\t\t\treturn m.PlayerUnitId.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tGetWorldInfoOut.prototype.GetPlayerUnitId = function() { return this.$val.GetPlayerUnitId(); };\n\tGetWorldInfoOut.ptr.prototype.GetPlayerHistfigId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$23.nil) && !(m.PlayerHistfigId === ptrType$1.nil)) {\n\t\t\treturn m.PlayerHistfigId.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tGetWorldInfoOut.prototype.GetPlayerHistfigId = function() { return this.$val.GetPlayerHistfigId(); };\n\tGetWorldInfoOut.ptr.prototype.GetCompanionHistfigIds = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$23.nil)) {\n\t\t\treturn m.CompanionHistfigIds;\n\t\t}\n\t\treturn sliceType$1.nil;\n\t};\n\tGetWorldInfoOut.prototype.GetCompanionHistfigIds = function() { return this.$val.GetCompanionHistfigIds(); };\n\tListEnumsOut.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new ListEnumsOut.ptr(sliceType$8.nil, sliceType$8.nil, sliceType$8.nil, sliceType$8.nil, sliceType$8.nil, sliceType$8.nil, sliceType$8.nil, sliceType$8.nil, sliceType$8.nil, sliceType$8.nil, sliceType$8.nil, sliceType.nil), ListEnumsOut);\n\t};\n\tListEnumsOut.prototype.Reset = function() { return this.$val.Reset(); };\n\tListEnumsOut.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ListEnumsOut.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tListEnumsOut.prototype.String = function() { return this.$val.String(); };\n\tListEnumsOut.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tListEnumsOut.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tListEnumsOut.ptr.prototype.GetMaterialFlags = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$24.nil)) {\n\t\t\treturn m.MaterialFlags;\n\t\t}\n\t\treturn sliceType$8.nil;\n\t};\n\tListEnumsOut.prototype.GetMaterialFlags = function() { return this.$val.GetMaterialFlags(); };\n\tListEnumsOut.ptr.prototype.GetInorganicFlags = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$24.nil)) {\n\t\t\treturn m.InorganicFlags;\n\t\t}\n\t\treturn sliceType$8.nil;\n\t};\n\tListEnumsOut.prototype.GetInorganicFlags = function() { return this.$val.GetInorganicFlags(); };\n\tListEnumsOut.ptr.prototype.GetUnitFlags1 = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$24.nil)) {\n\t\t\treturn m.UnitFlags1;\n\t\t}\n\t\treturn sliceType$8.nil;\n\t};\n\tListEnumsOut.prototype.GetUnitFlags1 = function() { return this.$val.GetUnitFlags1(); };\n\tListEnumsOut.ptr.prototype.GetUnitFlags2 = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$24.nil)) {\n\t\t\treturn m.UnitFlags2;\n\t\t}\n\t\treturn sliceType$8.nil;\n\t};\n\tListEnumsOut.prototype.GetUnitFlags2 = function() { return this.$val.GetUnitFlags2(); };\n\tListEnumsOut.ptr.prototype.GetUnitFlags3 = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$24.nil)) {\n\t\t\treturn m.UnitFlags3;\n\t\t}\n\t\treturn sliceType$8.nil;\n\t};\n\tListEnumsOut.prototype.GetUnitFlags3 = function() { return this.$val.GetUnitFlags3(); };\n\tListEnumsOut.ptr.prototype.GetUnitLabor = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$24.nil)) {\n\t\t\treturn m.UnitLabor;\n\t\t}\n\t\treturn sliceType$8.nil;\n\t};\n\tListEnumsOut.prototype.GetUnitLabor = function() { return this.$val.GetUnitLabor(); };\n\tListEnumsOut.ptr.prototype.GetJobSkill = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$24.nil)) {\n\t\t\treturn m.JobSkill;\n\t\t}\n\t\treturn sliceType$8.nil;\n\t};\n\tListEnumsOut.prototype.GetJobSkill = function() { return this.$val.GetJobSkill(); };\n\tListEnumsOut.ptr.prototype.GetCieAddTagMask1 = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$24.nil)) {\n\t\t\treturn m.CieAddTagMask1;\n\t\t}\n\t\treturn sliceType$8.nil;\n\t};\n\tListEnumsOut.prototype.GetCieAddTagMask1 = function() { return this.$val.GetCieAddTagMask1(); };\n\tListEnumsOut.ptr.prototype.GetCieAddTagMask2 = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$24.nil)) {\n\t\t\treturn m.CieAddTagMask2;\n\t\t}\n\t\treturn sliceType$8.nil;\n\t};\n\tListEnumsOut.prototype.GetCieAddTagMask2 = function() { return this.$val.GetCieAddTagMask2(); };\n\tListEnumsOut.ptr.prototype.GetDeathInfoFlags = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$24.nil)) {\n\t\t\treturn m.DeathInfoFlags;\n\t\t}\n\t\treturn sliceType$8.nil;\n\t};\n\tListEnumsOut.prototype.GetDeathInfoFlags = function() { return this.$val.GetDeathInfoFlags(); };\n\tListEnumsOut.ptr.prototype.GetProfession = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$24.nil)) {\n\t\t\treturn m.Profession;\n\t\t}\n\t\treturn sliceType$8.nil;\n\t};\n\tListEnumsOut.prototype.GetProfession = function() { return this.$val.GetProfession(); };\n\tListJobSkillsOut.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new ListJobSkillsOut.ptr(sliceType$9.nil, sliceType$10.nil, sliceType$11.nil, sliceType.nil), ListJobSkillsOut);\n\t};\n\tListJobSkillsOut.prototype.Reset = function() { return this.$val.Reset(); };\n\tListJobSkillsOut.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ListJobSkillsOut.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tListJobSkillsOut.prototype.String = function() { return this.$val.String(); };\n\tListJobSkillsOut.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tListJobSkillsOut.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tListJobSkillsOut.ptr.prototype.GetSkill = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$25.nil)) {\n\t\t\treturn m.Skill;\n\t\t}\n\t\treturn sliceType$9.nil;\n\t};\n\tListJobSkillsOut.prototype.GetSkill = function() { return this.$val.GetSkill(); };\n\tListJobSkillsOut.ptr.prototype.GetProfession = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$25.nil)) {\n\t\t\treturn m.Profession;\n\t\t}\n\t\treturn sliceType$10.nil;\n\t};\n\tListJobSkillsOut.prototype.GetProfession = function() { return this.$val.GetProfession(); };\n\tListJobSkillsOut.ptr.prototype.GetLabor = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$25.nil)) {\n\t\t\treturn m.Labor;\n\t\t}\n\t\treturn sliceType$11.nil;\n\t};\n\tListJobSkillsOut.prototype.GetLabor = function() { return this.$val.GetLabor(); };\n\tListMaterialsIn.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new ListMaterialsIn.ptr(ptrType$8.nil, sliceType$12.nil, ptrType$7.nil, ptrType$7.nil, ptrType$7.nil, ptrType$7.nil, sliceType.nil), ListMaterialsIn);\n\t};\n\tListMaterialsIn.prototype.Reset = function() { return this.$val.Reset(); };\n\tListMaterialsIn.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ListMaterialsIn.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tListMaterialsIn.prototype.String = function() { return this.$val.String(); };\n\tListMaterialsIn.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tListMaterialsIn.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tListMaterialsIn.ptr.prototype.GetMask = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$26.nil)) {\n\t\t\treturn m.Mask;\n\t\t}\n\t\treturn ptrType$8.nil;\n\t};\n\tListMaterialsIn.prototype.GetMask = function() { return this.$val.GetMask(); };\n\tListMaterialsIn.ptr.prototype.GetIdList = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$26.nil)) {\n\t\t\treturn m.IdList;\n\t\t}\n\t\treturn sliceType$12.nil;\n\t};\n\tListMaterialsIn.prototype.GetIdList = function() { return this.$val.GetIdList(); };\n\tListMaterialsIn.ptr.prototype.GetBuiltin = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$26.nil) && !(m.Builtin === ptrType$7.nil)) {\n\t\t\treturn m.Builtin.$get();\n\t\t}\n\t\treturn false;\n\t};\n\tListMaterialsIn.prototype.GetBuiltin = function() { return this.$val.GetBuiltin(); };\n\tListMaterialsIn.ptr.prototype.GetInorganic = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$26.nil) && !(m.Inorganic === ptrType$7.nil)) {\n\t\t\treturn m.Inorganic.$get();\n\t\t}\n\t\treturn false;\n\t};\n\tListMaterialsIn.prototype.GetInorganic = function() { return this.$val.GetInorganic(); };\n\tListMaterialsIn.ptr.prototype.GetCreatures = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$26.nil) && !(m.Creatures === ptrType$7.nil)) {\n\t\t\treturn m.Creatures.$get();\n\t\t}\n\t\treturn false;\n\t};\n\tListMaterialsIn.prototype.GetCreatures = function() { return this.$val.GetCreatures(); };\n\tListMaterialsIn.ptr.prototype.GetPlants = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$26.nil) && !(m.Plants === ptrType$7.nil)) {\n\t\t\treturn m.Plants.$get();\n\t\t}\n\t\treturn false;\n\t};\n\tListMaterialsIn.prototype.GetPlants = function() { return this.$val.GetPlants(); };\n\tListMaterialsOut.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new ListMaterialsOut.ptr(sliceType$13.nil, sliceType.nil), ListMaterialsOut);\n\t};\n\tListMaterialsOut.prototype.Reset = function() { return this.$val.Reset(); };\n\tListMaterialsOut.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ListMaterialsOut.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tListMaterialsOut.prototype.String = function() { return this.$val.String(); };\n\tListMaterialsOut.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tListMaterialsOut.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tListMaterialsOut.ptr.prototype.GetValue = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$27.nil)) {\n\t\t\treturn m.Value;\n\t\t}\n\t\treturn sliceType$13.nil;\n\t};\n\tListMaterialsOut.prototype.GetValue = function() { return this.$val.GetValue(); };\n\tListUnitsIn.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new ListUnitsIn.ptr(ptrType$19.nil, sliceType$1.nil, ptrType$7.nil, ptrType$1.nil, ptrType$1.nil, ptrType$7.nil, ptrType$7.nil, ptrType$7.nil, sliceType.nil), ListUnitsIn);\n\t};\n\tListUnitsIn.prototype.Reset = function() { return this.$val.Reset(); };\n\tListUnitsIn.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ListUnitsIn.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tListUnitsIn.prototype.String = function() { return this.$val.String(); };\n\tListUnitsIn.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tListUnitsIn.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tListUnitsIn.ptr.prototype.GetMask = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$28.nil)) {\n\t\t\treturn m.Mask;\n\t\t}\n\t\treturn ptrType$19.nil;\n\t};\n\tListUnitsIn.prototype.GetMask = function() { return this.$val.GetMask(); };\n\tListUnitsIn.ptr.prototype.GetIdList = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$28.nil)) {\n\t\t\treturn m.IdList;\n\t\t}\n\t\treturn sliceType$1.nil;\n\t};\n\tListUnitsIn.prototype.GetIdList = function() { return this.$val.GetIdList(); };\n\tListUnitsIn.ptr.prototype.GetScanAll = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$28.nil) && !(m.ScanAll === ptrType$7.nil)) {\n\t\t\treturn m.ScanAll.$get();\n\t\t}\n\t\treturn false;\n\t};\n\tListUnitsIn.prototype.GetScanAll = function() { return this.$val.GetScanAll(); };\n\tListUnitsIn.ptr.prototype.GetRace = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$28.nil) && !(m.Race === ptrType$1.nil)) {\n\t\t\treturn m.Race.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tListUnitsIn.prototype.GetRace = function() { return this.$val.GetRace(); };\n\tListUnitsIn.ptr.prototype.GetCivId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$28.nil) && !(m.CivId === ptrType$1.nil)) {\n\t\t\treturn m.CivId.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tListUnitsIn.prototype.GetCivId = function() { return this.$val.GetCivId(); };\n\tListUnitsIn.ptr.prototype.GetDead = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$28.nil) && !(m.Dead === ptrType$7.nil)) {\n\t\t\treturn m.Dead.$get();\n\t\t}\n\t\treturn false;\n\t};\n\tListUnitsIn.prototype.GetDead = function() { return this.$val.GetDead(); };\n\tListUnitsIn.ptr.prototype.GetAlive = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$28.nil) && !(m.Alive === ptrType$7.nil)) {\n\t\t\treturn m.Alive.$get();\n\t\t}\n\t\treturn false;\n\t};\n\tListUnitsIn.prototype.GetAlive = function() { return this.$val.GetAlive(); };\n\tListUnitsIn.ptr.prototype.GetSane = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$28.nil) && !(m.Sane === ptrType$7.nil)) {\n\t\t\treturn m.Sane.$get();\n\t\t}\n\t\treturn false;\n\t};\n\tListUnitsIn.prototype.GetSane = function() { return this.$val.GetSane(); };\n\tListUnitsOut.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new ListUnitsOut.ptr(sliceType$14.nil, sliceType.nil), ListUnitsOut);\n\t};\n\tListUnitsOut.prototype.Reset = function() { return this.$val.Reset(); };\n\tListUnitsOut.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ListUnitsOut.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tListUnitsOut.prototype.String = function() { return this.$val.String(); };\n\tListUnitsOut.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tListUnitsOut.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tListUnitsOut.ptr.prototype.GetValue = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$29.nil)) {\n\t\t\treturn m.Value;\n\t\t}\n\t\treturn sliceType$14.nil;\n\t};\n\tListUnitsOut.prototype.GetValue = function() { return this.$val.GetValue(); };\n\tListSquadsIn.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new ListSquadsIn.ptr(sliceType.nil), ListSquadsIn);\n\t};\n\tListSquadsIn.prototype.Reset = function() { return this.$val.Reset(); };\n\tListSquadsIn.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ListSquadsIn.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tListSquadsIn.prototype.String = function() { return this.$val.String(); };\n\tListSquadsIn.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tListSquadsIn.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tListSquadsOut.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new ListSquadsOut.ptr(sliceType$15.nil, sliceType.nil), ListSquadsOut);\n\t};\n\tListSquadsOut.prototype.Reset = function() { return this.$val.Reset(); };\n\tListSquadsOut.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ListSquadsOut.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tListSquadsOut.prototype.String = function() { return this.$val.String(); };\n\tListSquadsOut.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tListSquadsOut.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tListSquadsOut.ptr.prototype.GetValue = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$30.nil)) {\n\t\t\treturn m.Value;\n\t\t}\n\t\treturn sliceType$15.nil;\n\t};\n\tListSquadsOut.prototype.GetValue = function() { return this.$val.GetValue(); };\n\tSetUnitLaborsIn.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new SetUnitLaborsIn.ptr(sliceType$16.nil, sliceType.nil), SetUnitLaborsIn);\n\t};\n\tSetUnitLaborsIn.prototype.Reset = function() { return this.$val.Reset(); };\n\tSetUnitLaborsIn.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: SetUnitLaborsIn.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tSetUnitLaborsIn.prototype.String = function() { return this.$val.String(); };\n\tSetUnitLaborsIn.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tSetUnitLaborsIn.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tSetUnitLaborsIn.ptr.prototype.GetChange = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$31.nil)) {\n\t\t\treturn m.Change;\n\t\t}\n\t\treturn sliceType$16.nil;\n\t};\n\tSetUnitLaborsIn.prototype.GetChange = function() { return this.$val.GetChange(); };\n\tinit$1 = function() {\n\t\tvar $ptr;\n\t\tproto.RegisterEnum(\"dfproto.GetWorldInfoOut_Mode\", $pkg.GetWorldInfoOut_Mode_name, $pkg.GetWorldInfoOut_Mode_value);\n\t};\n\tCoreTextFragment_Color.prototype.Enum = function() {\n\t\tvar $ptr, p, x;\n\t\tx = this.$val;\n\t\tp = $newDataPointer(0, ptrType$32);\n\t\tp.$set(x);\n\t\treturn p;\n\t};\n\t$ptrType(CoreTextFragment_Color).prototype.Enum = function() { return new CoreTextFragment_Color(this.$get()).Enum(); };\n\tCoreTextFragment_Color.prototype.String = function() {\n\t\tvar $ptr, x;\n\t\tx = this.$val;\n\t\treturn proto.EnumName($pkg.CoreTextFragment_Color_name, (x >> 0));\n\t};\n\t$ptrType(CoreTextFragment_Color).prototype.String = function() { return new CoreTextFragment_Color(this.$get()).String(); };\n\t$ptrType(CoreTextFragment_Color).prototype.UnmarshalJSON = function(data) {\n\t\tvar $ptr, _r, _tuple, data, err, value, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; data = $f.data; err = $f.err; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tx = this;\n\t\t_r = proto.UnmarshalJSONEnum($pkg.CoreTextFragment_Color_value, data, \"CoreTextFragment_Color\"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; value = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\tx.$set((value >> 0));\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $ptrType(CoreTextFragment_Color).prototype.UnmarshalJSON }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tCoreTextFragment.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new CoreTextFragment.ptr(ptrType$2.nil, ptrType$32.nil, sliceType.nil), CoreTextFragment);\n\t};\n\tCoreTextFragment.prototype.Reset = function() { return this.$val.Reset(); };\n\tCoreTextFragment.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: CoreTextFragment.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tCoreTextFragment.prototype.String = function() { return this.$val.String(); };\n\tCoreTextFragment.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tCoreTextFragment.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tCoreTextFragment.ptr.prototype.GetText = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$34.nil) && !(m.Text === ptrType$2.nil)) {\n\t\t\treturn m.Text.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tCoreTextFragment.prototype.GetText = function() { return this.$val.GetText(); };\n\tCoreTextFragment.ptr.prototype.GetColor = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$34.nil) && !(m.Color === ptrType$32.nil)) {\n\t\t\treturn m.Color.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tCoreTextFragment.prototype.GetColor = function() { return this.$val.GetColor(); };\n\tCoreTextNotification.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new CoreTextNotification.ptr(sliceType$17.nil, sliceType.nil), CoreTextNotification);\n\t};\n\tCoreTextNotification.prototype.Reset = function() { return this.$val.Reset(); };\n\tCoreTextNotification.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: CoreTextNotification.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tCoreTextNotification.prototype.String = function() { return this.$val.String(); };\n\tCoreTextNotification.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tCoreTextNotification.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tCoreTextNotification.ptr.prototype.GetFragments = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$35.nil)) {\n\t\t\treturn m.Fragments;\n\t\t}\n\t\treturn sliceType$17.nil;\n\t};\n\tCoreTextNotification.prototype.GetFragments = function() { return this.$val.GetFragments(); };\n\tEmptyMessage.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new EmptyMessage.ptr(sliceType.nil), EmptyMessage);\n\t};\n\tEmptyMessage.prototype.Reset = function() { return this.$val.Reset(); };\n\tEmptyMessage.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: EmptyMessage.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tEmptyMessage.prototype.String = function() { return this.$val.String(); };\n\tEmptyMessage.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tEmptyMessage.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tIntMessage.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new IntMessage.ptr(ptrType$1.nil, sliceType.nil), IntMessage);\n\t};\n\tIntMessage.prototype.Reset = function() { return this.$val.Reset(); };\n\tIntMessage.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: IntMessage.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tIntMessage.prototype.String = function() { return this.$val.String(); };\n\tIntMessage.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tIntMessage.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tIntMessage.ptr.prototype.GetValue = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$37.nil) && !(m.Value === ptrType$1.nil)) {\n\t\t\treturn m.Value.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tIntMessage.prototype.GetValue = function() { return this.$val.GetValue(); };\n\tStringMessage.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new StringMessage.ptr(ptrType$2.nil, sliceType.nil), StringMessage);\n\t};\n\tStringMessage.prototype.Reset = function() { return this.$val.Reset(); };\n\tStringMessage.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: StringMessage.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tStringMessage.prototype.String = function() { return this.$val.String(); };\n\tStringMessage.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tStringMessage.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tStringMessage.ptr.prototype.GetValue = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$39.nil) && !(m.Value === ptrType$2.nil)) {\n\t\t\treturn m.Value.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tStringMessage.prototype.GetValue = function() { return this.$val.GetValue(); };\n\tStringListMessage.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new StringListMessage.ptr(sliceType$3.nil, sliceType.nil), StringListMessage);\n\t};\n\tStringListMessage.prototype.Reset = function() { return this.$val.Reset(); };\n\tStringListMessage.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: StringListMessage.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tStringListMessage.prototype.String = function() { return this.$val.String(); };\n\tStringListMessage.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tStringListMessage.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tStringListMessage.ptr.prototype.GetValue = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$40.nil)) {\n\t\t\treturn m.Value;\n\t\t}\n\t\treturn sliceType$3.nil;\n\t};\n\tStringListMessage.prototype.GetValue = function() { return this.$val.GetValue(); };\n\tCoreBindRequest.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new CoreBindRequest.ptr(ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, sliceType.nil), CoreBindRequest);\n\t};\n\tCoreBindRequest.prototype.Reset = function() { return this.$val.Reset(); };\n\tCoreBindRequest.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: CoreBindRequest.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tCoreBindRequest.prototype.String = function() { return this.$val.String(); };\n\tCoreBindRequest.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tCoreBindRequest.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tCoreBindRequest.ptr.prototype.GetMethod = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$41.nil) && !(m.Method === ptrType$2.nil)) {\n\t\t\treturn m.Method.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tCoreBindRequest.prototype.GetMethod = function() { return this.$val.GetMethod(); };\n\tCoreBindRequest.ptr.prototype.GetInputMsg = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$41.nil) && !(m.InputMsg === ptrType$2.nil)) {\n\t\t\treturn m.InputMsg.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tCoreBindRequest.prototype.GetInputMsg = function() { return this.$val.GetInputMsg(); };\n\tCoreBindRequest.ptr.prototype.GetOutputMsg = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$41.nil) && !(m.OutputMsg === ptrType$2.nil)) {\n\t\t\treturn m.OutputMsg.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tCoreBindRequest.prototype.GetOutputMsg = function() { return this.$val.GetOutputMsg(); };\n\tCoreBindRequest.ptr.prototype.GetPlugin = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$41.nil) && !(m.Plugin === ptrType$2.nil)) {\n\t\t\treturn m.Plugin.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tCoreBindRequest.prototype.GetPlugin = function() { return this.$val.GetPlugin(); };\n\tCoreBindReply.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new CoreBindReply.ptr(ptrType$1.nil, sliceType.nil), CoreBindReply);\n\t};\n\tCoreBindReply.prototype.Reset = function() { return this.$val.Reset(); };\n\tCoreBindReply.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: CoreBindReply.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tCoreBindReply.prototype.String = function() { return this.$val.String(); };\n\tCoreBindReply.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tCoreBindReply.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tCoreBindReply.ptr.prototype.GetAssignedId = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$42.nil) && !(m.AssignedId === ptrType$1.nil)) {\n\t\t\treturn m.AssignedId.$get();\n\t\t}\n\t\treturn 0;\n\t};\n\tCoreBindReply.prototype.GetAssignedId = function() { return this.$val.GetAssignedId(); };\n\tCoreRunCommandRequest.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new CoreRunCommandRequest.ptr(ptrType$2.nil, sliceType$3.nil, sliceType.nil), CoreRunCommandRequest);\n\t};\n\tCoreRunCommandRequest.prototype.Reset = function() { return this.$val.Reset(); };\n\tCoreRunCommandRequest.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: CoreRunCommandRequest.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tCoreRunCommandRequest.prototype.String = function() { return this.$val.String(); };\n\tCoreRunCommandRequest.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tCoreRunCommandRequest.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tCoreRunCommandRequest.ptr.prototype.GetCommand = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$43.nil) && !(m.Command === ptrType$2.nil)) {\n\t\t\treturn m.Command.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tCoreRunCommandRequest.prototype.GetCommand = function() { return this.$val.GetCommand(); };\n\tCoreRunCommandRequest.ptr.prototype.GetArguments = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$43.nil)) {\n\t\t\treturn m.Arguments;\n\t\t}\n\t\treturn sliceType$3.nil;\n\t};\n\tCoreRunCommandRequest.prototype.GetArguments = function() { return this.$val.GetArguments(); };\n\tCoreRunLuaRequest.ptr.prototype.Reset = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\t$copy(m, new CoreRunLuaRequest.ptr(ptrType$2.nil, ptrType$2.nil, sliceType$3.nil, sliceType.nil), CoreRunLuaRequest);\n\t};\n\tCoreRunLuaRequest.prototype.Reset = function() { return this.$val.Reset(); };\n\tCoreRunLuaRequest.ptr.prototype.String = function() {\n\t\tvar $ptr, _r, m, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tm = this;\n\t\t_r = proto.CompactTextString(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: CoreRunLuaRequest.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tCoreRunLuaRequest.prototype.String = function() { return this.$val.String(); };\n\tCoreRunLuaRequest.ptr.prototype.ProtoMessage = function() {\n\t\tvar $ptr;\n\t};\n\tCoreRunLuaRequest.prototype.ProtoMessage = function() { return this.$val.ProtoMessage(); };\n\tCoreRunLuaRequest.ptr.prototype.GetModule = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$44.nil) && !(m.Module === ptrType$2.nil)) {\n\t\t\treturn m.Module.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tCoreRunLuaRequest.prototype.GetModule = function() { return this.$val.GetModule(); };\n\tCoreRunLuaRequest.ptr.prototype.GetFunction = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$44.nil) && !(m.Function === ptrType$2.nil)) {\n\t\t\treturn m.Function.$get();\n\t\t}\n\t\treturn \"\";\n\t};\n\tCoreRunLuaRequest.prototype.GetFunction = function() { return this.$val.GetFunction(); };\n\tCoreRunLuaRequest.ptr.prototype.GetArguments = function() {\n\t\tvar $ptr, m;\n\t\tm = this;\n\t\tif (!(m === ptrType$44.nil)) {\n\t\t\treturn m.Arguments;\n\t\t}\n\t\treturn sliceType$3.nil;\n\t};\n\tCoreRunLuaRequest.prototype.GetArguments = function() { return this.$val.GetArguments(); };\n\tinit$2 = function() {\n\t\tvar $ptr;\n\t\tproto.RegisterEnum(\"dfproto.CoreTextFragment_Color\", $pkg.CoreTextFragment_Color_name, $pkg.CoreTextFragment_Color_value);\n\t\tproto.RegisterEnum(\"dfproto.CoreErrorNotification_ErrorCode\", $pkg.CoreErrorNotification_ErrorCode_name, $pkg.CoreErrorNotification_ErrorCode_value);\n\t};\n\tBasicMaterialInfoMask_StateType.methods = [{prop: \"Enum\", name: \"Enum\", pkg: \"\", typ: $funcType([], [ptrType], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType.methods = [{prop: \"UnmarshalJSON\", name: \"UnmarshalJSON\", pkg: \"\", typ: $funcType([sliceType], [$error], false)}];\n\tptrType$3.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetValue\", name: \"GetValue\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetName\", name: \"GetName\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetBitSize\", name: \"GetBitSize\", pkg: \"\", typ: $funcType([], [$Int32], false)}];\n\tptrType$4.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetType\", name: \"GetType\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetIndex\", name: \"GetIndex\", pkg: \"\", typ: $funcType([], [$Int32], false)}];\n\tptrType$6.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetType\", name: \"GetType\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetIndex\", name: \"GetIndex\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetToken\", name: \"GetToken\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetFlags\", name: \"GetFlags\", pkg: \"\", typ: $funcType([], [sliceType$1], false)}, {prop: \"GetSubtype\", name: \"GetSubtype\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetCreatureId\", name: \"GetCreatureId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetPlantId\", name: \"GetPlantId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetHistfigId\", name: \"GetHistfigId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetNamePrefix\", name: \"GetNamePrefix\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetStateColor\", name: \"GetStateColor\", pkg: \"\", typ: $funcType([], [sliceType$2], false)}, {prop: \"GetStateName\", name: \"GetStateName\", pkg: \"\", typ: $funcType([], [sliceType$3], false)}, {prop: \"GetStateAdj\", name: \"GetStateAdj\", pkg: \"\", typ: $funcType([], [sliceType$3], false)}, {prop: \"GetReactionClass\", name: \"GetReactionClass\", pkg: \"\", typ: $funcType([], [sliceType$3], false)}, {prop: \"GetReactionProduct\", name: \"GetReactionProduct\", pkg: \"\", typ: $funcType([], [sliceType$4], false)}, {prop: \"GetInorganicFlags\", name: \"GetInorganicFlags\", pkg: \"\", typ: $funcType([], [sliceType$1], false)}];\n\tptrType$5.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetId\", name: \"GetId\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetType\", name: \"GetType\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetIndex\", name: \"GetIndex\", pkg: \"\", typ: $funcType([], [$Int32], false)}];\n\tptrType$8.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetStates\", name: \"GetStates\", pkg: \"\", typ: $funcType([], [sliceType$5], false)}, {prop: \"GetTemperature\", name: \"GetTemperature\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetFlags\", name: \"GetFlags\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"GetReaction\", name: \"GetReaction\", pkg: \"\", typ: $funcType([], [$Bool], false)}];\n\tptrType$9.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetId\", name: \"GetId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetKey\", name: \"GetKey\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetCaption\", name: \"GetCaption\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetCaptionNoun\", name: \"GetCaptionNoun\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetProfession\", name: \"GetProfession\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetLabor\", name: \"GetLabor\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetType\", name: \"GetType\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$10.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetId\", name: \"GetId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetKey\", name: \"GetKey\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetCaption\", name: \"GetCaption\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetMilitary\", name: \"GetMilitary\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"GetCanAssignLabor\", name: \"GetCanAssignLabor\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"GetParent\", name: \"GetParent\", pkg: \"\", typ: $funcType([], [$Int32], false)}];\n\tptrType$11.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetId\", name: \"GetId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetKey\", name: \"GetKey\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetCaption\", name: \"GetCaption\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$12.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetFirstName\", name: \"GetFirstName\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetNickname\", name: \"GetNickname\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetLanguageId\", name: \"GetLanguageId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetLastName\", name: \"GetLastName\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetEnglishName\", name: \"GetEnglishName\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$13.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetNormal\", name: \"GetNormal\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetPlural\", name: \"GetPlural\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetAdjective\", name: \"GetAdjective\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$15.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetAddTags1\", name: \"GetAddTags1\", pkg: \"\", typ: $funcType([], [$Uint32], false)}, {prop: \"GetRemTags1\", name: \"GetRemTags1\", pkg: \"\", typ: $funcType([], [$Uint32], false)}, {prop: \"GetAddTags2\", name: \"GetAddTags2\", pkg: \"\", typ: $funcType([], [$Uint32], false)}, {prop: \"GetRemTags2\", name: \"GetRemTags2\", pkg: \"\", typ: $funcType([], [$Uint32], false)}, {prop: \"GetName\", name: \"GetName\", pkg: \"\", typ: $funcType([], [ptrType$13], false)}];\n\tptrType$16.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetId\", name: \"GetId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetLevel\", name: \"GetLevel\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetExperience\", name: \"GetExperience\", pkg: \"\", typ: $funcType([], [$Int32], false)}];\n\tptrType$17.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetId\", name: \"GetId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetValue\", name: \"GetValue\", pkg: \"\", typ: $funcType([], [$Int32], false)}];\n\tptrType$18.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetUnitId\", name: \"GetUnitId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetPosX\", name: \"GetPosX\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetPosY\", name: \"GetPosY\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetPosZ\", name: \"GetPosZ\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetName\", name: \"GetName\", pkg: \"\", typ: $funcType([], [ptrType$12], false)}, {prop: \"GetFlags1\", name: \"GetFlags1\", pkg: \"\", typ: $funcType([], [$Uint32], false)}, {prop: \"GetFlags2\", name: \"GetFlags2\", pkg: \"\", typ: $funcType([], [$Uint32], false)}, {prop: \"GetFlags3\", name: \"GetFlags3\", pkg: \"\", typ: $funcType([], [$Uint32], false)}, {prop: \"GetRace\", name: \"GetRace\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetCaste\", name: \"GetCaste\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetGender\", name: \"GetGender\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetCivId\", name: \"GetCivId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetHistfigId\", name: \"GetHistfigId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetDeathId\", name: \"GetDeathId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetDeathFlags\", name: \"GetDeathFlags\", pkg: \"\", typ: $funcType([], [$Uint32], false)}, {prop: \"GetSquadId\", name: \"GetSquadId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetSquadPosition\", name: \"GetSquadPosition\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetProfession\", name: \"GetProfession\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetCustomProfession\", name: \"GetCustomProfession\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetLabors\", name: \"GetLabors\", pkg: \"\", typ: $funcType([], [sliceType$1], false)}, {prop: \"GetSkills\", name: \"GetSkills\", pkg: \"\", typ: $funcType([], [sliceType$6], false)}, {prop: \"GetMiscTraits\", name: \"GetMiscTraits\", pkg: \"\", typ: $funcType([], [sliceType$7], false)}, {prop: \"GetCurse\", name: \"GetCurse\", pkg: \"\", typ: $funcType([], [ptrType$15], false)}, {prop: \"GetBurrows\", name: \"GetBurrows\", pkg: \"\", typ: $funcType([], [sliceType$1], false)}];\n\tptrType$19.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetLabors\", name: \"GetLabors\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"GetSkills\", name: \"GetSkills\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"GetProfession\", name: \"GetProfession\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"GetMiscTraits\", name: \"GetMiscTraits\", pkg: \"\", typ: $funcType([], [$Bool], false)}];\n\tptrType$20.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetSquadId\", name: \"GetSquadId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetName\", name: \"GetName\", pkg: \"\", typ: $funcType([], [ptrType$12], false)}, {prop: \"GetAlias\", name: \"GetAlias\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetMembers\", name: \"GetMembers\", pkg: \"\", typ: $funcType([], [sliceType$1], false)}];\n\tptrType$21.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetUnitId\", name: \"GetUnitId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetLabor\", name: \"GetLabor\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetValue\", name: \"GetValue\", pkg: \"\", typ: $funcType([], [$Bool], false)}];\n\tGetWorldInfoOut_Mode.methods = [{prop: \"Enum\", name: \"Enum\", pkg: \"\", typ: $funcType([], [ptrType$22], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$22.methods = [{prop: \"UnmarshalJSON\", name: \"UnmarshalJSON\", pkg: \"\", typ: $funcType([sliceType], [$error], false)}];\n\tptrType$23.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetMode\", name: \"GetMode\", pkg: \"\", typ: $funcType([], [GetWorldInfoOut_Mode], false)}, {prop: \"GetSaveDir\", name: \"GetSaveDir\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetWorldName\", name: \"GetWorldName\", pkg: \"\", typ: $funcType([], [ptrType$12], false)}, {prop: \"GetCivId\", name: \"GetCivId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetSiteId\", name: \"GetSiteId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetGroupId\", name: \"GetGroupId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetRaceId\", name: \"GetRaceId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetPlayerUnitId\", name: \"GetPlayerUnitId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetPlayerHistfigId\", name: \"GetPlayerHistfigId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetCompanionHistfigIds\", name: \"GetCompanionHistfigIds\", pkg: \"\", typ: $funcType([], [sliceType$1], false)}];\n\tptrType$24.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetMaterialFlags\", name: \"GetMaterialFlags\", pkg: \"\", typ: $funcType([], [sliceType$8], false)}, {prop: \"GetInorganicFlags\", name: \"GetInorganicFlags\", pkg: \"\", typ: $funcType([], [sliceType$8], false)}, {prop: \"GetUnitFlags1\", name: \"GetUnitFlags1\", pkg: \"\", typ: $funcType([], [sliceType$8], false)}, {prop: \"GetUnitFlags2\", name: \"GetUnitFlags2\", pkg: \"\", typ: $funcType([], [sliceType$8], false)}, {prop: \"GetUnitFlags3\", name: \"GetUnitFlags3\", pkg: \"\", typ: $funcType([], [sliceType$8], false)}, {prop: \"GetUnitLabor\", name: \"GetUnitLabor\", pkg: \"\", typ: $funcType([], [sliceType$8], false)}, {prop: \"GetJobSkill\", name: \"GetJobSkill\", pkg: \"\", typ: $funcType([], [sliceType$8], false)}, {prop: \"GetCieAddTagMask1\", name: \"GetCieAddTagMask1\", pkg: \"\", typ: $funcType([], [sliceType$8], false)}, {prop: \"GetCieAddTagMask2\", name: \"GetCieAddTagMask2\", pkg: \"\", typ: $funcType([], [sliceType$8], false)}, {prop: \"GetDeathInfoFlags\", name: \"GetDeathInfoFlags\", pkg: \"\", typ: $funcType([], [sliceType$8], false)}, {prop: \"GetProfession\", name: \"GetProfession\", pkg: \"\", typ: $funcType([], [sliceType$8], false)}];\n\tptrType$25.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetSkill\", name: \"GetSkill\", pkg: \"\", typ: $funcType([], [sliceType$9], false)}, {prop: \"GetProfession\", name: \"GetProfession\", pkg: \"\", typ: $funcType([], [sliceType$10], false)}, {prop: \"GetLabor\", name: \"GetLabor\", pkg: \"\", typ: $funcType([], [sliceType$11], false)}];\n\tptrType$26.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetMask\", name: \"GetMask\", pkg: \"\", typ: $funcType([], [ptrType$8], false)}, {prop: \"GetIdList\", name: \"GetIdList\", pkg: \"\", typ: $funcType([], [sliceType$12], false)}, {prop: \"GetBuiltin\", name: \"GetBuiltin\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"GetInorganic\", name: \"GetInorganic\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"GetCreatures\", name: \"GetCreatures\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"GetPlants\", name: \"GetPlants\", pkg: \"\", typ: $funcType([], [$Bool], false)}];\n\tptrType$27.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetValue\", name: \"GetValue\", pkg: \"\", typ: $funcType([], [sliceType$13], false)}];\n\tptrType$28.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetMask\", name: \"GetMask\", pkg: \"\", typ: $funcType([], [ptrType$19], false)}, {prop: \"GetIdList\", name: \"GetIdList\", pkg: \"\", typ: $funcType([], [sliceType$1], false)}, {prop: \"GetScanAll\", name: \"GetScanAll\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"GetRace\", name: \"GetRace\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetCivId\", name: \"GetCivId\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"GetDead\", name: \"GetDead\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"GetAlive\", name: \"GetAlive\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"GetSane\", name: \"GetSane\", pkg: \"\", typ: $funcType([], [$Bool], false)}];\n\tptrType$29.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetValue\", name: \"GetValue\", pkg: \"\", typ: $funcType([], [sliceType$14], false)}];\n\tptrType$45.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}];\n\tptrType$30.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetValue\", name: \"GetValue\", pkg: \"\", typ: $funcType([], [sliceType$15], false)}];\n\tptrType$31.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetChange\", name: \"GetChange\", pkg: \"\", typ: $funcType([], [sliceType$16], false)}];\n\tCoreTextFragment_Color.methods = [{prop: \"Enum\", name: \"Enum\", pkg: \"\", typ: $funcType([], [ptrType$32], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$32.methods = [{prop: \"UnmarshalJSON\", name: \"UnmarshalJSON\", pkg: \"\", typ: $funcType([sliceType], [$error], false)}];\n\tptrType$34.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetText\", name: \"GetText\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetColor\", name: \"GetColor\", pkg: \"\", typ: $funcType([], [CoreTextFragment_Color], false)}];\n\tptrType$35.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetFragments\", name: \"GetFragments\", pkg: \"\", typ: $funcType([], [sliceType$17], false)}];\n\tptrType$46.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}];\n\tptrType$37.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetValue\", name: \"GetValue\", pkg: \"\", typ: $funcType([], [$Int32], false)}];\n\tptrType$39.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetValue\", name: \"GetValue\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$40.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetValue\", name: \"GetValue\", pkg: \"\", typ: $funcType([], [sliceType$3], false)}];\n\tptrType$41.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetMethod\", name: \"GetMethod\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetInputMsg\", name: \"GetInputMsg\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetOutputMsg\", name: \"GetOutputMsg\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetPlugin\", name: \"GetPlugin\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$42.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetAssignedId\", name: \"GetAssignedId\", pkg: \"\", typ: $funcType([], [$Int32], false)}];\n\tptrType$43.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetCommand\", name: \"GetCommand\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetArguments\", name: \"GetArguments\", pkg: \"\", typ: $funcType([], [sliceType$3], false)}];\n\tptrType$44.methods = [{prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ProtoMessage\", name: \"ProtoMessage\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetModule\", name: \"GetModule\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetFunction\", name: \"GetFunction\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetArguments\", name: \"GetArguments\", pkg: \"\", typ: $funcType([], [sliceType$3], false)}];\n\tEnumItemName.init([{prop: \"Value\", name: \"Value\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,1,req,name=value\\\" json:\\\"value,omitempty\\\"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,2,opt,name=name\\\" json:\\\"name,omitempty\\\"\"}, {prop: \"BitSize\", name: \"BitSize\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,3,opt,name=bit_size,def=1\\\" json:\\\"bit_size,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tBasicMaterialId.init([{prop: \"Type\", name: \"Type\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,1,req,name=type\\\" json:\\\"type,omitempty\\\"\"}, {prop: \"Index\", name: \"Index\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"zigzag32,2,req,name=index\\\" json:\\\"index,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tBasicMaterialInfo.init([{prop: \"Type\", name: \"Type\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,1,req,name=type\\\" json:\\\"type,omitempty\\\"\"}, {prop: \"Index\", name: \"Index\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"zigzag32,2,req,name=index\\\" json:\\\"index,omitempty\\\"\"}, {prop: \"Token\", name: \"Token\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,3,req,name=token\\\" json:\\\"token,omitempty\\\"\"}, {prop: \"Flags\", name: \"Flags\", pkg: \"\", typ: sliceType$1, tag: \"protobuf:\\\"varint,4,rep,name=flags\\\" json:\\\"flags,omitempty\\\"\"}, {prop: \"Subtype\", name: \"Subtype\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,5,opt,name=subtype,def=-1\\\" json:\\\"subtype,omitempty\\\"\"}, {prop: \"CreatureId\", name: \"CreatureId\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,6,opt,name=creature_id,def=-1\\\" json:\\\"creature_id,omitempty\\\"\"}, {prop: \"PlantId\", name: \"PlantId\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,7,opt,name=plant_id,def=-1\\\" json:\\\"plant_id,omitempty\\\"\"}, {prop: \"HistfigId\", name: \"HistfigId\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,8,opt,name=histfig_id,def=-1\\\" json:\\\"histfig_id,omitempty\\\"\"}, {prop: \"NamePrefix\", name: \"NamePrefix\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,9,opt,name=name_prefix,def=\\\" json:\\\"name_prefix,omitempty\\\"\"}, {prop: \"StateColor\", name: \"StateColor\", pkg: \"\", typ: sliceType$2, tag: \"protobuf:\\\"fixed32,10,rep,name=state_color\\\" json:\\\"state_color,omitempty\\\"\"}, {prop: \"StateName\", name: \"StateName\", pkg: \"\", typ: sliceType$3, tag: \"protobuf:\\\"bytes,11,rep,name=state_name\\\" json:\\\"state_name,omitempty\\\"\"}, {prop: \"StateAdj\", name: \"StateAdj\", pkg: \"\", typ: sliceType$3, tag: \"protobuf:\\\"bytes,12,rep,name=state_adj\\\" json:\\\"state_adj,omitempty\\\"\"}, {prop: \"ReactionClass\", name: \"ReactionClass\", pkg: \"\", typ: sliceType$3, tag: \"protobuf:\\\"bytes,13,rep,name=reaction_class\\\" json:\\\"reaction_class,omitempty\\\"\"}, {prop: \"ReactionProduct\", name: \"ReactionProduct\", pkg: \"\", typ: sliceType$4, tag: \"protobuf:\\\"bytes,14,rep,name=reaction_product\\\" json:\\\"reaction_product,omitempty\\\"\"}, {prop: \"InorganicFlags\", name: \"InorganicFlags\", pkg: \"\", typ: sliceType$1, tag: \"protobuf:\\\"varint,15,rep,name=inorganic_flags\\\" json:\\\"inorganic_flags,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tBasicMaterialInfo_Product.init([{prop: \"Id\", name: \"Id\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,1,req,name=id\\\" json:\\\"id,omitempty\\\"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,2,req,name=type\\\" json:\\\"type,omitempty\\\"\"}, {prop: \"Index\", name: \"Index\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"zigzag32,3,req,name=index\\\" json:\\\"index,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tBasicMaterialInfoMask.init([{prop: \"States\", name: \"States\", pkg: \"\", typ: sliceType$5, tag: \"protobuf:\\\"varint,1,rep,name=states,enum=dfproto.BasicMaterialInfoMask_StateType\\\" json:\\\"states,omitempty\\\"\"}, {prop: \"Temperature\", name: \"Temperature\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,4,opt,name=temperature,def=10015\\\" json:\\\"temperature,omitempty\\\"\"}, {prop: \"Flags\", name: \"Flags\", pkg: \"\", typ: ptrType$7, tag: \"protobuf:\\\"varint,2,opt,name=flags,def=0\\\" json:\\\"flags,omitempty\\\"\"}, {prop: \"Reaction\", name: \"Reaction\", pkg: \"\", typ: ptrType$7, tag: \"protobuf:\\\"varint,3,opt,name=reaction,def=0\\\" json:\\\"reaction,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tJobSkillAttr.init([{prop: \"Id\", name: \"Id\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,1,req,name=id\\\" json:\\\"id,omitempty\\\"\"}, {prop: \"Key\", name: \"Key\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,2,req,name=key\\\" json:\\\"key,omitempty\\\"\"}, {prop: \"Caption\", name: \"Caption\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,3,opt,name=caption\\\" json:\\\"caption,omitempty\\\"\"}, {prop: \"CaptionNoun\", name: \"CaptionNoun\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,4,opt,name=caption_noun\\\" json:\\\"caption_noun,omitempty\\\"\"}, {prop: \"Profession\", name: \"Profession\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,5,opt,name=profession\\\" json:\\\"profession,omitempty\\\"\"}, {prop: \"Labor\", name: \"Labor\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,6,opt,name=labor\\\" json:\\\"labor,omitempty\\\"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,7,opt,name=type\\\" json:\\\"type,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tProfessionAttr.init([{prop: \"Id\", name: \"Id\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,1,req,name=id\\\" json:\\\"id,omitempty\\\"\"}, {prop: \"Key\", name: \"Key\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,2,req,name=key\\\" json:\\\"key,omitempty\\\"\"}, {prop: \"Caption\", name: \"Caption\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,3,opt,name=caption\\\" json:\\\"caption,omitempty\\\"\"}, {prop: \"Military\", name: \"Military\", pkg: \"\", typ: ptrType$7, tag: \"protobuf:\\\"varint,4,opt,name=military\\\" json:\\\"military,omitempty\\\"\"}, {prop: \"CanAssignLabor\", name: \"CanAssignLabor\", pkg: \"\", typ: ptrType$7, tag: \"protobuf:\\\"varint,5,opt,name=can_assign_labor\\\" json:\\\"can_assign_labor,omitempty\\\"\"}, {prop: \"Parent\", name: \"Parent\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,6,opt,name=parent\\\" json:\\\"parent,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tUnitLaborAttr.init([{prop: \"Id\", name: \"Id\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,1,req,name=id\\\" json:\\\"id,omitempty\\\"\"}, {prop: \"Key\", name: \"Key\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,2,req,name=key\\\" json:\\\"key,omitempty\\\"\"}, {prop: \"Caption\", name: \"Caption\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,3,opt,name=caption\\\" json:\\\"caption,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tNameInfo.init([{prop: \"FirstName\", name: \"FirstName\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,1,opt,name=first_name\\\" json:\\\"first_name,omitempty\\\"\"}, {prop: \"Nickname\", name: \"Nickname\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,2,opt,name=nickname\\\" json:\\\"nickname,omitempty\\\"\"}, {prop: \"LanguageId\", name: \"LanguageId\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,3,opt,name=language_id,def=-1\\\" json:\\\"language_id,omitempty\\\"\"}, {prop: \"LastName\", name: \"LastName\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,4,opt,name=last_name\\\" json:\\\"last_name,omitempty\\\"\"}, {prop: \"EnglishName\", name: \"EnglishName\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,5,opt,name=english_name\\\" json:\\\"english_name,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tNameTriple.init([{prop: \"Normal\", name: \"Normal\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,1,req,name=normal\\\" json:\\\"normal,omitempty\\\"\"}, {prop: \"Plural\", name: \"Plural\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,2,opt,name=plural\\\" json:\\\"plural,omitempty\\\"\"}, {prop: \"Adjective\", name: \"Adjective\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,3,opt,name=adjective\\\" json:\\\"adjective,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tUnitCurseInfo.init([{prop: \"AddTags1\", name: \"AddTags1\", pkg: \"\", typ: ptrType$14, tag: \"protobuf:\\\"fixed32,1,req,name=add_tags1\\\" json:\\\"add_tags1,omitempty\\\"\"}, {prop: \"RemTags1\", name: \"RemTags1\", pkg: \"\", typ: ptrType$14, tag: \"protobuf:\\\"fixed32,2,req,name=rem_tags1\\\" json:\\\"rem_tags1,omitempty\\\"\"}, {prop: \"AddTags2\", name: \"AddTags2\", pkg: \"\", typ: ptrType$14, tag: \"protobuf:\\\"fixed32,3,req,name=add_tags2\\\" json:\\\"add_tags2,omitempty\\\"\"}, {prop: \"RemTags2\", name: \"RemTags2\", pkg: \"\", typ: ptrType$14, tag: \"protobuf:\\\"fixed32,4,req,name=rem_tags2\\\" json:\\\"rem_tags2,omitempty\\\"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: ptrType$13, tag: \"protobuf:\\\"bytes,5,opt,name=name\\\" json:\\\"name,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tSkillInfo.init([{prop: \"Id\", name: \"Id\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,1,req,name=id\\\" json:\\\"id,omitempty\\\"\"}, {prop: \"Level\", name: \"Level\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,2,req,name=level\\\" json:\\\"level,omitempty\\\"\"}, {prop: \"Experience\", name: \"Experience\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,3,req,name=experience\\\" json:\\\"experience,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tUnitMiscTrait.init([{prop: \"Id\", name: \"Id\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,1,req,name=id\\\" json:\\\"id,omitempty\\\"\"}, {prop: \"Value\", name: \"Value\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,2,req,name=value\\\" json:\\\"value,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tBasicUnitInfo.init([{prop: \"UnitId\", name: \"UnitId\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,1,req,name=unit_id\\\" json:\\\"unit_id,omitempty\\\"\"}, {prop: \"PosX\", name: \"PosX\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,13,req,name=pos_x\\\" json:\\\"pos_x,omitempty\\\"\"}, {prop: \"PosY\", name: \"PosY\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,14,req,name=pos_y\\\" json:\\\"pos_y,omitempty\\\"\"}, {prop: \"PosZ\", name: \"PosZ\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,15,req,name=pos_z\\\" json:\\\"pos_z,omitempty\\\"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: ptrType$12, tag: \"protobuf:\\\"bytes,2,opt,name=name\\\" json:\\\"name,omitempty\\\"\"}, {prop: \"Flags1\", name: \"Flags1\", pkg: \"\", typ: ptrType$14, tag: \"protobuf:\\\"fixed32,3,req,name=flags1\\\" json:\\\"flags1,omitempty\\\"\"}, {prop: \"Flags2\", name: \"Flags2\", pkg: \"\", typ: ptrType$14, tag: \"protobuf:\\\"fixed32,4,req,name=flags2\\\" json:\\\"flags2,omitempty\\\"\"}, {prop: \"Flags3\", name: \"Flags3\", pkg: \"\", typ: ptrType$14, tag: \"protobuf:\\\"fixed32,5,req,name=flags3\\\" json:\\\"flags3,omitempty\\\"\"}, {prop: \"Race\", name: \"Race\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,6,req,name=race\\\" json:\\\"race,omitempty\\\"\"}, {prop: \"Caste\", name: \"Caste\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,7,req,name=caste\\\" json:\\\"caste,omitempty\\\"\"}, {prop: \"Gender\", name: \"Gender\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,8,opt,name=gender,def=-1\\\" json:\\\"gender,omitempty\\\"\"}, {prop: \"CivId\", name: \"CivId\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,9,opt,name=civ_id,def=-1\\\" json:\\\"civ_id,omitempty\\\"\"}, {prop: \"HistfigId\", name: \"HistfigId\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,10,opt,name=histfig_id,def=-1\\\" json:\\\"histfig_id,omitempty\\\"\"}, {prop: \"DeathId\", name: \"DeathId\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,17,opt,name=death_id,def=-1\\\" json:\\\"death_id,omitempty\\\"\"}, {prop: \"DeathFlags\", name: \"DeathFlags\", pkg: \"\", typ: ptrType$14, tag: \"protobuf:\\\"varint,18,opt,name=death_flags\\\" json:\\\"death_flags,omitempty\\\"\"}, {prop: \"SquadId\", name: \"SquadId\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,19,opt,name=squad_id,def=-1\\\" json:\\\"squad_id,omitempty\\\"\"}, {prop: \"SquadPosition\", name: \"SquadPosition\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,20,opt,name=squad_position,def=-1\\\" json:\\\"squad_position,omitempty\\\"\"}, {prop: \"Profession\", name: \"Profession\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,22,opt,name=profession,def=-1\\\" json:\\\"profession,omitempty\\\"\"}, {prop: \"CustomProfession\", name: \"CustomProfession\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,23,opt,name=custom_profession\\\" json:\\\"custom_profession,omitempty\\\"\"}, {prop: \"Labors\", name: \"Labors\", pkg: \"\", typ: sliceType$1, tag: \"protobuf:\\\"varint,11,rep,name=labors\\\" json:\\\"labors,omitempty\\\"\"}, {prop: \"Skills\", name: \"Skills\", pkg: \"\", typ: sliceType$6, tag: \"protobuf:\\\"bytes,12,rep,name=skills\\\" json:\\\"skills,omitempty\\\"\"}, {prop: \"MiscTraits\", name: \"MiscTraits\", pkg: \"\", typ: sliceType$7, tag: \"protobuf:\\\"bytes,24,rep,name=misc_traits\\\" json:\\\"misc_traits,omitempty\\\"\"}, {prop: \"Curse\", name: \"Curse\", pkg: \"\", typ: ptrType$15, tag: \"protobuf:\\\"bytes,16,opt,name=curse\\\" json:\\\"curse,omitempty\\\"\"}, {prop: \"Burrows\", name: \"Burrows\", pkg: \"\", typ: sliceType$1, tag: \"protobuf:\\\"varint,21,rep,name=burrows\\\" json:\\\"burrows,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tBasicUnitInfoMask.init([{prop: \"Labors\", name: \"Labors\", pkg: \"\", typ: ptrType$7, tag: \"protobuf:\\\"varint,1,opt,name=labors,def=0\\\" json:\\\"labors,omitempty\\\"\"}, {prop: \"Skills\", name: \"Skills\", pkg: \"\", typ: ptrType$7, tag: \"protobuf:\\\"varint,2,opt,name=skills,def=0\\\" json:\\\"skills,omitempty\\\"\"}, {prop: \"Profession\", name: \"Profession\", pkg: \"\", typ: ptrType$7, tag: \"protobuf:\\\"varint,3,opt,name=profession,def=0\\\" json:\\\"profession,omitempty\\\"\"}, {prop: \"MiscTraits\", name: \"MiscTraits\", pkg: \"\", typ: ptrType$7, tag: \"protobuf:\\\"varint,4,opt,name=misc_traits,def=0\\\" json:\\\"misc_traits,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tBasicSquadInfo.init([{prop: \"SquadId\", name: \"SquadId\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,1,req,name=squad_id\\\" json:\\\"squad_id,omitempty\\\"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: ptrType$12, tag: \"protobuf:\\\"bytes,2,opt,name=name\\\" json:\\\"name,omitempty\\\"\"}, {prop: \"Alias\", name: \"Alias\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,3,opt,name=alias\\\" json:\\\"alias,omitempty\\\"\"}, {prop: \"Members\", name: \"Members\", pkg: \"\", typ: sliceType$1, tag: \"protobuf:\\\"zigzag32,4,rep,name=members\\\" json:\\\"members,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tUnitLaborState.init([{prop: \"UnitId\", name: \"UnitId\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,1,req,name=unit_id\\\" json:\\\"unit_id,omitempty\\\"\"}, {prop: \"Labor\", name: \"Labor\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,2,req,name=labor\\\" json:\\\"labor,omitempty\\\"\"}, {prop: \"Value\", name: \"Value\", pkg: \"\", typ: ptrType$7, tag: \"protobuf:\\\"varint,3,req,name=value\\\" json:\\\"value,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tGetWorldInfoOut.init([{prop: \"Mode\", name: \"Mode\", pkg: \"\", typ: ptrType$22, tag: \"protobuf:\\\"varint,1,req,name=mode,enum=dfproto.GetWorldInfoOut_Mode\\\" json:\\\"mode,omitempty\\\"\"}, {prop: \"SaveDir\", name: \"SaveDir\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,2,req,name=save_dir\\\" json:\\\"save_dir,omitempty\\\"\"}, {prop: \"WorldName\", name: \"WorldName\", pkg: \"\", typ: ptrType$12, tag: \"protobuf:\\\"bytes,3,opt,name=world_name\\\" json:\\\"world_name,omitempty\\\"\"}, {prop: \"CivId\", name: \"CivId\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,4,opt,name=civ_id\\\" json:\\\"civ_id,omitempty\\\"\"}, {prop: \"SiteId\", name: \"SiteId\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,5,opt,name=site_id\\\" json:\\\"site_id,omitempty\\\"\"}, {prop: \"GroupId\", name: \"GroupId\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,6,opt,name=group_id\\\" json:\\\"group_id,omitempty\\\"\"}, {prop: \"RaceId\", name: \"RaceId\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,7,opt,name=race_id\\\" json:\\\"race_id,omitempty\\\"\"}, {prop: \"PlayerUnitId\", name: \"PlayerUnitId\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,8,opt,name=player_unit_id\\\" json:\\\"player_unit_id,omitempty\\\"\"}, {prop: \"PlayerHistfigId\", name: \"PlayerHistfigId\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,9,opt,name=player_histfig_id\\\" json:\\\"player_histfig_id,omitempty\\\"\"}, {prop: \"CompanionHistfigIds\", name: \"CompanionHistfigIds\", pkg: \"\", typ: sliceType$1, tag: \"protobuf:\\\"varint,10,rep,name=companion_histfig_ids\\\" json:\\\"companion_histfig_ids,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tListEnumsOut.init([{prop: \"MaterialFlags\", name: \"MaterialFlags\", pkg: \"\", typ: sliceType$8, tag: \"protobuf:\\\"bytes,1,rep,name=material_flags\\\" json:\\\"material_flags,omitempty\\\"\"}, {prop: \"InorganicFlags\", name: \"InorganicFlags\", pkg: \"\", typ: sliceType$8, tag: \"protobuf:\\\"bytes,2,rep,name=inorganic_flags\\\" json:\\\"inorganic_flags,omitempty\\\"\"}, {prop: \"UnitFlags1\", name: \"UnitFlags1\", pkg: \"\", typ: sliceType$8, tag: \"protobuf:\\\"bytes,3,rep,name=unit_flags1\\\" json:\\\"unit_flags1,omitempty\\\"\"}, {prop: \"UnitFlags2\", name: \"UnitFlags2\", pkg: \"\", typ: sliceType$8, tag: \"protobuf:\\\"bytes,4,rep,name=unit_flags2\\\" json:\\\"unit_flags2,omitempty\\\"\"}, {prop: \"UnitFlags3\", name: \"UnitFlags3\", pkg: \"\", typ: sliceType$8, tag: \"protobuf:\\\"bytes,5,rep,name=unit_flags3\\\" json:\\\"unit_flags3,omitempty\\\"\"}, {prop: \"UnitLabor\", name: \"UnitLabor\", pkg: \"\", typ: sliceType$8, tag: \"protobuf:\\\"bytes,6,rep,name=unit_labor\\\" json:\\\"unit_labor,omitempty\\\"\"}, {prop: \"JobSkill\", name: \"JobSkill\", pkg: \"\", typ: sliceType$8, tag: \"protobuf:\\\"bytes,7,rep,name=job_skill\\\" json:\\\"job_skill,omitempty\\\"\"}, {prop: \"CieAddTagMask1\", name: \"CieAddTagMask1\", pkg: \"\", typ: sliceType$8, tag: \"protobuf:\\\"bytes,8,rep,name=cie_add_tag_mask1\\\" json:\\\"cie_add_tag_mask1,omitempty\\\"\"}, {prop: \"CieAddTagMask2\", name: \"CieAddTagMask2\", pkg: \"\", typ: sliceType$8, tag: \"protobuf:\\\"bytes,9,rep,name=cie_add_tag_mask2\\\" json:\\\"cie_add_tag_mask2,omitempty\\\"\"}, {prop: \"DeathInfoFlags\", name: \"DeathInfoFlags\", pkg: \"\", typ: sliceType$8, tag: \"protobuf:\\\"bytes,10,rep,name=death_info_flags\\\" json:\\\"death_info_flags,omitempty\\\"\"}, {prop: \"Profession\", name: \"Profession\", pkg: \"\", typ: sliceType$8, tag: \"protobuf:\\\"bytes,11,rep,name=profession\\\" json:\\\"profession,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tListJobSkillsOut.init([{prop: \"Skill\", name: \"Skill\", pkg: \"\", typ: sliceType$9, tag: \"protobuf:\\\"bytes,1,rep,name=skill\\\" json:\\\"skill,omitempty\\\"\"}, {prop: \"Profession\", name: \"Profession\", pkg: \"\", typ: sliceType$10, tag: \"protobuf:\\\"bytes,2,rep,name=profession\\\" json:\\\"profession,omitempty\\\"\"}, {prop: \"Labor\", name: \"Labor\", pkg: \"\", typ: sliceType$11, tag: \"protobuf:\\\"bytes,3,rep,name=labor\\\" json:\\\"labor,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tListMaterialsIn.init([{prop: \"Mask\", name: \"Mask\", pkg: \"\", typ: ptrType$8, tag: \"protobuf:\\\"bytes,1,opt,name=mask\\\" json:\\\"mask,omitempty\\\"\"}, {prop: \"IdList\", name: \"IdList\", pkg: \"\", typ: sliceType$12, tag: \"protobuf:\\\"bytes,2,rep,name=id_list\\\" json:\\\"id_list,omitempty\\\"\"}, {prop: \"Builtin\", name: \"Builtin\", pkg: \"\", typ: ptrType$7, tag: \"protobuf:\\\"varint,3,opt,name=builtin\\\" json:\\\"builtin,omitempty\\\"\"}, {prop: \"Inorganic\", name: \"Inorganic\", pkg: \"\", typ: ptrType$7, tag: \"protobuf:\\\"varint,4,opt,name=inorganic\\\" json:\\\"inorganic,omitempty\\\"\"}, {prop: \"Creatures\", name: \"Creatures\", pkg: \"\", typ: ptrType$7, tag: \"protobuf:\\\"varint,5,opt,name=creatures\\\" json:\\\"creatures,omitempty\\\"\"}, {prop: \"Plants\", name: \"Plants\", pkg: \"\", typ: ptrType$7, tag: \"protobuf:\\\"varint,6,opt,name=plants\\\" json:\\\"plants,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tListMaterialsOut.init([{prop: \"Value\", name: \"Value\", pkg: \"\", typ: sliceType$13, tag: \"protobuf:\\\"bytes,1,rep,name=value\\\" json:\\\"value,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tListUnitsIn.init([{prop: \"Mask\", name: \"Mask\", pkg: \"\", typ: ptrType$19, tag: \"protobuf:\\\"bytes,1,opt,name=mask\\\" json:\\\"mask,omitempty\\\"\"}, {prop: \"IdList\", name: \"IdList\", pkg: \"\", typ: sliceType$1, tag: \"protobuf:\\\"varint,2,rep,name=id_list\\\" json:\\\"id_list,omitempty\\\"\"}, {prop: \"ScanAll\", name: \"ScanAll\", pkg: \"\", typ: ptrType$7, tag: \"protobuf:\\\"varint,5,opt,name=scan_all\\\" json:\\\"scan_all,omitempty\\\"\"}, {prop: \"Race\", name: \"Race\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,3,opt,name=race\\\" json:\\\"race,omitempty\\\"\"}, {prop: \"CivId\", name: \"CivId\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,4,opt,name=civ_id\\\" json:\\\"civ_id,omitempty\\\"\"}, {prop: \"Dead\", name: \"Dead\", pkg: \"\", typ: ptrType$7, tag: \"protobuf:\\\"varint,6,opt,name=dead\\\" json:\\\"dead,omitempty\\\"\"}, {prop: \"Alive\", name: \"Alive\", pkg: \"\", typ: ptrType$7, tag: \"protobuf:\\\"varint,7,opt,name=alive\\\" json:\\\"alive,omitempty\\\"\"}, {prop: \"Sane\", name: \"Sane\", pkg: \"\", typ: ptrType$7, tag: \"protobuf:\\\"varint,8,opt,name=sane\\\" json:\\\"sane,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tListUnitsOut.init([{prop: \"Value\", name: \"Value\", pkg: \"\", typ: sliceType$14, tag: \"protobuf:\\\"bytes,1,rep,name=value\\\" json:\\\"value,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tListSquadsIn.init([{prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tListSquadsOut.init([{prop: \"Value\", name: \"Value\", pkg: \"\", typ: sliceType$15, tag: \"protobuf:\\\"bytes,1,rep,name=value\\\" json:\\\"value,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tSetUnitLaborsIn.init([{prop: \"Change\", name: \"Change\", pkg: \"\", typ: sliceType$16, tag: \"protobuf:\\\"bytes,1,rep,name=change\\\" json:\\\"change,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tCoreTextFragment.init([{prop: \"Text\", name: \"Text\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,1,req,name=text\\\" json:\\\"text,omitempty\\\"\"}, {prop: \"Color\", name: \"Color\", pkg: \"\", typ: ptrType$32, tag: \"protobuf:\\\"varint,2,opt,name=color,enum=dfproto.CoreTextFragment_Color\\\" json:\\\"color,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tCoreTextNotification.init([{prop: \"Fragments\", name: \"Fragments\", pkg: \"\", typ: sliceType$17, tag: \"protobuf:\\\"bytes,1,rep,name=fragments\\\" json:\\\"fragments,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tEmptyMessage.init([{prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tIntMessage.init([{prop: \"Value\", name: \"Value\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,1,req,name=value\\\" json:\\\"value,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tStringMessage.init([{prop: \"Value\", name: \"Value\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,1,req,name=value\\\" json:\\\"value,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tStringListMessage.init([{prop: \"Value\", name: \"Value\", pkg: \"\", typ: sliceType$3, tag: \"protobuf:\\\"bytes,1,rep,name=value\\\" json:\\\"value,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tCoreBindRequest.init([{prop: \"Method\", name: \"Method\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,1,req,name=method\\\" json:\\\"method,omitempty\\\"\"}, {prop: \"InputMsg\", name: \"InputMsg\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,2,req,name=input_msg\\\" json:\\\"input_msg,omitempty\\\"\"}, {prop: \"OutputMsg\", name: \"OutputMsg\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,3,req,name=output_msg\\\" json:\\\"output_msg,omitempty\\\"\"}, {prop: \"Plugin\", name: \"Plugin\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,4,opt,name=plugin\\\" json:\\\"plugin,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tCoreBindReply.init([{prop: \"AssignedId\", name: \"AssignedId\", pkg: \"\", typ: ptrType$1, tag: \"protobuf:\\\"varint,1,req,name=assigned_id\\\" json:\\\"assigned_id,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tCoreRunCommandRequest.init([{prop: \"Command\", name: \"Command\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,1,req,name=command\\\" json:\\\"command,omitempty\\\"\"}, {prop: \"Arguments\", name: \"Arguments\", pkg: \"\", typ: sliceType$3, tag: \"protobuf:\\\"bytes,2,rep,name=arguments\\\" json:\\\"arguments,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\tCoreRunLuaRequest.init([{prop: \"Module\", name: \"Module\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,1,req,name=module\\\" json:\\\"module,omitempty\\\"\"}, {prop: \"Function\", name: \"Function\", pkg: \"\", typ: ptrType$2, tag: \"protobuf:\\\"bytes,2,req,name=function\\\" json:\\\"function,omitempty\\\"\"}, {prop: \"Arguments\", name: \"Arguments\", pkg: \"\", typ: sliceType$3, tag: \"protobuf:\\\"bytes,3,rep,name=arguments\\\" json:\\\"arguments,omitempty\\\"\"}, {prop: \"XXX_unrecognized\", name: \"XXX_unrecognized\", pkg: \"\", typ: sliceType, tag: \"json:\\\"-\\\"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = proto.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$pkg.BasicMaterialInfoMask_StateType_name = (_map = new $Map(), _key = 0, _map[_key] = { k: _key, v: \"Solid\" }, _key = 1, _map[_key] = { k: _key, v: \"Liquid\" }, _key = 2, _map[_key] = { k: _key, v: \"Gas\" }, _key = 3, _map[_key] = { k: _key, v: \"Powder\" }, _key = 4, _map[_key] = { k: _key, v: \"Paste\" }, _key = 5, _map[_key] = { k: _key, v: \"Pressed\" }, _map);\n\t\t$pkg.BasicMaterialInfoMask_StateType_value = (_map$1 = new $Map(), _key$1 = \"Solid\", _map$1[_key$1] = { k: _key$1, v: 0 }, _key$1 = \"Liquid\", _map$1[_key$1] = { k: _key$1, v: 1 }, _key$1 = \"Gas\", _map$1[_key$1] = { k: _key$1, v: 2 }, _key$1 = \"Powder\", _map$1[_key$1] = { k: _key$1, v: 3 }, _key$1 = \"Paste\", _map$1[_key$1] = { k: _key$1, v: 4 }, _key$1 = \"Pressed\", _map$1[_key$1] = { k: _key$1, v: 5 }, _map$1);\n\t\t$pkg.GetWorldInfoOut_Mode_name = (_map$2 = new $Map(), _key$2 = 1, _map$2[_key$2] = { k: _key$2, v: \"MODE_DWARF\" }, _key$2 = 2, _map$2[_key$2] = { k: _key$2, v: \"MODE_ADVENTURE\" }, _key$2 = 3, _map$2[_key$2] = { k: _key$2, v: \"MODE_LEGENDS\" }, _map$2);\n\t\t$pkg.GetWorldInfoOut_Mode_value = (_map$3 = new $Map(), _key$3 = \"MODE_DWARF\", _map$3[_key$3] = { k: _key$3, v: 1 }, _key$3 = \"MODE_ADVENTURE\", _map$3[_key$3] = { k: _key$3, v: 2 }, _key$3 = \"MODE_LEGENDS\", _map$3[_key$3] = { k: _key$3, v: 3 }, _map$3);\n\t\t$pkg.CoreTextFragment_Color_name = (_map$4 = new $Map(), _key$4 = 0, _map$4[_key$4] = { k: _key$4, v: \"COLOR_BLACK\" }, _key$4 = 1, _map$4[_key$4] = { k: _key$4, v: \"COLOR_BLUE\" }, _key$4 = 2, _map$4[_key$4] = { k: _key$4, v: \"COLOR_GREEN\" }, _key$4 = 3, _map$4[_key$4] = { k: _key$4, v: \"COLOR_CYAN\" }, _key$4 = 4, _map$4[_key$4] = { k: _key$4, v: \"COLOR_RED\" }, _key$4 = 5, _map$4[_key$4] = { k: _key$4, v: \"COLOR_MAGENTA\" }, _key$4 = 6, _map$4[_key$4] = { k: _key$4, v: \"COLOR_BROWN\" }, _key$4 = 7, _map$4[_key$4] = { k: _key$4, v: \"COLOR_GREY\" }, _key$4 = 8, _map$4[_key$4] = { k: _key$4, v: \"COLOR_DARKGREY\" }, _key$4 = 9, _map$4[_key$4] = { k: _key$4, v: \"COLOR_LIGHTBLUE\" }, _key$4 = 10, _map$4[_key$4] = { k: _key$4, v: \"COLOR_LIGHTGREEN\" }, _key$4 = 11, _map$4[_key$4] = { k: _key$4, v: \"COLOR_LIGHTCYAN\" }, _key$4 = 12, _map$4[_key$4] = { k: _key$4, v: \"COLOR_LIGHTRED\" }, _key$4 = 13, _map$4[_key$4] = { k: _key$4, v: \"COLOR_LIGHTMAGENTA\" }, _key$4 = 14, _map$4[_key$4] = { k: _key$4, v: \"COLOR_YELLOW\" }, _key$4 = 15, _map$4[_key$4] = { k: _key$4, v: \"COLOR_WHITE\" }, _map$4);\n\t\t$pkg.CoreTextFragment_Color_value = (_map$5 = new $Map(), _key$5 = \"COLOR_BLACK\", _map$5[_key$5] = { k: _key$5, v: 0 }, _key$5 = \"COLOR_BLUE\", _map$5[_key$5] = { k: _key$5, v: 1 }, _key$5 = \"COLOR_GREEN\", _map$5[_key$5] = { k: _key$5, v: 2 }, _key$5 = \"COLOR_CYAN\", _map$5[_key$5] = { k: _key$5, v: 3 }, _key$5 = \"COLOR_RED\", _map$5[_key$5] = { k: _key$5, v: 4 }, _key$5 = \"COLOR_MAGENTA\", _map$5[_key$5] = { k: _key$5, v: 5 }, _key$5 = \"COLOR_BROWN\", _map$5[_key$5] = { k: _key$5, v: 6 }, _key$5 = \"COLOR_GREY\", _map$5[_key$5] = { k: _key$5, v: 7 }, _key$5 = \"COLOR_DARKGREY\", _map$5[_key$5] = { k: _key$5, v: 8 }, _key$5 = \"COLOR_LIGHTBLUE\", _map$5[_key$5] = { k: _key$5, v: 9 }, _key$5 = \"COLOR_LIGHTGREEN\", _map$5[_key$5] = { k: _key$5, v: 10 }, _key$5 = \"COLOR_LIGHTCYAN\", _map$5[_key$5] = { k: _key$5, v: 11 }, _key$5 = \"COLOR_LIGHTRED\", _map$5[_key$5] = { k: _key$5, v: 12 }, _key$5 = \"COLOR_LIGHTMAGENTA\", _map$5[_key$5] = { k: _key$5, v: 13 }, _key$5 = \"COLOR_YELLOW\", _map$5[_key$5] = { k: _key$5, v: 14 }, _key$5 = \"COLOR_WHITE\", _map$5[_key$5] = { k: _key$5, v: 15 }, _map$5);\n\t\t$pkg.CoreErrorNotification_ErrorCode_name = (_map$6 = new $Map(), _key$6 = -3, _map$6[_key$6] = { k: _key$6, v: \"CR_LINK_FAILURE\" }, _key$6 = -2, _map$6[_key$6] = { k: _key$6, v: \"CR_WOULD_BREAK\" }, _key$6 = -1, _map$6[_key$6] = { k: _key$6, v: \"CR_NOT_IMPLEMENTED\" }, _key$6 = 0, _map$6[_key$6] = { k: _key$6, v: \"CR_OK\" }, _key$6 = 1, _map$6[_key$6] = { k: _key$6, v: \"CR_FAILURE\" }, _key$6 = 2, _map$6[_key$6] = { k: _key$6, v: \"CR_WRONG_USAGE\" }, _key$6 = 3, _map$6[_key$6] = { k: _key$6, v: \"CR_NOT_FOUND\" }, _map$6);\n\t\t$pkg.CoreErrorNotification_ErrorCode_value = (_map$7 = new $Map(), _key$7 = \"CR_LINK_FAILURE\", _map$7[_key$7] = { k: _key$7, v: -3 }, _key$7 = \"CR_WOULD_BREAK\", _map$7[_key$7] = { k: _key$7, v: -2 }, _key$7 = \"CR_NOT_IMPLEMENTED\", _map$7[_key$7] = { k: _key$7, v: -1 }, _key$7 = \"CR_OK\", _map$7[_key$7] = { k: _key$7, v: 0 }, _key$7 = \"CR_FAILURE\", _map$7[_key$7] = { k: _key$7, v: 1 }, _key$7 = \"CR_WRONG_USAGE\", _map$7[_key$7] = { k: _key$7, v: 2 }, _key$7 = \"CR_NOT_FOUND\", _map$7[_key$7] = { k: _key$7, v: 3 }, _map$7);\n\t\tinit();\n\t\tinit$1();\n\t\tinit$2();\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"honnef.co/go/js/dom\"] = (function() {\n\tvar $pkg = {}, $init, js, strings, time, TokenList, Document, document, htmlDocument, URLUtils, Location, HTMLElement, Window, window, Selection, Screen, Navigator, Geolocation, PositionError, PositionOptions, Position, Coordinates, History, Console, DocumentType, DOMImplementation, StyleSheet, Node, BasicNode, Element, ClientRect, BasicHTMLElement, BasicElement, HTMLAnchorElement, HTMLAppletElement, HTMLAreaElement, HTMLAudioElement, HTMLBRElement, HTMLBaseElement, HTMLBodyElement, ValidityState, HTMLButtonElement, HTMLCanvasElement, CanvasRenderingContext2D, HTMLDListElement, HTMLDataElement, HTMLDataListElement, HTMLDirectoryElement, HTMLDivElement, HTMLEmbedElement, HTMLFieldSetElement, HTMLFontElement, HTMLFormElement, HTMLFrameElement, HTMLFrameSetElement, HTMLHRElement, HTMLHeadElement, HTMLHeadingElement, HTMLHtmlElement, HTMLIFrameElement, HTMLImageElement, HTMLInputElement, File, HTMLKeygenElement, HTMLLIElement, HTMLLabelElement, HTMLLegendElement, HTMLLinkElement, HTMLMapElement, HTMLMediaElement, HTMLMenuElement, HTMLMetaElement, HTMLMeterElement, HTMLModElement, HTMLOListElement, HTMLObjectElement, HTMLOptGroupElement, HTMLOptionElement, HTMLOutputElement, HTMLParagraphElement, HTMLParamElement, HTMLPreElement, HTMLProgressElement, HTMLQuoteElement, HTMLScriptElement, HTMLSelectElement, HTMLSourceElement, HTMLSpanElement, HTMLStyleElement, HTMLTableCaptionElement, HTMLTableCellElement, HTMLTableColElement, HTMLTableDataCellElement, HTMLTableElement, HTMLTableHeaderCellElement, HTMLTableRowElement, HTMLTableSectionElement, HTMLTextAreaElement, HTMLTimeElement, HTMLTitleElement, TextTrack, HTMLTrackElement, HTMLUListElement, HTMLUnknownElement, HTMLVideoElement, CSSStyleDeclaration, Text, Event, BasicEvent, AnimationEvent, AudioProcessingEvent, BeforeInputEvent, BeforeUnloadEvent, BlobEvent, ClipboardEvent, CloseEvent, CompositionEvent, CSSFontFaceLoadEvent, CustomEvent, DeviceLightEvent, DeviceMotionEvent, DeviceOrientationEvent, DeviceProximityEvent, DOMTransactionEvent, DragEvent, EditingBeforeInputEvent, ErrorEvent, FocusEvent, GamepadEvent, HashChangeEvent, IDBVersionChangeEvent, KeyboardEvent, MediaStreamEvent, MessageEvent, MouseEvent, MutationEvent, OfflineAudioCompletionEvent, PageTransitionEvent, PointerEvent, PopStateEvent, ProgressEvent, RelatedEvent, RTCPeerConnectionIceEvent, SensorEvent, StorageEvent, SVGEvent, SVGZoomEvent, TimeEvent, TouchEvent, TrackEvent, TransitionEvent, UIEvent, UserProximityEvent, WheelEvent, sliceType, sliceType$1, sliceType$2, sliceType$3, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, sliceType$4, ptrType$5, sliceType$5, sliceType$6, sliceType$7, ptrType$6, ptrType$7, sliceType$8, ptrType$8, sliceType$9, ptrType$9, sliceType$10, sliceType$11, ptrType$10, funcType, ptrType$11, funcType$1, ptrType$12, sliceType$12, ptrType$13, ptrType$14, sliceType$13, ptrType$15, sliceType$14, ptrType$16, sliceType$15, ptrType$17, ptrType$18, ptrType$19, funcType$2, ptrType$20, ptrType$21, ptrType$22, ptrType$23, ptrType$24, ptrType$25, funcType$3, ptrType$26, ptrType$27, funcType$4, funcType$5, ptrType$28, ptrType$29, ptrType$30, ptrType$31, ptrType$32, ptrType$33, ptrType$34, ptrType$35, ptrType$36, ptrType$37, ptrType$38, ptrType$39, ptrType$40, ptrType$41, ptrType$42, ptrType$43, ptrType$44, ptrType$45, ptrType$46, ptrType$47, ptrType$48, ptrType$49, ptrType$50, ptrType$51, mapType, ptrType$52, ptrType$53, callRecover, nodeListToNodes, nodeListToElements, nodeListToHTMLElements, wrapDocument, wrapNode, wrapElement, wrapHTMLElement, getForm, getLabels, getOptions, wrapDOMHighResTimeStamp, WrapEvent, wrapEvent;\n\tjs = $packages[\"github.com/gopherjs/gopherjs/js\"];\n\tstrings = $packages[\"strings\"];\n\ttime = $packages[\"time\"];\n\tTokenList = $pkg.TokenList = $newType(0, $kindStruct, \"dom.TokenList\", \"TokenList\", \"honnef.co/go/js/dom\", function(dtl_, o_, sa_, Length_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.dtl = null;\n\t\t\tthis.o = null;\n\t\t\tthis.sa = \"\";\n\t\t\tthis.Length = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.dtl = dtl_;\n\t\tthis.o = o_;\n\t\tthis.sa = sa_;\n\t\tthis.Length = Length_;\n\t});\n\tDocument = $pkg.Document = $newType(8, $kindInterface, \"dom.Document\", \"Document\", \"honnef.co/go/js/dom\", null);\n\tdocument = $pkg.document = $newType(0, $kindStruct, \"dom.document\", \"document\", \"honnef.co/go/js/dom\", function(BasicNode_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicNode = ptrType$21.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicNode = BasicNode_;\n\t});\n\thtmlDocument = $pkg.htmlDocument = $newType(0, $kindStruct, \"dom.htmlDocument\", \"htmlDocument\", \"honnef.co/go/js/dom\", function(document_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.document = ptrType$22.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.document = document_;\n\t});\n\tURLUtils = $pkg.URLUtils = $newType(0, $kindStruct, \"dom.URLUtils\", \"URLUtils\", \"honnef.co/go/js/dom\", function(Object_, Href_, Protocol_, Host_, Hostname_, Port_, Pathname_, Search_, Hash_, Username_, Password_, Origin_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Object = null;\n\t\t\tthis.Href = \"\";\n\t\t\tthis.Protocol = \"\";\n\t\t\tthis.Host = \"\";\n\t\t\tthis.Hostname = \"\";\n\t\t\tthis.Port = \"\";\n\t\t\tthis.Pathname = \"\";\n\t\t\tthis.Search = \"\";\n\t\t\tthis.Hash = \"\";\n\t\t\tthis.Username = \"\";\n\t\t\tthis.Password = \"\";\n\t\t\tthis.Origin = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.Object = Object_;\n\t\tthis.Href = Href_;\n\t\tthis.Protocol = Protocol_;\n\t\tthis.Host = Host_;\n\t\tthis.Hostname = Hostname_;\n\t\tthis.Port = Port_;\n\t\tthis.Pathname = Pathname_;\n\t\tthis.Search = Search_;\n\t\tthis.Hash = Hash_;\n\t\tthis.Username = Username_;\n\t\tthis.Password = Password_;\n\t\tthis.Origin = Origin_;\n\t});\n\tLocation = $pkg.Location = $newType(0, $kindStruct, \"dom.Location\", \"Location\", \"honnef.co/go/js/dom\", function(Object_, URLUtils_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Object = null;\n\t\t\tthis.URLUtils = ptrType$1.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Object = Object_;\n\t\tthis.URLUtils = URLUtils_;\n\t});\n\tHTMLElement = $pkg.HTMLElement = $newType(8, $kindInterface, \"dom.HTMLElement\", \"HTMLElement\", \"honnef.co/go/js/dom\", null);\n\tWindow = $pkg.Window = $newType(8, $kindInterface, \"dom.Window\", \"Window\", \"honnef.co/go/js/dom\", null);\n\twindow = $pkg.window = $newType(0, $kindStruct, \"dom.window\", \"window\", \"honnef.co/go/js/dom\", function(Object_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Object = null;\n\t\t\treturn;\n\t\t}\n\t\tthis.Object = Object_;\n\t});\n\tSelection = $pkg.Selection = $newType(8, $kindInterface, \"dom.Selection\", \"Selection\", \"honnef.co/go/js/dom\", null);\n\tScreen = $pkg.Screen = $newType(0, $kindStruct, \"dom.Screen\", \"Screen\", \"honnef.co/go/js/dom\", function(Object_, AvailTop_, AvailLeft_, AvailHeight_, AvailWidth_, ColorDepth_, Height_, Left_, PixelDepth_, Top_, Width_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Object = null;\n\t\t\tthis.AvailTop = 0;\n\t\t\tthis.AvailLeft = 0;\n\t\t\tthis.AvailHeight = 0;\n\t\t\tthis.AvailWidth = 0;\n\t\t\tthis.ColorDepth = 0;\n\t\t\tthis.Height = 0;\n\t\t\tthis.Left = 0;\n\t\t\tthis.PixelDepth = 0;\n\t\t\tthis.Top = 0;\n\t\t\tthis.Width = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.Object = Object_;\n\t\tthis.AvailTop = AvailTop_;\n\t\tthis.AvailLeft = AvailLeft_;\n\t\tthis.AvailHeight = AvailHeight_;\n\t\tthis.AvailWidth = AvailWidth_;\n\t\tthis.ColorDepth = ColorDepth_;\n\t\tthis.Height = Height_;\n\t\tthis.Left = Left_;\n\t\tthis.PixelDepth = PixelDepth_;\n\t\tthis.Top = Top_;\n\t\tthis.Width = Width_;\n\t});\n\tNavigator = $pkg.Navigator = $newType(8, $kindInterface, \"dom.Navigator\", \"Navigator\", \"honnef.co/go/js/dom\", null);\n\tGeolocation = $pkg.Geolocation = $newType(8, $kindInterface, \"dom.Geolocation\", \"Geolocation\", \"honnef.co/go/js/dom\", null);\n\tPositionError = $pkg.PositionError = $newType(0, $kindStruct, \"dom.PositionError\", \"PositionError\", \"honnef.co/go/js/dom\", function(Object_, Code_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Object = null;\n\t\t\tthis.Code = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.Object = Object_;\n\t\tthis.Code = Code_;\n\t});\n\tPositionOptions = $pkg.PositionOptions = $newType(0, $kindStruct, \"dom.PositionOptions\", \"PositionOptions\", \"honnef.co/go/js/dom\", function(EnableHighAccuracy_, Timeout_, MaximumAge_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.EnableHighAccuracy = false;\n\t\t\tthis.Timeout = new time.Duration(0, 0);\n\t\t\tthis.MaximumAge = new time.Duration(0, 0);\n\t\t\treturn;\n\t\t}\n\t\tthis.EnableHighAccuracy = EnableHighAccuracy_;\n\t\tthis.Timeout = Timeout_;\n\t\tthis.MaximumAge = MaximumAge_;\n\t});\n\tPosition = $pkg.Position = $newType(0, $kindStruct, \"dom.Position\", \"Position\", \"honnef.co/go/js/dom\", function(Coords_, Timestamp_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Coords = ptrType$29.nil;\n\t\t\tthis.Timestamp = new time.Time.ptr();\n\t\t\treturn;\n\t\t}\n\t\tthis.Coords = Coords_;\n\t\tthis.Timestamp = Timestamp_;\n\t});\n\tCoordinates = $pkg.Coordinates = $newType(0, $kindStruct, \"dom.Coordinates\", \"Coordinates\", \"honnef.co/go/js/dom\", function(Object_, Latitude_, Longitude_, Altitude_, Accuracy_, AltitudeAccuracy_, Heading_, Speed_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Object = null;\n\t\t\tthis.Latitude = 0;\n\t\t\tthis.Longitude = 0;\n\t\t\tthis.Altitude = 0;\n\t\t\tthis.Accuracy = 0;\n\t\t\tthis.AltitudeAccuracy = 0;\n\t\t\tthis.Heading = 0;\n\t\t\tthis.Speed = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.Object = Object_;\n\t\tthis.Latitude = Latitude_;\n\t\tthis.Longitude = Longitude_;\n\t\tthis.Altitude = Altitude_;\n\t\tthis.Accuracy = Accuracy_;\n\t\tthis.AltitudeAccuracy = AltitudeAccuracy_;\n\t\tthis.Heading = Heading_;\n\t\tthis.Speed = Speed_;\n\t});\n\tHistory = $pkg.History = $newType(8, $kindInterface, \"dom.History\", \"History\", \"honnef.co/go/js/dom\", null);\n\tConsole = $pkg.Console = $newType(0, $kindStruct, \"dom.Console\", \"Console\", \"honnef.co/go/js/dom\", function(Object_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Object = null;\n\t\t\treturn;\n\t\t}\n\t\tthis.Object = Object_;\n\t});\n\tDocumentType = $pkg.DocumentType = $newType(8, $kindInterface, \"dom.DocumentType\", \"DocumentType\", \"honnef.co/go/js/dom\", null);\n\tDOMImplementation = $pkg.DOMImplementation = $newType(8, $kindInterface, \"dom.DOMImplementation\", \"DOMImplementation\", \"honnef.co/go/js/dom\", null);\n\tStyleSheet = $pkg.StyleSheet = $newType(8, $kindInterface, \"dom.StyleSheet\", \"StyleSheet\", \"honnef.co/go/js/dom\", null);\n\tNode = $pkg.Node = $newType(8, $kindInterface, \"dom.Node\", \"Node\", \"honnef.co/go/js/dom\", null);\n\tBasicNode = $pkg.BasicNode = $newType(0, $kindStruct, \"dom.BasicNode\", \"BasicNode\", \"honnef.co/go/js/dom\", function(Object_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Object = null;\n\t\t\treturn;\n\t\t}\n\t\tthis.Object = Object_;\n\t});\n\tElement = $pkg.Element = $newType(8, $kindInterface, \"dom.Element\", \"Element\", \"honnef.co/go/js/dom\", null);\n\tClientRect = $pkg.ClientRect = $newType(0, $kindStruct, \"dom.ClientRect\", \"ClientRect\", \"honnef.co/go/js/dom\", function(Object_, Height_, Width_, Left_, Right_, Top_, Bottom_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Object = null;\n\t\t\tthis.Height = 0;\n\t\t\tthis.Width = 0;\n\t\t\tthis.Left = 0;\n\t\t\tthis.Right = 0;\n\t\t\tthis.Top = 0;\n\t\t\tthis.Bottom = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.Object = Object_;\n\t\tthis.Height = Height_;\n\t\tthis.Width = Width_;\n\t\tthis.Left = Left_;\n\t\tthis.Right = Right_;\n\t\tthis.Top = Top_;\n\t\tthis.Bottom = Bottom_;\n\t});\n\tBasicHTMLElement = $pkg.BasicHTMLElement = $newType(0, $kindStruct, \"dom.BasicHTMLElement\", \"BasicHTMLElement\", \"honnef.co/go/js/dom\", function(BasicElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicElement = ptrType$30.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicElement = BasicElement_;\n\t});\n\tBasicElement = $pkg.BasicElement = $newType(0, $kindStruct, \"dom.BasicElement\", \"BasicElement\", \"honnef.co/go/js/dom\", function(BasicNode_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicNode = ptrType$21.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicNode = BasicNode_;\n\t});\n\tHTMLAnchorElement = $pkg.HTMLAnchorElement = $newType(0, $kindStruct, \"dom.HTMLAnchorElement\", \"HTMLAnchorElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, URLUtils_, HrefLang_, Media_, TabIndex_, Target_, Text_, Type_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.URLUtils = ptrType$1.nil;\n\t\t\tthis.HrefLang = \"\";\n\t\t\tthis.Media = \"\";\n\t\t\tthis.TabIndex = 0;\n\t\t\tthis.Target = \"\";\n\t\t\tthis.Text = \"\";\n\t\t\tthis.Type = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.URLUtils = URLUtils_;\n\t\tthis.HrefLang = HrefLang_;\n\t\tthis.Media = Media_;\n\t\tthis.TabIndex = TabIndex_;\n\t\tthis.Target = Target_;\n\t\tthis.Text = Text_;\n\t\tthis.Type = Type_;\n\t});\n\tHTMLAppletElement = $pkg.HTMLAppletElement = $newType(0, $kindStruct, \"dom.HTMLAppletElement\", \"HTMLAppletElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Alt_, Coords_, HrefLang_, Media_, Search_, Shape_, TabIndex_, Target_, Type_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Alt = \"\";\n\t\t\tthis.Coords = \"\";\n\t\t\tthis.HrefLang = \"\";\n\t\t\tthis.Media = \"\";\n\t\t\tthis.Search = \"\";\n\t\t\tthis.Shape = \"\";\n\t\t\tthis.TabIndex = 0;\n\t\t\tthis.Target = \"\";\n\t\t\tthis.Type = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Alt = Alt_;\n\t\tthis.Coords = Coords_;\n\t\tthis.HrefLang = HrefLang_;\n\t\tthis.Media = Media_;\n\t\tthis.Search = Search_;\n\t\tthis.Shape = Shape_;\n\t\tthis.TabIndex = TabIndex_;\n\t\tthis.Target = Target_;\n\t\tthis.Type = Type_;\n\t});\n\tHTMLAreaElement = $pkg.HTMLAreaElement = $newType(0, $kindStruct, \"dom.HTMLAreaElement\", \"HTMLAreaElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, URLUtils_, Alt_, Coords_, HrefLang_, Media_, Search_, Shape_, TabIndex_, Target_, Type_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.URLUtils = ptrType$1.nil;\n\t\t\tthis.Alt = \"\";\n\t\t\tthis.Coords = \"\";\n\t\t\tthis.HrefLang = \"\";\n\t\t\tthis.Media = \"\";\n\t\t\tthis.Search = \"\";\n\t\t\tthis.Shape = \"\";\n\t\t\tthis.TabIndex = 0;\n\t\t\tthis.Target = \"\";\n\t\t\tthis.Type = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.URLUtils = URLUtils_;\n\t\tthis.Alt = Alt_;\n\t\tthis.Coords = Coords_;\n\t\tthis.HrefLang = HrefLang_;\n\t\tthis.Media = Media_;\n\t\tthis.Search = Search_;\n\t\tthis.Shape = Shape_;\n\t\tthis.TabIndex = TabIndex_;\n\t\tthis.Target = Target_;\n\t\tthis.Type = Type_;\n\t});\n\tHTMLAudioElement = $pkg.HTMLAudioElement = $newType(0, $kindStruct, \"dom.HTMLAudioElement\", \"HTMLAudioElement\", \"honnef.co/go/js/dom\", function(HTMLMediaElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.HTMLMediaElement = ptrType$2.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.HTMLMediaElement = HTMLMediaElement_;\n\t});\n\tHTMLBRElement = $pkg.HTMLBRElement = $newType(0, $kindStruct, \"dom.HTMLBRElement\", \"HTMLBRElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLBaseElement = $pkg.HTMLBaseElement = $newType(0, $kindStruct, \"dom.HTMLBaseElement\", \"HTMLBaseElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLBodyElement = $pkg.HTMLBodyElement = $newType(0, $kindStruct, \"dom.HTMLBodyElement\", \"HTMLBodyElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tValidityState = $pkg.ValidityState = $newType(0, $kindStruct, \"dom.ValidityState\", \"ValidityState\", \"honnef.co/go/js/dom\", function(Object_, CustomError_, PatternMismatch_, RangeOverflow_, RangeUnderflow_, StepMismatch_, TooLong_, TypeMismatch_, Valid_, ValueMissing_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Object = null;\n\t\t\tthis.CustomError = false;\n\t\t\tthis.PatternMismatch = false;\n\t\t\tthis.RangeOverflow = false;\n\t\t\tthis.RangeUnderflow = false;\n\t\t\tthis.StepMismatch = false;\n\t\t\tthis.TooLong = false;\n\t\t\tthis.TypeMismatch = false;\n\t\t\tthis.Valid = false;\n\t\t\tthis.ValueMissing = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.Object = Object_;\n\t\tthis.CustomError = CustomError_;\n\t\tthis.PatternMismatch = PatternMismatch_;\n\t\tthis.RangeOverflow = RangeOverflow_;\n\t\tthis.RangeUnderflow = RangeUnderflow_;\n\t\tthis.StepMismatch = StepMismatch_;\n\t\tthis.TooLong = TooLong_;\n\t\tthis.TypeMismatch = TypeMismatch_;\n\t\tthis.Valid = Valid_;\n\t\tthis.ValueMissing = ValueMissing_;\n\t});\n\tHTMLButtonElement = $pkg.HTMLButtonElement = $newType(0, $kindStruct, \"dom.HTMLButtonElement\", \"HTMLButtonElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, AutoFocus_, Disabled_, FormAction_, FormEncType_, FormMethod_, FormNoValidate_, FormTarget_, Name_, TabIndex_, Type_, ValidationMessage_, Value_, WillValidate_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.AutoFocus = false;\n\t\t\tthis.Disabled = false;\n\t\t\tthis.FormAction = \"\";\n\t\t\tthis.FormEncType = \"\";\n\t\t\tthis.FormMethod = \"\";\n\t\t\tthis.FormNoValidate = false;\n\t\t\tthis.FormTarget = \"\";\n\t\t\tthis.Name = \"\";\n\t\t\tthis.TabIndex = 0;\n\t\t\tthis.Type = \"\";\n\t\t\tthis.ValidationMessage = \"\";\n\t\t\tthis.Value = \"\";\n\t\t\tthis.WillValidate = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.AutoFocus = AutoFocus_;\n\t\tthis.Disabled = Disabled_;\n\t\tthis.FormAction = FormAction_;\n\t\tthis.FormEncType = FormEncType_;\n\t\tthis.FormMethod = FormMethod_;\n\t\tthis.FormNoValidate = FormNoValidate_;\n\t\tthis.FormTarget = FormTarget_;\n\t\tthis.Name = Name_;\n\t\tthis.TabIndex = TabIndex_;\n\t\tthis.Type = Type_;\n\t\tthis.ValidationMessage = ValidationMessage_;\n\t\tthis.Value = Value_;\n\t\tthis.WillValidate = WillValidate_;\n\t});\n\tHTMLCanvasElement = $pkg.HTMLCanvasElement = $newType(0, $kindStruct, \"dom.HTMLCanvasElement\", \"HTMLCanvasElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Height_, Width_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Height = 0;\n\t\t\tthis.Width = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Height = Height_;\n\t\tthis.Width = Width_;\n\t});\n\tCanvasRenderingContext2D = $pkg.CanvasRenderingContext2D = $newType(0, $kindStruct, \"dom.CanvasRenderingContext2D\", \"CanvasRenderingContext2D\", \"honnef.co/go/js/dom\", function(Object_, FillStyle_, StrokeStyle_, ShadowColor_, ShadowBlur_, ShadowOffsetX_, ShadowOffsetY_, LineCap_, LineJoin_, LineWidth_, MiterLimit_, Font_, TextAlign_, TextBaseline_, GlobalAlpha_, GlobalCompositeOperation_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Object = null;\n\t\t\tthis.FillStyle = \"\";\n\t\t\tthis.StrokeStyle = \"\";\n\t\t\tthis.ShadowColor = \"\";\n\t\t\tthis.ShadowBlur = 0;\n\t\t\tthis.ShadowOffsetX = 0;\n\t\t\tthis.ShadowOffsetY = 0;\n\t\t\tthis.LineCap = \"\";\n\t\t\tthis.LineJoin = \"\";\n\t\t\tthis.LineWidth = 0;\n\t\t\tthis.MiterLimit = 0;\n\t\t\tthis.Font = \"\";\n\t\t\tthis.TextAlign = \"\";\n\t\t\tthis.TextBaseline = \"\";\n\t\t\tthis.GlobalAlpha = 0;\n\t\t\tthis.GlobalCompositeOperation = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.Object = Object_;\n\t\tthis.FillStyle = FillStyle_;\n\t\tthis.StrokeStyle = StrokeStyle_;\n\t\tthis.ShadowColor = ShadowColor_;\n\t\tthis.ShadowBlur = ShadowBlur_;\n\t\tthis.ShadowOffsetX = ShadowOffsetX_;\n\t\tthis.ShadowOffsetY = ShadowOffsetY_;\n\t\tthis.LineCap = LineCap_;\n\t\tthis.LineJoin = LineJoin_;\n\t\tthis.LineWidth = LineWidth_;\n\t\tthis.MiterLimit = MiterLimit_;\n\t\tthis.Font = Font_;\n\t\tthis.TextAlign = TextAlign_;\n\t\tthis.TextBaseline = TextBaseline_;\n\t\tthis.GlobalAlpha = GlobalAlpha_;\n\t\tthis.GlobalCompositeOperation = GlobalCompositeOperation_;\n\t});\n\tHTMLDListElement = $pkg.HTMLDListElement = $newType(0, $kindStruct, \"dom.HTMLDListElement\", \"HTMLDListElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLDataElement = $pkg.HTMLDataElement = $newType(0, $kindStruct, \"dom.HTMLDataElement\", \"HTMLDataElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Value_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Value = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Value = Value_;\n\t});\n\tHTMLDataListElement = $pkg.HTMLDataListElement = $newType(0, $kindStruct, \"dom.HTMLDataListElement\", \"HTMLDataListElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLDirectoryElement = $pkg.HTMLDirectoryElement = $newType(0, $kindStruct, \"dom.HTMLDirectoryElement\", \"HTMLDirectoryElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLDivElement = $pkg.HTMLDivElement = $newType(0, $kindStruct, \"dom.HTMLDivElement\", \"HTMLDivElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLEmbedElement = $pkg.HTMLEmbedElement = $newType(0, $kindStruct, \"dom.HTMLEmbedElement\", \"HTMLEmbedElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Src_, Type_, Width_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Src = \"\";\n\t\t\tthis.Type = \"\";\n\t\t\tthis.Width = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Src = Src_;\n\t\tthis.Type = Type_;\n\t\tthis.Width = Width_;\n\t});\n\tHTMLFieldSetElement = $pkg.HTMLFieldSetElement = $newType(0, $kindStruct, \"dom.HTMLFieldSetElement\", \"HTMLFieldSetElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Disabled_, Name_, Type_, ValidationMessage_, WillValidate_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Disabled = false;\n\t\t\tthis.Name = \"\";\n\t\t\tthis.Type = \"\";\n\t\t\tthis.ValidationMessage = \"\";\n\t\t\tthis.WillValidate = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Disabled = Disabled_;\n\t\tthis.Name = Name_;\n\t\tthis.Type = Type_;\n\t\tthis.ValidationMessage = ValidationMessage_;\n\t\tthis.WillValidate = WillValidate_;\n\t});\n\tHTMLFontElement = $pkg.HTMLFontElement = $newType(0, $kindStruct, \"dom.HTMLFontElement\", \"HTMLFontElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLFormElement = $pkg.HTMLFormElement = $newType(0, $kindStruct, \"dom.HTMLFormElement\", \"HTMLFormElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, AcceptCharset_, Action_, Autocomplete_, Encoding_, Enctype_, Length_, Method_, Name_, NoValidate_, Target_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.AcceptCharset = \"\";\n\t\t\tthis.Action = \"\";\n\t\t\tthis.Autocomplete = \"\";\n\t\t\tthis.Encoding = \"\";\n\t\t\tthis.Enctype = \"\";\n\t\t\tthis.Length = 0;\n\t\t\tthis.Method = \"\";\n\t\t\tthis.Name = \"\";\n\t\t\tthis.NoValidate = false;\n\t\t\tthis.Target = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.AcceptCharset = AcceptCharset_;\n\t\tthis.Action = Action_;\n\t\tthis.Autocomplete = Autocomplete_;\n\t\tthis.Encoding = Encoding_;\n\t\tthis.Enctype = Enctype_;\n\t\tthis.Length = Length_;\n\t\tthis.Method = Method_;\n\t\tthis.Name = Name_;\n\t\tthis.NoValidate = NoValidate_;\n\t\tthis.Target = Target_;\n\t});\n\tHTMLFrameElement = $pkg.HTMLFrameElement = $newType(0, $kindStruct, \"dom.HTMLFrameElement\", \"HTMLFrameElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLFrameSetElement = $pkg.HTMLFrameSetElement = $newType(0, $kindStruct, \"dom.HTMLFrameSetElement\", \"HTMLFrameSetElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLHRElement = $pkg.HTMLHRElement = $newType(0, $kindStruct, \"dom.HTMLHRElement\", \"HTMLHRElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLHeadElement = $pkg.HTMLHeadElement = $newType(0, $kindStruct, \"dom.HTMLHeadElement\", \"HTMLHeadElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLHeadingElement = $pkg.HTMLHeadingElement = $newType(0, $kindStruct, \"dom.HTMLHeadingElement\", \"HTMLHeadingElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLHtmlElement = $pkg.HTMLHtmlElement = $newType(0, $kindStruct, \"dom.HTMLHtmlElement\", \"HTMLHtmlElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLIFrameElement = $pkg.HTMLIFrameElement = $newType(0, $kindStruct, \"dom.HTMLIFrameElement\", \"HTMLIFrameElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Width_, Height_, Name_, Src_, SrcDoc_, Seamless_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Width = \"\";\n\t\t\tthis.Height = \"\";\n\t\t\tthis.Name = \"\";\n\t\t\tthis.Src = \"\";\n\t\t\tthis.SrcDoc = \"\";\n\t\t\tthis.Seamless = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Width = Width_;\n\t\tthis.Height = Height_;\n\t\tthis.Name = Name_;\n\t\tthis.Src = Src_;\n\t\tthis.SrcDoc = SrcDoc_;\n\t\tthis.Seamless = Seamless_;\n\t});\n\tHTMLImageElement = $pkg.HTMLImageElement = $newType(0, $kindStruct, \"dom.HTMLImageElement\", \"HTMLImageElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Complete_, CrossOrigin_, Height_, IsMap_, NaturalHeight_, NaturalWidth_, Src_, UseMap_, Width_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Complete = false;\n\t\t\tthis.CrossOrigin = \"\";\n\t\t\tthis.Height = 0;\n\t\t\tthis.IsMap = false;\n\t\t\tthis.NaturalHeight = 0;\n\t\t\tthis.NaturalWidth = 0;\n\t\t\tthis.Src = \"\";\n\t\t\tthis.UseMap = \"\";\n\t\t\tthis.Width = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Complete = Complete_;\n\t\tthis.CrossOrigin = CrossOrigin_;\n\t\tthis.Height = Height_;\n\t\tthis.IsMap = IsMap_;\n\t\tthis.NaturalHeight = NaturalHeight_;\n\t\tthis.NaturalWidth = NaturalWidth_;\n\t\tthis.Src = Src_;\n\t\tthis.UseMap = UseMap_;\n\t\tthis.Width = Width_;\n\t});\n\tHTMLInputElement = $pkg.HTMLInputElement = $newType(0, $kindStruct, \"dom.HTMLInputElement\", \"HTMLInputElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Accept_, Alt_, Autocomplete_, Autofocus_, Checked_, DefaultChecked_, DefaultValue_, DirName_, Disabled_, FormAction_, FormEncType_, FormMethod_, FormNoValidate_, FormTarget_, Height_, Indeterminate_, Max_, MaxLength_, Min_, Multiple_, Name_, Pattern_, Placeholder_, ReadOnly_, Required_, SelectionDirection_, SelectionEnd_, SelectionStart_, Size_, Src_, Step_, TabIndex_, Type_, ValidationMessage_, Value_, ValueAsDate_, ValueAsNumber_, Width_, WillValidate_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Accept = \"\";\n\t\t\tthis.Alt = \"\";\n\t\t\tthis.Autocomplete = \"\";\n\t\t\tthis.Autofocus = false;\n\t\t\tthis.Checked = false;\n\t\t\tthis.DefaultChecked = false;\n\t\t\tthis.DefaultValue = \"\";\n\t\t\tthis.DirName = \"\";\n\t\t\tthis.Disabled = false;\n\t\t\tthis.FormAction = \"\";\n\t\t\tthis.FormEncType = \"\";\n\t\t\tthis.FormMethod = \"\";\n\t\t\tthis.FormNoValidate = false;\n\t\t\tthis.FormTarget = \"\";\n\t\t\tthis.Height = \"\";\n\t\t\tthis.Indeterminate = false;\n\t\t\tthis.Max = \"\";\n\t\t\tthis.MaxLength = 0;\n\t\t\tthis.Min = \"\";\n\t\t\tthis.Multiple = false;\n\t\t\tthis.Name = \"\";\n\t\t\tthis.Pattern = \"\";\n\t\t\tthis.Placeholder = \"\";\n\t\t\tthis.ReadOnly = false;\n\t\t\tthis.Required = false;\n\t\t\tthis.SelectionDirection = \"\";\n\t\t\tthis.SelectionEnd = 0;\n\t\t\tthis.SelectionStart = 0;\n\t\t\tthis.Size = 0;\n\t\t\tthis.Src = \"\";\n\t\t\tthis.Step = \"\";\n\t\t\tthis.TabIndex = 0;\n\t\t\tthis.Type = \"\";\n\t\t\tthis.ValidationMessage = \"\";\n\t\t\tthis.Value = \"\";\n\t\t\tthis.ValueAsDate = new time.Time.ptr();\n\t\t\tthis.ValueAsNumber = 0;\n\t\t\tthis.Width = \"\";\n\t\t\tthis.WillValidate = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Accept = Accept_;\n\t\tthis.Alt = Alt_;\n\t\tthis.Autocomplete = Autocomplete_;\n\t\tthis.Autofocus = Autofocus_;\n\t\tthis.Checked = Checked_;\n\t\tthis.DefaultChecked = DefaultChecked_;\n\t\tthis.DefaultValue = DefaultValue_;\n\t\tthis.DirName = DirName_;\n\t\tthis.Disabled = Disabled_;\n\t\tthis.FormAction = FormAction_;\n\t\tthis.FormEncType = FormEncType_;\n\t\tthis.FormMethod = FormMethod_;\n\t\tthis.FormNoValidate = FormNoValidate_;\n\t\tthis.FormTarget = FormTarget_;\n\t\tthis.Height = Height_;\n\t\tthis.Indeterminate = Indeterminate_;\n\t\tthis.Max = Max_;\n\t\tthis.MaxLength = MaxLength_;\n\t\tthis.Min = Min_;\n\t\tthis.Multiple = Multiple_;\n\t\tthis.Name = Name_;\n\t\tthis.Pattern = Pattern_;\n\t\tthis.Placeholder = Placeholder_;\n\t\tthis.ReadOnly = ReadOnly_;\n\t\tthis.Required = Required_;\n\t\tthis.SelectionDirection = SelectionDirection_;\n\t\tthis.SelectionEnd = SelectionEnd_;\n\t\tthis.SelectionStart = SelectionStart_;\n\t\tthis.Size = Size_;\n\t\tthis.Src = Src_;\n\t\tthis.Step = Step_;\n\t\tthis.TabIndex = TabIndex_;\n\t\tthis.Type = Type_;\n\t\tthis.ValidationMessage = ValidationMessage_;\n\t\tthis.Value = Value_;\n\t\tthis.ValueAsDate = ValueAsDate_;\n\t\tthis.ValueAsNumber = ValueAsNumber_;\n\t\tthis.Width = Width_;\n\t\tthis.WillValidate = WillValidate_;\n\t});\n\tFile = $pkg.File = $newType(0, $kindStruct, \"dom.File\", \"File\", \"honnef.co/go/js/dom\", function(Object_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Object = null;\n\t\t\treturn;\n\t\t}\n\t\tthis.Object = Object_;\n\t});\n\tHTMLKeygenElement = $pkg.HTMLKeygenElement = $newType(0, $kindStruct, \"dom.HTMLKeygenElement\", \"HTMLKeygenElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Autofocus_, Challenge_, Disabled_, Keytype_, Name_, Type_, ValidationMessage_, WillValidate_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Autofocus = false;\n\t\t\tthis.Challenge = \"\";\n\t\t\tthis.Disabled = false;\n\t\t\tthis.Keytype = \"\";\n\t\t\tthis.Name = \"\";\n\t\t\tthis.Type = \"\";\n\t\t\tthis.ValidationMessage = \"\";\n\t\t\tthis.WillValidate = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Autofocus = Autofocus_;\n\t\tthis.Challenge = Challenge_;\n\t\tthis.Disabled = Disabled_;\n\t\tthis.Keytype = Keytype_;\n\t\tthis.Name = Name_;\n\t\tthis.Type = Type_;\n\t\tthis.ValidationMessage = ValidationMessage_;\n\t\tthis.WillValidate = WillValidate_;\n\t});\n\tHTMLLIElement = $pkg.HTMLLIElement = $newType(0, $kindStruct, \"dom.HTMLLIElement\", \"HTMLLIElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Value_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Value = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Value = Value_;\n\t});\n\tHTMLLabelElement = $pkg.HTMLLabelElement = $newType(0, $kindStruct, \"dom.HTMLLabelElement\", \"HTMLLabelElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, For_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.For = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.For = For_;\n\t});\n\tHTMLLegendElement = $pkg.HTMLLegendElement = $newType(0, $kindStruct, \"dom.HTMLLegendElement\", \"HTMLLegendElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLLinkElement = $pkg.HTMLLinkElement = $newType(0, $kindStruct, \"dom.HTMLLinkElement\", \"HTMLLinkElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Disabled_, Href_, HrefLang_, Media_, Type_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Disabled = false;\n\t\t\tthis.Href = \"\";\n\t\t\tthis.HrefLang = \"\";\n\t\t\tthis.Media = \"\";\n\t\t\tthis.Type = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Disabled = Disabled_;\n\t\tthis.Href = Href_;\n\t\tthis.HrefLang = HrefLang_;\n\t\tthis.Media = Media_;\n\t\tthis.Type = Type_;\n\t});\n\tHTMLMapElement = $pkg.HTMLMapElement = $newType(0, $kindStruct, \"dom.HTMLMapElement\", \"HTMLMapElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Name_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Name = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Name = Name_;\n\t});\n\tHTMLMediaElement = $pkg.HTMLMediaElement = $newType(0, $kindStruct, \"dom.HTMLMediaElement\", \"HTMLMediaElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLMenuElement = $pkg.HTMLMenuElement = $newType(0, $kindStruct, \"dom.HTMLMenuElement\", \"HTMLMenuElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLMetaElement = $pkg.HTMLMetaElement = $newType(0, $kindStruct, \"dom.HTMLMetaElement\", \"HTMLMetaElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Content_, HTTPEquiv_, Name_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Content = \"\";\n\t\t\tthis.HTTPEquiv = \"\";\n\t\t\tthis.Name = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Content = Content_;\n\t\tthis.HTTPEquiv = HTTPEquiv_;\n\t\tthis.Name = Name_;\n\t});\n\tHTMLMeterElement = $pkg.HTMLMeterElement = $newType(0, $kindStruct, \"dom.HTMLMeterElement\", \"HTMLMeterElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, High_, Low_, Max_, Min_, Optimum_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.High = 0;\n\t\t\tthis.Low = 0;\n\t\t\tthis.Max = 0;\n\t\t\tthis.Min = 0;\n\t\t\tthis.Optimum = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.High = High_;\n\t\tthis.Low = Low_;\n\t\tthis.Max = Max_;\n\t\tthis.Min = Min_;\n\t\tthis.Optimum = Optimum_;\n\t});\n\tHTMLModElement = $pkg.HTMLModElement = $newType(0, $kindStruct, \"dom.HTMLModElement\", \"HTMLModElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Cite_, DateTime_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Cite = \"\";\n\t\t\tthis.DateTime = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Cite = Cite_;\n\t\tthis.DateTime = DateTime_;\n\t});\n\tHTMLOListElement = $pkg.HTMLOListElement = $newType(0, $kindStruct, \"dom.HTMLOListElement\", \"HTMLOListElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Reversed_, Start_, Type_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Reversed = false;\n\t\t\tthis.Start = 0;\n\t\t\tthis.Type = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Reversed = Reversed_;\n\t\tthis.Start = Start_;\n\t\tthis.Type = Type_;\n\t});\n\tHTMLObjectElement = $pkg.HTMLObjectElement = $newType(0, $kindStruct, \"dom.HTMLObjectElement\", \"HTMLObjectElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Data_, Height_, Name_, TabIndex_, Type_, TypeMustMatch_, UseMap_, ValidationMessage_, With_, WillValidate_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Data = \"\";\n\t\t\tthis.Height = \"\";\n\t\t\tthis.Name = \"\";\n\t\t\tthis.TabIndex = 0;\n\t\t\tthis.Type = \"\";\n\t\t\tthis.TypeMustMatch = false;\n\t\t\tthis.UseMap = \"\";\n\t\t\tthis.ValidationMessage = \"\";\n\t\t\tthis.With = \"\";\n\t\t\tthis.WillValidate = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Data = Data_;\n\t\tthis.Height = Height_;\n\t\tthis.Name = Name_;\n\t\tthis.TabIndex = TabIndex_;\n\t\tthis.Type = Type_;\n\t\tthis.TypeMustMatch = TypeMustMatch_;\n\t\tthis.UseMap = UseMap_;\n\t\tthis.ValidationMessage = ValidationMessage_;\n\t\tthis.With = With_;\n\t\tthis.WillValidate = WillValidate_;\n\t});\n\tHTMLOptGroupElement = $pkg.HTMLOptGroupElement = $newType(0, $kindStruct, \"dom.HTMLOptGroupElement\", \"HTMLOptGroupElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Disabled_, Label_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Disabled = false;\n\t\t\tthis.Label = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Disabled = Disabled_;\n\t\tthis.Label = Label_;\n\t});\n\tHTMLOptionElement = $pkg.HTMLOptionElement = $newType(0, $kindStruct, \"dom.HTMLOptionElement\", \"HTMLOptionElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, DefaultSelected_, Disabled_, Index_, Label_, Selected_, Text_, Value_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.DefaultSelected = false;\n\t\t\tthis.Disabled = false;\n\t\t\tthis.Index = 0;\n\t\t\tthis.Label = \"\";\n\t\t\tthis.Selected = false;\n\t\t\tthis.Text = \"\";\n\t\t\tthis.Value = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.DefaultSelected = DefaultSelected_;\n\t\tthis.Disabled = Disabled_;\n\t\tthis.Index = Index_;\n\t\tthis.Label = Label_;\n\t\tthis.Selected = Selected_;\n\t\tthis.Text = Text_;\n\t\tthis.Value = Value_;\n\t});\n\tHTMLOutputElement = $pkg.HTMLOutputElement = $newType(0, $kindStruct, \"dom.HTMLOutputElement\", \"HTMLOutputElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, DefaultValue_, Name_, Type_, ValidationMessage_, Value_, WillValidate_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.DefaultValue = \"\";\n\t\t\tthis.Name = \"\";\n\t\t\tthis.Type = \"\";\n\t\t\tthis.ValidationMessage = \"\";\n\t\t\tthis.Value = \"\";\n\t\t\tthis.WillValidate = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.DefaultValue = DefaultValue_;\n\t\tthis.Name = Name_;\n\t\tthis.Type = Type_;\n\t\tthis.ValidationMessage = ValidationMessage_;\n\t\tthis.Value = Value_;\n\t\tthis.WillValidate = WillValidate_;\n\t});\n\tHTMLParagraphElement = $pkg.HTMLParagraphElement = $newType(0, $kindStruct, \"dom.HTMLParagraphElement\", \"HTMLParagraphElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLParamElement = $pkg.HTMLParamElement = $newType(0, $kindStruct, \"dom.HTMLParamElement\", \"HTMLParamElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Name_, Value_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Name = \"\";\n\t\t\tthis.Value = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Name = Name_;\n\t\tthis.Value = Value_;\n\t});\n\tHTMLPreElement = $pkg.HTMLPreElement = $newType(0, $kindStruct, \"dom.HTMLPreElement\", \"HTMLPreElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLProgressElement = $pkg.HTMLProgressElement = $newType(0, $kindStruct, \"dom.HTMLProgressElement\", \"HTMLProgressElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Max_, Position_, Value_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Max = 0;\n\t\t\tthis.Position = 0;\n\t\t\tthis.Value = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Max = Max_;\n\t\tthis.Position = Position_;\n\t\tthis.Value = Value_;\n\t});\n\tHTMLQuoteElement = $pkg.HTMLQuoteElement = $newType(0, $kindStruct, \"dom.HTMLQuoteElement\", \"HTMLQuoteElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Cite_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Cite = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Cite = Cite_;\n\t});\n\tHTMLScriptElement = $pkg.HTMLScriptElement = $newType(0, $kindStruct, \"dom.HTMLScriptElement\", \"HTMLScriptElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Type_, Src_, Charset_, Async_, Defer_, Text_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Type = \"\";\n\t\t\tthis.Src = \"\";\n\t\t\tthis.Charset = \"\";\n\t\t\tthis.Async = false;\n\t\t\tthis.Defer = false;\n\t\t\tthis.Text = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Type = Type_;\n\t\tthis.Src = Src_;\n\t\tthis.Charset = Charset_;\n\t\tthis.Async = Async_;\n\t\tthis.Defer = Defer_;\n\t\tthis.Text = Text_;\n\t});\n\tHTMLSelectElement = $pkg.HTMLSelectElement = $newType(0, $kindStruct, \"dom.HTMLSelectElement\", \"HTMLSelectElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Autofocus_, Disabled_, Length_, Multiple_, Name_, Required_, SelectedIndex_, Size_, Type_, ValidationMessage_, Value_, WillValidate_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Autofocus = false;\n\t\t\tthis.Disabled = false;\n\t\t\tthis.Length = 0;\n\t\t\tthis.Multiple = false;\n\t\t\tthis.Name = \"\";\n\t\t\tthis.Required = false;\n\t\t\tthis.SelectedIndex = 0;\n\t\t\tthis.Size = 0;\n\t\t\tthis.Type = \"\";\n\t\t\tthis.ValidationMessage = \"\";\n\t\t\tthis.Value = \"\";\n\t\t\tthis.WillValidate = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Autofocus = Autofocus_;\n\t\tthis.Disabled = Disabled_;\n\t\tthis.Length = Length_;\n\t\tthis.Multiple = Multiple_;\n\t\tthis.Name = Name_;\n\t\tthis.Required = Required_;\n\t\tthis.SelectedIndex = SelectedIndex_;\n\t\tthis.Size = Size_;\n\t\tthis.Type = Type_;\n\t\tthis.ValidationMessage = ValidationMessage_;\n\t\tthis.Value = Value_;\n\t\tthis.WillValidate = WillValidate_;\n\t});\n\tHTMLSourceElement = $pkg.HTMLSourceElement = $newType(0, $kindStruct, \"dom.HTMLSourceElement\", \"HTMLSourceElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Media_, Src_, Type_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Media = \"\";\n\t\t\tthis.Src = \"\";\n\t\t\tthis.Type = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Media = Media_;\n\t\tthis.Src = Src_;\n\t\tthis.Type = Type_;\n\t});\n\tHTMLSpanElement = $pkg.HTMLSpanElement = $newType(0, $kindStruct, \"dom.HTMLSpanElement\", \"HTMLSpanElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLStyleElement = $pkg.HTMLStyleElement = $newType(0, $kindStruct, \"dom.HTMLStyleElement\", \"HTMLStyleElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLTableCaptionElement = $pkg.HTMLTableCaptionElement = $newType(0, $kindStruct, \"dom.HTMLTableCaptionElement\", \"HTMLTableCaptionElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLTableCellElement = $pkg.HTMLTableCellElement = $newType(0, $kindStruct, \"dom.HTMLTableCellElement\", \"HTMLTableCellElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, ColSpan_, RowSpan_, CellIndex_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.ColSpan = 0;\n\t\t\tthis.RowSpan = 0;\n\t\t\tthis.CellIndex = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.ColSpan = ColSpan_;\n\t\tthis.RowSpan = RowSpan_;\n\t\tthis.CellIndex = CellIndex_;\n\t});\n\tHTMLTableColElement = $pkg.HTMLTableColElement = $newType(0, $kindStruct, \"dom.HTMLTableColElement\", \"HTMLTableColElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Span_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Span = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Span = Span_;\n\t});\n\tHTMLTableDataCellElement = $pkg.HTMLTableDataCellElement = $newType(0, $kindStruct, \"dom.HTMLTableDataCellElement\", \"HTMLTableDataCellElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLTableElement = $pkg.HTMLTableElement = $newType(0, $kindStruct, \"dom.HTMLTableElement\", \"HTMLTableElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLTableHeaderCellElement = $pkg.HTMLTableHeaderCellElement = $newType(0, $kindStruct, \"dom.HTMLTableHeaderCellElement\", \"HTMLTableHeaderCellElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Abbr_, Scope_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Abbr = \"\";\n\t\t\tthis.Scope = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Abbr = Abbr_;\n\t\tthis.Scope = Scope_;\n\t});\n\tHTMLTableRowElement = $pkg.HTMLTableRowElement = $newType(0, $kindStruct, \"dom.HTMLTableRowElement\", \"HTMLTableRowElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, RowIndex_, SectionRowIndex_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.RowIndex = 0;\n\t\t\tthis.SectionRowIndex = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.RowIndex = RowIndex_;\n\t\tthis.SectionRowIndex = SectionRowIndex_;\n\t});\n\tHTMLTableSectionElement = $pkg.HTMLTableSectionElement = $newType(0, $kindStruct, \"dom.HTMLTableSectionElement\", \"HTMLTableSectionElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLTextAreaElement = $pkg.HTMLTextAreaElement = $newType(0, $kindStruct, \"dom.HTMLTextAreaElement\", \"HTMLTextAreaElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Autocomplete_, Autofocus_, Cols_, DefaultValue_, DirName_, Disabled_, MaxLength_, Name_, Placeholder_, ReadOnly_, Required_, Rows_, SelectionDirection_, SelectionStart_, SelectionEnd_, TabIndex_, TextLength_, Type_, ValidationMessage_, Value_, WillValidate_, Wrap_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Autocomplete = \"\";\n\t\t\tthis.Autofocus = false;\n\t\t\tthis.Cols = 0;\n\t\t\tthis.DefaultValue = \"\";\n\t\t\tthis.DirName = \"\";\n\t\t\tthis.Disabled = false;\n\t\t\tthis.MaxLength = 0;\n\t\t\tthis.Name = \"\";\n\t\t\tthis.Placeholder = \"\";\n\t\t\tthis.ReadOnly = false;\n\t\t\tthis.Required = false;\n\t\t\tthis.Rows = 0;\n\t\t\tthis.SelectionDirection = \"\";\n\t\t\tthis.SelectionStart = 0;\n\t\t\tthis.SelectionEnd = 0;\n\t\t\tthis.TabIndex = 0;\n\t\t\tthis.TextLength = 0;\n\t\t\tthis.Type = \"\";\n\t\t\tthis.ValidationMessage = \"\";\n\t\t\tthis.Value = \"\";\n\t\t\tthis.WillValidate = false;\n\t\t\tthis.Wrap = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Autocomplete = Autocomplete_;\n\t\tthis.Autofocus = Autofocus_;\n\t\tthis.Cols = Cols_;\n\t\tthis.DefaultValue = DefaultValue_;\n\t\tthis.DirName = DirName_;\n\t\tthis.Disabled = Disabled_;\n\t\tthis.MaxLength = MaxLength_;\n\t\tthis.Name = Name_;\n\t\tthis.Placeholder = Placeholder_;\n\t\tthis.ReadOnly = ReadOnly_;\n\t\tthis.Required = Required_;\n\t\tthis.Rows = Rows_;\n\t\tthis.SelectionDirection = SelectionDirection_;\n\t\tthis.SelectionStart = SelectionStart_;\n\t\tthis.SelectionEnd = SelectionEnd_;\n\t\tthis.TabIndex = TabIndex_;\n\t\tthis.TextLength = TextLength_;\n\t\tthis.Type = Type_;\n\t\tthis.ValidationMessage = ValidationMessage_;\n\t\tthis.Value = Value_;\n\t\tthis.WillValidate = WillValidate_;\n\t\tthis.Wrap = Wrap_;\n\t});\n\tHTMLTimeElement = $pkg.HTMLTimeElement = $newType(0, $kindStruct, \"dom.HTMLTimeElement\", \"HTMLTimeElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, DateTime_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.DateTime = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.DateTime = DateTime_;\n\t});\n\tHTMLTitleElement = $pkg.HTMLTitleElement = $newType(0, $kindStruct, \"dom.HTMLTitleElement\", \"HTMLTitleElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Text_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Text = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Text = Text_;\n\t});\n\tTextTrack = $pkg.TextTrack = $newType(0, $kindStruct, \"dom.TextTrack\", \"TextTrack\", \"honnef.co/go/js/dom\", function(Object_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Object = null;\n\t\t\treturn;\n\t\t}\n\t\tthis.Object = Object_;\n\t});\n\tHTMLTrackElement = $pkg.HTMLTrackElement = $newType(0, $kindStruct, \"dom.HTMLTrackElement\", \"HTMLTrackElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_, Kind_, Src_, Srclang_, Label_, Default_, ReadyState_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\tthis.Kind = \"\";\n\t\t\tthis.Src = \"\";\n\t\t\tthis.Srclang = \"\";\n\t\t\tthis.Label = \"\";\n\t\t\tthis.Default = false;\n\t\t\tthis.ReadyState = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t\tthis.Kind = Kind_;\n\t\tthis.Src = Src_;\n\t\tthis.Srclang = Srclang_;\n\t\tthis.Label = Label_;\n\t\tthis.Default = Default_;\n\t\tthis.ReadyState = ReadyState_;\n\t});\n\tHTMLUListElement = $pkg.HTMLUListElement = $newType(0, $kindStruct, \"dom.HTMLUListElement\", \"HTMLUListElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLUnknownElement = $pkg.HTMLUnknownElement = $newType(0, $kindStruct, \"dom.HTMLUnknownElement\", \"HTMLUnknownElement\", \"honnef.co/go/js/dom\", function(BasicHTMLElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicHTMLElement = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicHTMLElement = BasicHTMLElement_;\n\t});\n\tHTMLVideoElement = $pkg.HTMLVideoElement = $newType(0, $kindStruct, \"dom.HTMLVideoElement\", \"HTMLVideoElement\", \"honnef.co/go/js/dom\", function(HTMLMediaElement_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.HTMLMediaElement = ptrType$2.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.HTMLMediaElement = HTMLMediaElement_;\n\t});\n\tCSSStyleDeclaration = $pkg.CSSStyleDeclaration = $newType(0, $kindStruct, \"dom.CSSStyleDeclaration\", \"CSSStyleDeclaration\", \"honnef.co/go/js/dom\", function(Object_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Object = null;\n\t\t\treturn;\n\t\t}\n\t\tthis.Object = Object_;\n\t});\n\tText = $pkg.Text = $newType(0, $kindStruct, \"dom.Text\", \"Text\", \"honnef.co/go/js/dom\", function(BasicNode_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicNode = ptrType$21.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicNode = BasicNode_;\n\t});\n\tEvent = $pkg.Event = $newType(8, $kindInterface, \"dom.Event\", \"Event\", \"honnef.co/go/js/dom\", null);\n\tBasicEvent = $pkg.BasicEvent = $newType(0, $kindStruct, \"dom.BasicEvent\", \"BasicEvent\", \"honnef.co/go/js/dom\", function(Object_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Object = null;\n\t\t\treturn;\n\t\t}\n\t\tthis.Object = Object_;\n\t});\n\tAnimationEvent = $pkg.AnimationEvent = $newType(0, $kindStruct, \"dom.AnimationEvent\", \"AnimationEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tAudioProcessingEvent = $pkg.AudioProcessingEvent = $newType(0, $kindStruct, \"dom.AudioProcessingEvent\", \"AudioProcessingEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tBeforeInputEvent = $pkg.BeforeInputEvent = $newType(0, $kindStruct, \"dom.BeforeInputEvent\", \"BeforeInputEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tBeforeUnloadEvent = $pkg.BeforeUnloadEvent = $newType(0, $kindStruct, \"dom.BeforeUnloadEvent\", \"BeforeUnloadEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tBlobEvent = $pkg.BlobEvent = $newType(0, $kindStruct, \"dom.BlobEvent\", \"BlobEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tClipboardEvent = $pkg.ClipboardEvent = $newType(0, $kindStruct, \"dom.ClipboardEvent\", \"ClipboardEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tCloseEvent = $pkg.CloseEvent = $newType(0, $kindStruct, \"dom.CloseEvent\", \"CloseEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_, Code_, Reason_, WasClean_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\tthis.Code = 0;\n\t\t\tthis.Reason = \"\";\n\t\t\tthis.WasClean = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t\tthis.Code = Code_;\n\t\tthis.Reason = Reason_;\n\t\tthis.WasClean = WasClean_;\n\t});\n\tCompositionEvent = $pkg.CompositionEvent = $newType(0, $kindStruct, \"dom.CompositionEvent\", \"CompositionEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tCSSFontFaceLoadEvent = $pkg.CSSFontFaceLoadEvent = $newType(0, $kindStruct, \"dom.CSSFontFaceLoadEvent\", \"CSSFontFaceLoadEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tCustomEvent = $pkg.CustomEvent = $newType(0, $kindStruct, \"dom.CustomEvent\", \"CustomEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tDeviceLightEvent = $pkg.DeviceLightEvent = $newType(0, $kindStruct, \"dom.DeviceLightEvent\", \"DeviceLightEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tDeviceMotionEvent = $pkg.DeviceMotionEvent = $newType(0, $kindStruct, \"dom.DeviceMotionEvent\", \"DeviceMotionEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tDeviceOrientationEvent = $pkg.DeviceOrientationEvent = $newType(0, $kindStruct, \"dom.DeviceOrientationEvent\", \"DeviceOrientationEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tDeviceProximityEvent = $pkg.DeviceProximityEvent = $newType(0, $kindStruct, \"dom.DeviceProximityEvent\", \"DeviceProximityEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tDOMTransactionEvent = $pkg.DOMTransactionEvent = $newType(0, $kindStruct, \"dom.DOMTransactionEvent\", \"DOMTransactionEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tDragEvent = $pkg.DragEvent = $newType(0, $kindStruct, \"dom.DragEvent\", \"DragEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tEditingBeforeInputEvent = $pkg.EditingBeforeInputEvent = $newType(0, $kindStruct, \"dom.EditingBeforeInputEvent\", \"EditingBeforeInputEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tErrorEvent = $pkg.ErrorEvent = $newType(0, $kindStruct, \"dom.ErrorEvent\", \"ErrorEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tFocusEvent = $pkg.FocusEvent = $newType(0, $kindStruct, \"dom.FocusEvent\", \"FocusEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tGamepadEvent = $pkg.GamepadEvent = $newType(0, $kindStruct, \"dom.GamepadEvent\", \"GamepadEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tHashChangeEvent = $pkg.HashChangeEvent = $newType(0, $kindStruct, \"dom.HashChangeEvent\", \"HashChangeEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tIDBVersionChangeEvent = $pkg.IDBVersionChangeEvent = $newType(0, $kindStruct, \"dom.IDBVersionChangeEvent\", \"IDBVersionChangeEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tKeyboardEvent = $pkg.KeyboardEvent = $newType(0, $kindStruct, \"dom.KeyboardEvent\", \"KeyboardEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_, AltKey_, CharCode_, CtrlKey_, Key_, KeyIdentifier_, KeyCode_, Locale_, Location_, KeyLocation_, MetaKey_, Repeat_, ShiftKey_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\tthis.AltKey = false;\n\t\t\tthis.CharCode = 0;\n\t\t\tthis.CtrlKey = false;\n\t\t\tthis.Key = \"\";\n\t\t\tthis.KeyIdentifier = \"\";\n\t\t\tthis.KeyCode = 0;\n\t\t\tthis.Locale = \"\";\n\t\t\tthis.Location = 0;\n\t\t\tthis.KeyLocation = 0;\n\t\t\tthis.MetaKey = false;\n\t\t\tthis.Repeat = false;\n\t\t\tthis.ShiftKey = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t\tthis.AltKey = AltKey_;\n\t\tthis.CharCode = CharCode_;\n\t\tthis.CtrlKey = CtrlKey_;\n\t\tthis.Key = Key_;\n\t\tthis.KeyIdentifier = KeyIdentifier_;\n\t\tthis.KeyCode = KeyCode_;\n\t\tthis.Locale = Locale_;\n\t\tthis.Location = Location_;\n\t\tthis.KeyLocation = KeyLocation_;\n\t\tthis.MetaKey = MetaKey_;\n\t\tthis.Repeat = Repeat_;\n\t\tthis.ShiftKey = ShiftKey_;\n\t});\n\tMediaStreamEvent = $pkg.MediaStreamEvent = $newType(0, $kindStruct, \"dom.MediaStreamEvent\", \"MediaStreamEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tMessageEvent = $pkg.MessageEvent = $newType(0, $kindStruct, \"dom.MessageEvent\", \"MessageEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_, Data_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\tthis.Data = null;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t\tthis.Data = Data_;\n\t});\n\tMouseEvent = $pkg.MouseEvent = $newType(0, $kindStruct, \"dom.MouseEvent\", \"MouseEvent\", \"honnef.co/go/js/dom\", function(UIEvent_, AltKey_, Button_, ClientX_, ClientY_, CtrlKey_, MetaKey_, MovementX_, MovementY_, ScreenX_, ScreenY_, ShiftKey_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.UIEvent = ptrType$18.nil;\n\t\t\tthis.AltKey = false;\n\t\t\tthis.Button = 0;\n\t\t\tthis.ClientX = 0;\n\t\t\tthis.ClientY = 0;\n\t\t\tthis.CtrlKey = false;\n\t\t\tthis.MetaKey = false;\n\t\t\tthis.MovementX = 0;\n\t\t\tthis.MovementY = 0;\n\t\t\tthis.ScreenX = 0;\n\t\t\tthis.ScreenY = 0;\n\t\t\tthis.ShiftKey = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.UIEvent = UIEvent_;\n\t\tthis.AltKey = AltKey_;\n\t\tthis.Button = Button_;\n\t\tthis.ClientX = ClientX_;\n\t\tthis.ClientY = ClientY_;\n\t\tthis.CtrlKey = CtrlKey_;\n\t\tthis.MetaKey = MetaKey_;\n\t\tthis.MovementX = MovementX_;\n\t\tthis.MovementY = MovementY_;\n\t\tthis.ScreenX = ScreenX_;\n\t\tthis.ScreenY = ScreenY_;\n\t\tthis.ShiftKey = ShiftKey_;\n\t});\n\tMutationEvent = $pkg.MutationEvent = $newType(0, $kindStruct, \"dom.MutationEvent\", \"MutationEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tOfflineAudioCompletionEvent = $pkg.OfflineAudioCompletionEvent = $newType(0, $kindStruct, \"dom.OfflineAudioCompletionEvent\", \"OfflineAudioCompletionEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tPageTransitionEvent = $pkg.PageTransitionEvent = $newType(0, $kindStruct, \"dom.PageTransitionEvent\", \"PageTransitionEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tPointerEvent = $pkg.PointerEvent = $newType(0, $kindStruct, \"dom.PointerEvent\", \"PointerEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tPopStateEvent = $pkg.PopStateEvent = $newType(0, $kindStruct, \"dom.PopStateEvent\", \"PopStateEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tProgressEvent = $pkg.ProgressEvent = $newType(0, $kindStruct, \"dom.ProgressEvent\", \"ProgressEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tRelatedEvent = $pkg.RelatedEvent = $newType(0, $kindStruct, \"dom.RelatedEvent\", \"RelatedEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tRTCPeerConnectionIceEvent = $pkg.RTCPeerConnectionIceEvent = $newType(0, $kindStruct, \"dom.RTCPeerConnectionIceEvent\", \"RTCPeerConnectionIceEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tSensorEvent = $pkg.SensorEvent = $newType(0, $kindStruct, \"dom.SensorEvent\", \"SensorEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tStorageEvent = $pkg.StorageEvent = $newType(0, $kindStruct, \"dom.StorageEvent\", \"StorageEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tSVGEvent = $pkg.SVGEvent = $newType(0, $kindStruct, \"dom.SVGEvent\", \"SVGEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tSVGZoomEvent = $pkg.SVGZoomEvent = $newType(0, $kindStruct, \"dom.SVGZoomEvent\", \"SVGZoomEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tTimeEvent = $pkg.TimeEvent = $newType(0, $kindStruct, \"dom.TimeEvent\", \"TimeEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tTouchEvent = $pkg.TouchEvent = $newType(0, $kindStruct, \"dom.TouchEvent\", \"TouchEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tTrackEvent = $pkg.TrackEvent = $newType(0, $kindStruct, \"dom.TrackEvent\", \"TrackEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tTransitionEvent = $pkg.TransitionEvent = $newType(0, $kindStruct, \"dom.TransitionEvent\", \"TransitionEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tUIEvent = $pkg.UIEvent = $newType(0, $kindStruct, \"dom.UIEvent\", \"UIEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tUserProximityEvent = $pkg.UserProximityEvent = $newType(0, $kindStruct, \"dom.UserProximityEvent\", \"UserProximityEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t});\n\tWheelEvent = $pkg.WheelEvent = $newType(0, $kindStruct, \"dom.WheelEvent\", \"WheelEvent\", \"honnef.co/go/js/dom\", function(BasicEvent_, DeltaX_, DeltaY_, DeltaZ_, DeltaMode_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.BasicEvent = ptrType$17.nil;\n\t\t\tthis.DeltaX = 0;\n\t\t\tthis.DeltaY = 0;\n\t\t\tthis.DeltaZ = 0;\n\t\t\tthis.DeltaMode = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.BasicEvent = BasicEvent_;\n\t\tthis.DeltaX = DeltaX_;\n\t\tthis.DeltaY = DeltaY_;\n\t\tthis.DeltaZ = DeltaZ_;\n\t\tthis.DeltaMode = DeltaMode_;\n\t});\n\tsliceType = $sliceType($emptyInterface);\n\tsliceType$1 = $sliceType(Node);\n\tsliceType$2 = $sliceType(Element);\n\tsliceType$3 = $sliceType(HTMLElement);\n\tptrType = $ptrType(BasicHTMLElement);\n\tptrType$1 = $ptrType(URLUtils);\n\tptrType$2 = $ptrType(HTMLMediaElement);\n\tptrType$3 = $ptrType(HTMLFormElement);\n\tptrType$4 = $ptrType(HTMLLabelElement);\n\tsliceType$4 = $sliceType(ptrType$4);\n\tptrType$5 = $ptrType(HTMLOptionElement);\n\tsliceType$5 = $sliceType(ptrType$5);\n\tsliceType$6 = $sliceType($String);\n\tsliceType$7 = $sliceType(ptrType$3);\n\tptrType$6 = $ptrType(HTMLHeadElement);\n\tptrType$7 = $ptrType(HTMLImageElement);\n\tsliceType$8 = $sliceType(ptrType$7);\n\tptrType$8 = $ptrType(HTMLEmbedElement);\n\tsliceType$9 = $sliceType(ptrType$8);\n\tptrType$9 = $ptrType(HTMLScriptElement);\n\tsliceType$10 = $sliceType(ptrType$9);\n\tsliceType$11 = $sliceType(StyleSheet);\n\tptrType$10 = $ptrType(Text);\n\tfuncType = $funcType([], [], false);\n\tptrType$11 = $ptrType(js.Object);\n\tfuncType$1 = $funcType([ptrType$11], [], false);\n\tptrType$12 = $ptrType(File);\n\tsliceType$12 = $sliceType(ptrType$12);\n\tptrType$13 = $ptrType(HTMLDataListElement);\n\tptrType$14 = $ptrType(HTMLAreaElement);\n\tsliceType$13 = $sliceType(ptrType$14);\n\tptrType$15 = $ptrType(HTMLTableCellElement);\n\tsliceType$14 = $sliceType(ptrType$15);\n\tptrType$16 = $ptrType(HTMLTableRowElement);\n\tsliceType$15 = $sliceType(ptrType$16);\n\tptrType$17 = $ptrType(BasicEvent);\n\tptrType$18 = $ptrType(UIEvent);\n\tptrType$19 = $ptrType(TokenList);\n\tfuncType$2 = $funcType([Event], [], false);\n\tptrType$20 = $ptrType(Location);\n\tptrType$21 = $ptrType(BasicNode);\n\tptrType$22 = $ptrType(document);\n\tptrType$23 = $ptrType(htmlDocument);\n\tptrType$24 = $ptrType(CSSStyleDeclaration);\n\tptrType$25 = $ptrType(Console);\n\tfuncType$3 = $funcType([time.Duration], [], false);\n\tptrType$26 = $ptrType(Screen);\n\tptrType$27 = $ptrType(window);\n\tfuncType$4 = $funcType([Position], [], false);\n\tfuncType$5 = $funcType([PositionError], [], false);\n\tptrType$28 = $ptrType(PositionError);\n\tptrType$29 = $ptrType(Coordinates);\n\tptrType$30 = $ptrType(BasicElement);\n\tptrType$31 = $ptrType(HTMLAnchorElement);\n\tptrType$32 = $ptrType(HTMLAppletElement);\n\tptrType$33 = $ptrType(HTMLBaseElement);\n\tptrType$34 = $ptrType(ValidityState);\n\tptrType$35 = $ptrType(HTMLButtonElement);\n\tptrType$36 = $ptrType(CanvasRenderingContext2D);\n\tptrType$37 = $ptrType(HTMLCanvasElement);\n\tptrType$38 = $ptrType(HTMLFieldSetElement);\n\tptrType$39 = $ptrType(HTMLIFrameElement);\n\tptrType$40 = $ptrType(HTMLInputElement);\n\tptrType$41 = $ptrType(HTMLKeygenElement);\n\tptrType$42 = $ptrType(HTMLLegendElement);\n\tptrType$43 = $ptrType(HTMLLinkElement);\n\tptrType$44 = $ptrType(HTMLMapElement);\n\tptrType$45 = $ptrType(HTMLObjectElement);\n\tptrType$46 = $ptrType(HTMLOutputElement);\n\tptrType$47 = $ptrType(HTMLSelectElement);\n\tptrType$48 = $ptrType(HTMLTableSectionElement);\n\tptrType$49 = $ptrType(HTMLTextAreaElement);\n\tptrType$50 = $ptrType(TextTrack);\n\tptrType$51 = $ptrType(HTMLTrackElement);\n\tmapType = $mapType($String, $String);\n\tptrType$52 = $ptrType(KeyboardEvent);\n\tptrType$53 = $ptrType(MouseEvent);\n\tcallRecover = function(o, fn, args) {\n\t\tvar $ptr, args, err, fn, o, obj, $deferred;\n\t\t/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\terr = $ifaceNil;\n\t\t$deferred.push([(function() {\n\t\t\tvar $ptr, _tuple, e, ok, panicErr;\n\t\t\te = $recover();\n\t\t\tif ($interfaceIsEqual(e, $ifaceNil)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t_tuple = $assertType(e, $error, true); panicErr = _tuple[0]; ok = _tuple[1];\n\t\t\tif (ok && !($interfaceIsEqual(panicErr, $ifaceNil))) {\n\t\t\t\terr = panicErr;\n\t\t\t} else {\n\t\t\t\t$panic(e);\n\t\t\t}\n\t\t}), []]);\n\t\t(obj = o, obj[$externalize(fn, $String)].apply(obj, $externalize(args, sliceType)));\n\t\terr = $ifaceNil;\n\t\treturn err;\n\t\t/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } }\n\t};\n\tnodeListToNodes = function(o) {\n\t\tvar $ptr, i, length, o, out;\n\t\tout = sliceType$1.nil;\n\t\tlength = $parseInt(o.length) >> 0;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < length)) { break; }\n\t\t\tout = $append(out, wrapNode(o.item(i)));\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn out;\n\t};\n\tnodeListToElements = function(o) {\n\t\tvar $ptr, i, length, o, out;\n\t\tout = sliceType$2.nil;\n\t\tlength = $parseInt(o.length) >> 0;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < length)) { break; }\n\t\t\tout = $append(out, wrapElement(o.item(i)));\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn out;\n\t};\n\tnodeListToHTMLElements = function(o) {\n\t\tvar $ptr, i, length, o, out;\n\t\tout = sliceType$3.nil;\n\t\tlength = $parseInt(o.length) >> 0;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < length)) { break; }\n\t\t\tout = $append(out, wrapHTMLElement(o.item(i)));\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn out;\n\t};\n\twrapDocument = function(o) {\n\t\tvar $ptr, _ref, o;\n\t\t_ref = o.constructor;\n\t\tif (_ref === $global.HTMLDocument) {\n\t\t\treturn new htmlDocument.ptr(new document.ptr(new BasicNode.ptr(o)));\n\t\t} else {\n\t\t\treturn new document.ptr(new BasicNode.ptr(o));\n\t\t}\n\t};\n\twrapNode = function(o) {\n\t\tvar $ptr, _ref, o;\n\t\tif (o === null || o === undefined) {\n\t\t\treturn $ifaceNil;\n\t\t}\n\t\t_ref = o.constructor;\n\t\tif (_ref === $global.Text) {\n\t\t\treturn new Text.ptr(new BasicNode.ptr(o));\n\t\t} else {\n\t\t\treturn wrapElement(o);\n\t\t}\n\t};\n\twrapElement = function(o) {\n\t\tvar $ptr, _ref, o;\n\t\tif (o === null || o === undefined) {\n\t\t\treturn $ifaceNil;\n\t\t}\n\t\t_ref = o.constructor;\n\t\treturn wrapHTMLElement(o);\n\t};\n\twrapHTMLElement = function(o) {\n\t\tvar $ptr, _ref, c, el, o;\n\t\tif (o === null || o === undefined) {\n\t\t\treturn $ifaceNil;\n\t\t}\n\t\tel = new BasicHTMLElement.ptr(new BasicElement.ptr(new BasicNode.ptr(o)));\n\t\tc = o.constructor;\n\t\t_ref = c;\n\t\tif (_ref === $global.HTMLAnchorElement) {\n\t\t\treturn new HTMLAnchorElement.ptr(el, new URLUtils.ptr(o, \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"), \"\", \"\", 0, \"\", \"\", \"\");\n\t\t} else if (_ref === $global.HTMLAppletElement) {\n\t\t\treturn new HTMLAppletElement.ptr(el, \"\", \"\", \"\", \"\", \"\", \"\", 0, \"\", \"\");\n\t\t} else if (_ref === $global.HTMLAreaElement) {\n\t\t\treturn new HTMLAreaElement.ptr(el, new URLUtils.ptr(o, \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"), \"\", \"\", \"\", \"\", \"\", \"\", 0, \"\", \"\");\n\t\t} else if (_ref === $global.HTMLAudioElement) {\n\t\t\treturn new HTMLAudioElement.ptr(new HTMLMediaElement.ptr(el));\n\t\t} else if (_ref === $global.HTMLBaseElement) {\n\t\t\treturn new HTMLBaseElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLBodyElement) {\n\t\t\treturn new HTMLBodyElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLBRElement) {\n\t\t\treturn new HTMLBRElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLButtonElement) {\n\t\t\treturn new HTMLButtonElement.ptr(el, false, false, \"\", \"\", \"\", false, \"\", \"\", 0, \"\", \"\", \"\", false);\n\t\t} else if (_ref === $global.HTMLCanvasElement) {\n\t\t\treturn new HTMLCanvasElement.ptr(el, 0, 0);\n\t\t} else if (_ref === $global.HTMLDataElement) {\n\t\t\treturn new HTMLDataElement.ptr(el, \"\");\n\t\t} else if (_ref === $global.HTMLDataListElement) {\n\t\t\treturn new HTMLDataListElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLDirectoryElement) {\n\t\t\treturn new HTMLDirectoryElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLDivElement) {\n\t\t\treturn new HTMLDivElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLDListElement) {\n\t\t\treturn new HTMLDListElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLEmbedElement) {\n\t\t\treturn new HTMLEmbedElement.ptr(el, \"\", \"\", \"\");\n\t\t} else if (_ref === $global.HTMLFieldSetElement) {\n\t\t\treturn new HTMLFieldSetElement.ptr(el, false, \"\", \"\", \"\", false);\n\t\t} else if (_ref === $global.HTMLFontElement) {\n\t\t\treturn new HTMLFontElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLFormElement) {\n\t\t\treturn new HTMLFormElement.ptr(el, \"\", \"\", \"\", \"\", \"\", 0, \"\", \"\", false, \"\");\n\t\t} else if (_ref === $global.HTMLFrameElement) {\n\t\t\treturn new HTMLFrameElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLFrameSetElement) {\n\t\t\treturn new HTMLFrameSetElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLHeadElement) {\n\t\t\treturn new HTMLHeadElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLHeadingElement) {\n\t\t\treturn new HTMLHeadingElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLHtmlElement) {\n\t\t\treturn new HTMLHtmlElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLHRElement) {\n\t\t\treturn new HTMLHRElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLIFrameElement) {\n\t\t\treturn new HTMLIFrameElement.ptr(el, \"\", \"\", \"\", \"\", \"\", false);\n\t\t} else if (_ref === $global.HTMLImageElement) {\n\t\t\treturn new HTMLImageElement.ptr(el, false, \"\", 0, false, 0, 0, \"\", \"\", 0);\n\t\t} else if (_ref === $global.HTMLInputElement) {\n\t\t\treturn new HTMLInputElement.ptr(el, \"\", \"\", \"\", false, false, false, \"\", \"\", false, \"\", \"\", \"\", false, \"\", \"\", false, \"\", 0, \"\", false, \"\", \"\", \"\", false, false, \"\", 0, 0, 0, \"\", \"\", 0, \"\", \"\", \"\", new time.Time.ptr(), 0, \"\", false);\n\t\t} else if (_ref === $global.HTMLKeygenElement) {\n\t\t\treturn new HTMLKeygenElement.ptr(el, false, \"\", false, \"\", \"\", \"\", \"\", false);\n\t\t} else if (_ref === $global.HTMLLabelElement) {\n\t\t\treturn new HTMLLabelElement.ptr(el, \"\");\n\t\t} else if (_ref === $global.HTMLLegendElement) {\n\t\t\treturn new HTMLLegendElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLLIElement) {\n\t\t\treturn new HTMLLIElement.ptr(el, 0);\n\t\t} else if (_ref === $global.HTMLLinkElement) {\n\t\t\treturn new HTMLLinkElement.ptr(el, false, \"\", \"\", \"\", \"\");\n\t\t} else if (_ref === $global.HTMLMapElement) {\n\t\t\treturn new HTMLMapElement.ptr(el, \"\");\n\t\t} else if (_ref === $global.HTMLMediaElement) {\n\t\t\treturn new HTMLMediaElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLMenuElement) {\n\t\t\treturn new HTMLMenuElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLMetaElement) {\n\t\t\treturn new HTMLMetaElement.ptr(el, \"\", \"\", \"\");\n\t\t} else if (_ref === $global.HTMLMeterElement) {\n\t\t\treturn new HTMLMeterElement.ptr(el, 0, 0, 0, 0, 0);\n\t\t} else if (_ref === $global.HTMLModElement) {\n\t\t\treturn new HTMLModElement.ptr(el, \"\", \"\");\n\t\t} else if (_ref === $global.HTMLObjectElement) {\n\t\t\treturn new HTMLObjectElement.ptr(el, \"\", \"\", \"\", 0, \"\", false, \"\", \"\", \"\", false);\n\t\t} else if (_ref === $global.HTMLOListElement) {\n\t\t\treturn new HTMLOListElement.ptr(el, false, 0, \"\");\n\t\t} else if (_ref === $global.HTMLOptGroupElement) {\n\t\t\treturn new HTMLOptGroupElement.ptr(el, false, \"\");\n\t\t} else if (_ref === $global.HTMLOptionElement) {\n\t\t\treturn new HTMLOptionElement.ptr(el, false, false, 0, \"\", false, \"\", \"\");\n\t\t} else if (_ref === $global.HTMLOutputElement) {\n\t\t\treturn new HTMLOutputElement.ptr(el, \"\", \"\", \"\", \"\", \"\", false);\n\t\t} else if (_ref === $global.HTMLParagraphElement) {\n\t\t\treturn new HTMLParagraphElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLParamElement) {\n\t\t\treturn new HTMLParamElement.ptr(el, \"\", \"\");\n\t\t} else if (_ref === $global.HTMLPreElement) {\n\t\t\treturn new HTMLPreElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLProgressElement) {\n\t\t\treturn new HTMLProgressElement.ptr(el, 0, 0, 0);\n\t\t} else if (_ref === $global.HTMLQuoteElement) {\n\t\t\treturn new HTMLQuoteElement.ptr(el, \"\");\n\t\t} else if (_ref === $global.HTMLScriptElement) {\n\t\t\treturn new HTMLScriptElement.ptr(el, \"\", \"\", \"\", false, false, \"\");\n\t\t} else if (_ref === $global.HTMLSelectElement) {\n\t\t\treturn new HTMLSelectElement.ptr(el, false, false, 0, false, \"\", false, 0, 0, \"\", \"\", \"\", false);\n\t\t} else if (_ref === $global.HTMLSourceElement) {\n\t\t\treturn new HTMLSourceElement.ptr(el, \"\", \"\", \"\");\n\t\t} else if (_ref === $global.HTMLSpanElement) {\n\t\t\treturn new HTMLSpanElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLStyleElement) {\n\t\t\treturn new HTMLStyleElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLTableElement) {\n\t\t\treturn new HTMLTableElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLTableCaptionElement) {\n\t\t\treturn new HTMLTableCaptionElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLTableCellElement) {\n\t\t\treturn new HTMLTableCellElement.ptr(el, 0, 0, 0);\n\t\t} else if (_ref === $global.HTMLTableDataCellElement) {\n\t\t\treturn new HTMLTableDataCellElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLTableHeaderCellElement) {\n\t\t\treturn new HTMLTableHeaderCellElement.ptr(el, \"\", \"\");\n\t\t} else if (_ref === $global.HTMLTableColElement) {\n\t\t\treturn new HTMLTableColElement.ptr(el, 0);\n\t\t} else if (_ref === $global.HTMLTableRowElement) {\n\t\t\treturn new HTMLTableRowElement.ptr(el, 0, 0);\n\t\t} else if (_ref === $global.HTMLTableSectionElement) {\n\t\t\treturn new HTMLTableSectionElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLTextAreaElement) {\n\t\t\treturn new HTMLTextAreaElement.ptr(el, \"\", false, 0, \"\", \"\", false, 0, \"\", \"\", false, false, 0, \"\", 0, 0, 0, 0, \"\", \"\", \"\", false, \"\");\n\t\t} else if (_ref === $global.HTMLTimeElement) {\n\t\t\treturn new HTMLTimeElement.ptr(el, \"\");\n\t\t} else if (_ref === $global.HTMLTitleElement) {\n\t\t\treturn new HTMLTitleElement.ptr(el, \"\");\n\t\t} else if (_ref === $global.HTMLTrackElement) {\n\t\t\treturn new HTMLTrackElement.ptr(el, \"\", \"\", \"\", \"\", false, 0);\n\t\t} else if (_ref === $global.HTMLUListElement) {\n\t\t\treturn new HTMLUListElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLUnknownElement) {\n\t\t\treturn new HTMLUnknownElement.ptr(el);\n\t\t} else if (_ref === $global.HTMLVideoElement) {\n\t\t\treturn new HTMLVideoElement.ptr(new HTMLMediaElement.ptr(el));\n\t\t} else if (_ref === $global.HTMLElement) {\n\t\t\treturn el;\n\t\t} else {\n\t\t\treturn el;\n\t\t}\n\t};\n\tgetForm = function(o) {\n\t\tvar $ptr, form, o;\n\t\tform = wrapHTMLElement(o.form);\n\t\tif ($interfaceIsEqual(form, $ifaceNil)) {\n\t\t\treturn ptrType$3.nil;\n\t\t}\n\t\treturn $assertType(form, ptrType$3);\n\t};\n\tgetLabels = function(o) {\n\t\tvar $ptr, _i, _ref, i, label, labels, o, out;\n\t\tlabels = nodeListToElements(o.labels);\n\t\tout = $makeSlice(sliceType$4, labels.$length);\n\t\t_ref = labels;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\tlabel = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\t((i < 0 || i >= out.$length) ? $throwRuntimeError(\"index out of range\") : out.$array[out.$offset + i] = $assertType(label, ptrType$4));\n\t\t\t_i++;\n\t\t}\n\t\treturn out;\n\t};\n\tgetOptions = function(o, attr) {\n\t\tvar $ptr, _i, _ref, attr, i, o, option, options, out;\n\t\toptions = nodeListToElements(o[$externalize(attr, $String)]);\n\t\tout = $makeSlice(sliceType$5, options.$length);\n\t\t_ref = options;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\toption = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\t((i < 0 || i >= out.$length) ? $throwRuntimeError(\"index out of range\") : out.$array[out.$offset + i] = $assertType(option, ptrType$5));\n\t\t\t_i++;\n\t\t}\n\t\treturn out;\n\t};\n\tTokenList.ptr.prototype.Item = function(idx) {\n\t\tvar $ptr, idx, o, tl;\n\t\ttl = this;\n\t\to = tl.dtl.item(idx);\n\t\tif (o === null || o === undefined) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn $internalize(o, $String);\n\t};\n\tTokenList.prototype.Item = function(idx) { return this.$val.Item(idx); };\n\tTokenList.ptr.prototype.Contains = function(token) {\n\t\tvar $ptr, tl, token;\n\t\ttl = this;\n\t\treturn !!(tl.dtl.contains($externalize(token, $String)));\n\t};\n\tTokenList.prototype.Contains = function(token) { return this.$val.Contains(token); };\n\tTokenList.ptr.prototype.Add = function(token) {\n\t\tvar $ptr, tl, token;\n\t\ttl = this;\n\t\ttl.dtl.add($externalize(token, $String));\n\t};\n\tTokenList.prototype.Add = function(token) { return this.$val.Add(token); };\n\tTokenList.ptr.prototype.Remove = function(token) {\n\t\tvar $ptr, tl, token;\n\t\ttl = this;\n\t\ttl.dtl.remove($externalize(token, $String));\n\t};\n\tTokenList.prototype.Remove = function(token) { return this.$val.Remove(token); };\n\tTokenList.ptr.prototype.Toggle = function(token) {\n\t\tvar $ptr, tl, token;\n\t\ttl = this;\n\t\ttl.dtl.toggle($externalize(token, $String));\n\t};\n\tTokenList.prototype.Toggle = function(token) { return this.$val.Toggle(token); };\n\tTokenList.ptr.prototype.String = function() {\n\t\tvar $ptr, tl;\n\t\ttl = this;\n\t\tif (!(tl.sa === \"\")) {\n\t\t\treturn $internalize(tl.o[$externalize(tl.sa, $String)], $String);\n\t\t}\n\t\tif (tl.dtl.constructor === $global.DOMSettableTokenList) {\n\t\t\treturn $internalize(tl.dtl.value, $String);\n\t\t}\n\t\treturn \"\";\n\t};\n\tTokenList.prototype.String = function() { return this.$val.String(); };\n\tTokenList.ptr.prototype.Slice = function() {\n\t\tvar $ptr, i, length, out, tl;\n\t\ttl = this;\n\t\tout = sliceType$6.nil;\n\t\tlength = $parseInt(tl.dtl.length) >> 0;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < length)) { break; }\n\t\t\tout = $append(out, $internalize(tl.dtl.item(i), $String));\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn out;\n\t};\n\tTokenList.prototype.Slice = function() { return this.$val.Slice(); };\n\tTokenList.ptr.prototype.SetString = function(s) {\n\t\tvar $ptr, s, tl;\n\t\ttl = this;\n\t\tif (!(tl.sa === \"\")) {\n\t\t\ttl.o[$externalize(tl.sa, $String)] = $externalize(s, $String);\n\t\t\treturn;\n\t\t}\n\t\tif (tl.dtl.constructor === $global.DOMSettableTokenList) {\n\t\t\ttl.dtl.value = $externalize(s, $String);\n\t\t\treturn;\n\t\t}\n\t\t$panic(new $String(\"no way to SetString on this TokenList\"));\n\t};\n\tTokenList.prototype.SetString = function(s) { return this.$val.SetString(s); };\n\tTokenList.ptr.prototype.Set = function(s) {\n\t\tvar $ptr, s, tl;\n\t\ttl = this;\n\t\ttl.SetString(strings.Join(s, \" \"));\n\t};\n\tTokenList.prototype.Set = function(s) { return this.$val.Set(s); };\n\thtmlDocument.ptr.prototype.ActiveElement = function() {\n\t\tvar $ptr, d;\n\t\td = this;\n\t\treturn wrapHTMLElement(d.document.BasicNode.Object.activeElement);\n\t};\n\thtmlDocument.prototype.ActiveElement = function() { return this.$val.ActiveElement(); };\n\thtmlDocument.ptr.prototype.Body = function() {\n\t\tvar $ptr, d;\n\t\td = this;\n\t\treturn wrapHTMLElement(d.document.BasicNode.Object.body);\n\t};\n\thtmlDocument.prototype.Body = function() { return this.$val.Body(); };\n\thtmlDocument.ptr.prototype.Cookie = function() {\n\t\tvar $ptr, d;\n\t\td = this;\n\t\treturn $internalize(d.document.BasicNode.Object.cookie, $String);\n\t};\n\thtmlDocument.prototype.Cookie = function() { return this.$val.Cookie(); };\n\thtmlDocument.ptr.prototype.SetCookie = function(s) {\n\t\tvar $ptr, d, s;\n\t\td = this;\n\t\td.document.BasicNode.Object.cookie = $externalize(s, $String);\n\t};\n\thtmlDocument.prototype.SetCookie = function(s) { return this.$val.SetCookie(s); };\n\thtmlDocument.ptr.prototype.DefaultView = function() {\n\t\tvar $ptr, d;\n\t\td = this;\n\t\treturn new window.ptr(d.document.BasicNode.Object.defaultView);\n\t};\n\thtmlDocument.prototype.DefaultView = function() { return this.$val.DefaultView(); };\n\thtmlDocument.ptr.prototype.DesignMode = function() {\n\t\tvar $ptr, d, s;\n\t\td = this;\n\t\ts = $internalize(d.document.BasicNode.Object.designMode, $String);\n\t\tif (s === \"off\") {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n\thtmlDocument.prototype.DesignMode = function() { return this.$val.DesignMode(); };\n\thtmlDocument.ptr.prototype.SetDesignMode = function(b) {\n\t\tvar $ptr, b, d, s;\n\t\td = this;\n\t\ts = \"off\";\n\t\tif (b) {\n\t\t\ts = \"on\";\n\t\t}\n\t\td.document.BasicNode.Object.designMode = $externalize(s, $String);\n\t};\n\thtmlDocument.prototype.SetDesignMode = function(b) { return this.$val.SetDesignMode(b); };\n\thtmlDocument.ptr.prototype.Domain = function() {\n\t\tvar $ptr, d;\n\t\td = this;\n\t\treturn $internalize(d.document.BasicNode.Object.domain, $String);\n\t};\n\thtmlDocument.prototype.Domain = function() { return this.$val.Domain(); };\n\thtmlDocument.ptr.prototype.SetDomain = function(s) {\n\t\tvar $ptr, d, s;\n\t\td = this;\n\t\td.document.BasicNode.Object.domain = $externalize(s, $String);\n\t};\n\thtmlDocument.prototype.SetDomain = function(s) { return this.$val.SetDomain(s); };\n\thtmlDocument.ptr.prototype.Forms = function() {\n\t\tvar $ptr, d, els, forms, i, length;\n\t\td = this;\n\t\tels = sliceType$7.nil;\n\t\tforms = d.document.BasicNode.Object.forms;\n\t\tlength = $parseInt(forms.length) >> 0;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < length)) { break; }\n\t\t\tels = $append(els, $assertType(wrapHTMLElement(forms.item(i)), ptrType$3));\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn els;\n\t};\n\thtmlDocument.prototype.Forms = function() { return this.$val.Forms(); };\n\thtmlDocument.ptr.prototype.Head = function() {\n\t\tvar $ptr, d, head;\n\t\td = this;\n\t\thead = wrapElement(d.document.BasicNode.Object.head);\n\t\tif ($interfaceIsEqual(head, $ifaceNil)) {\n\t\t\treturn ptrType$6.nil;\n\t\t}\n\t\treturn $assertType(head, ptrType$6);\n\t};\n\thtmlDocument.prototype.Head = function() { return this.$val.Head(); };\n\thtmlDocument.ptr.prototype.Images = function() {\n\t\tvar $ptr, d, els, i, images, length;\n\t\td = this;\n\t\tels = sliceType$8.nil;\n\t\timages = d.document.BasicNode.Object.images;\n\t\tlength = $parseInt(images.length) >> 0;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < length)) { break; }\n\t\t\tels = $append(els, $assertType(wrapHTMLElement(images.item(i)), ptrType$7));\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn els;\n\t};\n\thtmlDocument.prototype.Images = function() { return this.$val.Images(); };\n\thtmlDocument.ptr.prototype.LastModified = function() {\n\t\tvar $ptr, d;\n\t\td = this;\n\t\treturn $assertType($internalize(d.document.BasicNode.Object.lastModified, $emptyInterface), time.Time);\n\t};\n\thtmlDocument.prototype.LastModified = function() { return this.$val.LastModified(); };\n\thtmlDocument.ptr.prototype.Links = function() {\n\t\tvar $ptr, d, els, i, length, links;\n\t\td = this;\n\t\tels = sliceType$3.nil;\n\t\tlinks = d.document.BasicNode.Object.links;\n\t\tlength = $parseInt(links.length) >> 0;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < length)) { break; }\n\t\t\tels = $append(els, wrapHTMLElement(links.item(i)));\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn els;\n\t};\n\thtmlDocument.prototype.Links = function() { return this.$val.Links(); };\n\thtmlDocument.ptr.prototype.Location = function() {\n\t\tvar $ptr, d, o;\n\t\td = this;\n\t\to = d.document.BasicNode.Object.location;\n\t\treturn new Location.ptr(o, new URLUtils.ptr(o, \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"));\n\t};\n\thtmlDocument.prototype.Location = function() { return this.$val.Location(); };\n\thtmlDocument.ptr.prototype.Plugins = function() {\n\t\tvar $ptr, d, els, forms, i, length;\n\t\td = this;\n\t\tels = sliceType$9.nil;\n\t\tforms = d.document.BasicNode.Object.plugins;\n\t\tlength = $parseInt(forms.length) >> 0;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < length)) { break; }\n\t\t\tels = $append(els, $assertType(wrapHTMLElement(forms.item(i)), ptrType$8));\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn els;\n\t};\n\thtmlDocument.prototype.Plugins = function() { return this.$val.Plugins(); };\n\thtmlDocument.ptr.prototype.ReadyState = function() {\n\t\tvar $ptr, d;\n\t\td = this;\n\t\treturn $internalize(d.document.BasicNode.Object.readyState, $String);\n\t};\n\thtmlDocument.prototype.ReadyState = function() { return this.$val.ReadyState(); };\n\thtmlDocument.ptr.prototype.Referrer = function() {\n\t\tvar $ptr, d;\n\t\td = this;\n\t\treturn $internalize(d.document.BasicNode.Object.referrer, $String);\n\t};\n\thtmlDocument.prototype.Referrer = function() { return this.$val.Referrer(); };\n\thtmlDocument.ptr.prototype.Scripts = function() {\n\t\tvar $ptr, d, els, forms, i, length;\n\t\td = this;\n\t\tels = sliceType$10.nil;\n\t\tforms = d.document.BasicNode.Object.scripts;\n\t\tlength = $parseInt(forms.length) >> 0;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < length)) { break; }\n\t\t\tels = $append(els, $assertType(wrapHTMLElement(forms.item(i)), ptrType$9));\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn els;\n\t};\n\thtmlDocument.prototype.Scripts = function() { return this.$val.Scripts(); };\n\thtmlDocument.ptr.prototype.Title = function() {\n\t\tvar $ptr, d;\n\t\td = this;\n\t\treturn $internalize(d.document.BasicNode.Object.title, $String);\n\t};\n\thtmlDocument.prototype.Title = function() { return this.$val.Title(); };\n\thtmlDocument.ptr.prototype.SetTitle = function(s) {\n\t\tvar $ptr, d, s;\n\t\td = this;\n\t\td.document.BasicNode.Object.title = $externalize(s, $String);\n\t};\n\thtmlDocument.prototype.SetTitle = function(s) { return this.$val.SetTitle(s); };\n\thtmlDocument.ptr.prototype.URL = function() {\n\t\tvar $ptr, d;\n\t\td = this;\n\t\treturn $internalize(d.document.BasicNode.Object.url, $String);\n\t};\n\thtmlDocument.prototype.URL = function() { return this.$val.URL(); };\n\tdocument.ptr.prototype.Async = function() {\n\t\tvar $ptr, d;\n\t\td = $clone(this, document);\n\t\treturn !!(d.BasicNode.Object.async);\n\t};\n\tdocument.prototype.Async = function() { return this.$val.Async(); };\n\tdocument.ptr.prototype.SetAsync = function(b) {\n\t\tvar $ptr, b, d;\n\t\td = $clone(this, document);\n\t\td.BasicNode.Object.async = $externalize(b, $Bool);\n\t};\n\tdocument.prototype.SetAsync = function(b) { return this.$val.SetAsync(b); };\n\tdocument.ptr.prototype.Doctype = function() {\n\t\tvar $ptr, d;\n\t\td = $clone(this, document);\n\t\treturn $ifaceNil;\n\t};\n\tdocument.prototype.Doctype = function() { return this.$val.Doctype(); };\n\tdocument.ptr.prototype.DocumentElement = function() {\n\t\tvar $ptr, d;\n\t\td = $clone(this, document);\n\t\treturn wrapElement(d.BasicNode.Object.documentElement);\n\t};\n\tdocument.prototype.DocumentElement = function() { return this.$val.DocumentElement(); };\n\tdocument.ptr.prototype.DocumentURI = function() {\n\t\tvar $ptr, d;\n\t\td = $clone(this, document);\n\t\treturn $internalize(d.BasicNode.Object.documentURI, $String);\n\t};\n\tdocument.prototype.DocumentURI = function() { return this.$val.DocumentURI(); };\n\tdocument.ptr.prototype.Implementation = function() {\n\t\tvar $ptr, d;\n\t\td = $clone(this, document);\n\t\treturn $ifaceNil;\n\t};\n\tdocument.prototype.Implementation = function() { return this.$val.Implementation(); };\n\tdocument.ptr.prototype.LastStyleSheetSet = function() {\n\t\tvar $ptr, d;\n\t\td = $clone(this, document);\n\t\treturn $internalize(d.BasicNode.Object.lastStyleSheetSet, $String);\n\t};\n\tdocument.prototype.LastStyleSheetSet = function() { return this.$val.LastStyleSheetSet(); };\n\tdocument.ptr.prototype.PreferredStyleSheetSet = function() {\n\t\tvar $ptr, d;\n\t\td = $clone(this, document);\n\t\treturn $internalize(d.BasicNode.Object.preferredStyleSheetSet, $String);\n\t};\n\tdocument.prototype.PreferredStyleSheetSet = function() { return this.$val.PreferredStyleSheetSet(); };\n\tdocument.ptr.prototype.SelectedStyleSheetSet = function() {\n\t\tvar $ptr, d;\n\t\td = $clone(this, document);\n\t\treturn $internalize(d.BasicNode.Object.selectedStyleSheetSet, $String);\n\t};\n\tdocument.prototype.SelectedStyleSheetSet = function() { return this.$val.SelectedStyleSheetSet(); };\n\tdocument.ptr.prototype.StyleSheets = function() {\n\t\tvar $ptr, d;\n\t\td = $clone(this, document);\n\t\treturn sliceType$11.nil;\n\t};\n\tdocument.prototype.StyleSheets = function() { return this.$val.StyleSheets(); };\n\tdocument.ptr.prototype.StyleSheetSets = function() {\n\t\tvar $ptr, d;\n\t\td = $clone(this, document);\n\t\treturn sliceType$11.nil;\n\t};\n\tdocument.prototype.StyleSheetSets = function() { return this.$val.StyleSheetSets(); };\n\tdocument.ptr.prototype.AdoptNode = function(node) {\n\t\tvar $ptr, _r, _r$1, d, node, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; d = $f.d; node = $f.node; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = $clone(this, document);\n\t\t_r = node.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_r$1 = wrapNode(d.BasicNode.Object.adoptNode(_r)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn _r$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: document.ptr.prototype.AdoptNode }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.d = d; $f.node = node; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdocument.prototype.AdoptNode = function(node) { return this.$val.AdoptNode(node); };\n\tdocument.ptr.prototype.ImportNode = function(node, deep) {\n\t\tvar $ptr, _r, _r$1, d, deep, node, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; d = $f.d; deep = $f.deep; node = $f.node; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\td = $clone(this, document);\n\t\t_r = node.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_r$1 = wrapNode(d.BasicNode.Object.importNode(_r, $externalize(deep, $Bool))); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn _r$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: document.ptr.prototype.ImportNode }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.d = d; $f.deep = deep; $f.node = node; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdocument.prototype.ImportNode = function(node, deep) { return this.$val.ImportNode(node, deep); };\n\tdocument.ptr.prototype.CreateElement = function(name) {\n\t\tvar $ptr, d, name;\n\t\td = $clone(this, document);\n\t\treturn wrapElement(d.BasicNode.Object.createElement($externalize(name, $String)));\n\t};\n\tdocument.prototype.CreateElement = function(name) { return this.$val.CreateElement(name); };\n\tdocument.ptr.prototype.CreateElementNS = function(ns, name) {\n\t\tvar $ptr, d, name, ns;\n\t\td = $clone(this, document);\n\t\treturn wrapElement(d.BasicNode.Object.createElement($externalize(ns, $String), $externalize(name, $String)));\n\t};\n\tdocument.prototype.CreateElementNS = function(ns, name) { return this.$val.CreateElementNS(ns, name); };\n\tdocument.ptr.prototype.CreateTextNode = function(s) {\n\t\tvar $ptr, d, s;\n\t\td = $clone(this, document);\n\t\treturn $assertType(wrapNode(d.BasicNode.Object.createTextNode($externalize(s, $String))), ptrType$10);\n\t};\n\tdocument.prototype.CreateTextNode = function(s) { return this.$val.CreateTextNode(s); };\n\tdocument.ptr.prototype.ElementFromPoint = function(x, y) {\n\t\tvar $ptr, d, x, y;\n\t\td = $clone(this, document);\n\t\treturn wrapElement(d.BasicNode.Object.elementFromPoint(x, y));\n\t};\n\tdocument.prototype.ElementFromPoint = function(x, y) { return this.$val.ElementFromPoint(x, y); };\n\tdocument.ptr.prototype.EnableStyleSheetsForSet = function(name) {\n\t\tvar $ptr, d, name;\n\t\td = $clone(this, document);\n\t\td.BasicNode.Object.enableStyleSheetsForSet($externalize(name, $String));\n\t};\n\tdocument.prototype.EnableStyleSheetsForSet = function(name) { return this.$val.EnableStyleSheetsForSet(name); };\n\tdocument.ptr.prototype.GetElementsByClassName = function(name) {\n\t\tvar $ptr, d, name;\n\t\td = $clone(this, document);\n\t\treturn (new BasicElement.ptr(new BasicNode.ptr(d.BasicNode.Object))).GetElementsByClassName(name);\n\t};\n\tdocument.prototype.GetElementsByClassName = function(name) { return this.$val.GetElementsByClassName(name); };\n\tdocument.ptr.prototype.GetElementsByTagName = function(name) {\n\t\tvar $ptr, d, name;\n\t\td = $clone(this, document);\n\t\treturn (new BasicElement.ptr(new BasicNode.ptr(d.BasicNode.Object))).GetElementsByTagName(name);\n\t};\n\tdocument.prototype.GetElementsByTagName = function(name) { return this.$val.GetElementsByTagName(name); };\n\tdocument.ptr.prototype.GetElementsByTagNameNS = function(ns, name) {\n\t\tvar $ptr, d, name, ns;\n\t\td = $clone(this, document);\n\t\treturn (new BasicElement.ptr(new BasicNode.ptr(d.BasicNode.Object))).GetElementsByTagNameNS(ns, name);\n\t};\n\tdocument.prototype.GetElementsByTagNameNS = function(ns, name) { return this.$val.GetElementsByTagNameNS(ns, name); };\n\tdocument.ptr.prototype.GetElementByID = function(id) {\n\t\tvar $ptr, d, id;\n\t\td = $clone(this, document);\n\t\treturn wrapElement(d.BasicNode.Object.getElementById($externalize(id, $String)));\n\t};\n\tdocument.prototype.GetElementByID = function(id) { return this.$val.GetElementByID(id); };\n\tdocument.ptr.prototype.QuerySelector = function(sel) {\n\t\tvar $ptr, d, sel;\n\t\td = $clone(this, document);\n\t\treturn (new BasicElement.ptr(new BasicNode.ptr(d.BasicNode.Object))).QuerySelector(sel);\n\t};\n\tdocument.prototype.QuerySelector = function(sel) { return this.$val.QuerySelector(sel); };\n\tdocument.ptr.prototype.QuerySelectorAll = function(sel) {\n\t\tvar $ptr, d, sel;\n\t\td = $clone(this, document);\n\t\treturn (new BasicElement.ptr(new BasicNode.ptr(d.BasicNode.Object))).QuerySelectorAll(sel);\n\t};\n\tdocument.prototype.QuerySelectorAll = function(sel) { return this.$val.QuerySelectorAll(sel); };\n\twindow.ptr.prototype.Console = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn new Console.ptr(w.Object.console);\n\t};\n\twindow.prototype.Console = function() { return this.$val.Console(); };\n\twindow.ptr.prototype.Document = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn wrapDocument(w.Object.document);\n\t};\n\twindow.prototype.Document = function() { return this.$val.Document(); };\n\twindow.ptr.prototype.FrameElement = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn wrapElement(w.Object.frameElement);\n\t};\n\twindow.prototype.FrameElement = function() { return this.$val.FrameElement(); };\n\twindow.ptr.prototype.Location = function() {\n\t\tvar $ptr, o, w;\n\t\tw = this;\n\t\to = w.Object.location;\n\t\treturn new Location.ptr(o, new URLUtils.ptr(o, \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"));\n\t};\n\twindow.prototype.Location = function() { return this.$val.Location(); };\n\twindow.ptr.prototype.Name = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn $internalize(w.Object.name, $String);\n\t};\n\twindow.prototype.Name = function() { return this.$val.Name(); };\n\twindow.ptr.prototype.SetName = function(s) {\n\t\tvar $ptr, s, w;\n\t\tw = this;\n\t\tw.Object.name = $externalize(s, $String);\n\t};\n\twindow.prototype.SetName = function(s) { return this.$val.SetName(s); };\n\twindow.ptr.prototype.InnerHeight = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn $parseInt(w.Object.innerHeight) >> 0;\n\t};\n\twindow.prototype.InnerHeight = function() { return this.$val.InnerHeight(); };\n\twindow.ptr.prototype.InnerWidth = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn $parseInt(w.Object.innerWidth) >> 0;\n\t};\n\twindow.prototype.InnerWidth = function() { return this.$val.InnerWidth(); };\n\twindow.ptr.prototype.Length = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn $parseInt(w.Object.length) >> 0;\n\t};\n\twindow.prototype.Length = function() { return this.$val.Length(); };\n\twindow.ptr.prototype.Opener = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn new window.ptr(w.Object.opener);\n\t};\n\twindow.prototype.Opener = function() { return this.$val.Opener(); };\n\twindow.ptr.prototype.OuterHeight = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn $parseInt(w.Object.outerHeight) >> 0;\n\t};\n\twindow.prototype.OuterHeight = function() { return this.$val.OuterHeight(); };\n\twindow.ptr.prototype.OuterWidth = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn $parseInt(w.Object.outerWidth) >> 0;\n\t};\n\twindow.prototype.OuterWidth = function() { return this.$val.OuterWidth(); };\n\twindow.ptr.prototype.ScrollX = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn $parseInt(w.Object.scrollX) >> 0;\n\t};\n\twindow.prototype.ScrollX = function() { return this.$val.ScrollX(); };\n\twindow.ptr.prototype.ScrollY = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn $parseInt(w.Object.scrollY) >> 0;\n\t};\n\twindow.prototype.ScrollY = function() { return this.$val.ScrollY(); };\n\twindow.ptr.prototype.Parent = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn new window.ptr(w.Object.parent);\n\t};\n\twindow.prototype.Parent = function() { return this.$val.Parent(); };\n\twindow.ptr.prototype.ScreenX = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn $parseInt(w.Object.screenX) >> 0;\n\t};\n\twindow.prototype.ScreenX = function() { return this.$val.ScreenX(); };\n\twindow.ptr.prototype.ScreenY = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn $parseInt(w.Object.screenY) >> 0;\n\t};\n\twindow.prototype.ScreenY = function() { return this.$val.ScreenY(); };\n\twindow.ptr.prototype.ScrollMaxX = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn $parseInt(w.Object.scrollMaxX) >> 0;\n\t};\n\twindow.prototype.ScrollMaxX = function() { return this.$val.ScrollMaxX(); };\n\twindow.ptr.prototype.ScrollMaxY = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn $parseInt(w.Object.scrollMaxY) >> 0;\n\t};\n\twindow.prototype.ScrollMaxY = function() { return this.$val.ScrollMaxY(); };\n\twindow.ptr.prototype.Top = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn new window.ptr(w.Object.top);\n\t};\n\twindow.prototype.Top = function() { return this.$val.Top(); };\n\twindow.ptr.prototype.History = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn $ifaceNil;\n\t};\n\twindow.prototype.History = function() { return this.$val.History(); };\n\twindow.ptr.prototype.Navigator = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn $ifaceNil;\n\t};\n\twindow.prototype.Navigator = function() { return this.$val.Navigator(); };\n\twindow.ptr.prototype.Screen = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn new Screen.ptr(w.Object.screen, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t};\n\twindow.prototype.Screen = function() { return this.$val.Screen(); };\n\twindow.ptr.prototype.Alert = function(msg) {\n\t\tvar $ptr, msg, w;\n\t\tw = this;\n\t\tw.Object.alert($externalize(msg, $String));\n\t};\n\twindow.prototype.Alert = function(msg) { return this.$val.Alert(msg); };\n\twindow.ptr.prototype.Back = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\tw.Object.back();\n\t};\n\twindow.prototype.Back = function() { return this.$val.Back(); };\n\twindow.ptr.prototype.Blur = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\tw.Object.blur();\n\t};\n\twindow.prototype.Blur = function() { return this.$val.Blur(); };\n\twindow.ptr.prototype.ClearInterval = function(id) {\n\t\tvar $ptr, id, w;\n\t\tw = this;\n\t\tw.Object.clearInterval(id);\n\t};\n\twindow.prototype.ClearInterval = function(id) { return this.$val.ClearInterval(id); };\n\twindow.ptr.prototype.ClearTimeout = function(id) {\n\t\tvar $ptr, id, w;\n\t\tw = this;\n\t\tw.Object.clearTimeout(id);\n\t};\n\twindow.prototype.ClearTimeout = function(id) { return this.$val.ClearTimeout(id); };\n\twindow.ptr.prototype.Close = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\tw.Object.close();\n\t};\n\twindow.prototype.Close = function() { return this.$val.Close(); };\n\twindow.ptr.prototype.Confirm = function(prompt) {\n\t\tvar $ptr, prompt, w;\n\t\tw = this;\n\t\treturn !!(w.Object.confirm($externalize(prompt, $String)));\n\t};\n\twindow.prototype.Confirm = function(prompt) { return this.$val.Confirm(prompt); };\n\twindow.ptr.prototype.Focus = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\tw.Object.focus();\n\t};\n\twindow.prototype.Focus = function() { return this.$val.Focus(); };\n\twindow.ptr.prototype.Forward = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\tw.Object.forward();\n\t};\n\twindow.prototype.Forward = function() { return this.$val.Forward(); };\n\twindow.ptr.prototype.GetComputedStyle = function(el, pseudoElt) {\n\t\tvar $ptr, _r, el, optArg, pseudoElt, w, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; el = $f.el; optArg = $f.optArg; pseudoElt = $f.pseudoElt; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tw = this;\n\t\toptArg = $ifaceNil;\n\t\tif (!(pseudoElt === \"\")) {\n\t\t\toptArg = new $String(pseudoElt);\n\t\t}\n\t\t_r = el.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn new CSSStyleDeclaration.ptr(w.Object.getComputedStyle(_r, $externalize(optArg, $emptyInterface)));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: window.ptr.prototype.GetComputedStyle }; } $f.$ptr = $ptr; $f._r = _r; $f.el = el; $f.optArg = optArg; $f.pseudoElt = pseudoElt; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\twindow.prototype.GetComputedStyle = function(el, pseudoElt) { return this.$val.GetComputedStyle(el, pseudoElt); };\n\twindow.ptr.prototype.GetSelection = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\treturn $ifaceNil;\n\t};\n\twindow.prototype.GetSelection = function() { return this.$val.GetSelection(); };\n\twindow.ptr.prototype.Home = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\tw.Object.home();\n\t};\n\twindow.prototype.Home = function() { return this.$val.Home(); };\n\twindow.ptr.prototype.MoveBy = function(dx, dy) {\n\t\tvar $ptr, dx, dy, w;\n\t\tw = this;\n\t\tw.Object.moveBy(dx, dy);\n\t};\n\twindow.prototype.MoveBy = function(dx, dy) { return this.$val.MoveBy(dx, dy); };\n\twindow.ptr.prototype.MoveTo = function(x, y) {\n\t\tvar $ptr, w, x, y;\n\t\tw = this;\n\t\tw.Object.moveTo(x, y);\n\t};\n\twindow.prototype.MoveTo = function(x, y) { return this.$val.MoveTo(x, y); };\n\twindow.ptr.prototype.Open = function(url, name, features) {\n\t\tvar $ptr, features, name, url, w;\n\t\tw = this;\n\t\treturn new window.ptr(w.Object.open($externalize(url, $String), $externalize(name, $String), $externalize(features, $String)));\n\t};\n\twindow.prototype.Open = function(url, name, features) { return this.$val.Open(url, name, features); };\n\twindow.ptr.prototype.OpenDialog = function(url, name, features, args) {\n\t\tvar $ptr, args, features, name, url, w;\n\t\tw = this;\n\t\treturn new window.ptr(w.Object.openDialog($externalize(url, $String), $externalize(name, $String), $externalize(features, $String), $externalize(args, sliceType)));\n\t};\n\twindow.prototype.OpenDialog = function(url, name, features, args) { return this.$val.OpenDialog(url, name, features, args); };\n\twindow.ptr.prototype.PostMessage = function(message, target, transfer) {\n\t\tvar $ptr, message, target, transfer, w;\n\t\tw = this;\n\t\tw.Object.postMessage($externalize(message, $String), $externalize(target, $String), $externalize(transfer, sliceType));\n\t};\n\twindow.prototype.PostMessage = function(message, target, transfer) { return this.$val.PostMessage(message, target, transfer); };\n\twindow.ptr.prototype.Print = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\tw.Object.print();\n\t};\n\twindow.prototype.Print = function() { return this.$val.Print(); };\n\twindow.ptr.prototype.Prompt = function(prompt, initial) {\n\t\tvar $ptr, initial, prompt, w;\n\t\tw = this;\n\t\treturn $internalize(w.Object.prompt($externalize(prompt, $String), $externalize(initial, $String)), $String);\n\t};\n\twindow.prototype.Prompt = function(prompt, initial) { return this.$val.Prompt(prompt, initial); };\n\twindow.ptr.prototype.ResizeBy = function(dw, dh) {\n\t\tvar $ptr, dh, dw, w;\n\t\tw = this;\n\t\tw.Object.resizeBy(dw, dh);\n\t};\n\twindow.prototype.ResizeBy = function(dw, dh) { return this.$val.ResizeBy(dw, dh); };\n\twindow.ptr.prototype.ResizeTo = function(width, height) {\n\t\tvar $ptr, height, w, width;\n\t\tw = this;\n\t\tw.Object.resizeTo(width, height);\n\t};\n\twindow.prototype.ResizeTo = function(width, height) { return this.$val.ResizeTo(width, height); };\n\twindow.ptr.prototype.Scroll = function(x, y) {\n\t\tvar $ptr, w, x, y;\n\t\tw = this;\n\t\tw.Object.scroll(x, y);\n\t};\n\twindow.prototype.Scroll = function(x, y) { return this.$val.Scroll(x, y); };\n\twindow.ptr.prototype.ScrollBy = function(dx, dy) {\n\t\tvar $ptr, dx, dy, w;\n\t\tw = this;\n\t\tw.Object.scrollBy(dx, dy);\n\t};\n\twindow.prototype.ScrollBy = function(dx, dy) { return this.$val.ScrollBy(dx, dy); };\n\twindow.ptr.prototype.ScrollByLines = function(i) {\n\t\tvar $ptr, i, w;\n\t\tw = this;\n\t\tw.Object.scrollByLines(i);\n\t};\n\twindow.prototype.ScrollByLines = function(i) { return this.$val.ScrollByLines(i); };\n\twindow.ptr.prototype.ScrollTo = function(x, y) {\n\t\tvar $ptr, w, x, y;\n\t\tw = this;\n\t\tw.Object.scrollTo(x, y);\n\t};\n\twindow.prototype.ScrollTo = function(x, y) { return this.$val.ScrollTo(x, y); };\n\twindow.ptr.prototype.SetCursor = function(name) {\n\t\tvar $ptr, name, w;\n\t\tw = this;\n\t\tw.Object.setCursor($externalize(name, $String));\n\t};\n\twindow.prototype.SetCursor = function(name) { return this.$val.SetCursor(name); };\n\twindow.ptr.prototype.SetInterval = function(fn, delay) {\n\t\tvar $ptr, delay, fn, w;\n\t\tw = this;\n\t\treturn $parseInt(w.Object.setInterval($externalize(fn, funcType), delay)) >> 0;\n\t};\n\twindow.prototype.SetInterval = function(fn, delay) { return this.$val.SetInterval(fn, delay); };\n\twindow.ptr.prototype.SetTimeout = function(fn, delay) {\n\t\tvar $ptr, delay, fn, w;\n\t\tw = this;\n\t\treturn $parseInt(w.Object.setTimeout($externalize(fn, funcType), delay)) >> 0;\n\t};\n\twindow.prototype.SetTimeout = function(fn, delay) { return this.$val.SetTimeout(fn, delay); };\n\twindow.ptr.prototype.Stop = function() {\n\t\tvar $ptr, w;\n\t\tw = this;\n\t\tw.Object.stop();\n\t};\n\twindow.prototype.Stop = function() { return this.$val.Stop(); };\n\twindow.ptr.prototype.AddEventListener = function(typ, useCapture, listener) {\n\t\tvar $ptr, listener, typ, useCapture, w, wrapper;\n\t\tw = this;\n\t\twrapper = (function $b(o) {\n\t\t\tvar $ptr, o, $s, $r;\n\t\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; o = $f.o; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t\t$r = listener(wrapEvent(o)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.o = o; $f.$s = $s; $f.$r = $r; return $f;\n\t\t});\n\t\tw.Object.addEventListener($externalize(typ, $String), $externalize(wrapper, funcType$1), $externalize(useCapture, $Bool));\n\t\treturn wrapper;\n\t};\n\twindow.prototype.AddEventListener = function(typ, useCapture, listener) { return this.$val.AddEventListener(typ, useCapture, listener); };\n\twindow.ptr.prototype.RemoveEventListener = function(typ, useCapture, listener) {\n\t\tvar $ptr, listener, typ, useCapture, w;\n\t\tw = this;\n\t\tw.Object.removeEventListener($externalize(typ, $String), $externalize(listener, funcType$1), $externalize(useCapture, $Bool));\n\t};\n\twindow.prototype.RemoveEventListener = function(typ, useCapture, listener) { return this.$val.RemoveEventListener(typ, useCapture, listener); };\n\twrapDOMHighResTimeStamp = function(o) {\n\t\tvar $ptr, o;\n\t\treturn new time.Duration(0, $parseFloat(o) * 1e+06);\n\t};\n\twindow.ptr.prototype.RequestAnimationFrame = function(callback) {\n\t\tvar $ptr, callback, w, wrapper;\n\t\tw = this;\n\t\twrapper = (function $b(o) {\n\t\t\tvar $ptr, o, $s, $r;\n\t\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; o = $f.o; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t\t$r = callback(wrapDOMHighResTimeStamp(o)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.o = o; $f.$s = $s; $f.$r = $r; return $f;\n\t\t});\n\t\treturn $parseInt(w.Object.requestAnimationFrame($externalize(wrapper, funcType$1))) >> 0;\n\t};\n\twindow.prototype.RequestAnimationFrame = function(callback) { return this.$val.RequestAnimationFrame(callback); };\n\twindow.ptr.prototype.CancelAnimationFrame = function(requestID) {\n\t\tvar $ptr, requestID, w;\n\t\tw = this;\n\t\tw.Object.cancelAnimationFrame(requestID);\n\t};\n\twindow.prototype.CancelAnimationFrame = function(requestID) { return this.$val.CancelAnimationFrame(requestID); };\n\tPositionError.ptr.prototype.Error = function() {\n\t\tvar $ptr, err;\n\t\terr = this;\n\t\treturn $internalize(err.Object.message(), $String);\n\t};\n\tPositionError.prototype.Error = function() { return this.$val.Error(); };\n\tBasicNode.ptr.prototype.Underlying = function() {\n\t\tvar $ptr, n;\n\t\tn = this;\n\t\treturn n.Object;\n\t};\n\tBasicNode.prototype.Underlying = function() { return this.$val.Underlying(); };\n\tBasicNode.ptr.prototype.AddEventListener = function(typ, useCapture, listener) {\n\t\tvar $ptr, listener, n, typ, useCapture, wrapper;\n\t\tn = this;\n\t\twrapper = (function $b(o) {\n\t\t\tvar $ptr, o, $s, $r;\n\t\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; o = $f.o; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t\t$r = listener(wrapEvent(o)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.o = o; $f.$s = $s; $f.$r = $r; return $f;\n\t\t});\n\t\tn.Object.addEventListener($externalize(typ, $String), $externalize(wrapper, funcType$1), $externalize(useCapture, $Bool));\n\t\treturn wrapper;\n\t};\n\tBasicNode.prototype.AddEventListener = function(typ, useCapture, listener) { return this.$val.AddEventListener(typ, useCapture, listener); };\n\tBasicNode.ptr.prototype.RemoveEventListener = function(typ, useCapture, listener) {\n\t\tvar $ptr, listener, n, typ, useCapture;\n\t\tn = this;\n\t\tn.Object.removeEventListener($externalize(typ, $String), $externalize(listener, funcType$1), $externalize(useCapture, $Bool));\n\t};\n\tBasicNode.prototype.RemoveEventListener = function(typ, useCapture, listener) { return this.$val.RemoveEventListener(typ, useCapture, listener); };\n\tBasicNode.ptr.prototype.BaseURI = function() {\n\t\tvar $ptr, n;\n\t\tn = this;\n\t\treturn $internalize(n.Object.baseURI, $String);\n\t};\n\tBasicNode.prototype.BaseURI = function() { return this.$val.BaseURI(); };\n\tBasicNode.ptr.prototype.ChildNodes = function() {\n\t\tvar $ptr, n;\n\t\tn = this;\n\t\treturn nodeListToNodes(n.Object.childNodes);\n\t};\n\tBasicNode.prototype.ChildNodes = function() { return this.$val.ChildNodes(); };\n\tBasicNode.ptr.prototype.FirstChild = function() {\n\t\tvar $ptr, n;\n\t\tn = this;\n\t\treturn wrapNode(n.Object.firstChild);\n\t};\n\tBasicNode.prototype.FirstChild = function() { return this.$val.FirstChild(); };\n\tBasicNode.ptr.prototype.LastChild = function() {\n\t\tvar $ptr, n;\n\t\tn = this;\n\t\treturn wrapNode(n.Object.lastChild);\n\t};\n\tBasicNode.prototype.LastChild = function() { return this.$val.LastChild(); };\n\tBasicNode.ptr.prototype.NextSibling = function() {\n\t\tvar $ptr, n;\n\t\tn = this;\n\t\treturn wrapNode(n.Object.nextSibling);\n\t};\n\tBasicNode.prototype.NextSibling = function() { return this.$val.NextSibling(); };\n\tBasicNode.ptr.prototype.NodeName = function() {\n\t\tvar $ptr, n;\n\t\tn = this;\n\t\treturn $internalize(n.Object.nodeName, $String);\n\t};\n\tBasicNode.prototype.NodeName = function() { return this.$val.NodeName(); };\n\tBasicNode.ptr.prototype.NodeType = function() {\n\t\tvar $ptr, n;\n\t\tn = this;\n\t\treturn $parseInt(n.Object.nodeType) >> 0;\n\t};\n\tBasicNode.prototype.NodeType = function() { return this.$val.NodeType(); };\n\tBasicNode.ptr.prototype.NodeValue = function() {\n\t\tvar $ptr, n;\n\t\tn = this;\n\t\treturn $internalize(n.Object.nodeValue, $String);\n\t};\n\tBasicNode.prototype.NodeValue = function() { return this.$val.NodeValue(); };\n\tBasicNode.ptr.prototype.SetNodeValue = function(s) {\n\t\tvar $ptr, n, s;\n\t\tn = this;\n\t\tn.Object.nodeValue = $externalize(s, $String);\n\t};\n\tBasicNode.prototype.SetNodeValue = function(s) { return this.$val.SetNodeValue(s); };\n\tBasicNode.ptr.prototype.OwnerDocument = function() {\n\t\tvar $ptr, n;\n\t\tn = this;\n\t\treturn $ifaceNil;\n\t};\n\tBasicNode.prototype.OwnerDocument = function() { return this.$val.OwnerDocument(); };\n\tBasicNode.ptr.prototype.ParentNode = function() {\n\t\tvar $ptr, n;\n\t\tn = this;\n\t\treturn wrapNode(n.Object.parentNode);\n\t};\n\tBasicNode.prototype.ParentNode = function() { return this.$val.ParentNode(); };\n\tBasicNode.ptr.prototype.ParentElement = function() {\n\t\tvar $ptr, n;\n\t\tn = this;\n\t\treturn wrapElement(n.Object.parentElement);\n\t};\n\tBasicNode.prototype.ParentElement = function() { return this.$val.ParentElement(); };\n\tBasicNode.ptr.prototype.PreviousSibling = function() {\n\t\tvar $ptr, n;\n\t\tn = this;\n\t\treturn wrapNode(n.Object.previousSibling);\n\t};\n\tBasicNode.prototype.PreviousSibling = function() { return this.$val.PreviousSibling(); };\n\tBasicNode.ptr.prototype.TextContent = function() {\n\t\tvar $ptr, n;\n\t\tn = this;\n\t\treturn $internalize(n.Object.textContent, $String);\n\t};\n\tBasicNode.prototype.TextContent = function() { return this.$val.TextContent(); };\n\tBasicNode.ptr.prototype.SetTextContent = function(s) {\n\t\tvar $ptr, n, s;\n\t\tn = this;\n\t\tn.Object.textContent = $externalize(s, $String);\n\t};\n\tBasicNode.prototype.SetTextContent = function(s) { return this.$val.SetTextContent(s); };\n\tBasicNode.ptr.prototype.AppendChild = function(newchild) {\n\t\tvar $ptr, _r, n, newchild, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; newchild = $f.newchild; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = this;\n\t\t_r = newchild.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tn.Object.appendChild(_r);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BasicNode.ptr.prototype.AppendChild }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.newchild = newchild; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBasicNode.prototype.AppendChild = function(newchild) { return this.$val.AppendChild(newchild); };\n\tBasicNode.ptr.prototype.CloneNode = function(deep) {\n\t\tvar $ptr, deep, n;\n\t\tn = this;\n\t\treturn wrapNode(n.Object.cloneNode($externalize(deep, $Bool)));\n\t};\n\tBasicNode.prototype.CloneNode = function(deep) { return this.$val.CloneNode(deep); };\n\tBasicNode.ptr.prototype.CompareDocumentPosition = function(other) {\n\t\tvar $ptr, _r, n, other, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; other = $f.other; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = this;\n\t\t_r = other.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn $parseInt(n.Object.compareDocumentPosition(_r)) >> 0;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BasicNode.ptr.prototype.CompareDocumentPosition }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.other = other; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBasicNode.prototype.CompareDocumentPosition = function(other) { return this.$val.CompareDocumentPosition(other); };\n\tBasicNode.ptr.prototype.Contains = function(other) {\n\t\tvar $ptr, _r, n, other, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; other = $f.other; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = this;\n\t\t_r = other.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn !!(n.Object.contains(_r));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BasicNode.ptr.prototype.Contains }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.other = other; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBasicNode.prototype.Contains = function(other) { return this.$val.Contains(other); };\n\tBasicNode.ptr.prototype.HasChildNodes = function() {\n\t\tvar $ptr, n;\n\t\tn = this;\n\t\treturn !!(n.Object.hasChildNodes());\n\t};\n\tBasicNode.prototype.HasChildNodes = function() { return this.$val.HasChildNodes(); };\n\tBasicNode.ptr.prototype.InsertBefore = function(which, before) {\n\t\tvar $ptr, _r, _r$1, before, n, o, which, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; before = $f.before; n = $f.n; o = $f.o; which = $f.which; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = this;\n\t\to = $ifaceNil;\n\t\t/* */ if (!($interfaceIsEqual(before, $ifaceNil))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!($interfaceIsEqual(before, $ifaceNil))) { */ case 1:\n\t\t\t_r = before.Underlying(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\to = new $jsObjectPtr(_r);\n\t\t/* } */ case 2:\n\t\t_r$1 = which.Underlying(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\tn.Object.insertBefore(_r$1, $externalize(o, $emptyInterface));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BasicNode.ptr.prototype.InsertBefore }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.before = before; $f.n = n; $f.o = o; $f.which = which; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBasicNode.prototype.InsertBefore = function(which, before) { return this.$val.InsertBefore(which, before); };\n\tBasicNode.ptr.prototype.IsDefaultNamespace = function(s) {\n\t\tvar $ptr, n, s;\n\t\tn = this;\n\t\treturn !!(n.Object.isDefaultNamespace($externalize(s, $String)));\n\t};\n\tBasicNode.prototype.IsDefaultNamespace = function(s) { return this.$val.IsDefaultNamespace(s); };\n\tBasicNode.ptr.prototype.IsEqualNode = function(other) {\n\t\tvar $ptr, _r, n, other, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; other = $f.other; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = this;\n\t\t_r = other.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn !!(n.Object.isEqualNode(_r));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BasicNode.ptr.prototype.IsEqualNode }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.other = other; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBasicNode.prototype.IsEqualNode = function(other) { return this.$val.IsEqualNode(other); };\n\tBasicNode.ptr.prototype.LookupPrefix = function() {\n\t\tvar $ptr, n;\n\t\tn = this;\n\t\treturn $internalize(n.Object.lookupPrefix(), $String);\n\t};\n\tBasicNode.prototype.LookupPrefix = function() { return this.$val.LookupPrefix(); };\n\tBasicNode.ptr.prototype.LookupNamespaceURI = function(s) {\n\t\tvar $ptr, n, s;\n\t\tn = this;\n\t\treturn $internalize(n.Object.lookupNamespaceURI($externalize(s, $String)), $String);\n\t};\n\tBasicNode.prototype.LookupNamespaceURI = function(s) { return this.$val.LookupNamespaceURI(s); };\n\tBasicNode.ptr.prototype.Normalize = function() {\n\t\tvar $ptr, n;\n\t\tn = this;\n\t\tn.Object.normalize();\n\t};\n\tBasicNode.prototype.Normalize = function() { return this.$val.Normalize(); };\n\tBasicNode.ptr.prototype.RemoveChild = function(other) {\n\t\tvar $ptr, _r, n, other, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; other = $f.other; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = this;\n\t\t_r = other.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tn.Object.removeChild(_r);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BasicNode.ptr.prototype.RemoveChild }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.other = other; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBasicNode.prototype.RemoveChild = function(other) { return this.$val.RemoveChild(other); };\n\tBasicNode.ptr.prototype.ReplaceChild = function(newChild, oldChild) {\n\t\tvar $ptr, _r, _r$1, n, newChild, oldChild, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; n = $f.n; newChild = $f.newChild; oldChild = $f.oldChild; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = this;\n\t\t_r = newChild.Underlying(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_r$1 = oldChild.Underlying(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\tn.Object.replaceChild(_r, _r$1);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BasicNode.ptr.prototype.ReplaceChild }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.n = n; $f.newChild = newChild; $f.oldChild = oldChild; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tBasicNode.prototype.ReplaceChild = function(newChild, oldChild) { return this.$val.ReplaceChild(newChild, oldChild); };\n\tBasicHTMLElement.ptr.prototype.AccessKey = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn $internalize(e.BasicElement.BasicNode.Object.accessKey, $String);\n\t};\n\tBasicHTMLElement.prototype.AccessKey = function() { return this.$val.AccessKey(); };\n\tBasicHTMLElement.ptr.prototype.SetAccessKey = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\te.BasicElement.BasicNode.Object.accessKey = $externalize(s, $String);\n\t};\n\tBasicHTMLElement.prototype.SetAccessKey = function(s) { return this.$val.SetAccessKey(s); };\n\tBasicHTMLElement.ptr.prototype.AccessKeyLabel = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn $internalize(e.BasicElement.BasicNode.Object.accessKeyLabel, $String);\n\t};\n\tBasicHTMLElement.prototype.AccessKeyLabel = function() { return this.$val.AccessKeyLabel(); };\n\tBasicHTMLElement.ptr.prototype.SetAccessKeyLabel = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\te.BasicElement.BasicNode.Object.accessKeyLabel = $externalize(s, $String);\n\t};\n\tBasicHTMLElement.prototype.SetAccessKeyLabel = function(s) { return this.$val.SetAccessKeyLabel(s); };\n\tBasicHTMLElement.ptr.prototype.ContentEditable = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn $internalize(e.BasicElement.BasicNode.Object.contentEditable, $String);\n\t};\n\tBasicHTMLElement.prototype.ContentEditable = function() { return this.$val.ContentEditable(); };\n\tBasicHTMLElement.ptr.prototype.SetContentEditable = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\te.BasicElement.BasicNode.Object.contentEditable = $externalize(s, $String);\n\t};\n\tBasicHTMLElement.prototype.SetContentEditable = function(s) { return this.$val.SetContentEditable(s); };\n\tBasicHTMLElement.ptr.prototype.IsContentEditable = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn !!(e.BasicElement.BasicNode.Object.isContentEditable);\n\t};\n\tBasicHTMLElement.prototype.IsContentEditable = function() { return this.$val.IsContentEditable(); };\n\tBasicHTMLElement.ptr.prototype.Dataset = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t};\n\tBasicHTMLElement.prototype.Dataset = function() { return this.$val.Dataset(); };\n\tBasicHTMLElement.ptr.prototype.Dir = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn $internalize(e.BasicElement.BasicNode.Object.dir, $String);\n\t};\n\tBasicHTMLElement.prototype.Dir = function() { return this.$val.Dir(); };\n\tBasicHTMLElement.ptr.prototype.SetDir = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\te.BasicElement.BasicNode.Object.dir = $externalize(s, $String);\n\t};\n\tBasicHTMLElement.prototype.SetDir = function(s) { return this.$val.SetDir(s); };\n\tBasicHTMLElement.ptr.prototype.Draggable = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn !!(e.BasicElement.BasicNode.Object.draggable);\n\t};\n\tBasicHTMLElement.prototype.Draggable = function() { return this.$val.Draggable(); };\n\tBasicHTMLElement.ptr.prototype.SetDraggable = function(b) {\n\t\tvar $ptr, b, e;\n\t\te = this;\n\t\te.BasicElement.BasicNode.Object.draggable = $externalize(b, $Bool);\n\t};\n\tBasicHTMLElement.prototype.SetDraggable = function(b) { return this.$val.SetDraggable(b); };\n\tBasicHTMLElement.ptr.prototype.Lang = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn $internalize(e.BasicElement.BasicNode.Object.lang, $String);\n\t};\n\tBasicHTMLElement.prototype.Lang = function() { return this.$val.Lang(); };\n\tBasicHTMLElement.ptr.prototype.SetLang = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\te.BasicElement.BasicNode.Object.lang = $externalize(s, $String);\n\t};\n\tBasicHTMLElement.prototype.SetLang = function(s) { return this.$val.SetLang(s); };\n\tBasicHTMLElement.ptr.prototype.OffsetHeight = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn $parseFloat(e.BasicElement.BasicNode.Object.offsetHeight);\n\t};\n\tBasicHTMLElement.prototype.OffsetHeight = function() { return this.$val.OffsetHeight(); };\n\tBasicHTMLElement.ptr.prototype.OffsetLeft = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn $parseFloat(e.BasicElement.BasicNode.Object.offsetLeft);\n\t};\n\tBasicHTMLElement.prototype.OffsetLeft = function() { return this.$val.OffsetLeft(); };\n\tBasicHTMLElement.ptr.prototype.OffsetParent = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn wrapHTMLElement(e.BasicElement.BasicNode.Object.offsetParent);\n\t};\n\tBasicHTMLElement.prototype.OffsetParent = function() { return this.$val.OffsetParent(); };\n\tBasicHTMLElement.ptr.prototype.OffsetTop = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn $parseFloat(e.BasicElement.BasicNode.Object.offsetTop);\n\t};\n\tBasicHTMLElement.prototype.OffsetTop = function() { return this.$val.OffsetTop(); };\n\tBasicHTMLElement.ptr.prototype.OffsetWidth = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn $parseFloat(e.BasicElement.BasicNode.Object.offsetWidth);\n\t};\n\tBasicHTMLElement.prototype.OffsetWidth = function() { return this.$val.OffsetWidth(); };\n\tBasicHTMLElement.ptr.prototype.Style = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn new CSSStyleDeclaration.ptr(e.BasicElement.BasicNode.Object.style);\n\t};\n\tBasicHTMLElement.prototype.Style = function() { return this.$val.Style(); };\n\tBasicHTMLElement.ptr.prototype.TabIndex = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn $parseInt(e.BasicElement.BasicNode.Object.tabIndex) >> 0;\n\t};\n\tBasicHTMLElement.prototype.TabIndex = function() { return this.$val.TabIndex(); };\n\tBasicHTMLElement.ptr.prototype.SetTabIndex = function(i) {\n\t\tvar $ptr, e, i;\n\t\te = this;\n\t\te.BasicElement.BasicNode.Object.tabIndex = i;\n\t};\n\tBasicHTMLElement.prototype.SetTabIndex = function(i) { return this.$val.SetTabIndex(i); };\n\tBasicHTMLElement.ptr.prototype.Title = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn $internalize(e.BasicElement.BasicNode.Object.title, $String);\n\t};\n\tBasicHTMLElement.prototype.Title = function() { return this.$val.Title(); };\n\tBasicHTMLElement.ptr.prototype.SetTitle = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\te.BasicElement.BasicNode.Object.title = $externalize(s, $String);\n\t};\n\tBasicHTMLElement.prototype.SetTitle = function(s) { return this.$val.SetTitle(s); };\n\tBasicHTMLElement.ptr.prototype.Blur = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\te.BasicElement.BasicNode.Object.blur();\n\t};\n\tBasicHTMLElement.prototype.Blur = function() { return this.$val.Blur(); };\n\tBasicHTMLElement.ptr.prototype.Click = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\te.BasicElement.BasicNode.Object.click();\n\t};\n\tBasicHTMLElement.prototype.Click = function() { return this.$val.Click(); };\n\tBasicHTMLElement.ptr.prototype.Focus = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\te.BasicElement.BasicNode.Object.focus();\n\t};\n\tBasicHTMLElement.prototype.Focus = function() { return this.$val.Focus(); };\n\tBasicElement.ptr.prototype.GetBoundingClientRect = function() {\n\t\tvar $ptr, e, obj;\n\t\te = this;\n\t\tobj = e.BasicNode.Object.getBoundingClientRect();\n\t\treturn new ClientRect.ptr(obj, 0, 0, 0, 0, 0, 0);\n\t};\n\tBasicElement.prototype.GetBoundingClientRect = function() { return this.$val.GetBoundingClientRect(); };\n\tBasicElement.ptr.prototype.PreviousElementSibling = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn wrapElement(e.BasicNode.Object.previousElementSibling);\n\t};\n\tBasicElement.prototype.PreviousElementSibling = function() { return this.$val.PreviousElementSibling(); };\n\tBasicElement.ptr.prototype.NextElementSibling = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn wrapElement(e.BasicNode.Object.nextElementSibling);\n\t};\n\tBasicElement.prototype.NextElementSibling = function() { return this.$val.NextElementSibling(); };\n\tBasicElement.ptr.prototype.Class = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn new TokenList.ptr(e.BasicNode.Object.classList, e.BasicNode.Object, \"className\", 0);\n\t};\n\tBasicElement.prototype.Class = function() { return this.$val.Class(); };\n\tBasicElement.ptr.prototype.SetClass = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\te.BasicNode.Object.className = $externalize(s, $String);\n\t};\n\tBasicElement.prototype.SetClass = function(s) { return this.$val.SetClass(s); };\n\tBasicElement.ptr.prototype.ID = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn $internalize(e.BasicNode.Object.id, $String);\n\t};\n\tBasicElement.prototype.ID = function() { return this.$val.ID(); };\n\tBasicElement.ptr.prototype.SetID = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\te.BasicNode.Object.id = $externalize(s, $String);\n\t};\n\tBasicElement.prototype.SetID = function(s) { return this.$val.SetID(s); };\n\tBasicElement.ptr.prototype.TagName = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn $internalize(e.BasicNode.Object.tagName, $String);\n\t};\n\tBasicElement.prototype.TagName = function() { return this.$val.TagName(); };\n\tBasicElement.ptr.prototype.GetAttribute = function(name) {\n\t\tvar $ptr, e, name;\n\t\te = this;\n\t\treturn $internalize(e.BasicNode.Object.getAttribute($externalize(name, $String)), $String);\n\t};\n\tBasicElement.prototype.GetAttribute = function(name) { return this.$val.GetAttribute(name); };\n\tBasicElement.ptr.prototype.GetAttributeNS = function(ns, name) {\n\t\tvar $ptr, e, name, ns;\n\t\te = this;\n\t\treturn $internalize(e.BasicNode.Object.getAttributeNS($externalize(ns, $String), $externalize(name, $String)), $String);\n\t};\n\tBasicElement.prototype.GetAttributeNS = function(ns, name) { return this.$val.GetAttributeNS(ns, name); };\n\tBasicElement.ptr.prototype.GetElementsByClassName = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\treturn nodeListToElements(e.BasicNode.Object.getElementsByClassName($externalize(s, $String)));\n\t};\n\tBasicElement.prototype.GetElementsByClassName = function(s) { return this.$val.GetElementsByClassName(s); };\n\tBasicElement.ptr.prototype.GetElementsByTagName = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\treturn nodeListToElements(e.BasicNode.Object.getElementsByTagName($externalize(s, $String)));\n\t};\n\tBasicElement.prototype.GetElementsByTagName = function(s) { return this.$val.GetElementsByTagName(s); };\n\tBasicElement.ptr.prototype.GetElementsByTagNameNS = function(ns, name) {\n\t\tvar $ptr, e, name, ns;\n\t\te = this;\n\t\treturn nodeListToElements(e.BasicNode.Object.getElementsByTagNameNS($externalize(ns, $String), $externalize(name, $String)));\n\t};\n\tBasicElement.prototype.GetElementsByTagNameNS = function(ns, name) { return this.$val.GetElementsByTagNameNS(ns, name); };\n\tBasicElement.ptr.prototype.HasAttribute = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\treturn !!(e.BasicNode.Object.hasAttribute($externalize(s, $String)));\n\t};\n\tBasicElement.prototype.HasAttribute = function(s) { return this.$val.HasAttribute(s); };\n\tBasicElement.ptr.prototype.HasAttributeNS = function(ns, name) {\n\t\tvar $ptr, e, name, ns;\n\t\te = this;\n\t\treturn !!(e.BasicNode.Object.hasAttributeNS($externalize(ns, $String), $externalize(name, $String)));\n\t};\n\tBasicElement.prototype.HasAttributeNS = function(ns, name) { return this.$val.HasAttributeNS(ns, name); };\n\tBasicElement.ptr.prototype.QuerySelector = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\treturn wrapElement(e.BasicNode.Object.querySelector($externalize(s, $String)));\n\t};\n\tBasicElement.prototype.QuerySelector = function(s) { return this.$val.QuerySelector(s); };\n\tBasicElement.ptr.prototype.QuerySelectorAll = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\treturn nodeListToElements(e.BasicNode.Object.querySelectorAll($externalize(s, $String)));\n\t};\n\tBasicElement.prototype.QuerySelectorAll = function(s) { return this.$val.QuerySelectorAll(s); };\n\tBasicElement.ptr.prototype.RemoveAttribute = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\te.BasicNode.Object.removeAttribute($externalize(s, $String));\n\t};\n\tBasicElement.prototype.RemoveAttribute = function(s) { return this.$val.RemoveAttribute(s); };\n\tBasicElement.ptr.prototype.RemoveAttributeNS = function(ns, name) {\n\t\tvar $ptr, e, name, ns;\n\t\te = this;\n\t\te.BasicNode.Object.removeAttributeNS($externalize(ns, $String), $externalize(name, $String));\n\t};\n\tBasicElement.prototype.RemoveAttributeNS = function(ns, name) { return this.$val.RemoveAttributeNS(ns, name); };\n\tBasicElement.ptr.prototype.SetAttribute = function(name, value) {\n\t\tvar $ptr, e, name, value;\n\t\te = this;\n\t\te.BasicNode.Object.setAttribute($externalize(name, $String), $externalize(value, $String));\n\t};\n\tBasicElement.prototype.SetAttribute = function(name, value) { return this.$val.SetAttribute(name, value); };\n\tBasicElement.ptr.prototype.SetAttributeNS = function(ns, name, value) {\n\t\tvar $ptr, e, name, ns, value;\n\t\te = this;\n\t\te.BasicNode.Object.setAttributeNS($externalize(ns, $String), $externalize(name, $String), $externalize(value, $String));\n\t};\n\tBasicElement.prototype.SetAttributeNS = function(ns, name, value) { return this.$val.SetAttributeNS(ns, name, value); };\n\tBasicElement.ptr.prototype.InnerHTML = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn $internalize(e.BasicNode.Object.innerHTML, $String);\n\t};\n\tBasicElement.prototype.InnerHTML = function() { return this.$val.InnerHTML(); };\n\tBasicElement.ptr.prototype.SetInnerHTML = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\te.BasicNode.Object.innerHTML = $externalize(s, $String);\n\t};\n\tBasicElement.prototype.SetInnerHTML = function(s) { return this.$val.SetInnerHTML(s); };\n\tHTMLAnchorElement.ptr.prototype.Rel = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn new TokenList.ptr(e.URLUtils.Object.relList, e.URLUtils.Object, \"rel\", 0);\n\t};\n\tHTMLAnchorElement.prototype.Rel = function() { return this.$val.Rel(); };\n\tHTMLAppletElement.ptr.prototype.Rel = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn new TokenList.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.relList, e.BasicHTMLElement.BasicElement.BasicNode.Object, \"rel\", 0);\n\t};\n\tHTMLAppletElement.prototype.Rel = function() { return this.$val.Rel(); };\n\tHTMLAreaElement.ptr.prototype.Rel = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn new TokenList.ptr(e.URLUtils.Object.relList, e.URLUtils.Object, \"rel\", 0);\n\t};\n\tHTMLAreaElement.prototype.Rel = function() { return this.$val.Rel(); };\n\tHTMLButtonElement.ptr.prototype.Form = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);\n\t};\n\tHTMLButtonElement.prototype.Form = function() { return this.$val.Form(); };\n\tHTMLButtonElement.ptr.prototype.Labels = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn getLabels(e.BasicHTMLElement.BasicElement.BasicNode.Object);\n\t};\n\tHTMLButtonElement.prototype.Labels = function() { return this.$val.Labels(); };\n\tHTMLButtonElement.ptr.prototype.Validity = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn new ValidityState.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.validity, false, false, false, false, false, false, false, false, false);\n\t};\n\tHTMLButtonElement.prototype.Validity = function() { return this.$val.Validity(); };\n\tHTMLButtonElement.ptr.prototype.CheckValidity = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn !!(e.BasicHTMLElement.BasicElement.BasicNode.Object.checkValidity());\n\t};\n\tHTMLButtonElement.prototype.CheckValidity = function() { return this.$val.CheckValidity(); };\n\tHTMLButtonElement.ptr.prototype.SetCustomValidity = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\te.BasicHTMLElement.BasicElement.BasicNode.Object.setCustomValidity($externalize(s, $String));\n\t};\n\tHTMLButtonElement.prototype.SetCustomValidity = function(s) { return this.$val.SetCustomValidity(s); };\n\tHTMLCanvasElement.ptr.prototype.GetContext2d = function() {\n\t\tvar $ptr, ctx, e;\n\t\te = this;\n\t\tctx = e.GetContext(\"2d\");\n\t\treturn new CanvasRenderingContext2D.ptr(ctx, \"\", \"\", \"\", 0, 0, 0, \"\", \"\", 0, 0, \"\", \"\", \"\", 0, \"\");\n\t};\n\tHTMLCanvasElement.prototype.GetContext2d = function() { return this.$val.GetContext2d(); };\n\tHTMLCanvasElement.ptr.prototype.GetContext = function(param) {\n\t\tvar $ptr, e, param;\n\t\te = this;\n\t\treturn e.BasicHTMLElement.BasicElement.BasicNode.Object.getContext($externalize(param, $String));\n\t};\n\tHTMLCanvasElement.prototype.GetContext = function(param) { return this.$val.GetContext(param); };\n\tCanvasRenderingContext2D.ptr.prototype.CreateLinearGradient = function(x0, y0, x1, y1) {\n\t\tvar $ptr, ctx, x0, x1, y0, y1;\n\t\tctx = this;\n\t\tctx.Object.createLinearGradient(x0, y0, x1, y1);\n\t};\n\tCanvasRenderingContext2D.prototype.CreateLinearGradient = function(x0, y0, x1, y1) { return this.$val.CreateLinearGradient(x0, y0, x1, y1); };\n\tCanvasRenderingContext2D.ptr.prototype.Rect = function(x, y, width, height) {\n\t\tvar $ptr, ctx, height, width, x, y;\n\t\tctx = this;\n\t\tctx.Object.rect(x, y, width, height);\n\t};\n\tCanvasRenderingContext2D.prototype.Rect = function(x, y, width, height) { return this.$val.Rect(x, y, width, height); };\n\tCanvasRenderingContext2D.ptr.prototype.FillRect = function(x, y, width, height) {\n\t\tvar $ptr, ctx, height, width, x, y;\n\t\tctx = this;\n\t\tctx.Object.fillRect(x, y, width, height);\n\t};\n\tCanvasRenderingContext2D.prototype.FillRect = function(x, y, width, height) { return this.$val.FillRect(x, y, width, height); };\n\tCanvasRenderingContext2D.ptr.prototype.StrokeRect = function(x, y, width, height) {\n\t\tvar $ptr, ctx, height, width, x, y;\n\t\tctx = this;\n\t\tctx.Object.strokeRect(x, y, width, height);\n\t};\n\tCanvasRenderingContext2D.prototype.StrokeRect = function(x, y, width, height) { return this.$val.StrokeRect(x, y, width, height); };\n\tCanvasRenderingContext2D.ptr.prototype.ClearRect = function(x, y, width, height) {\n\t\tvar $ptr, ctx, height, width, x, y;\n\t\tctx = this;\n\t\tctx.Object.clearRect(x, y, width, height);\n\t};\n\tCanvasRenderingContext2D.prototype.ClearRect = function(x, y, width, height) { return this.$val.ClearRect(x, y, width, height); };\n\tCanvasRenderingContext2D.ptr.prototype.Fill = function() {\n\t\tvar $ptr, ctx;\n\t\tctx = this;\n\t\tctx.Object.fill();\n\t};\n\tCanvasRenderingContext2D.prototype.Fill = function() { return this.$val.Fill(); };\n\tCanvasRenderingContext2D.ptr.prototype.Stroke = function() {\n\t\tvar $ptr, ctx;\n\t\tctx = this;\n\t\tctx.Object.stroke();\n\t};\n\tCanvasRenderingContext2D.prototype.Stroke = function() { return this.$val.Stroke(); };\n\tCanvasRenderingContext2D.ptr.prototype.BeginPath = function() {\n\t\tvar $ptr, ctx;\n\t\tctx = this;\n\t\tctx.Object.beginPath();\n\t};\n\tCanvasRenderingContext2D.prototype.BeginPath = function() { return this.$val.BeginPath(); };\n\tCanvasRenderingContext2D.ptr.prototype.MoveTo = function(x, y) {\n\t\tvar $ptr, ctx, x, y;\n\t\tctx = this;\n\t\tctx.Object.moveTo(x, y);\n\t};\n\tCanvasRenderingContext2D.prototype.MoveTo = function(x, y) { return this.$val.MoveTo(x, y); };\n\tCanvasRenderingContext2D.ptr.prototype.ClosePath = function() {\n\t\tvar $ptr, ctx;\n\t\tctx = this;\n\t\tctx.Object.closePath();\n\t};\n\tCanvasRenderingContext2D.prototype.ClosePath = function() { return this.$val.ClosePath(); };\n\tCanvasRenderingContext2D.ptr.prototype.LineTo = function(x, y) {\n\t\tvar $ptr, ctx, x, y;\n\t\tctx = this;\n\t\tctx.Object.lineTo(x, y);\n\t};\n\tCanvasRenderingContext2D.prototype.LineTo = function(x, y) { return this.$val.LineTo(x, y); };\n\tCanvasRenderingContext2D.ptr.prototype.Clip = function() {\n\t\tvar $ptr, ctx;\n\t\tctx = this;\n\t\tctx.Object.clip();\n\t};\n\tCanvasRenderingContext2D.prototype.Clip = function() { return this.$val.Clip(); };\n\tCanvasRenderingContext2D.ptr.prototype.QuadraticCurveTo = function(cpx, cpy, x, y) {\n\t\tvar $ptr, cpx, cpy, ctx, x, y;\n\t\tctx = this;\n\t\tctx.Object.quadraticCurveTo(cpx, cpy, x, y);\n\t};\n\tCanvasRenderingContext2D.prototype.QuadraticCurveTo = function(cpx, cpy, x, y) { return this.$val.QuadraticCurveTo(cpx, cpy, x, y); };\n\tCanvasRenderingContext2D.ptr.prototype.BezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {\n\t\tvar $ptr, cp1x, cp1y, cp2x, cp2y, ctx, x, y;\n\t\tctx = this;\n\t\tctx.Object.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n\t};\n\tCanvasRenderingContext2D.prototype.BezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) { return this.$val.BezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y); };\n\tCanvasRenderingContext2D.ptr.prototype.Arc = function(x, y, r, sAngle, eAngle, counterclockwise) {\n\t\tvar $ptr, counterclockwise, ctx, eAngle, r, sAngle, x, y;\n\t\tctx = this;\n\t\tctx.Object.arc(x, y, r, sAngle, eAngle, $externalize(counterclockwise, $Bool));\n\t};\n\tCanvasRenderingContext2D.prototype.Arc = function(x, y, r, sAngle, eAngle, counterclockwise) { return this.$val.Arc(x, y, r, sAngle, eAngle, counterclockwise); };\n\tCanvasRenderingContext2D.ptr.prototype.ArcTo = function(x1, y1, x2, y2, r) {\n\t\tvar $ptr, ctx, r, x1, x2, y1, y2;\n\t\tctx = this;\n\t\tctx.Object.arcTo(x1, y1, x2, y2, r);\n\t};\n\tCanvasRenderingContext2D.prototype.ArcTo = function(x1, y1, x2, y2, r) { return this.$val.ArcTo(x1, y1, x2, y2, r); };\n\tCanvasRenderingContext2D.ptr.prototype.IsPointInPath = function(x, y) {\n\t\tvar $ptr, ctx, x, y;\n\t\tctx = this;\n\t\treturn !!(ctx.Object.isPointInPath(x, y));\n\t};\n\tCanvasRenderingContext2D.prototype.IsPointInPath = function(x, y) { return this.$val.IsPointInPath(x, y); };\n\tCanvasRenderingContext2D.ptr.prototype.Scale = function(scaleWidth, scaleHeight) {\n\t\tvar $ptr, ctx, scaleHeight, scaleWidth;\n\t\tctx = this;\n\t\tctx.Object.scale(scaleWidth, scaleHeight);\n\t};\n\tCanvasRenderingContext2D.prototype.Scale = function(scaleWidth, scaleHeight) { return this.$val.Scale(scaleWidth, scaleHeight); };\n\tCanvasRenderingContext2D.ptr.prototype.Rotate = function(angle) {\n\t\tvar $ptr, angle, ctx;\n\t\tctx = this;\n\t\tctx.Object.rotate(angle);\n\t};\n\tCanvasRenderingContext2D.prototype.Rotate = function(angle) { return this.$val.Rotate(angle); };\n\tCanvasRenderingContext2D.ptr.prototype.Translate = function(x, y) {\n\t\tvar $ptr, ctx, x, y;\n\t\tctx = this;\n\t\tctx.Object.translate(x, y);\n\t};\n\tCanvasRenderingContext2D.prototype.Translate = function(x, y) { return this.$val.Translate(x, y); };\n\tCanvasRenderingContext2D.ptr.prototype.Transform = function(a, b, c, d, e, f) {\n\t\tvar $ptr, a, b, c, ctx, d, e, f;\n\t\tctx = this;\n\t\tctx.Object.transform(a, b, c, d, e, f);\n\t};\n\tCanvasRenderingContext2D.prototype.Transform = function(a, b, c, d, e, f) { return this.$val.Transform(a, b, c, d, e, f); };\n\tCanvasRenderingContext2D.ptr.prototype.SetTransform = function(a, b, c, d, e, f) {\n\t\tvar $ptr, a, b, c, ctx, d, e, f;\n\t\tctx = this;\n\t\tctx.Object.setTransform(a, b, c, d, e, f);\n\t};\n\tCanvasRenderingContext2D.prototype.SetTransform = function(a, b, c, d, e, f) { return this.$val.SetTransform(a, b, c, d, e, f); };\n\tCanvasRenderingContext2D.ptr.prototype.FillText = function(text, x, y, maxWidth) {\n\t\tvar $ptr, ctx, maxWidth, text, x, y;\n\t\tctx = this;\n\t\tif (maxWidth === -1) {\n\t\t\tctx.Object.fillText($externalize(text, $String), x, y);\n\t\t\treturn;\n\t\t}\n\t\tctx.Object.fillText($externalize(text, $String), x, y, maxWidth);\n\t};\n\tCanvasRenderingContext2D.prototype.FillText = function(text, x, y, maxWidth) { return this.$val.FillText(text, x, y, maxWidth); };\n\tCanvasRenderingContext2D.ptr.prototype.StrokeText = function(text, x, y, maxWidth) {\n\t\tvar $ptr, ctx, maxWidth, text, x, y;\n\t\tctx = this;\n\t\tif (maxWidth === -1) {\n\t\t\tctx.Object.strokeText($externalize(text, $String), x, y);\n\t\t\treturn;\n\t\t}\n\t\tctx.Object.strokeText($externalize(text, $String), x, y, maxWidth);\n\t};\n\tCanvasRenderingContext2D.prototype.StrokeText = function(text, x, y, maxWidth) { return this.$val.StrokeText(text, x, y, maxWidth); };\n\tHTMLDataListElement.ptr.prototype.Options = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn getOptions(e.BasicHTMLElement.BasicElement.BasicNode.Object, \"options\");\n\t};\n\tHTMLDataListElement.prototype.Options = function() { return this.$val.Options(); };\n\tHTMLFieldSetElement.ptr.prototype.Elements = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn nodeListToHTMLElements(e.BasicHTMLElement.BasicElement.BasicNode.Object.elements);\n\t};\n\tHTMLFieldSetElement.prototype.Elements = function() { return this.$val.Elements(); };\n\tHTMLFieldSetElement.ptr.prototype.Form = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);\n\t};\n\tHTMLFieldSetElement.prototype.Form = function() { return this.$val.Form(); };\n\tHTMLFieldSetElement.ptr.prototype.Validity = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn new ValidityState.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.validity, false, false, false, false, false, false, false, false, false);\n\t};\n\tHTMLFieldSetElement.prototype.Validity = function() { return this.$val.Validity(); };\n\tHTMLFieldSetElement.ptr.prototype.CheckValidity = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn !!(e.BasicHTMLElement.BasicElement.BasicNode.Object.checkValidity());\n\t};\n\tHTMLFieldSetElement.prototype.CheckValidity = function() { return this.$val.CheckValidity(); };\n\tHTMLFieldSetElement.ptr.prototype.SetCustomValidity = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\te.BasicHTMLElement.BasicElement.BasicNode.Object.setCustomValidity($externalize(s, $String));\n\t};\n\tHTMLFieldSetElement.prototype.SetCustomValidity = function(s) { return this.$val.SetCustomValidity(s); };\n\tHTMLFormElement.ptr.prototype.Elements = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn nodeListToHTMLElements(e.BasicHTMLElement.BasicElement.BasicNode.Object.elements);\n\t};\n\tHTMLFormElement.prototype.Elements = function() { return this.$val.Elements(); };\n\tHTMLFormElement.ptr.prototype.CheckValidity = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn !!(e.BasicHTMLElement.BasicElement.BasicNode.Object.checkValidity());\n\t};\n\tHTMLFormElement.prototype.CheckValidity = function() { return this.$val.CheckValidity(); };\n\tHTMLFormElement.ptr.prototype.Submit = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\te.BasicHTMLElement.BasicElement.BasicNode.Object.submit();\n\t};\n\tHTMLFormElement.prototype.Submit = function() { return this.$val.Submit(); };\n\tHTMLFormElement.ptr.prototype.Reset = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\te.BasicHTMLElement.BasicElement.BasicNode.Object.reset();\n\t};\n\tHTMLFormElement.prototype.Reset = function() { return this.$val.Reset(); };\n\tHTMLFormElement.ptr.prototype.Item = function(index) {\n\t\tvar $ptr, e, index;\n\t\te = this;\n\t\treturn wrapHTMLElement(e.BasicHTMLElement.BasicElement.BasicNode.Object.item(index));\n\t};\n\tHTMLFormElement.prototype.Item = function(index) { return this.$val.Item(index); };\n\tHTMLFormElement.ptr.prototype.NamedItem = function(name) {\n\t\tvar $ptr, e, name;\n\t\te = this;\n\t\treturn wrapHTMLElement(e.BasicHTMLElement.BasicElement.BasicNode.Object.namedItem($externalize(name, $String)));\n\t};\n\tHTMLFormElement.prototype.NamedItem = function(name) { return this.$val.NamedItem(name); };\n\tHTMLIFrameElement.ptr.prototype.ContentDocument = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn wrapDocument(e.BasicHTMLElement.BasicElement.BasicNode.Object.contentDocument);\n\t};\n\tHTMLIFrameElement.prototype.ContentDocument = function() { return this.$val.ContentDocument(); };\n\tHTMLIFrameElement.ptr.prototype.ContentWindow = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn new window.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.contentWindow);\n\t};\n\tHTMLIFrameElement.prototype.ContentWindow = function() { return this.$val.ContentWindow(); };\n\tHTMLInputElement.ptr.prototype.Files = function() {\n\t\tvar $ptr, _i, _ref, e, files, i, out;\n\t\te = this;\n\t\tfiles = e.BasicHTMLElement.BasicElement.BasicNode.Object.files;\n\t\tout = $makeSlice(sliceType$12, ($parseInt(files.length) >> 0));\n\t\t_ref = out;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\t((i < 0 || i >= out.$length) ? $throwRuntimeError(\"index out of range\") : out.$array[out.$offset + i] = new File.ptr(files.item(i)));\n\t\t\t_i++;\n\t\t}\n\t\treturn out;\n\t};\n\tHTMLInputElement.prototype.Files = function() { return this.$val.Files(); };\n\tHTMLInputElement.ptr.prototype.List = function() {\n\t\tvar $ptr, e, list;\n\t\te = this;\n\t\tlist = wrapHTMLElement(e.BasicHTMLElement.BasicElement.BasicNode.Object.list);\n\t\tif ($interfaceIsEqual(list, $ifaceNil)) {\n\t\t\treturn ptrType$13.nil;\n\t\t}\n\t\treturn $assertType(list, ptrType$13);\n\t};\n\tHTMLInputElement.prototype.List = function() { return this.$val.List(); };\n\tHTMLInputElement.ptr.prototype.Labels = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn getLabels(e.BasicHTMLElement.BasicElement.BasicNode.Object);\n\t};\n\tHTMLInputElement.prototype.Labels = function() { return this.$val.Labels(); };\n\tHTMLInputElement.ptr.prototype.Form = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);\n\t};\n\tHTMLInputElement.prototype.Form = function() { return this.$val.Form(); };\n\tHTMLInputElement.ptr.prototype.Validity = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn new ValidityState.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.validity, false, false, false, false, false, false, false, false, false);\n\t};\n\tHTMLInputElement.prototype.Validity = function() { return this.$val.Validity(); };\n\tHTMLInputElement.ptr.prototype.CheckValidity = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn !!(e.BasicHTMLElement.BasicElement.BasicNode.Object.checkValidity());\n\t};\n\tHTMLInputElement.prototype.CheckValidity = function() { return this.$val.CheckValidity(); };\n\tHTMLInputElement.ptr.prototype.SetCustomValidity = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\te.BasicHTMLElement.BasicElement.BasicNode.Object.setCustomValidity($externalize(s, $String));\n\t};\n\tHTMLInputElement.prototype.SetCustomValidity = function(s) { return this.$val.SetCustomValidity(s); };\n\tHTMLInputElement.ptr.prototype.Select = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\te.BasicHTMLElement.BasicElement.BasicNode.Object.select();\n\t};\n\tHTMLInputElement.prototype.Select = function() { return this.$val.Select(); };\n\tHTMLInputElement.ptr.prototype.SetSelectionRange = function(start, end, direction) {\n\t\tvar $ptr, direction, e, end, start;\n\t\te = this;\n\t\te.BasicHTMLElement.BasicElement.BasicNode.Object.setSelectionRange(start, end, $externalize(direction, $String));\n\t};\n\tHTMLInputElement.prototype.SetSelectionRange = function(start, end, direction) { return this.$val.SetSelectionRange(start, end, direction); };\n\tHTMLInputElement.ptr.prototype.StepDown = function(n) {\n\t\tvar $ptr, e, n;\n\t\te = this;\n\t\treturn callRecover(e.BasicHTMLElement.BasicElement.BasicNode.Object, \"stepDown\", new sliceType([new $Int(n)]));\n\t};\n\tHTMLInputElement.prototype.StepDown = function(n) { return this.$val.StepDown(n); };\n\tHTMLInputElement.ptr.prototype.StepUp = function(n) {\n\t\tvar $ptr, e, n;\n\t\te = this;\n\t\treturn callRecover(e.BasicHTMLElement.BasicElement.BasicNode.Object, \"stepUp\", new sliceType([new $Int(n)]));\n\t};\n\tHTMLInputElement.prototype.StepUp = function(n) { return this.$val.StepUp(n); };\n\tHTMLKeygenElement.ptr.prototype.Form = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);\n\t};\n\tHTMLKeygenElement.prototype.Form = function() { return this.$val.Form(); };\n\tHTMLKeygenElement.ptr.prototype.Labels = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn getLabels(e.BasicHTMLElement.BasicElement.BasicNode.Object);\n\t};\n\tHTMLKeygenElement.prototype.Labels = function() { return this.$val.Labels(); };\n\tHTMLKeygenElement.ptr.prototype.Validity = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn new ValidityState.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.validity, false, false, false, false, false, false, false, false, false);\n\t};\n\tHTMLKeygenElement.prototype.Validity = function() { return this.$val.Validity(); };\n\tHTMLKeygenElement.ptr.prototype.CheckValidity = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn !!(e.BasicHTMLElement.BasicElement.BasicNode.Object.checkValidity());\n\t};\n\tHTMLKeygenElement.prototype.CheckValidity = function() { return this.$val.CheckValidity(); };\n\tHTMLKeygenElement.ptr.prototype.SetCustomValidity = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\te.BasicHTMLElement.BasicElement.BasicNode.Object.setCustomValidity($externalize(s, $String));\n\t};\n\tHTMLKeygenElement.prototype.SetCustomValidity = function(s) { return this.$val.SetCustomValidity(s); };\n\tHTMLLabelElement.ptr.prototype.Control = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn wrapHTMLElement(e.BasicHTMLElement.BasicElement.BasicNode.Object.control);\n\t};\n\tHTMLLabelElement.prototype.Control = function() { return this.$val.Control(); };\n\tHTMLLabelElement.ptr.prototype.Form = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);\n\t};\n\tHTMLLabelElement.prototype.Form = function() { return this.$val.Form(); };\n\tHTMLLegendElement.ptr.prototype.Form = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);\n\t};\n\tHTMLLegendElement.prototype.Form = function() { return this.$val.Form(); };\n\tHTMLLinkElement.ptr.prototype.Rel = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn new TokenList.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.relList, e.BasicHTMLElement.BasicElement.BasicNode.Object, \"rel\", 0);\n\t};\n\tHTMLLinkElement.prototype.Rel = function() { return this.$val.Rel(); };\n\tHTMLLinkElement.ptr.prototype.Sizes = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn new TokenList.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.sizes, e.BasicHTMLElement.BasicElement.BasicNode.Object, \"\", 0);\n\t};\n\tHTMLLinkElement.prototype.Sizes = function() { return this.$val.Sizes(); };\n\tHTMLLinkElement.ptr.prototype.Sheet = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn $ifaceNil;\n\t};\n\tHTMLLinkElement.prototype.Sheet = function() { return this.$val.Sheet(); };\n\tHTMLMapElement.ptr.prototype.Areas = function() {\n\t\tvar $ptr, _i, _ref, area, areas, e, i, out;\n\t\te = this;\n\t\tareas = nodeListToElements(e.BasicHTMLElement.BasicElement.BasicNode.Object.areas);\n\t\tout = $makeSlice(sliceType$13, areas.$length);\n\t\t_ref = areas;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\tarea = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\t((i < 0 || i >= out.$length) ? $throwRuntimeError(\"index out of range\") : out.$array[out.$offset + i] = $assertType(area, ptrType$14));\n\t\t\t_i++;\n\t\t}\n\t\treturn out;\n\t};\n\tHTMLMapElement.prototype.Areas = function() { return this.$val.Areas(); };\n\tHTMLMapElement.ptr.prototype.Images = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn nodeListToHTMLElements(e.BasicHTMLElement.BasicElement.BasicNode.Object.areas);\n\t};\n\tHTMLMapElement.prototype.Images = function() { return this.$val.Images(); };\n\tHTMLMeterElement.ptr.prototype.Labels = function() {\n\t\tvar $ptr, e;\n\t\te = $clone(this, HTMLMeterElement);\n\t\treturn getLabels(e.BasicHTMLElement.BasicElement.BasicNode.Object);\n\t};\n\tHTMLMeterElement.prototype.Labels = function() { return this.$val.Labels(); };\n\tHTMLObjectElement.ptr.prototype.Form = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);\n\t};\n\tHTMLObjectElement.prototype.Form = function() { return this.$val.Form(); };\n\tHTMLObjectElement.ptr.prototype.ContentDocument = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn wrapDocument(e.BasicHTMLElement.BasicElement.BasicNode.Object.contentDocument);\n\t};\n\tHTMLObjectElement.prototype.ContentDocument = function() { return this.$val.ContentDocument(); };\n\tHTMLObjectElement.ptr.prototype.ContentWindow = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn new window.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.contentWindow);\n\t};\n\tHTMLObjectElement.prototype.ContentWindow = function() { return this.$val.ContentWindow(); };\n\tHTMLObjectElement.ptr.prototype.Validity = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn new ValidityState.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.validity, false, false, false, false, false, false, false, false, false);\n\t};\n\tHTMLObjectElement.prototype.Validity = function() { return this.$val.Validity(); };\n\tHTMLObjectElement.ptr.prototype.CheckValidity = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn !!(e.BasicHTMLElement.BasicElement.BasicNode.Object.checkValidity());\n\t};\n\tHTMLObjectElement.prototype.CheckValidity = function() { return this.$val.CheckValidity(); };\n\tHTMLObjectElement.ptr.prototype.SetCustomValidity = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\te.BasicHTMLElement.BasicElement.BasicNode.Object.setCustomValidity($externalize(s, $String));\n\t};\n\tHTMLObjectElement.prototype.SetCustomValidity = function(s) { return this.$val.SetCustomValidity(s); };\n\tHTMLOptionElement.ptr.prototype.Form = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);\n\t};\n\tHTMLOptionElement.prototype.Form = function() { return this.$val.Form(); };\n\tHTMLOutputElement.ptr.prototype.Form = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);\n\t};\n\tHTMLOutputElement.prototype.Form = function() { return this.$val.Form(); };\n\tHTMLOutputElement.ptr.prototype.Labels = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn getLabels(e.BasicHTMLElement.BasicElement.BasicNode.Object);\n\t};\n\tHTMLOutputElement.prototype.Labels = function() { return this.$val.Labels(); };\n\tHTMLOutputElement.ptr.prototype.Validity = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn new ValidityState.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.validity, false, false, false, false, false, false, false, false, false);\n\t};\n\tHTMLOutputElement.prototype.Validity = function() { return this.$val.Validity(); };\n\tHTMLOutputElement.ptr.prototype.For = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn new TokenList.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.htmlFor, e.BasicHTMLElement.BasicElement.BasicNode.Object, \"\", 0);\n\t};\n\tHTMLOutputElement.prototype.For = function() { return this.$val.For(); };\n\tHTMLOutputElement.ptr.prototype.CheckValidity = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn !!(e.BasicHTMLElement.BasicElement.BasicNode.Object.checkValidity());\n\t};\n\tHTMLOutputElement.prototype.CheckValidity = function() { return this.$val.CheckValidity(); };\n\tHTMLOutputElement.ptr.prototype.SetCustomValidity = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\te.BasicHTMLElement.BasicElement.BasicNode.Object.setCustomValidity($externalize(s, $String));\n\t};\n\tHTMLOutputElement.prototype.SetCustomValidity = function(s) { return this.$val.SetCustomValidity(s); };\n\tHTMLProgressElement.ptr.prototype.Labels = function() {\n\t\tvar $ptr, e;\n\t\te = $clone(this, HTMLProgressElement);\n\t\treturn getLabels(e.BasicHTMLElement.BasicElement.BasicNode.Object);\n\t};\n\tHTMLProgressElement.prototype.Labels = function() { return this.$val.Labels(); };\n\tHTMLSelectElement.ptr.prototype.Labels = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn getLabels(e.BasicHTMLElement.BasicElement.BasicNode.Object);\n\t};\n\tHTMLSelectElement.prototype.Labels = function() { return this.$val.Labels(); };\n\tHTMLSelectElement.ptr.prototype.Form = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);\n\t};\n\tHTMLSelectElement.prototype.Form = function() { return this.$val.Form(); };\n\tHTMLSelectElement.ptr.prototype.Options = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn getOptions(e.BasicHTMLElement.BasicElement.BasicNode.Object, \"options\");\n\t};\n\tHTMLSelectElement.prototype.Options = function() { return this.$val.Options(); };\n\tHTMLSelectElement.ptr.prototype.SelectedOptions = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn getOptions(e.BasicHTMLElement.BasicElement.BasicNode.Object, \"selectedOptions\");\n\t};\n\tHTMLSelectElement.prototype.SelectedOptions = function() { return this.$val.SelectedOptions(); };\n\tHTMLSelectElement.ptr.prototype.Item = function(index) {\n\t\tvar $ptr, e, el, index;\n\t\te = this;\n\t\tel = wrapHTMLElement(e.BasicHTMLElement.BasicElement.BasicNode.Object.item(index));\n\t\tif ($interfaceIsEqual(el, $ifaceNil)) {\n\t\t\treturn ptrType$5.nil;\n\t\t}\n\t\treturn $assertType(el, ptrType$5);\n\t};\n\tHTMLSelectElement.prototype.Item = function(index) { return this.$val.Item(index); };\n\tHTMLSelectElement.ptr.prototype.NamedItem = function(name) {\n\t\tvar $ptr, e, el, name;\n\t\te = this;\n\t\tel = wrapHTMLElement(e.BasicHTMLElement.BasicElement.BasicNode.Object.namedItem($externalize(name, $String)));\n\t\tif ($interfaceIsEqual(el, $ifaceNil)) {\n\t\t\treturn ptrType$5.nil;\n\t\t}\n\t\treturn $assertType(el, ptrType$5);\n\t};\n\tHTMLSelectElement.prototype.NamedItem = function(name) { return this.$val.NamedItem(name); };\n\tHTMLSelectElement.ptr.prototype.Validity = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn new ValidityState.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.validity, false, false, false, false, false, false, false, false, false);\n\t};\n\tHTMLSelectElement.prototype.Validity = function() { return this.$val.Validity(); };\n\tHTMLSelectElement.ptr.prototype.CheckValidity = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn !!(e.BasicHTMLElement.BasicElement.BasicNode.Object.checkValidity());\n\t};\n\tHTMLSelectElement.prototype.CheckValidity = function() { return this.$val.CheckValidity(); };\n\tHTMLSelectElement.ptr.prototype.SetCustomValidity = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\te.BasicHTMLElement.BasicElement.BasicNode.Object.setCustomValidity($externalize(s, $String));\n\t};\n\tHTMLSelectElement.prototype.SetCustomValidity = function(s) { return this.$val.SetCustomVal" +
	"idity(s); };\n\tHTMLTableRowElement.ptr.prototype.Cells = function() {\n\t\tvar $ptr, _i, _ref, cell, cells, e, i, out;\n\t\te = this;\n\t\tcells = nodeListToElements(e.BasicHTMLElement.BasicElement.BasicNode.Object.cells);\n\t\tout = $makeSlice(sliceType$14, cells.$length);\n\t\t_ref = cells;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\tcell = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\t((i < 0 || i >= out.$length) ? $throwRuntimeError(\"index out of range\") : out.$array[out.$offset + i] = $assertType(cell, ptrType$15));\n\t\t\t_i++;\n\t\t}\n\t\treturn out;\n\t};\n\tHTMLTableRowElement.prototype.Cells = function() { return this.$val.Cells(); };\n\tHTMLTableRowElement.ptr.prototype.InsertCell = function(index) {\n\t\tvar $ptr, e, index;\n\t\te = this;\n\t\treturn $assertType(wrapHTMLElement(e.BasicHTMLElement.BasicElement.BasicNode.Object.insertCell(index)), ptrType$15);\n\t};\n\tHTMLTableRowElement.prototype.InsertCell = function(index) { return this.$val.InsertCell(index); };\n\tHTMLTableRowElement.ptr.prototype.DeleteCell = function(index) {\n\t\tvar $ptr, e, index;\n\t\te = this;\n\t\te.BasicHTMLElement.BasicElement.BasicNode.Object.deleteCell(index);\n\t};\n\tHTMLTableRowElement.prototype.DeleteCell = function(index) { return this.$val.DeleteCell(index); };\n\tHTMLTableSectionElement.ptr.prototype.Rows = function() {\n\t\tvar $ptr, _i, _ref, e, i, out, row, rows;\n\t\te = this;\n\t\trows = nodeListToElements(e.BasicHTMLElement.BasicElement.BasicNode.Object.rows);\n\t\tout = $makeSlice(sliceType$15, rows.$length);\n\t\t_ref = rows;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\trow = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\t((i < 0 || i >= out.$length) ? $throwRuntimeError(\"index out of range\") : out.$array[out.$offset + i] = $assertType(row, ptrType$16));\n\t\t\t_i++;\n\t\t}\n\t\treturn out;\n\t};\n\tHTMLTableSectionElement.prototype.Rows = function() { return this.$val.Rows(); };\n\tHTMLTableSectionElement.ptr.prototype.DeleteRow = function(index) {\n\t\tvar $ptr, e, index;\n\t\te = this;\n\t\te.BasicHTMLElement.BasicElement.BasicNode.Object.deleteRow(index);\n\t};\n\tHTMLTableSectionElement.prototype.DeleteRow = function(index) { return this.$val.DeleteRow(index); };\n\tHTMLTableSectionElement.ptr.prototype.InsertRow = function(index) {\n\t\tvar $ptr, e, index;\n\t\te = this;\n\t\treturn $assertType(wrapHTMLElement(e.BasicHTMLElement.BasicElement.BasicNode.Object.insertRow(index)), ptrType$16);\n\t};\n\tHTMLTableSectionElement.prototype.InsertRow = function(index) { return this.$val.InsertRow(index); };\n\tHTMLTextAreaElement.ptr.prototype.Form = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn getForm(e.BasicHTMLElement.BasicElement.BasicNode.Object);\n\t};\n\tHTMLTextAreaElement.prototype.Form = function() { return this.$val.Form(); };\n\tHTMLTextAreaElement.ptr.prototype.Labels = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn getLabels(e.BasicHTMLElement.BasicElement.BasicNode.Object);\n\t};\n\tHTMLTextAreaElement.prototype.Labels = function() { return this.$val.Labels(); };\n\tHTMLTextAreaElement.ptr.prototype.Validity = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn new ValidityState.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.validity, false, false, false, false, false, false, false, false, false);\n\t};\n\tHTMLTextAreaElement.prototype.Validity = function() { return this.$val.Validity(); };\n\tHTMLTextAreaElement.ptr.prototype.CheckValidity = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn !!(e.BasicHTMLElement.BasicElement.BasicNode.Object.checkValidity());\n\t};\n\tHTMLTextAreaElement.prototype.CheckValidity = function() { return this.$val.CheckValidity(); };\n\tHTMLTextAreaElement.ptr.prototype.SetCustomValidity = function(s) {\n\t\tvar $ptr, e, s;\n\t\te = this;\n\t\te.BasicHTMLElement.BasicElement.BasicNode.Object.setCustomValidity($externalize(s, $String));\n\t};\n\tHTMLTextAreaElement.prototype.SetCustomValidity = function(s) { return this.$val.SetCustomValidity(s); };\n\tHTMLTextAreaElement.ptr.prototype.Select = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\te.BasicHTMLElement.BasicElement.BasicNode.Object.select();\n\t};\n\tHTMLTextAreaElement.prototype.Select = function() { return this.$val.Select(); };\n\tHTMLTextAreaElement.ptr.prototype.SetSelectionRange = function(start, end, direction) {\n\t\tvar $ptr, direction, e, end, start;\n\t\te = this;\n\t\te.BasicHTMLElement.BasicElement.BasicNode.Object.setSelectionRange(start, end, $externalize(direction, $String));\n\t};\n\tHTMLTextAreaElement.prototype.SetSelectionRange = function(start, end, direction) { return this.$val.SetSelectionRange(start, end, direction); };\n\tHTMLTrackElement.ptr.prototype.Track = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn new TextTrack.ptr(e.BasicHTMLElement.BasicElement.BasicNode.Object.track);\n\t};\n\tHTMLTrackElement.prototype.Track = function() { return this.$val.Track(); };\n\tHTMLBaseElement.ptr.prototype.Href = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn $internalize(e.BasicHTMLElement.BasicElement.BasicNode.Object.href, $String);\n\t};\n\tHTMLBaseElement.prototype.Href = function() { return this.$val.Href(); };\n\tHTMLBaseElement.ptr.prototype.Target = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn $internalize(e.BasicHTMLElement.BasicElement.BasicNode.Object.target, $String);\n\t};\n\tHTMLBaseElement.prototype.Target = function() { return this.$val.Target(); };\n\tCSSStyleDeclaration.ptr.prototype.ToMap = function() {\n\t\tvar $ptr, N, _key, css, i, m, name, value;\n\t\tcss = this;\n\t\tm = new $Map();\n\t\tN = $parseInt(css.Object.length) >> 0;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < N)) { break; }\n\t\t\tname = $internalize(css.Object.index(i), $String);\n\t\t\tvalue = $internalize(css.Object.getPropertyValue(), $String);\n\t\t\t_key = name; (m || $throwRuntimeError(\"assignment to entry in nil map\"))[_key] = { k: _key, v: value };\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn m;\n\t};\n\tCSSStyleDeclaration.prototype.ToMap = function() { return this.$val.ToMap(); };\n\tCSSStyleDeclaration.ptr.prototype.RemoveProperty = function(name) {\n\t\tvar $ptr, css, name;\n\t\tcss = this;\n\t\tcss.Object.removeProperty($externalize(name, $String));\n\t};\n\tCSSStyleDeclaration.prototype.RemoveProperty = function(name) { return this.$val.RemoveProperty(name); };\n\tCSSStyleDeclaration.ptr.prototype.GetPropertyValue = function(name) {\n\t\tvar $ptr, css, name;\n\t\tcss = this;\n\t\treturn $internalize(css.Object.getPropertyValue($externalize(name, $String)), $String);\n\t};\n\tCSSStyleDeclaration.prototype.GetPropertyValue = function(name) { return this.$val.GetPropertyValue(name); };\n\tCSSStyleDeclaration.ptr.prototype.GetPropertyPriority = function(name) {\n\t\tvar $ptr, css, name;\n\t\tcss = this;\n\t\treturn $internalize(css.Object.getPropertyPriority($externalize(name, $String)), $String);\n\t};\n\tCSSStyleDeclaration.prototype.GetPropertyPriority = function(name) { return this.$val.GetPropertyPriority(name); };\n\tCSSStyleDeclaration.ptr.prototype.SetProperty = function(name, value, priority) {\n\t\tvar $ptr, css, name, priority, value;\n\t\tcss = this;\n\t\tcss.Object.setProperty($externalize(name, $String), $externalize(value, $String), $externalize(priority, $String));\n\t};\n\tCSSStyleDeclaration.prototype.SetProperty = function(name, value, priority) { return this.$val.SetProperty(name, value, priority); };\n\tCSSStyleDeclaration.ptr.prototype.Index = function(idx) {\n\t\tvar $ptr, css, idx;\n\t\tcss = this;\n\t\treturn $internalize(css.Object.index(idx), $String);\n\t};\n\tCSSStyleDeclaration.prototype.Index = function(idx) { return this.$val.Index(idx); };\n\tCSSStyleDeclaration.ptr.prototype.Length = function() {\n\t\tvar $ptr, css;\n\t\tcss = this;\n\t\treturn $parseInt(css.Object.length) >> 0;\n\t};\n\tCSSStyleDeclaration.prototype.Length = function() { return this.$val.Length(); };\n\tWrapEvent = function(o) {\n\t\tvar $ptr, o;\n\t\treturn wrapEvent(o);\n\t};\n\t$pkg.WrapEvent = WrapEvent;\n\twrapEvent = function(o) {\n\t\tvar $ptr, _ref, c, ev, o;\n\t\tif (o === null || o === undefined) {\n\t\t\treturn $ifaceNil;\n\t\t}\n\t\tev = new BasicEvent.ptr(o);\n\t\tc = o.constructor;\n\t\t_ref = c;\n\t\tif (_ref === $global.AnimationEvent) {\n\t\t\treturn new AnimationEvent.ptr(ev);\n\t\t} else if (_ref === $global.AudioProcessingEvent) {\n\t\t\treturn new AudioProcessingEvent.ptr(ev);\n\t\t} else if (_ref === $global.BeforeInputEvent) {\n\t\t\treturn new BeforeInputEvent.ptr(ev);\n\t\t} else if (_ref === $global.BeforeUnloadEvent) {\n\t\t\treturn new BeforeUnloadEvent.ptr(ev);\n\t\t} else if (_ref === $global.BlobEvent) {\n\t\t\treturn new BlobEvent.ptr(ev);\n\t\t} else if (_ref === $global.ClipboardEvent) {\n\t\t\treturn new ClipboardEvent.ptr(ev);\n\t\t} else if (_ref === $global.CloseEvent) {\n\t\t\treturn new CloseEvent.ptr(ev, 0, \"\", false);\n\t\t} else if (_ref === $global.CompositionEvent) {\n\t\t\treturn new CompositionEvent.ptr(ev);\n\t\t} else if (_ref === $global.CSSFontFaceLoadEvent) {\n\t\t\treturn new CSSFontFaceLoadEvent.ptr(ev);\n\t\t} else if (_ref === $global.CustomEvent) {\n\t\t\treturn new CustomEvent.ptr(ev);\n\t\t} else if (_ref === $global.DeviceLightEvent) {\n\t\t\treturn new DeviceLightEvent.ptr(ev);\n\t\t} else if (_ref === $global.DeviceMotionEvent) {\n\t\t\treturn new DeviceMotionEvent.ptr(ev);\n\t\t} else if (_ref === $global.DeviceOrientationEvent) {\n\t\t\treturn new DeviceOrientationEvent.ptr(ev);\n\t\t} else if (_ref === $global.DeviceProximityEvent) {\n\t\t\treturn new DeviceProximityEvent.ptr(ev);\n\t\t} else if (_ref === $global.DOMTransactionEvent) {\n\t\t\treturn new DOMTransactionEvent.ptr(ev);\n\t\t} else if (_ref === $global.DragEvent) {\n\t\t\treturn new DragEvent.ptr(ev);\n\t\t} else if (_ref === $global.EditingBeforeInputEvent) {\n\t\t\treturn new EditingBeforeInputEvent.ptr(ev);\n\t\t} else if (_ref === $global.ErrorEvent) {\n\t\t\treturn new ErrorEvent.ptr(ev);\n\t\t} else if (_ref === $global.FocusEvent) {\n\t\t\treturn new FocusEvent.ptr(ev);\n\t\t} else if (_ref === $global.GamepadEvent) {\n\t\t\treturn new GamepadEvent.ptr(ev);\n\t\t} else if (_ref === $global.HashChangeEvent) {\n\t\t\treturn new HashChangeEvent.ptr(ev);\n\t\t} else if (_ref === $global.IDBVersionChangeEvent) {\n\t\t\treturn new IDBVersionChangeEvent.ptr(ev);\n\t\t} else if (_ref === $global.KeyboardEvent) {\n\t\t\treturn new KeyboardEvent.ptr(ev, false, 0, false, \"\", \"\", 0, \"\", 0, 0, false, false, false);\n\t\t} else if (_ref === $global.MediaStreamEvent) {\n\t\t\treturn new MediaStreamEvent.ptr(ev);\n\t\t} else if (_ref === $global.MessageEvent) {\n\t\t\treturn new MessageEvent.ptr(ev, null);\n\t\t} else if (_ref === $global.MouseEvent) {\n\t\t\treturn new MouseEvent.ptr(new UIEvent.ptr(ev), false, 0, 0, 0, false, false, 0, 0, 0, 0, false);\n\t\t} else if (_ref === $global.MutationEvent) {\n\t\t\treturn new MutationEvent.ptr(ev);\n\t\t} else if (_ref === $global.OfflineAudioCompletionEvent) {\n\t\t\treturn new OfflineAudioCompletionEvent.ptr(ev);\n\t\t} else if (_ref === $global.PageTransitionEvent) {\n\t\t\treturn new PageTransitionEvent.ptr(ev);\n\t\t} else if (_ref === $global.PointerEvent) {\n\t\t\treturn new PointerEvent.ptr(ev);\n\t\t} else if (_ref === $global.PopStateEvent) {\n\t\t\treturn new PopStateEvent.ptr(ev);\n\t\t} else if (_ref === $global.ProgressEvent) {\n\t\t\treturn new ProgressEvent.ptr(ev);\n\t\t} else if (_ref === $global.RelatedEvent) {\n\t\t\treturn new RelatedEvent.ptr(ev);\n\t\t} else if (_ref === $global.RTCPeerConnectionIceEvent) {\n\t\t\treturn new RTCPeerConnectionIceEvent.ptr(ev);\n\t\t} else if (_ref === $global.SensorEvent) {\n\t\t\treturn new SensorEvent.ptr(ev);\n\t\t} else if (_ref === $global.StorageEvent) {\n\t\t\treturn new StorageEvent.ptr(ev);\n\t\t} else if (_ref === $global.SVGEvent) {\n\t\t\treturn new SVGEvent.ptr(ev);\n\t\t} else if (_ref === $global.SVGZoomEvent) {\n\t\t\treturn new SVGZoomEvent.ptr(ev);\n\t\t} else if (_ref === $global.TimeEvent) {\n\t\t\treturn new TimeEvent.ptr(ev);\n\t\t} else if (_ref === $global.TouchEvent) {\n\t\t\treturn new TouchEvent.ptr(ev);\n\t\t} else if (_ref === $global.TrackEvent) {\n\t\t\treturn new TrackEvent.ptr(ev);\n\t\t} else if (_ref === $global.TransitionEvent) {\n\t\t\treturn new TransitionEvent.ptr(ev);\n\t\t} else if (_ref === $global.UIEvent) {\n\t\t\treturn new UIEvent.ptr(ev);\n\t\t} else if (_ref === $global.UserProximityEvent) {\n\t\t\treturn new UserProximityEvent.ptr(ev);\n\t\t} else if (_ref === $global.WheelEvent) {\n\t\t\treturn new WheelEvent.ptr(ev, 0, 0, 0, 0);\n\t\t} else {\n\t\t\treturn ev;\n\t\t}\n\t};\n\tBasicEvent.ptr.prototype.Bubbles = function() {\n\t\tvar $ptr, ev;\n\t\tev = this;\n\t\treturn !!(ev.Object.bubbles);\n\t};\n\tBasicEvent.prototype.Bubbles = function() { return this.$val.Bubbles(); };\n\tBasicEvent.ptr.prototype.Cancelable = function() {\n\t\tvar $ptr, ev;\n\t\tev = this;\n\t\treturn !!(ev.Object.cancelable);\n\t};\n\tBasicEvent.prototype.Cancelable = function() { return this.$val.Cancelable(); };\n\tBasicEvent.ptr.prototype.CurrentTarget = function() {\n\t\tvar $ptr, ev;\n\t\tev = this;\n\t\treturn wrapElement(ev.Object.currentTarget);\n\t};\n\tBasicEvent.prototype.CurrentTarget = function() { return this.$val.CurrentTarget(); };\n\tBasicEvent.ptr.prototype.DefaultPrevented = function() {\n\t\tvar $ptr, ev;\n\t\tev = this;\n\t\treturn !!(ev.Object.defaultPrevented);\n\t};\n\tBasicEvent.prototype.DefaultPrevented = function() { return this.$val.DefaultPrevented(); };\n\tBasicEvent.ptr.prototype.EventPhase = function() {\n\t\tvar $ptr, ev;\n\t\tev = this;\n\t\treturn $parseInt(ev.Object.eventPhase) >> 0;\n\t};\n\tBasicEvent.prototype.EventPhase = function() { return this.$val.EventPhase(); };\n\tBasicEvent.ptr.prototype.Target = function() {\n\t\tvar $ptr, ev;\n\t\tev = this;\n\t\treturn wrapElement(ev.Object.target);\n\t};\n\tBasicEvent.prototype.Target = function() { return this.$val.Target(); };\n\tBasicEvent.ptr.prototype.Timestamp = function() {\n\t\tvar $ptr, _q, _r, ev, ms, ns, s;\n\t\tev = this;\n\t\tms = $parseInt(ev.Object.timeStamp) >> 0;\n\t\ts = (_q = ms / 1000, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\tns = ((_r = ms % 1000, _r === _r ? _r : $throwRuntimeError(\"integer divide by zero\")) * 1000000 >> 0);\n\t\treturn time.Unix(new $Int64(0, s), new $Int64(0, ns));\n\t};\n\tBasicEvent.prototype.Timestamp = function() { return this.$val.Timestamp(); };\n\tBasicEvent.ptr.prototype.Type = function() {\n\t\tvar $ptr, ev;\n\t\tev = this;\n\t\treturn $internalize(ev.Object.type, $String);\n\t};\n\tBasicEvent.prototype.Type = function() { return this.$val.Type(); };\n\tBasicEvent.ptr.prototype.PreventDefault = function() {\n\t\tvar $ptr, ev;\n\t\tev = this;\n\t\tev.Object.preventDefault();\n\t};\n\tBasicEvent.prototype.PreventDefault = function() { return this.$val.PreventDefault(); };\n\tBasicEvent.ptr.prototype.StopImmediatePropagation = function() {\n\t\tvar $ptr, ev;\n\t\tev = this;\n\t\tev.Object.stopImmediatePropagation();\n\t};\n\tBasicEvent.prototype.StopImmediatePropagation = function() { return this.$val.StopImmediatePropagation(); };\n\tBasicEvent.ptr.prototype.StopPropagation = function() {\n\t\tvar $ptr, ev;\n\t\tev = this;\n\t\tev.Object.stopPropagation();\n\t};\n\tBasicEvent.prototype.StopPropagation = function() { return this.$val.StopPropagation(); };\n\tKeyboardEvent.ptr.prototype.ModifierState = function(mod) {\n\t\tvar $ptr, ev, mod;\n\t\tev = this;\n\t\treturn !!(ev.BasicEvent.Object.getModifierState($externalize(mod, $String)));\n\t};\n\tKeyboardEvent.prototype.ModifierState = function(mod) { return this.$val.ModifierState(mod); };\n\tMouseEvent.ptr.prototype.RelatedTarget = function() {\n\t\tvar $ptr, ev;\n\t\tev = this;\n\t\treturn wrapElement(ev.UIEvent.BasicEvent.Object.target);\n\t};\n\tMouseEvent.prototype.RelatedTarget = function() { return this.$val.RelatedTarget(); };\n\tMouseEvent.ptr.prototype.ModifierState = function(mod) {\n\t\tvar $ptr, ev, mod;\n\t\tev = this;\n\t\treturn !!(ev.UIEvent.BasicEvent.Object.getModifierState($externalize(mod, $String)));\n\t};\n\tMouseEvent.prototype.ModifierState = function(mod) { return this.$val.ModifierState(mod); };\n\tptrType$19.methods = [{prop: \"Item\", name: \"Item\", pkg: \"\", typ: $funcType([$Int], [$String], false)}, {prop: \"Contains\", name: \"Contains\", pkg: \"\", typ: $funcType([$String], [$Bool], false)}, {prop: \"Add\", name: \"Add\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"Remove\", name: \"Remove\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"Toggle\", name: \"Toggle\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Slice\", name: \"Slice\", pkg: \"\", typ: $funcType([], [sliceType$6], false)}, {prop: \"SetString\", name: \"SetString\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"Set\", name: \"Set\", pkg: \"\", typ: $funcType([sliceType$6], [], false)}];\n\tdocument.methods = [{prop: \"Async\", name: \"Async\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"SetAsync\", name: \"SetAsync\", pkg: \"\", typ: $funcType([$Bool], [], false)}, {prop: \"Doctype\", name: \"Doctype\", pkg: \"\", typ: $funcType([], [DocumentType], false)}, {prop: \"DocumentElement\", name: \"DocumentElement\", pkg: \"\", typ: $funcType([], [Element], false)}, {prop: \"DocumentURI\", name: \"DocumentURI\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Implementation\", name: \"Implementation\", pkg: \"\", typ: $funcType([], [DOMImplementation], false)}, {prop: \"LastStyleSheetSet\", name: \"LastStyleSheetSet\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"PreferredStyleSheetSet\", name: \"PreferredStyleSheetSet\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"SelectedStyleSheetSet\", name: \"SelectedStyleSheetSet\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"StyleSheets\", name: \"StyleSheets\", pkg: \"\", typ: $funcType([], [sliceType$11], false)}, {prop: \"StyleSheetSets\", name: \"StyleSheetSets\", pkg: \"\", typ: $funcType([], [sliceType$11], false)}, {prop: \"AdoptNode\", name: \"AdoptNode\", pkg: \"\", typ: $funcType([Node], [Node], false)}, {prop: \"ImportNode\", name: \"ImportNode\", pkg: \"\", typ: $funcType([Node, $Bool], [Node], false)}, {prop: \"CreateElement\", name: \"CreateElement\", pkg: \"\", typ: $funcType([$String], [Element], false)}, {prop: \"CreateElementNS\", name: \"CreateElementNS\", pkg: \"\", typ: $funcType([$String, $String], [Element], false)}, {prop: \"CreateTextNode\", name: \"CreateTextNode\", pkg: \"\", typ: $funcType([$String], [ptrType$10], false)}, {prop: \"ElementFromPoint\", name: \"ElementFromPoint\", pkg: \"\", typ: $funcType([$Int, $Int], [Element], false)}, {prop: \"EnableStyleSheetsForSet\", name: \"EnableStyleSheetsForSet\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"GetElementsByClassName\", name: \"GetElementsByClassName\", pkg: \"\", typ: $funcType([$String], [sliceType$2], false)}, {prop: \"GetElementsByTagName\", name: \"GetElementsByTagName\", pkg: \"\", typ: $funcType([$String], [sliceType$2], false)}, {prop: \"GetElementsByTagNameNS\", name: \"GetElementsByTagNameNS\", pkg: \"\", typ: $funcType([$String, $String], [sliceType$2], false)}, {prop: \"GetElementByID\", name: \"GetElementByID\", pkg: \"\", typ: $funcType([$String], [Element], false)}, {prop: \"QuerySelector\", name: \"QuerySelector\", pkg: \"\", typ: $funcType([$String], [Element], false)}, {prop: \"QuerySelectorAll\", name: \"QuerySelectorAll\", pkg: \"\", typ: $funcType([$String], [sliceType$2], false)}];\n\tptrType$23.methods = [{prop: \"ActiveElement\", name: \"ActiveElement\", pkg: \"\", typ: $funcType([], [HTMLElement], false)}, {prop: \"Body\", name: \"Body\", pkg: \"\", typ: $funcType([], [HTMLElement], false)}, {prop: \"Cookie\", name: \"Cookie\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"SetCookie\", name: \"SetCookie\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"DefaultView\", name: \"DefaultView\", pkg: \"\", typ: $funcType([], [Window], false)}, {prop: \"DesignMode\", name: \"DesignMode\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"SetDesignMode\", name: \"SetDesignMode\", pkg: \"\", typ: $funcType([$Bool], [], false)}, {prop: \"Domain\", name: \"Domain\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"SetDomain\", name: \"SetDomain\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"Forms\", name: \"Forms\", pkg: \"\", typ: $funcType([], [sliceType$7], false)}, {prop: \"Head\", name: \"Head\", pkg: \"\", typ: $funcType([], [ptrType$6], false)}, {prop: \"Images\", name: \"Images\", pkg: \"\", typ: $funcType([], [sliceType$8], false)}, {prop: \"LastModified\", name: \"LastModified\", pkg: \"\", typ: $funcType([], [time.Time], false)}, {prop: \"Links\", name: \"Links\", pkg: \"\", typ: $funcType([], [sliceType$3], false)}, {prop: \"Location\", name: \"Location\", pkg: \"\", typ: $funcType([], [ptrType$20], false)}, {prop: \"Plugins\", name: \"Plugins\", pkg: \"\", typ: $funcType([], [sliceType$9], false)}, {prop: \"ReadyState\", name: \"ReadyState\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Referrer\", name: \"Referrer\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Scripts\", name: \"Scripts\", pkg: \"\", typ: $funcType([], [sliceType$10], false)}, {prop: \"Title\", name: \"Title\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"SetTitle\", name: \"SetTitle\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"URL\", name: \"URL\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$27.methods = [{prop: \"Console\", name: \"Console\", pkg: \"\", typ: $funcType([], [ptrType$25], false)}, {prop: \"Document\", name: \"Document\", pkg: \"\", typ: $funcType([], [Document], false)}, {prop: \"FrameElement\", name: \"FrameElement\", pkg: \"\", typ: $funcType([], [Element], false)}, {prop: \"Location\", name: \"Location\", pkg: \"\", typ: $funcType([], [ptrType$20], false)}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"SetName\", name: \"SetName\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"InnerHeight\", name: \"InnerHeight\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"InnerWidth\", name: \"InnerWidth\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Length\", name: \"Length\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Opener\", name: \"Opener\", pkg: \"\", typ: $funcType([], [Window], false)}, {prop: \"OuterHeight\", name: \"OuterHeight\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"OuterWidth\", name: \"OuterWidth\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"ScrollX\", name: \"ScrollX\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"ScrollY\", name: \"ScrollY\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Parent\", name: \"Parent\", pkg: \"\", typ: $funcType([], [Window], false)}, {prop: \"ScreenX\", name: \"ScreenX\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"ScreenY\", name: \"ScreenY\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"ScrollMaxX\", name: \"ScrollMaxX\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"ScrollMaxY\", name: \"ScrollMaxY\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Top\", name: \"Top\", pkg: \"\", typ: $funcType([], [Window], false)}, {prop: \"History\", name: \"History\", pkg: \"\", typ: $funcType([], [History], false)}, {prop: \"Navigator\", name: \"Navigator\", pkg: \"\", typ: $funcType([], [Navigator], false)}, {prop: \"Screen\", name: \"Screen\", pkg: \"\", typ: $funcType([], [ptrType$26], false)}, {prop: \"Alert\", name: \"Alert\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"Back\", name: \"Back\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Blur\", name: \"Blur\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"ClearInterval\", name: \"ClearInterval\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"ClearTimeout\", name: \"ClearTimeout\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"Close\", name: \"Close\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Confirm\", name: \"Confirm\", pkg: \"\", typ: $funcType([$String], [$Bool], false)}, {prop: \"Focus\", name: \"Focus\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Forward\", name: \"Forward\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetComputedStyle\", name: \"GetComputedStyle\", pkg: \"\", typ: $funcType([Element, $String], [ptrType$24], false)}, {prop: \"GetSelection\", name: \"GetSelection\", pkg: \"\", typ: $funcType([], [Selection], false)}, {prop: \"Home\", name: \"Home\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"MoveBy\", name: \"MoveBy\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"MoveTo\", name: \"MoveTo\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"Open\", name: \"Open\", pkg: \"\", typ: $funcType([$String, $String, $String], [Window], false)}, {prop: \"OpenDialog\", name: \"OpenDialog\", pkg: \"\", typ: $funcType([$String, $String, $String, sliceType], [Window], false)}, {prop: \"PostMessage\", name: \"PostMessage\", pkg: \"\", typ: $funcType([$String, $String, sliceType], [], false)}, {prop: \"Print\", name: \"Print\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Prompt\", name: \"Prompt\", pkg: \"\", typ: $funcType([$String, $String], [$String], false)}, {prop: \"ResizeBy\", name: \"ResizeBy\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"ResizeTo\", name: \"ResizeTo\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"Scroll\", name: \"Scroll\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"ScrollBy\", name: \"ScrollBy\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"ScrollByLines\", name: \"ScrollByLines\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"ScrollTo\", name: \"ScrollTo\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"SetCursor\", name: \"SetCursor\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"SetInterval\", name: \"SetInterval\", pkg: \"\", typ: $funcType([funcType, $Int], [$Int], false)}, {prop: \"SetTimeout\", name: \"SetTimeout\", pkg: \"\", typ: $funcType([funcType, $Int], [$Int], false)}, {prop: \"Stop\", name: \"Stop\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"AddEventListener\", name: \"AddEventListener\", pkg: \"\", typ: $funcType([$String, $Bool, funcType$2], [funcType$1], false)}, {prop: \"RemoveEventListener\", name: \"RemoveEventListener\", pkg: \"\", typ: $funcType([$String, $Bool, funcType$1], [], false)}, {prop: \"RequestAnimationFrame\", name: \"RequestAnimationFrame\", pkg: \"\", typ: $funcType([funcType$3], [$Int], false)}, {prop: \"CancelAnimationFrame\", name: \"CancelAnimationFrame\", pkg: \"\", typ: $funcType([$Int], [], false)}];\n\tptrType$28.methods = [{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$21.methods = [{prop: \"Underlying\", name: \"Underlying\", pkg: \"\", typ: $funcType([], [ptrType$11], false)}, {prop: \"AddEventListener\", name: \"AddEventListener\", pkg: \"\", typ: $funcType([$String, $Bool, funcType$2], [funcType$1], false)}, {prop: \"RemoveEventListener\", name: \"RemoveEventListener\", pkg: \"\", typ: $funcType([$String, $Bool, funcType$1], [], false)}, {prop: \"BaseURI\", name: \"BaseURI\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ChildNodes\", name: \"ChildNodes\", pkg: \"\", typ: $funcType([], [sliceType$1], false)}, {prop: \"FirstChild\", name: \"FirstChild\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"LastChild\", name: \"LastChild\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"NextSibling\", name: \"NextSibling\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"NodeName\", name: \"NodeName\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"NodeType\", name: \"NodeType\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"NodeValue\", name: \"NodeValue\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"SetNodeValue\", name: \"SetNodeValue\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"OwnerDocument\", name: \"OwnerDocument\", pkg: \"\", typ: $funcType([], [Document], false)}, {prop: \"ParentNode\", name: \"ParentNode\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"ParentElement\", name: \"ParentElement\", pkg: \"\", typ: $funcType([], [Element], false)}, {prop: \"PreviousSibling\", name: \"PreviousSibling\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"TextContent\", name: \"TextContent\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"SetTextContent\", name: \"SetTextContent\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"AppendChild\", name: \"AppendChild\", pkg: \"\", typ: $funcType([Node], [], false)}, {prop: \"CloneNode\", name: \"CloneNode\", pkg: \"\", typ: $funcType([$Bool], [Node], false)}, {prop: \"CompareDocumentPosition\", name: \"CompareDocumentPosition\", pkg: \"\", typ: $funcType([Node], [$Int], false)}, {prop: \"Contains\", name: \"Contains\", pkg: \"\", typ: $funcType([Node], [$Bool], false)}, {prop: \"HasChildNodes\", name: \"HasChildNodes\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"InsertBefore\", name: \"InsertBefore\", pkg: \"\", typ: $funcType([Node, Node], [], false)}, {prop: \"IsDefaultNamespace\", name: \"IsDefaultNamespace\", pkg: \"\", typ: $funcType([$String], [$Bool], false)}, {prop: \"IsEqualNode\", name: \"IsEqualNode\", pkg: \"\", typ: $funcType([Node], [$Bool], false)}, {prop: \"LookupPrefix\", name: \"LookupPrefix\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"LookupNamespaceURI\", name: \"LookupNamespaceURI\", pkg: \"\", typ: $funcType([$String], [$String], false)}, {prop: \"Normalize\", name: \"Normalize\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"RemoveChild\", name: \"RemoveChild\", pkg: \"\", typ: $funcType([Node], [], false)}, {prop: \"ReplaceChild\", name: \"ReplaceChild\", pkg: \"\", typ: $funcType([Node, Node], [], false)}];\n\tptrType.methods = [{prop: \"AccessKey\", name: \"AccessKey\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"SetAccessKey\", name: \"SetAccessKey\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"AccessKeyLabel\", name: \"AccessKeyLabel\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"SetAccessKeyLabel\", name: \"SetAccessKeyLabel\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"ContentEditable\", name: \"ContentEditable\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"SetContentEditable\", name: \"SetContentEditable\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"IsContentEditable\", name: \"IsContentEditable\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Dataset\", name: \"Dataset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Dir\", name: \"Dir\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"SetDir\", name: \"SetDir\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"Draggable\", name: \"Draggable\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"SetDraggable\", name: \"SetDraggable\", pkg: \"\", typ: $funcType([$Bool], [], false)}, {prop: \"Lang\", name: \"Lang\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"SetLang\", name: \"SetLang\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"OffsetHeight\", name: \"OffsetHeight\", pkg: \"\", typ: $funcType([], [$Float64], false)}, {prop: \"OffsetLeft\", name: \"OffsetLeft\", pkg: \"\", typ: $funcType([], [$Float64], false)}, {prop: \"OffsetParent\", name: \"OffsetParent\", pkg: \"\", typ: $funcType([], [HTMLElement], false)}, {prop: \"OffsetTop\", name: \"OffsetTop\", pkg: \"\", typ: $funcType([], [$Float64], false)}, {prop: \"OffsetWidth\", name: \"OffsetWidth\", pkg: \"\", typ: $funcType([], [$Float64], false)}, {prop: \"Style\", name: \"Style\", pkg: \"\", typ: $funcType([], [ptrType$24], false)}, {prop: \"TabIndex\", name: \"TabIndex\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"SetTabIndex\", name: \"SetTabIndex\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"Title\", name: \"Title\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"SetTitle\", name: \"SetTitle\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"Blur\", name: \"Blur\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Click\", name: \"Click\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Focus\", name: \"Focus\", pkg: \"\", typ: $funcType([], [], false)}];\n\tptrType$30.methods = [{prop: \"GetBoundingClientRect\", name: \"GetBoundingClientRect\", pkg: \"\", typ: $funcType([], [ClientRect], false)}, {prop: \"PreviousElementSibling\", name: \"PreviousElementSibling\", pkg: \"\", typ: $funcType([], [Element], false)}, {prop: \"NextElementSibling\", name: \"NextElementSibling\", pkg: \"\", typ: $funcType([], [Element], false)}, {prop: \"Class\", name: \"Class\", pkg: \"\", typ: $funcType([], [ptrType$19], false)}, {prop: \"SetClass\", name: \"SetClass\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"ID\", name: \"ID\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"SetID\", name: \"SetID\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"TagName\", name: \"TagName\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"GetAttribute\", name: \"GetAttribute\", pkg: \"\", typ: $funcType([$String], [$String], false)}, {prop: \"GetAttributeNS\", name: \"GetAttributeNS\", pkg: \"\", typ: $funcType([$String, $String], [$String], false)}, {prop: \"GetElementsByClassName\", name: \"GetElementsByClassName\", pkg: \"\", typ: $funcType([$String], [sliceType$2], false)}, {prop: \"GetElementsByTagName\", name: \"GetElementsByTagName\", pkg: \"\", typ: $funcType([$String], [sliceType$2], false)}, {prop: \"GetElementsByTagNameNS\", name: \"GetElementsByTagNameNS\", pkg: \"\", typ: $funcType([$String, $String], [sliceType$2], false)}, {prop: \"HasAttribute\", name: \"HasAttribute\", pkg: \"\", typ: $funcType([$String], [$Bool], false)}, {prop: \"HasAttributeNS\", name: \"HasAttributeNS\", pkg: \"\", typ: $funcType([$String, $String], [$Bool], false)}, {prop: \"QuerySelector\", name: \"QuerySelector\", pkg: \"\", typ: $funcType([$String], [Element], false)}, {prop: \"QuerySelectorAll\", name: \"QuerySelectorAll\", pkg: \"\", typ: $funcType([$String], [sliceType$2], false)}, {prop: \"RemoveAttribute\", name: \"RemoveAttribute\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"RemoveAttributeNS\", name: \"RemoveAttributeNS\", pkg: \"\", typ: $funcType([$String, $String], [], false)}, {prop: \"SetAttribute\", name: \"SetAttribute\", pkg: \"\", typ: $funcType([$String, $String], [], false)}, {prop: \"SetAttributeNS\", name: \"SetAttributeNS\", pkg: \"\", typ: $funcType([$String, $String, $String], [], false)}, {prop: \"InnerHTML\", name: \"InnerHTML\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"SetInnerHTML\", name: \"SetInnerHTML\", pkg: \"\", typ: $funcType([$String], [], false)}];\n\tptrType$31.methods = [{prop: \"Rel\", name: \"Rel\", pkg: \"\", typ: $funcType([], [ptrType$19], false)}];\n\tptrType$32.methods = [{prop: \"Rel\", name: \"Rel\", pkg: \"\", typ: $funcType([], [ptrType$19], false)}];\n\tptrType$14.methods = [{prop: \"Rel\", name: \"Rel\", pkg: \"\", typ: $funcType([], [ptrType$19], false)}];\n\tptrType$33.methods = [{prop: \"Href\", name: \"Href\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Target\", name: \"Target\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$35.methods = [{prop: \"Form\", name: \"Form\", pkg: \"\", typ: $funcType([], [ptrType$3], false)}, {prop: \"Labels\", name: \"Labels\", pkg: \"\", typ: $funcType([], [sliceType$4], false)}, {prop: \"Validity\", name: \"Validity\", pkg: \"\", typ: $funcType([], [ptrType$34], false)}, {prop: \"CheckValidity\", name: \"CheckValidity\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"SetCustomValidity\", name: \"SetCustomValidity\", pkg: \"\", typ: $funcType([$String], [], false)}];\n\tptrType$37.methods = [{prop: \"GetContext2d\", name: \"GetContext2d\", pkg: \"\", typ: $funcType([], [ptrType$36], false)}, {prop: \"GetContext\", name: \"GetContext\", pkg: \"\", typ: $funcType([$String], [ptrType$11], false)}];\n\tptrType$36.methods = [{prop: \"CreateLinearGradient\", name: \"CreateLinearGradient\", pkg: \"\", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: \"Rect\", name: \"Rect\", pkg: \"\", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: \"FillRect\", name: \"FillRect\", pkg: \"\", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: \"StrokeRect\", name: \"StrokeRect\", pkg: \"\", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: \"ClearRect\", name: \"ClearRect\", pkg: \"\", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: \"Fill\", name: \"Fill\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Stroke\", name: \"Stroke\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"BeginPath\", name: \"BeginPath\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"MoveTo\", name: \"MoveTo\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"ClosePath\", name: \"ClosePath\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"LineTo\", name: \"LineTo\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"Clip\", name: \"Clip\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"QuadraticCurveTo\", name: \"QuadraticCurveTo\", pkg: \"\", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: \"BezierCurveTo\", name: \"BezierCurveTo\", pkg: \"\", typ: $funcType([$Int, $Int, $Int, $Int, $Int, $Int], [], false)}, {prop: \"Arc\", name: \"Arc\", pkg: \"\", typ: $funcType([$Int, $Int, $Int, $Int, $Int, $Bool], [], false)}, {prop: \"ArcTo\", name: \"ArcTo\", pkg: \"\", typ: $funcType([$Int, $Int, $Int, $Int, $Int], [], false)}, {prop: \"IsPointInPath\", name: \"IsPointInPath\", pkg: \"\", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: \"Scale\", name: \"Scale\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"Rotate\", name: \"Rotate\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"Translate\", name: \"Translate\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"Transform\", name: \"Transform\", pkg: \"\", typ: $funcType([$Int, $Int, $Int, $Int, $Int, $Int], [], false)}, {prop: \"SetTransform\", name: \"SetTransform\", pkg: \"\", typ: $funcType([$Int, $Int, $Int, $Int, $Int, $Int], [], false)}, {prop: \"FillText\", name: \"FillText\", pkg: \"\", typ: $funcType([$String, $Int, $Int, $Int], [], false)}, {prop: \"StrokeText\", name: \"StrokeText\", pkg: \"\", typ: $funcType([$String, $Int, $Int, $Int], [], false)}];\n\tptrType$13.methods = [{prop: \"Options\", name: \"Options\", pkg: \"\", typ: $funcType([], [sliceType$5], false)}];\n\tptrType$38.methods = [{prop: \"Elements\", name: \"Elements\", pkg: \"\", typ: $funcType([], [sliceType$3], false)}, {prop: \"Form\", name: \"Form\", pkg: \"\", typ: $funcType([], [ptrType$3], false)}, {prop: \"Validity\", name: \"Validity\", pkg: \"\", typ: $funcType([], [ptrType$34], false)}, {prop: \"CheckValidity\", name: \"CheckValidity\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"SetCustomValidity\", name: \"SetCustomValidity\", pkg: \"\", typ: $funcType([$String], [], false)}];\n\tptrType$3.methods = [{prop: \"Elements\", name: \"Elements\", pkg: \"\", typ: $funcType([], [sliceType$3], false)}, {prop: \"CheckValidity\", name: \"CheckValidity\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Submit\", name: \"Submit\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Reset\", name: \"Reset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Item\", name: \"Item\", pkg: \"\", typ: $funcType([$Int], [HTMLElement], false)}, {prop: \"NamedItem\", name: \"NamedItem\", pkg: \"\", typ: $funcType([$String], [HTMLElement], false)}];\n\tptrType$39.methods = [{prop: \"ContentDocument\", name: \"ContentDocument\", pkg: \"\", typ: $funcType([], [Document], false)}, {prop: \"ContentWindow\", name: \"ContentWindow\", pkg: \"\", typ: $funcType([], [Window], false)}];\n\tptrType$40.methods = [{prop: \"Files\", name: \"Files\", pkg: \"\", typ: $funcType([], [sliceType$12], false)}, {prop: \"List\", name: \"List\", pkg: \"\", typ: $funcType([], [ptrType$13], false)}, {prop: \"Labels\", name: \"Labels\", pkg: \"\", typ: $funcType([], [sliceType$4], false)}, {prop: \"Form\", name: \"Form\", pkg: \"\", typ: $funcType([], [ptrType$3], false)}, {prop: \"Validity\", name: \"Validity\", pkg: \"\", typ: $funcType([], [ptrType$34], false)}, {prop: \"CheckValidity\", name: \"CheckValidity\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"SetCustomValidity\", name: \"SetCustomValidity\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"Select\", name: \"Select\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"SetSelectionRange\", name: \"SetSelectionRange\", pkg: \"\", typ: $funcType([$Int, $Int, $String], [], false)}, {prop: \"StepDown\", name: \"StepDown\", pkg: \"\", typ: $funcType([$Int], [$error], false)}, {prop: \"StepUp\", name: \"StepUp\", pkg: \"\", typ: $funcType([$Int], [$error], false)}];\n\tptrType$41.methods = [{prop: \"Form\", name: \"Form\", pkg: \"\", typ: $funcType([], [ptrType$3], false)}, {prop: \"Labels\", name: \"Labels\", pkg: \"\", typ: $funcType([], [sliceType$4], false)}, {prop: \"Validity\", name: \"Validity\", pkg: \"\", typ: $funcType([], [ptrType$34], false)}, {prop: \"CheckValidity\", name: \"CheckValidity\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"SetCustomValidity\", name: \"SetCustomValidity\", pkg: \"\", typ: $funcType([$String], [], false)}];\n\tptrType$4.methods = [{prop: \"Control\", name: \"Control\", pkg: \"\", typ: $funcType([], [HTMLElement], false)}, {prop: \"Form\", name: \"Form\", pkg: \"\", typ: $funcType([], [ptrType$3], false)}];\n\tptrType$42.methods = [{prop: \"Form\", name: \"Form\", pkg: \"\", typ: $funcType([], [ptrType$3], false)}];\n\tptrType$43.methods = [{prop: \"Rel\", name: \"Rel\", pkg: \"\", typ: $funcType([], [ptrType$19], false)}, {prop: \"Sizes\", name: \"Sizes\", pkg: \"\", typ: $funcType([], [ptrType$19], false)}, {prop: \"Sheet\", name: \"Sheet\", pkg: \"\", typ: $funcType([], [StyleSheet], false)}];\n\tptrType$44.methods = [{prop: \"Areas\", name: \"Areas\", pkg: \"\", typ: $funcType([], [sliceType$13], false)}, {prop: \"Images\", name: \"Images\", pkg: \"\", typ: $funcType([], [sliceType$3], false)}];\n\tHTMLMeterElement.methods = [{prop: \"Labels\", name: \"Labels\", pkg: \"\", typ: $funcType([], [sliceType$4], false)}];\n\tptrType$45.methods = [{prop: \"Form\", name: \"Form\", pkg: \"\", typ: $funcType([], [ptrType$3], false)}, {prop: \"ContentDocument\", name: \"ContentDocument\", pkg: \"\", typ: $funcType([], [Document], false)}, {prop: \"ContentWindow\", name: \"ContentWindow\", pkg: \"\", typ: $funcType([], [Window], false)}, {prop: \"Validity\", name: \"Validity\", pkg: \"\", typ: $funcType([], [ptrType$34], false)}, {prop: \"CheckValidity\", name: \"CheckValidity\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"SetCustomValidity\", name: \"SetCustomValidity\", pkg: \"\", typ: $funcType([$String], [], false)}];\n\tptrType$5.methods = [{prop: \"Form\", name: \"Form\", pkg: \"\", typ: $funcType([], [ptrType$3], false)}];\n\tptrType$46.methods = [{prop: \"Form\", name: \"Form\", pkg: \"\", typ: $funcType([], [ptrType$3], false)}, {prop: \"Labels\", name: \"Labels\", pkg: \"\", typ: $funcType([], [sliceType$4], false)}, {prop: \"Validity\", name: \"Validity\", pkg: \"\", typ: $funcType([], [ptrType$34], false)}, {prop: \"For\", name: \"For\", pkg: \"\", typ: $funcType([], [ptrType$19], false)}, {prop: \"CheckValidity\", name: \"CheckValidity\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"SetCustomValidity\", name: \"SetCustomValidity\", pkg: \"\", typ: $funcType([$String], [], false)}];\n\tHTMLProgressElement.methods = [{prop: \"Labels\", name: \"Labels\", pkg: \"\", typ: $funcType([], [sliceType$4], false)}];\n\tptrType$47.methods = [{prop: \"Labels\", name: \"Labels\", pkg: \"\", typ: $funcType([], [sliceType$4], false)}, {prop: \"Form\", name: \"Form\", pkg: \"\", typ: $funcType([], [ptrType$3], false)}, {prop: \"Options\", name: \"Options\", pkg: \"\", typ: $funcType([], [sliceType$5], false)}, {prop: \"SelectedOptions\", name: \"SelectedOptions\", pkg: \"\", typ: $funcType([], [sliceType$5], false)}, {prop: \"Item\", name: \"Item\", pkg: \"\", typ: $funcType([$Int], [ptrType$5], false)}, {prop: \"NamedItem\", name: \"NamedItem\", pkg: \"\", typ: $funcType([$String], [ptrType$5], false)}, {prop: \"Validity\", name: \"Validity\", pkg: \"\", typ: $funcType([], [ptrType$34], false)}, {prop: \"CheckValidity\", name: \"CheckValidity\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"SetCustomValidity\", name: \"SetCustomValidity\", pkg: \"\", typ: $funcType([$String], [], false)}];\n\tptrType$16.methods = [{prop: \"Cells\", name: \"Cells\", pkg: \"\", typ: $funcType([], [sliceType$14], false)}, {prop: \"InsertCell\", name: \"InsertCell\", pkg: \"\", typ: $funcType([$Int], [ptrType$15], false)}, {prop: \"DeleteCell\", name: \"DeleteCell\", pkg: \"\", typ: $funcType([$Int], [], false)}];\n\tptrType$48.methods = [{prop: \"Rows\", name: \"Rows\", pkg: \"\", typ: $funcType([], [sliceType$15], false)}, {prop: \"DeleteRow\", name: \"DeleteRow\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"InsertRow\", name: \"InsertRow\", pkg: \"\", typ: $funcType([$Int], [ptrType$16], false)}];\n\tptrType$49.methods = [{prop: \"Form\", name: \"Form\", pkg: \"\", typ: $funcType([], [ptrType$3], false)}, {prop: \"Labels\", name: \"Labels\", pkg: \"\", typ: $funcType([], [sliceType$4], false)}, {prop: \"Validity\", name: \"Validity\", pkg: \"\", typ: $funcType([], [ptrType$34], false)}, {prop: \"CheckValidity\", name: \"CheckValidity\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"SetCustomValidity\", name: \"SetCustomValidity\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"Select\", name: \"Select\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"SetSelectionRange\", name: \"SetSelectionRange\", pkg: \"\", typ: $funcType([$Int, $Int, $String], [], false)}];\n\tptrType$51.methods = [{prop: \"Track\", name: \"Track\", pkg: \"\", typ: $funcType([], [ptrType$50], false)}];\n\tptrType$24.methods = [{prop: \"ToMap\", name: \"ToMap\", pkg: \"\", typ: $funcType([], [mapType], false)}, {prop: \"RemoveProperty\", name: \"RemoveProperty\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"GetPropertyValue\", name: \"GetPropertyValue\", pkg: \"\", typ: $funcType([$String], [$String], false)}, {prop: \"GetPropertyPriority\", name: \"GetPropertyPriority\", pkg: \"\", typ: $funcType([$String], [$String], false)}, {prop: \"SetProperty\", name: \"SetProperty\", pkg: \"\", typ: $funcType([$String, $String, $String], [], false)}, {prop: \"Index\", name: \"Index\", pkg: \"\", typ: $funcType([$Int], [$String], false)}, {prop: \"Length\", name: \"Length\", pkg: \"\", typ: $funcType([], [$Int], false)}];\n\tptrType$17.methods = [{prop: \"Bubbles\", name: \"Bubbles\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Cancelable\", name: \"Cancelable\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"CurrentTarget\", name: \"CurrentTarget\", pkg: \"\", typ: $funcType([], [Element], false)}, {prop: \"DefaultPrevented\", name: \"DefaultPrevented\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"EventPhase\", name: \"EventPhase\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Target\", name: \"Target\", pkg: \"\", typ: $funcType([], [Element], false)}, {prop: \"Timestamp\", name: \"Timestamp\", pkg: \"\", typ: $funcType([], [time.Time], false)}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"PreventDefault\", name: \"PreventDefault\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"StopImmediatePropagation\", name: \"StopImmediatePropagation\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"StopPropagation\", name: \"StopPropagation\", pkg: \"\", typ: $funcType([], [], false)}];\n\tptrType$52.methods = [{prop: \"ModifierState\", name: \"ModifierState\", pkg: \"\", typ: $funcType([$String], [$Bool], false)}];\n\tptrType$53.methods = [{prop: \"RelatedTarget\", name: \"RelatedTarget\", pkg: \"\", typ: $funcType([], [Element], false)}, {prop: \"ModifierState\", name: \"ModifierState\", pkg: \"\", typ: $funcType([$String], [$Bool], false)}];\n\tTokenList.init([{prop: \"dtl\", name: \"dtl\", pkg: \"honnef.co/go/js/dom\", typ: ptrType$11, tag: \"\"}, {prop: \"o\", name: \"o\", pkg: \"honnef.co/go/js/dom\", typ: ptrType$11, tag: \"\"}, {prop: \"sa\", name: \"sa\", pkg: \"honnef.co/go/js/dom\", typ: $String, tag: \"\"}, {prop: \"Length\", name: \"Length\", pkg: \"\", typ: $Int, tag: \"js:\\\"length\\\"\"}]);\n\tDocument.init([{prop: \"AddEventListener\", name: \"AddEventListener\", pkg: \"\", typ: $funcType([$String, $Bool, funcType$2], [funcType$1], false)}, {prop: \"AdoptNode\", name: \"AdoptNode\", pkg: \"\", typ: $funcType([Node], [Node], false)}, {prop: \"AppendChild\", name: \"AppendChild\", pkg: \"\", typ: $funcType([Node], [], false)}, {prop: \"Async\", name: \"Async\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"BaseURI\", name: \"BaseURI\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ChildNodes\", name: \"ChildNodes\", pkg: \"\", typ: $funcType([], [sliceType$1], false)}, {prop: \"CloneNode\", name: \"CloneNode\", pkg: \"\", typ: $funcType([$Bool], [Node], false)}, {prop: \"CompareDocumentPosition\", name: \"CompareDocumentPosition\", pkg: \"\", typ: $funcType([Node], [$Int], false)}, {prop: \"Contains\", name: \"Contains\", pkg: \"\", typ: $funcType([Node], [$Bool], false)}, {prop: \"CreateElement\", name: \"CreateElement\", pkg: \"\", typ: $funcType([$String], [Element], false)}, {prop: \"CreateElementNS\", name: \"CreateElementNS\", pkg: \"\", typ: $funcType([$String, $String], [Element], false)}, {prop: \"CreateTextNode\", name: \"CreateTextNode\", pkg: \"\", typ: $funcType([$String], [ptrType$10], false)}, {prop: \"Doctype\", name: \"Doctype\", pkg: \"\", typ: $funcType([], [DocumentType], false)}, {prop: \"DocumentElement\", name: \"DocumentElement\", pkg: \"\", typ: $funcType([], [Element], false)}, {prop: \"DocumentURI\", name: \"DocumentURI\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ElementFromPoint\", name: \"ElementFromPoint\", pkg: \"\", typ: $funcType([$Int, $Int], [Element], false)}, {prop: \"EnableStyleSheetsForSet\", name: \"EnableStyleSheetsForSet\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"FirstChild\", name: \"FirstChild\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"GetElementByID\", name: \"GetElementByID\", pkg: \"\", typ: $funcType([$String], [Element], false)}, {prop: \"GetElementsByClassName\", name: \"GetElementsByClassName\", pkg: \"\", typ: $funcType([$String], [sliceType$2], false)}, {prop: \"GetElementsByTagName\", name: \"GetElementsByTagName\", pkg: \"\", typ: $funcType([$String], [sliceType$2], false)}, {prop: \"GetElementsByTagNameNS\", name: \"GetElementsByTagNameNS\", pkg: \"\", typ: $funcType([$String, $String], [sliceType$2], false)}, {prop: \"HasChildNodes\", name: \"HasChildNodes\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Implementation\", name: \"Implementation\", pkg: \"\", typ: $funcType([], [DOMImplementation], false)}, {prop: \"ImportNode\", name: \"ImportNode\", pkg: \"\", typ: $funcType([Node, $Bool], [Node], false)}, {prop: \"InsertBefore\", name: \"InsertBefore\", pkg: \"\", typ: $funcType([Node, Node], [], false)}, {prop: \"IsDefaultNamespace\", name: \"IsDefaultNamespace\", pkg: \"\", typ: $funcType([$String], [$Bool], false)}, {prop: \"IsEqualNode\", name: \"IsEqualNode\", pkg: \"\", typ: $funcType([Node], [$Bool], false)}, {prop: \"LastChild\", name: \"LastChild\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"LastStyleSheetSet\", name: \"LastStyleSheetSet\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"LookupNamespaceURI\", name: \"LookupNamespaceURI\", pkg: \"\", typ: $funcType([$String], [$String], false)}, {prop: \"LookupPrefix\", name: \"LookupPrefix\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"NextSibling\", name: \"NextSibling\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"NodeName\", name: \"NodeName\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"NodeType\", name: \"NodeType\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"NodeValue\", name: \"NodeValue\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Normalize\", name: \"Normalize\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"OwnerDocument\", name: \"OwnerDocument\", pkg: \"\", typ: $funcType([], [Document], false)}, {prop: \"ParentElement\", name: \"ParentElement\", pkg: \"\", typ: $funcType([], [Element], false)}, {prop: \"ParentNode\", name: \"ParentNode\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"PreferredStyleSheetSet\", name: \"PreferredStyleSheetSet\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"PreviousSibling\", name: \"PreviousSibling\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"QuerySelector\", name: \"QuerySelector\", pkg: \"\", typ: $funcType([$String], [Element], false)}, {prop: \"QuerySelectorAll\", name: \"QuerySelectorAll\", pkg: \"\", typ: $funcType([$String], [sliceType$2], false)}, {prop: \"RemoveChild\", name: \"RemoveChild\", pkg: \"\", typ: $funcType([Node], [], false)}, {prop: \"RemoveEventListener\", name: \"RemoveEventListener\", pkg: \"\", typ: $funcType([$String, $Bool, funcType$1], [], false)}, {prop: \"ReplaceChild\", name: \"ReplaceChild\", pkg: \"\", typ: $funcType([Node, Node], [], false)}, {prop: \"SelectedStyleSheetSet\", name: \"SelectedStyleSheetSet\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"SetAsync\", name: \"SetAsync\", pkg: \"\", typ: $funcType([$Bool], [], false)}, {prop: \"SetNodeValue\", name: \"SetNodeValue\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"SetTextContent\", name: \"SetTextContent\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"StyleSheetSets\", name: \"StyleSheetSets\", pkg: \"\", typ: $funcType([], [sliceType$11], false)}, {prop: \"StyleSheets\", name: \"StyleSheets\", pkg: \"\", typ: $funcType([], [sliceType$11], false)}, {prop: \"TextContent\", name: \"TextContent\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Underlying\", name: \"Underlying\", pkg: \"\", typ: $funcType([], [ptrType$11], false)}]);\n\tdocument.init([{prop: \"BasicNode\", name: \"\", pkg: \"\", typ: ptrType$21, tag: \"\"}]);\n\thtmlDocument.init([{prop: \"document\", name: \"\", pkg: \"honnef.co/go/js/dom\", typ: ptrType$22, tag: \"\"}]);\n\tURLUtils.init([{prop: \"Object\", name: \"\", pkg: \"\", typ: ptrType$11, tag: \"\"}, {prop: \"Href\", name: \"Href\", pkg: \"\", typ: $String, tag: \"js:\\\"href\\\"\"}, {prop: \"Protocol\", name: \"Protocol\", pkg: \"\", typ: $String, tag: \"js:\\\"protocol\\\"\"}, {prop: \"Host\", name: \"Host\", pkg: \"\", typ: $String, tag: \"js:\\\"host\\\"\"}, {prop: \"Hostname\", name: \"Hostname\", pkg: \"\", typ: $String, tag: \"js:\\\"hostname\\\"\"}, {prop: \"Port\", name: \"Port\", pkg: \"\", typ: $String, tag: \"js:\\\"port\\\"\"}, {prop: \"Pathname\", name: \"Pathname\", pkg: \"\", typ: $String, tag: \"js:\\\"pathname\\\"\"}, {prop: \"Search\", name: \"Search\", pkg: \"\", typ: $String, tag: \"js:\\\"search\\\"\"}, {prop: \"Hash\", name: \"Hash\", pkg: \"\", typ: $String, tag: \"js:\\\"hash\\\"\"}, {prop: \"Username\", name: \"Username\", pkg: \"\", typ: $String, tag: \"js:\\\"username\\\"\"}, {prop: \"Password\", name: \"Password\", pkg: \"\", typ: $String, tag: \"js:\\\"password\\\"\"}, {prop: \"Origin\", name: \"Origin\", pkg: \"\", typ: $String, tag: \"js:\\\"origin\\\"\"}]);\n\tLocation.init([{prop: \"Object\", name: \"\", pkg: \"\", typ: ptrType$11, tag: \"\"}, {prop: \"URLUtils\", name: \"\", pkg: \"\", typ: ptrType$1, tag: \"\"}]);\n\tHTMLElement.init([{prop: \"AccessKey\", name: \"AccessKey\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"AccessKeyLabel\", name: \"AccessKeyLabel\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"AddEventListener\", name: \"AddEventListener\", pkg: \"\", typ: $funcType([$String, $Bool, funcType$2], [funcType$1], false)}, {prop: \"AppendChild\", name: \"AppendChild\", pkg: \"\", typ: $funcType([Node], [], false)}, {prop: \"BaseURI\", name: \"BaseURI\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Blur\", name: \"Blur\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"ChildNodes\", name: \"ChildNodes\", pkg: \"\", typ: $funcType([], [sliceType$1], false)}, {prop: \"Class\", name: \"Class\", pkg: \"\", typ: $funcType([], [ptrType$19], false)}, {prop: \"Click\", name: \"Click\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"CloneNode\", name: \"CloneNode\", pkg: \"\", typ: $funcType([$Bool], [Node], false)}, {prop: \"CompareDocumentPosition\", name: \"CompareDocumentPosition\", pkg: \"\", typ: $funcType([Node], [$Int], false)}, {prop: \"Contains\", name: \"Contains\", pkg: \"\", typ: $funcType([Node], [$Bool], false)}, {prop: \"ContentEditable\", name: \"ContentEditable\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Dataset\", name: \"Dataset\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Dir\", name: \"Dir\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Draggable\", name: \"Draggable\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"FirstChild\", name: \"FirstChild\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"Focus\", name: \"Focus\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"GetAttribute\", name: \"GetAttribute\", pkg: \"\", typ: $funcType([$String], [$String], false)}, {prop: \"GetAttributeNS\", name: \"GetAttributeNS\", pkg: \"\", typ: $funcType([$String, $String], [$String], false)}, {prop: \"GetBoundingClientRect\", name: \"GetBoundingClientRect\", pkg: \"\", typ: $funcType([], [ClientRect], false)}, {prop: \"GetElementsByClassName\", name: \"GetElementsByClassName\", pkg: \"\", typ: $funcType([$String], [sliceType$2], false)}, {prop: \"GetElementsByTagName\", name: \"GetElementsByTagName\", pkg: \"\", typ: $funcType([$String], [sliceType$2], false)}, {prop: \"GetElementsByTagNameNS\", name: \"GetElementsByTagNameNS\", pkg: \"\", typ: $funcType([$String, $String], [sliceType$2], false)}, {prop: \"HasAttribute\", name: \"HasAttribute\", pkg: \"\", typ: $funcType([$String], [$Bool], false)}, {prop: \"HasAttributeNS\", name: \"HasAttributeNS\", pkg: \"\", typ: $funcType([$String, $String], [$Bool], false)}, {prop: \"HasChildNodes\", name: \"HasChildNodes\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"ID\", name: \"ID\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"InnerHTML\", name: \"InnerHTML\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"InsertBefore\", name: \"InsertBefore\", pkg: \"\", typ: $funcType([Node, Node], [], false)}, {prop: \"IsContentEditable\", name: \"IsContentEditable\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"IsDefaultNamespace\", name: \"IsDefaultNamespace\", pkg: \"\", typ: $funcType([$String], [$Bool], false)}, {prop: \"IsEqualNode\", name: \"IsEqualNode\", pkg: \"\", typ: $funcType([Node], [$Bool], false)}, {prop: \"Lang\", name: \"Lang\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"LastChild\", name: \"LastChild\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"LookupNamespaceURI\", name: \"LookupNamespaceURI\", pkg: \"\", typ: $funcType([$String], [$String], false)}, {prop: \"LookupPrefix\", name: \"LookupPrefix\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"NextElementSibling\", name: \"NextElementSibling\", pkg: \"\", typ: $funcType([], [Element], false)}, {prop: \"NextSibling\", name: \"NextSibling\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"NodeName\", name: \"NodeName\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"NodeType\", name: \"NodeType\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"NodeValue\", name: \"NodeValue\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Normalize\", name: \"Normalize\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"OffsetHeight\", name: \"OffsetHeight\", pkg: \"\", typ: $funcType([], [$Float64], false)}, {prop: \"OffsetLeft\", name: \"OffsetLeft\", pkg: \"\", typ: $funcType([], [$Float64], false)}, {prop: \"OffsetParent\", name: \"OffsetParent\", pkg: \"\", typ: $funcType([], [HTMLElement], false)}, {prop: \"OffsetTop\", name: \"OffsetTop\", pkg: \"\", typ: $funcType([], [$Float64], false)}, {prop: \"OffsetWidth\", name: \"OffsetWidth\", pkg: \"\", typ: $funcType([], [$Float64], false)}, {prop: \"OwnerDocument\", name: \"OwnerDocument\", pkg: \"\", typ: $funcType([], [Document], false)}, {prop: \"ParentElement\", name: \"ParentElement\", pkg: \"\", typ: $funcType([], [Element], false)}, {prop: \"ParentNode\", name: \"ParentNode\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"PreviousElementSibling\", name: \"PreviousElementSibling\", pkg: \"\", typ: $funcType([], [Element], false)}, {prop: \"PreviousSibling\", name: \"PreviousSibling\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"QuerySelector\", name: \"QuerySelector\", pkg: \"\", typ: $funcType([$String], [Element], false)}, {prop: \"QuerySelectorAll\", name: \"QuerySelectorAll\", pkg: \"\", typ: $funcType([$String], [sliceType$2], false)}, {prop: \"RemoveAttribute\", name: \"RemoveAttribute\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"RemoveAttributeNS\", name: \"RemoveAttributeNS\", pkg: \"\", typ: $funcType([$String, $String], [], false)}, {prop: \"RemoveChild\", name: \"RemoveChild\", pkg: \"\", typ: $funcType([Node], [], false)}, {prop: \"RemoveEventListener\", name: \"RemoveEventListener\", pkg: \"\", typ: $funcType([$String, $Bool, funcType$1], [], false)}, {prop: \"ReplaceChild\", name: \"ReplaceChild\", pkg: \"\", typ: $funcType([Node, Node], [], false)}, {prop: \"SetAccessKey\", name: \"SetAccessKey\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"SetAccessKeyLabel\", name: \"SetAccessKeyLabel\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"SetAttribute\", name: \"SetAttribute\", pkg: \"\", typ: $funcType([$String, $String], [], false)}, {prop: \"SetAttributeNS\", name: \"SetAttributeNS\", pkg: \"\", typ: $funcType([$String, $String, $String], [], false)}, {prop: \"SetContentEditable\", name: \"SetContentEditable\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"SetDir\", name: \"SetDir\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"SetDraggable\", name: \"SetDraggable\", pkg: \"\", typ: $funcType([$Bool], [], false)}, {prop: \"SetID\", name: \"SetID\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"SetInnerHTML\", name: \"SetInnerHTML\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"SetLang\", name: \"SetLang\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"SetNodeValue\", name: \"SetNodeValue\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"SetTextContent\", name: \"SetTextContent\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"SetTitle\", name: \"SetTitle\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"Style\", name: \"Style\", pkg: \"\", typ: $funcType([], [ptrType$24], false)}, {prop: \"TagName\", name: \"TagName\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"TextContent\", name: \"TextContent\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Title\", name: \"Title\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Underlying\", name: \"Underlying\", pkg: \"\", typ: $funcType([], [ptrType$11], false)}]);\n\tWindow.init([{prop: \"AddEventListener\", name: \"AddEventListener\", pkg: \"\", typ: $funcType([$String, $Bool, funcType$2], [funcType$1], false)}, {prop: \"Alert\", name: \"Alert\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"Back\", name: \"Back\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Blur\", name: \"Blur\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"CancelAnimationFrame\", name: \"CancelAnimationFrame\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"ClearInterval\", name: \"ClearInterval\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"ClearTimeout\", name: \"ClearTimeout\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"Close\", name: \"Close\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Confirm\", name: \"Confirm\", pkg: \"\", typ: $funcType([$String], [$Bool], false)}, {prop: \"Console\", name: \"Console\", pkg: \"\", typ: $funcType([], [ptrType$25], false)}, {prop: \"Document\", name: \"Document\", pkg: \"\", typ: $funcType([], [Document], false)}, {prop: \"Focus\", name: \"Focus\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Forward\", name: \"Forward\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"FrameElement\", name: \"FrameElement\", pkg: \"\", typ: $funcType([], [Element], false)}, {prop: \"GetComputedStyle\", name: \"GetComputedStyle\", pkg: \"\", typ: $funcType([Element, $String], [ptrType$24], false)}, {prop: \"GetSelection\", name: \"GetSelection\", pkg: \"\", typ: $funcType([], [Selection], false)}, {prop: \"History\", name: \"History\", pkg: \"\", typ: $funcType([], [History], false)}, {prop: \"Home\", name: \"Home\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"InnerHeight\", name: \"InnerHeight\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"InnerWidth\", name: \"InnerWidth\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Length\", name: \"Length\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Location\", name: \"Location\", pkg: \"\", typ: $funcType([], [ptrType$20], false)}, {prop: \"MoveBy\", name: \"MoveBy\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"MoveTo\", name: \"MoveTo\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Navigator\", name: \"Navigator\", pkg: \"\", typ: $funcType([], [Navigator], false)}, {prop: \"Open\", name: \"Open\", pkg: \"\", typ: $funcType([$String, $String, $String], [Window], false)}, {prop: \"OpenDialog\", name: \"OpenDialog\", pkg: \"\", typ: $funcType([$String, $String, $String, sliceType], [Window], false)}, {prop: \"Opener\", name: \"Opener\", pkg: \"\", typ: $funcType([], [Window], false)}, {prop: \"OuterHeight\", name: \"OuterHeight\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"OuterWidth\", name: \"OuterWidth\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Parent\", name: \"Parent\", pkg: \"\", typ: $funcType([], [Window], false)}, {prop: \"PostMessage\", name: \"PostMessage\", pkg: \"\", typ: $funcType([$String, $String, sliceType], [], false)}, {prop: \"Print\", name: \"Print\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Prompt\", name: \"Prompt\", pkg: \"\", typ: $funcType([$String, $String], [$String], false)}, {prop: \"RemoveEventListener\", name: \"RemoveEventListener\", pkg: \"\", typ: $funcType([$String, $Bool, funcType$1], [], false)}, {prop: \"RequestAnimationFrame\", name: \"RequestAnimationFrame\", pkg: \"\", typ: $funcType([funcType$3], [$Int], false)}, {prop: \"ResizeBy\", name: \"ResizeBy\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"ResizeTo\", name: \"ResizeTo\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"Screen\", name: \"Screen\", pkg: \"\", typ: $funcType([], [ptrType$26], false)}, {prop: \"ScreenX\", name: \"ScreenX\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"ScreenY\", name: \"ScreenY\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Scroll\", name: \"Scroll\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"ScrollBy\", name: \"ScrollBy\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"ScrollByLines\", name: \"ScrollByLines\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"ScrollMaxX\", name: \"ScrollMaxX\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"ScrollMaxY\", name: \"ScrollMaxY\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"ScrollTo\", name: \"ScrollTo\", pkg: \"\", typ: $funcType([$Int, $Int], [], false)}, {prop: \"ScrollX\", name: \"ScrollX\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"ScrollY\", name: \"ScrollY\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"SetCursor\", name: \"SetCursor\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"SetInterval\", name: \"SetInterval\", pkg: \"\", typ: $funcType([funcType, $Int], [$Int], false)}, {prop: \"SetName\", name: \"SetName\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"SetTimeout\", name: \"SetTimeout\", pkg: \"\", typ: $funcType([funcType, $Int], [$Int], false)}, {prop: \"Stop\", name: \"Stop\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Top\", name: \"Top\", pkg: \"\", typ: $funcType([], [Window], false)}]);\n\twindow.init([{prop: \"Object\", name: \"\", pkg: \"\", typ: ptrType$11, tag: \"\"}]);\n\tSelection.init([]);\n\tScreen.init([{prop: \"Object\", name: \"\", pkg: \"\", typ: ptrType$11, tag: \"\"}, {prop: \"AvailTop\", name: \"AvailTop\", pkg: \"\", typ: $Int, tag: \"js:\\\"availTop\\\"\"}, {prop: \"AvailLeft\", name: \"AvailLeft\", pkg: \"\", typ: $Int, tag: \"js:\\\"availLeft\\\"\"}, {prop: \"AvailHeight\", name: \"AvailHeight\", pkg: \"\", typ: $Int, tag: \"js:\\\"availHeight\\\"\"}, {prop: \"AvailWidth\", name: \"AvailWidth\", pkg: \"\", typ: $Int, tag: \"js:\\\"availWidth\\\"\"}, {prop: \"ColorDepth\", name: \"ColorDepth\", pkg: \"\", typ: $Int, tag: \"js:\\\"colorDepth\\\"\"}, {prop: \"Height\", name: \"Height\", pkg: \"\", typ: $Int, tag: \"js:\\\"height\\\"\"}, {prop: \"Left\", name: \"Left\", pkg: \"\", typ: $Int, tag: \"js:\\\"left\\\"\"}, {prop: \"PixelDepth\", name: \"PixelDepth\", pkg: \"\", typ: $Int, tag: \"js:\\\"pixelDepth\\\"\"}, {prop: \"Top\", name: \"Top\", pkg: \"\", typ: $Int, tag: \"js:\\\"top\\\"\"}, {prop: \"Width\", name: \"Width\", pkg: \"\", typ: $Int, tag: \"js:\\\"width\\\"\"}]);\n\tNavigator.init([{prop: \"AppName\", name: \"AppName\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"AppVersion\", name: \"AppVersion\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"CookieEnabled\", name: \"CookieEnabled\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"DoNotTrack\", name: \"DoNotTrack\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Geolocation\", name: \"Geolocation\", pkg: \"\", typ: $funcType([], [Geolocation], false)}, {prop: \"Language\", name: \"Language\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Online\", name: \"Online\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Platform\", name: \"Platform\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Product\", name: \"Product\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"RegisterProtocolHandler\", name: \"RegisterProtocolHandler\", pkg: \"\", typ: $funcType([$String, $String, $String], [], false)}, {prop: \"UserAgent\", name: \"UserAgent\", pkg: \"\", typ: $funcType([], [$String], false)}]);\n\tGeolocation.init([{prop: \"ClearWatch\", name: \"ClearWatch\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"CurrentPosition\", name: \"CurrentPosition\", pkg: \"\", typ: $funcType([funcType$4, funcType$5, PositionOptions], [Position], false)}, {prop: \"WatchPosition\", name: \"WatchPosition\", pkg: \"\", typ: $funcType([funcType$4, funcType$5, PositionOptions], [$Int], false)}]);\n\tPositionError.init([{prop: \"Object\", name: \"\", pkg: \"\", typ: ptrType$11, tag: \"\"}, {prop: \"Code\", name: \"Code\", pkg: \"\", typ: $Int, tag: \"js:\\\"code\\\"\"}]);\n\tPositionOptions.init([{prop: \"EnableHighAccuracy\", name: \"EnableHighAccuracy\", pkg: \"\", typ: $Bool, tag: \"\"}, {prop: \"Timeout\", name: \"Timeout\", pkg: \"\", typ: time.Duration, tag: \"\"}, {prop: \"MaximumAge\", name: \"MaximumAge\", pkg: \"\", typ: time.Duration, tag: \"\"}]);\n\tPosition.init([{prop: \"Coords\", name: \"Coords\", pkg: \"\", typ: ptrType$29, tag: \"\"}, {prop: \"Timestamp\", name: \"Timestamp\", pkg: \"\", typ: time.Time, tag: \"\"}]);\n\tCoordinates.init([{prop: \"Object\", name: \"\", pkg: \"\", typ: ptrType$11, tag: \"\"}, {prop: \"Latitude\", name: \"Latitude\", pkg: \"\", typ: $Float64, tag: \"js:\\\"latitude\\\"\"}, {prop: \"Longitude\", name: \"Longitude\", pkg: \"\", typ: $Float64, tag: \"js:\\\"longitude\\\"\"}, {prop: \"Altitude\", name: \"Altitude\", pkg: \"\", typ: $Float64, tag: \"js:\\\"altitude\\\"\"}, {prop: \"Accuracy\", name: \"Accuracy\", pkg: \"\", typ: $Float64, tag: \"js:\\\"accuracy\\\"\"}, {prop: \"AltitudeAccuracy\", name: \"AltitudeAccuracy\", pkg: \"\", typ: $Float64, tag: \"js:\\\"altitudeAccuracy\\\"\"}, {prop: \"Heading\", name: \"Heading\", pkg: \"\", typ: $Float64, tag: \"js:\\\"heading\\\"\"}, {prop: \"Speed\", name: \"Speed\", pkg: \"\", typ: $Float64, tag: \"js:\\\"speed\\\"\"}]);\n\tHistory.init([{prop: \"Back\", name: \"Back\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Forward\", name: \"Forward\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Go\", name: \"Go\", pkg: \"\", typ: $funcType([$Int], [], false)}, {prop: \"Length\", name: \"Length\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"PushState\", name: \"PushState\", pkg: \"\", typ: $funcType([$emptyInterface, $String, $String], [], false)}, {prop: \"ReplaceState\", name: \"ReplaceState\", pkg: \"\", typ: $funcType([$emptyInterface, $String, $String], [], false)}, {prop: \"State\", name: \"State\", pkg: \"\", typ: $funcType([], [$emptyInterface], false)}]);\n\tConsole.init([{prop: \"Object\", name: \"\", pkg: \"\", typ: ptrType$11, tag: \"\"}]);\n\tDocumentType.init([]);\n\tDOMImplementation.init([]);\n\tStyleSheet.init([]);\n\tNode.init([{prop: \"AddEventListener\", name: \"AddEventListener\", pkg: \"\", typ: $funcType([$String, $Bool, funcType$2], [funcType$1], false)}, {prop: \"AppendChild\", name: \"AppendChild\", pkg: \"\", typ: $funcType([Node], [], false)}, {prop: \"BaseURI\", name: \"BaseURI\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ChildNodes\", name: \"ChildNodes\", pkg: \"\", typ: $funcType([], [sliceType$1], false)}, {prop: \"CloneNode\", name: \"CloneNode\", pkg: \"\", typ: $funcType([$Bool], [Node], false)}, {prop: \"CompareDocumentPosition\", name: \"CompareDocumentPosition\", pkg: \"\", typ: $funcType([Node], [$Int], false)}, {prop: \"Contains\", name: \"Contains\", pkg: \"\", typ: $funcType([Node], [$Bool], false)}, {prop: \"FirstChild\", name: \"FirstChild\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"HasChildNodes\", name: \"HasChildNodes\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"InsertBefore\", name: \"InsertBefore\", pkg: \"\", typ: $funcType([Node, Node], [], false)}, {prop: \"IsDefaultNamespace\", name: \"IsDefaultNamespace\", pkg: \"\", typ: $funcType([$String], [$Bool], false)}, {prop: \"IsEqualNode\", name: \"IsEqualNode\", pkg: \"\", typ: $funcType([Node], [$Bool], false)}, {prop: \"LastChild\", name: \"LastChild\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"LookupNamespaceURI\", name: \"LookupNamespaceURI\", pkg: \"\", typ: $funcType([$String], [$String], false)}, {prop: \"LookupPrefix\", name: \"LookupPrefix\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"NextSibling\", name: \"NextSibling\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"NodeName\", name: \"NodeName\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"NodeType\", name: \"NodeType\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"NodeValue\", name: \"NodeValue\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Normalize\", name: \"Normalize\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"OwnerDocument\", name: \"OwnerDocument\", pkg: \"\", typ: $funcType([], [Document], false)}, {prop: \"ParentElement\", name: \"ParentElement\", pkg: \"\", typ: $funcType([], [Element], false)}, {prop: \"ParentNode\", name: \"ParentNode\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"PreviousSibling\", name: \"PreviousSibling\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"RemoveChild\", name: \"RemoveChild\", pkg: \"\", typ: $funcType([Node], [], false)}, {prop: \"RemoveEventListener\", name: \"RemoveEventListener\", pkg: \"\", typ: $funcType([$String, $Bool, funcType$1], [], false)}, {prop: \"ReplaceChild\", name: \"ReplaceChild\", pkg: \"\", typ: $funcType([Node, Node], [], false)}, {prop: \"SetNodeValue\", name: \"SetNodeValue\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"SetTextContent\", name: \"SetTextContent\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"TextContent\", name: \"TextContent\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Underlying\", name: \"Underlying\", pkg: \"\", typ: $funcType([], [ptrType$11], false)}]);\n\tBasicNode.init([{prop: \"Object\", name: \"\", pkg: \"\", typ: ptrType$11, tag: \"\"}]);\n\tElement.init([{prop: \"AddEventListener\", name: \"AddEventListener\", pkg: \"\", typ: $funcType([$String, $Bool, funcType$2], [funcType$1], false)}, {prop: \"AppendChild\", name: \"AppendChild\", pkg: \"\", typ: $funcType([Node], [], false)}, {prop: \"BaseURI\", name: \"BaseURI\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"ChildNodes\", name: \"ChildNodes\", pkg: \"\", typ: $funcType([], [sliceType$1], false)}, {prop: \"Class\", name: \"Class\", pkg: \"\", typ: $funcType([], [ptrType$19], false)}, {prop: \"CloneNode\", name: \"CloneNode\", pkg: \"\", typ: $funcType([$Bool], [Node], false)}, {prop: \"CompareDocumentPosition\", name: \"CompareDocumentPosition\", pkg: \"\", typ: $funcType([Node], [$Int], false)}, {prop: \"Contains\", name: \"Contains\", pkg: \"\", typ: $funcType([Node], [$Bool], false)}, {prop: \"FirstChild\", name: \"FirstChild\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"GetAttribute\", name: \"GetAttribute\", pkg: \"\", typ: $funcType([$String], [$String], false)}, {prop: \"GetAttributeNS\", name: \"GetAttributeNS\", pkg: \"\", typ: $funcType([$String, $String], [$String], false)}, {prop: \"GetBoundingClientRect\", name: \"GetBoundingClientRect\", pkg: \"\", typ: $funcType([], [ClientRect], false)}, {prop: \"GetElementsByClassName\", name: \"GetElementsByClassName\", pkg: \"\", typ: $funcType([$String], [sliceType$2], false)}, {prop: \"GetElementsByTagName\", name: \"GetElementsByTagName\", pkg: \"\", typ: $funcType([$String], [sliceType$2], false)}, {prop: \"GetElementsByTagNameNS\", name: \"GetElementsByTagNameNS\", pkg: \"\", typ: $funcType([$String, $String], [sliceType$2], false)}, {prop: \"HasAttribute\", name: \"HasAttribute\", pkg: \"\", typ: $funcType([$String], [$Bool], false)}, {prop: \"HasAttributeNS\", name: \"HasAttributeNS\", pkg: \"\", typ: $funcType([$String, $String], [$Bool], false)}, {prop: \"HasChildNodes\", name: \"HasChildNodes\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"ID\", name: \"ID\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"InnerHTML\", name: \"InnerHTML\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"InsertBefore\", name: \"InsertBefore\", pkg: \"\", typ: $funcType([Node, Node], [], false)}, {prop: \"IsDefaultNamespace\", name: \"IsDefaultNamespace\", pkg: \"\", typ: $funcType([$String], [$Bool], false)}, {prop: \"IsEqualNode\", name: \"IsEqualNode\", pkg: \"\", typ: $funcType([Node], [$Bool], false)}, {prop: \"LastChild\", name: \"LastChild\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"LookupNamespaceURI\", name: \"LookupNamespaceURI\", pkg: \"\", typ: $funcType([$String], [$String], false)}, {prop: \"LookupPrefix\", name: \"LookupPrefix\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"NextElementSibling\", name: \"NextElementSibling\", pkg: \"\", typ: $funcType([], [Element], false)}, {prop: \"NextSibling\", name: \"NextSibling\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"NodeName\", name: \"NodeName\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"NodeType\", name: \"NodeType\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"NodeValue\", name: \"NodeValue\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Normalize\", name: \"Normalize\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"OwnerDocument\", name: \"OwnerDocument\", pkg: \"\", typ: $funcType([], [Document], false)}, {prop: \"ParentElement\", name: \"ParentElement\", pkg: \"\", typ: $funcType([], [Element], false)}, {prop: \"ParentNode\", name: \"ParentNode\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"PreviousElementSibling\", name: \"PreviousElementSibling\", pkg: \"\", typ: $funcType([], [Element], false)}, {prop: \"PreviousSibling\", name: \"PreviousSibling\", pkg: \"\", typ: $funcType([], [Node], false)}, {prop: \"QuerySelector\", name: \"QuerySelector\", pkg: \"\", typ: $funcType([$String], [Element], false)}, {prop: \"QuerySelectorAll\", name: \"QuerySelectorAll\", pkg: \"\", typ: $funcType([$String], [sliceType$2], false)}, {prop: \"RemoveAttribute\", name: \"RemoveAttribute\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"RemoveAttributeNS\", name: \"RemoveAttributeNS\", pkg: \"\", typ: $funcType([$String, $String], [], false)}, {prop: \"RemoveChild\", name: \"RemoveChild\", pkg: \"\", typ: $funcType([Node], [], false)}, {prop: \"RemoveEventListener\", name: \"RemoveEventListener\", pkg: \"\", typ: $funcType([$String, $Bool, funcType$1], [], false)}, {prop: \"ReplaceChild\", name: \"ReplaceChild\", pkg: \"\", typ: $funcType([Node, Node], [], false)}, {prop: \"SetAttribute\", name: \"SetAttribute\", pkg: \"\", typ: $funcType([$String, $String], [], false)}, {prop: \"SetAttributeNS\", name: \"SetAttributeNS\", pkg: \"\", typ: $funcType([$String, $String, $String], [], false)}, {prop: \"SetID\", name: \"SetID\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"SetInnerHTML\", name: \"SetInnerHTML\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"SetNodeValue\", name: \"SetNodeValue\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"SetTextContent\", name: \"SetTextContent\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"TagName\", name: \"TagName\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"TextContent\", name: \"TextContent\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Underlying\", name: \"Underlying\", pkg: \"\", typ: $funcType([], [ptrType$11], false)}]);\n\tClientRect.init([{prop: \"Object\", name: \"\", pkg: \"\", typ: ptrType$11, tag: \"\"}, {prop: \"Height\", name: \"Height\", pkg: \"\", typ: $Int, tag: \"js:\\\"height\\\"\"}, {prop: \"Width\", name: \"Width\", pkg: \"\", typ: $Int, tag: \"js:\\\"width\\\"\"}, {prop: \"Left\", name: \"Left\", pkg: \"\", typ: $Int, tag: \"js:\\\"left\\\"\"}, {prop: \"Right\", name: \"Right\", pkg: \"\", typ: $Int, tag: \"js:\\\"right\\\"\"}, {prop: \"Top\", name: \"Top\", pkg: \"\", typ: $Int, tag: \"js:\\\"top\\\"\"}, {prop: \"Bottom\", name: \"Bottom\", pkg: \"\", typ: $Int, tag: \"js:\\\"bottom\\\"\"}]);\n\tBasicHTMLElement.init([{prop: \"BasicElement\", name: \"\", pkg: \"\", typ: ptrType$30, tag: \"\"}]);\n\tBasicElement.init([{prop: \"BasicNode\", name: \"\", pkg: \"\", typ: ptrType$21, tag: \"\"}]);\n\tHTMLAnchorElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"URLUtils\", name: \"\", pkg: \"\", typ: ptrType$1, tag: \"\"}, {prop: \"HrefLang\", name: \"HrefLang\", pkg: \"\", typ: $String, tag: \"js:\\\"hreflang\\\"\"}, {prop: \"Media\", name: \"Media\", pkg: \"\", typ: $String, tag: \"js:\\\"media\\\"\"}, {prop: \"TabIndex\", name: \"TabIndex\", pkg: \"\", typ: $Int, tag: \"js:\\\"tabIndex\\\"\"}, {prop: \"Target\", name: \"Target\", pkg: \"\", typ: $String, tag: \"js:\\\"target\\\"\"}, {prop: \"Text\", name: \"Text\", pkg: \"\", typ: $String, tag: \"js:\\\"text\\\"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: $String, tag: \"js:\\\"type\\\"\"}]);\n\tHTMLAppletElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Alt\", name: \"Alt\", pkg: \"\", typ: $String, tag: \"js:\\\"alt\\\"\"}, {prop: \"Coords\", name: \"Coords\", pkg: \"\", typ: $String, tag: \"js:\\\"coords\\\"\"}, {prop: \"HrefLang\", name: \"HrefLang\", pkg: \"\", typ: $String, tag: \"js:\\\"hreflang\\\"\"}, {prop: \"Media\", name: \"Media\", pkg: \"\", typ: $String, tag: \"js:\\\"media\\\"\"}, {prop: \"Search\", name: \"Search\", pkg: \"\", typ: $String, tag: \"js:\\\"search\\\"\"}, {prop: \"Shape\", name: \"Shape\", pkg: \"\", typ: $String, tag: \"js:\\\"shape\\\"\"}, {prop: \"TabIndex\", name: \"TabIndex\", pkg: \"\", typ: $Int, tag: \"js:\\\"tabIndex\\\"\"}, {prop: \"Target\", name: \"Target\", pkg: \"\", typ: $String, tag: \"js:\\\"target\\\"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: $String, tag: \"js:\\\"type\\\"\"}]);\n\tHTMLAreaElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"URLUtils\", name: \"\", pkg: \"\", typ: ptrType$1, tag: \"\"}, {prop: \"Alt\", name: \"Alt\", pkg: \"\", typ: $String, tag: \"js:\\\"alt\\\"\"}, {prop: \"Coords\", name: \"Coords\", pkg: \"\", typ: $String, tag: \"js:\\\"coords\\\"\"}, {prop: \"HrefLang\", name: \"HrefLang\", pkg: \"\", typ: $String, tag: \"js:\\\"hreflang\\\"\"}, {prop: \"Media\", name: \"Media\", pkg: \"\", typ: $String, tag: \"js:\\\"media\\\"\"}, {prop: \"Search\", name: \"Search\", pkg: \"\", typ: $String, tag: \"js:\\\"search\\\"\"}, {prop: \"Shape\", name: \"Shape\", pkg: \"\", typ: $String, tag: \"js:\\\"shape\\\"\"}, {prop: \"TabIndex\", name: \"TabIndex\", pkg: \"\", typ: $Int, tag: \"js:\\\"tabIndex\\\"\"}, {prop: \"Target\", name: \"Target\", pkg: \"\", typ: $String, tag: \"js:\\\"target\\\"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: $String, tag: \"js:\\\"type\\\"\"}]);\n\tHTMLAudioElement.init([{prop: \"HTMLMediaElement\", name: \"\", pkg: \"\", typ: ptrType$2, tag: \"\"}]);\n\tHTMLBRElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLBaseElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLBodyElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tValidityState.init([{prop: \"Object\", name: \"\", pkg: \"\", typ: ptrType$11, tag: \"\"}, {prop: \"CustomError\", name: \"CustomError\", pkg: \"\", typ: $Bool, tag: \"js:\\\"customError\\\"\"}, {prop: \"PatternMismatch\", name: \"PatternMismatch\", pkg: \"\", typ: $Bool, tag: \"js:\\\"patternMismatch\\\"\"}, {prop: \"RangeOverflow\", name: \"RangeOverflow\", pkg: \"\", typ: $Bool, tag: \"js:\\\"rangeOverflow\\\"\"}, {prop: \"RangeUnderflow\", name: \"RangeUnderflow\", pkg: \"\", typ: $Bool, tag: \"js:\\\"rangeUnderflow\\\"\"}, {prop: \"StepMismatch\", name: \"StepMismatch\", pkg: \"\", typ: $Bool, tag: \"js:\\\"stepMismatch\\\"\"}, {prop: \"TooLong\", name: \"TooLong\", pkg: \"\", typ: $Bool, tag: \"js:\\\"tooLong\\\"\"}, {prop: \"TypeMismatch\", name: \"TypeMismatch\", pkg: \"\", typ: $Bool, tag: \"js:\\\"typeMismatch\\\"\"}, {prop: \"Valid\", name: \"Valid\", pkg: \"\", typ: $Bool, tag: \"js:\\\"valid\\\"\"}, {prop: \"ValueMissing\", name: \"ValueMissing\", pkg: \"\", typ: $Bool, tag: \"js:\\\"valueMissing\\\"\"}]);\n\tHTMLButtonElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"AutoFocus\", name: \"AutoFocus\", pkg: \"\", typ: $Bool, tag: \"js:\\\"autofocus\\\"\"}, {prop: \"Disabled\", name: \"Disabled\", pkg: \"\", typ: $Bool, tag: \"js:\\\"disabled\\\"\"}, {prop: \"FormAction\", name: \"FormAction\", pkg: \"\", typ: $String, tag: \"js:\\\"formAction\\\"\"}, {prop: \"FormEncType\", name: \"FormEncType\", pkg: \"\", typ: $String, tag: \"js:\\\"formEncType\\\"\"}, {prop: \"FormMethod\", name: \"FormMethod\", pkg: \"\", typ: $String, tag: \"js:\\\"formMethod\\\"\"}, {prop: \"FormNoValidate\", name: \"FormNoValidate\", pkg: \"\", typ: $Bool, tag: \"js:\\\"formNoValidate\\\"\"}, {prop: \"FormTarget\", name: \"FormTarget\", pkg: \"\", typ: $String, tag: \"js:\\\"formTarget\\\"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $String, tag: \"js:\\\"name\\\"\"}, {prop: \"TabIndex\", name: \"TabIndex\", pkg: \"\", typ: $Int, tag: \"js:\\\"tabIndex\\\"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: $String, tag: \"js:\\\"type\\\"\"}, {prop: \"ValidationMessage\", name: \"ValidationMessage\", pkg: \"\", typ: $String, tag: \"js:\\\"validationMessage\\\"\"}, {prop: \"Value\", name: \"Value\", pkg: \"\", typ: $String, tag: \"js:\\\"value\\\"\"}, {prop: \"WillValidate\", name: \"WillValidate\", pkg: \"\", typ: $Bool, tag: \"js:\\\"willValidate\\\"\"}]);\n\tHTMLCanvasElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Height\", name: \"Height\", pkg: \"\", typ: $Int, tag: \"js:\\\"height\\\"\"}, {prop: \"Width\", name: \"Width\", pkg: \"\", typ: $Int, tag: \"js:\\\"width\\\"\"}]);\n\tCanvasRenderingContext2D.init([{prop: \"Object\", name: \"\", pkg: \"\", typ: ptrType$11, tag: \"\"}, {prop: \"FillStyle\", name: \"FillStyle\", pkg: \"\", typ: $String, tag: \"js:\\\"fillStyle\\\"\"}, {prop: \"StrokeStyle\", name: \"StrokeStyle\", pkg: \"\", typ: $String, tag: \"js:\\\"strokeStyle\\\"\"}, {prop: \"ShadowColor\", name: \"ShadowColor\", pkg: \"\", typ: $String, tag: \"js:\\\"shadowColor\\\"\"}, {prop: \"ShadowBlur\", name: \"ShadowBlur\", pkg: \"\", typ: $Int, tag: \"js:\\\"shadowBlur\\\"\"}, {prop: \"ShadowOffsetX\", name: \"ShadowOffsetX\", pkg: \"\", typ: $Int, tag: \"js:\\\"shadowOffsetX\\\"\"}, {prop: \"ShadowOffsetY\", name: \"ShadowOffsetY\", pkg: \"\", typ: $Int, tag: \"js:\\\"shadowOffsetY\\\"\"}, {prop: \"LineCap\", name: \"LineCap\", pkg: \"\", typ: $String, tag: \"js:\\\"lineCap\\\"\"}, {prop: \"LineJoin\", name: \"LineJoin\", pkg: \"\", typ: $String, tag: \"js:\\\"lineJoin\\\"\"}, {prop: \"LineWidth\", name: \"LineWidth\", pkg: \"\", typ: $Int, tag: \"js:\\\"lineWidth\\\"\"}, {prop: \"MiterLimit\", name: \"MiterLimit\", pkg: \"\", typ: $Int, tag: \"js:\\\"miterLimit\\\"\"}, {prop: \"Font\", name: \"Font\", pkg: \"\", typ: $String, tag: \"js:\\\"font\\\"\"}, {prop: \"TextAlign\", name: \"TextAlign\", pkg: \"\", typ: $String, tag: \"js:\\\"textAlign\\\"\"}, {prop: \"TextBaseline\", name: \"TextBaseline\", pkg: \"\", typ: $String, tag: \"js:\\\"textBaseline\\\"\"}, {prop: \"GlobalAlpha\", name: \"GlobalAlpha\", pkg: \"\", typ: $Float64, tag: \"js:\\\"globalAlpha\\\"\"}, {prop: \"GlobalCompositeOperation\", name: \"GlobalCompositeOperation\", pkg: \"\", typ: $String, tag: \"js:\\\"globalCompositeOperation\\\"\"}]);\n\tHTMLDListElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLDataElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Value\", name: \"Value\", pkg: \"\", typ: $String, tag: \"js:\\\"value\\\"\"}]);\n\tHTMLDataListElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLDirectoryElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLDivElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLEmbedElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Src\", name: \"Src\", pkg: \"\", typ: $String, tag: \"js:\\\"src\\\"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: $String, tag: \"js:\\\"type\\\"\"}, {prop: \"Width\", name: \"Width\", pkg: \"\", typ: $String, tag: \"js:\\\"width\\\"\"}]);\n\tHTMLFieldSetElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Disabled\", name: \"Disabled\", pkg: \"\", typ: $Bool, tag: \"js:\\\"disabled\\\"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $String, tag: \"js:\\\"name\\\"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: $String, tag: \"js:\\\"type\\\"\"}, {prop: \"ValidationMessage\", name: \"ValidationMessage\", pkg: \"\", typ: $String, tag: \"js:\\\"validationMessage\\\"\"}, {prop: \"WillValidate\", name: \"WillValidate\", pkg: \"\", typ: $Bool, tag: \"js:\\\"willValidate\\\"\"}]);\n\tHTMLFontElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLFormElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"AcceptCharset\", name: \"AcceptCharset\", pkg: \"\", typ: $String, tag: \"js:\\\"acceptCharset\\\"\"}, {prop: \"Action\", name: \"Action\", pkg: \"\", typ: $String, tag: \"js:\\\"action\\\"\"}, {prop: \"Autocomplete\", name: \"Autocomplete\", pkg: \"\", typ: $String, tag: \"js:\\\"autocomplete\\\"\"}, {prop: \"Encoding\", name: \"Encoding\", pkg: \"\", typ: $String, tag: \"js:\\\"encoding\\\"\"}, {prop: \"Enctype\", name: \"Enctype\", pkg: \"\", typ: $String, tag: \"js:\\\"enctype\\\"\"}, {prop: \"Length\", name: \"Length\", pkg: \"\", typ: $Int, tag: \"js:\\\"length\\\"\"}, {prop: \"Method\", name: \"Method\", pkg: \"\", typ: $String, tag: \"js:\\\"method\\\"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $String, tag: \"js:\\\"name\\\"\"}, {prop: \"NoValidate\", name: \"NoValidate\", pkg: \"\", typ: $Bool, tag: \"js:\\\"noValidate\\\"\"}, {prop: \"Target\", name: \"Target\", pkg: \"\", typ: $String, tag: \"js:\\\"target\\\"\"}]);\n\tHTMLFrameElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLFrameSetElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLHRElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLHeadElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLHeadingElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLHtmlElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLIFrameElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Width\", name: \"Width\", pkg: \"\", typ: $String, tag: \"js:\\\"width\\\"\"}, {prop: \"Height\", name: \"Height\", pkg: \"\", typ: $String, tag: \"js:\\\"height\\\"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $String, tag: \"js:\\\"name\\\"\"}, {prop: \"Src\", name: \"Src\", pkg: \"\", typ: $String, tag: \"js:\\\"src\\\"\"}, {prop: \"SrcDoc\", name: \"SrcDoc\", pkg: \"\", typ: $String, tag: \"js:\\\"srcdoc\\\"\"}, {prop: \"Seamless\", name: \"Seamless\", pkg: \"\", typ: $Bool, tag: \"js:\\\"seamless\\\"\"}]);\n\tHTMLImageElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Complete\", name: \"Complete\", pkg: \"\", typ: $Bool, tag: \"js:\\\"complete\\\"\"}, {prop: \"CrossOrigin\", name: \"CrossOrigin\", pkg: \"\", typ: $String, tag: \"js:\\\"crossOrigin\\\"\"}, {prop: \"Height\", name: \"Height\", pkg: \"\", typ: $Int, tag: \"js:\\\"height\\\"\"}, {prop: \"IsMap\", name: \"IsMap\", pkg: \"\", typ: $Bool, tag: \"js:\\\"isMap\\\"\"}, {prop: \"NaturalHeight\", name: \"NaturalHeight\", pkg: \"\", typ: $Int, tag: \"js:\\\"naturalHeight\\\"\"}, {prop: \"NaturalWidth\", name: \"NaturalWidth\", pkg: \"\", typ: $Int, tag: \"js:\\\"naturalWidth\\\"\"}, {prop: \"Src\", name: \"Src\", pkg: \"\", typ: $String, tag: \"js:\\\"src\\\"\"}, {prop: \"UseMap\", name: \"UseMap\", pkg: \"\", typ: $String, tag: \"js:\\\"useMap\\\"\"}, {prop: \"Width\", name: \"Width\", pkg: \"\", typ: $Int, tag: \"js:\\\"width\\\"\"}]);\n\tHTMLInputElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Accept\", name: \"Accept\", pkg: \"\", typ: $String, tag: \"js:\\\"accept\\\"\"}, {prop: \"Alt\", name: \"Alt\", pkg: \"\", typ: $String, tag: \"js:\\\"alt\\\"\"}, {prop: \"Autocomplete\", name: \"Autocomplete\", pkg: \"\", typ: $String, tag: \"js:\\\"autocomplete\\\"\"}, {prop: \"Autofocus\", name: \"Autofocus\", pkg: \"\", typ: $Bool, tag: \"js:\\\"autofocus\\\"\"}, {prop: \"Checked\", name: \"Checked\", pkg: \"\", typ: $Bool, tag: \"js:\\\"checked\\\"\"}, {prop: \"DefaultChecked\", name: \"DefaultChecked\", pkg: \"\", typ: $Bool, tag: \"js:\\\"defaultChecked\\\"\"}, {prop: \"DefaultValue\", name: \"DefaultValue\", pkg: \"\", typ: $String, tag: \"js:\\\"defaultValue\\\"\"}, {prop: \"DirName\", name: \"DirName\", pkg: \"\", typ: $String, tag: \"js:\\\"dirName\\\"\"}, {prop: \"Disabled\", name: \"Disabled\", pkg: \"\", typ: $Bool, tag: \"js:\\\"disabled\\\"\"}, {prop: \"FormAction\", name: \"FormAction\", pkg: \"\", typ: $String, tag: \"js:\\\"formAction\\\"\"}, {prop: \"FormEncType\", name: \"FormEncType\", pkg: \"\", typ: $String, tag: \"js:\\\"formEncType\\\"\"}, {prop: \"FormMethod\", name: \"FormMethod\", pkg: \"\", typ: $String, tag: \"js:\\\"formMethod\\\"\"}, {prop: \"FormNoValidate\", name: \"FormNoValidate\", pkg: \"\", typ: $Bool, tag: \"js:\\\"formNoValidate\\\"\"}, {prop: \"FormTarget\", name: \"FormTarget\", pkg: \"\", typ: $String, tag: \"js:\\\"formTarget\\\"\"}, {prop: \"Height\", name: \"Height\", pkg: \"\", typ: $String, tag: \"js:\\\"height\\\"\"}, {prop: \"Indeterminate\", name: \"Indeterminate\", pkg: \"\", typ: $Bool, tag: \"js:\\\"indeterminate\\\"\"}, {prop: \"Max\", name: \"Max\", pkg: \"\", typ: $String, tag: \"js:\\\"max\\\"\"}, {prop: \"MaxLength\", name: \"MaxLength\", pkg: \"\", typ: $Int, tag: \"js:\\\"maxLength\\\"\"}, {prop: \"Min\", name: \"Min\", pkg: \"\", typ: $String, tag: \"js:\\\"min\\\"\"}, {prop: \"Multiple\", name: \"Multiple\", pkg: \"\", typ: $Bool, tag: \"js:\\\"multiple\\\"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $String, tag: \"js:\\\"name\\\"\"}, {prop: \"Pattern\", name: \"Pattern\", pkg: \"\", typ: $String, tag: \"js:\\\"pattern\\\"\"}, {prop: \"Placeholder\", name: \"Placeholder\", pkg: \"\", typ: $String, tag: \"js:\\\"placeholder\\\"\"}, {prop: \"ReadOnly\", name: \"ReadOnly\", pkg: \"\", typ: $Bool, tag: \"js:\\\"readOnly\\\"\"}, {prop: \"Required\", name: \"Required\", pkg: \"\", typ: $Bool, tag: \"js:\\\"required\\\"\"}, {prop: \"SelectionDirection\", name: \"SelectionDirection\", pkg: \"\", typ: $String, tag: \"js:\\\"selectionDirection\\\"\"}, {prop: \"SelectionEnd\", name: \"SelectionEnd\", pkg: \"\", typ: $Int, tag: \"js:\\\"selectionEnd\\\"\"}, {prop: \"SelectionStart\", name: \"SelectionStart\", pkg: \"\", typ: $Int, tag: \"js:\\\"selectionStart\\\"\"}, {prop: \"Size\", name: \"Size\", pkg: \"\", typ: $Int, tag: \"js:\\\"size\\\"\"}, {prop: \"Src\", name: \"Src\", pkg: \"\", typ: $String, tag: \"js:\\\"src\\\"\"}, {prop: \"Step\", name: \"Step\", pkg: \"\", typ: $String, tag: \"js:\\\"step\\\"\"}, {prop: \"TabIndex\", name: \"TabIndex\", pkg: \"\", typ: $Int, tag: \"js:\\\"tabIndex\\\"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: $String, tag: \"js:\\\"type\\\"\"}, {prop: \"ValidationMessage\", name: \"ValidationMessage\", pkg: \"\", typ: $String, tag: \"js:\\\"validationMessage\\\"\"}, {prop: \"Value\", name: \"Value\", pkg: \"\", typ: $String, tag: \"js:\\\"value\\\"\"}, {prop: \"ValueAsDate\", name: \"ValueAsDate\", pkg: \"\", typ: time.Time, tag: \"js:\\\"valueAsDate\\\"\"}, {prop: \"ValueAsNumber\", name: \"ValueAsNumber\", pkg: \"\", typ: $Float64, tag: \"js:\\\"valueAsNumber\\\"\"}, {prop: \"Width\", name: \"Width\", pkg: \"\", typ: $String, tag: \"js:\\\"width\\\"\"}, {prop: \"WillValidate\", name: \"WillValidate\", pkg: \"\", typ: $Bool, tag: \"js:\\\"willValidate\\\"\"}]);\n\tFile.init([{prop: \"Object\", name: \"\", pkg: \"\", typ: ptrType$11, tag: \"\"}]);\n\tHTMLKeygenElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Autofocus\", name: \"Autofocus\", pkg: \"\", typ: $Bool, tag: \"js:\\\"autofocus\\\"\"}, {prop: \"Challenge\", name: \"Challenge\", pkg: \"\", typ: $String, tag: \"js:\\\"challenge\\\"\"}, {prop: \"Disabled\", name: \"Disabled\", pkg: \"\", typ: $Bool, tag: \"js:\\\"disabled\\\"\"}, {prop: \"Keytype\", name: \"Keytype\", pkg: \"\", typ: $String, tag: \"js:\\\"keytype\\\"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $String, tag: \"js:\\\"name\\\"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: $String, tag: \"js:\\\"type\\\"\"}, {prop: \"ValidationMessage\", name: \"ValidationMessage\", pkg: \"\", typ: $String, tag: \"js:\\\"validationMessage\\\"\"}, {prop: \"WillValidate\", name: \"WillValidate\", pkg: \"\", typ: $Bool, tag: \"js:\\\"willValidate\\\"\"}]);\n\tHTMLLIElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Value\", name: \"Value\", pkg: \"\", typ: $Int, tag: \"js:\\\"value\\\"\"}]);\n\tHTMLLabelElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"For\", name: \"For\", pkg: \"\", typ: $String, tag: \"js:\\\"htmlFor\\\"\"}]);\n\tHTMLLegendElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLLinkElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Disabled\", name: \"Disabled\", pkg: \"\", typ: $Bool, tag: \"js:\\\"disabled\\\"\"}, {prop: \"Href\", name: \"Href\", pkg: \"\", typ: $String, tag: \"js:\\\"href\\\"\"}, {prop: \"HrefLang\", name: \"HrefLang\", pkg: \"\", typ: $String, tag: \"js:\\\"hrefLang\\\"\"}, {prop: \"Media\", name: \"Media\", pkg: \"\", typ: $String, tag: \"js:\\\"media\\\"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: $String, tag: \"js:\\\"type\\\"\"}]);\n\tHTMLMapElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $String, tag: \"js:\\\"name\\\"\"}]);\n\tHTMLMediaElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLMenuElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLMetaElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Content\", name: \"Content\", pkg: \"\", typ: $String, tag: \"js:\\\"content\\\"\"}, {prop: \"HTTPEquiv\", name: \"HTTPEquiv\", pkg: \"\", typ: $String, tag: \"js:\\\"httpEquiv\\\"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $String, tag: \"js:\\\"name\\\"\"}]);\n\tHTMLMeterElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"High\", name: \"High\", pkg: \"\", typ: $Float64, tag: \"js:\\\"high\\\"\"}, {prop: \"Low\", name: \"Low\", pkg: \"\", typ: $Float64, tag: \"js:\\\"low\\\"\"}, {prop: \"Max\", name: \"Max\", pkg: \"\", typ: $Float64, tag: \"js:\\\"max\\\"\"}, {prop: \"Min\", name: \"Min\", pkg: \"\", typ: $Float64, tag: \"js:\\\"min\\\"\"}, {prop: \"Optimum\", name: \"Optimum\", pkg: \"\", typ: $Float64, tag: \"js:\\\"optimum\\\"\"}]);\n\tHTMLModElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Cite\", name: \"Cite\", pkg: \"\", typ: $String, tag: \"js:\\\"cite\\\"\"}, {prop: \"DateTime\", name: \"DateTime\", pkg: \"\", typ: $String, tag: \"js:\\\"dateTime\\\"\"}]);\n\tHTMLOListElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Reversed\", name: \"Reversed\", pkg: \"\", typ: $Bool, tag: \"js:\\\"reversed\\\"\"}, {prop: \"Start\", name: \"Start\", pkg: \"\", typ: $Int, tag: \"js:\\\"start\\\"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: $String, tag: \"js:\\\"type\\\"\"}]);\n\tHTMLObjectElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Data\", name: \"Data\", pkg: \"\", typ: $String, tag: \"js:\\\"data\\\"\"}, {prop: \"Height\", name: \"Height\", pkg: \"\", typ: $String, tag: \"js:\\\"height\\\"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $String, tag: \"js:\\\"name\\\"\"}, {prop: \"TabIndex\", name: \"TabIndex\", pkg: \"\", typ: $Int, tag: \"js:\\\"tabIndex\\\"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: $String, tag: \"js:\\\"type\\\"\"}, {prop: \"TypeMustMatch\", name: \"TypeMustMatch\", pkg: \"\", typ: $Bool, tag: \"js:\\\"typeMustMatch\\\"\"}, {prop: \"UseMap\", name: \"UseMap\", pkg: \"\", typ: $String, tag: \"js:\\\"useMap\\\"\"}, {prop: \"ValidationMessage\", name: \"ValidationMessage\", pkg: \"\", typ: $String, tag: \"js:\\\"validationMessage\\\"\"}, {prop: \"With\", name: \"With\", pkg: \"\", typ: $String, tag: \"js:\\\"with\\\"\"}, {prop: \"WillValidate\", name: \"WillValidate\", pkg: \"\", typ: $Bool, tag: \"js:\\\"willValidate\\\"\"}]);\n\tHTMLOptGroupElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Disabled\", name: \"Disabled\", pkg: \"\", typ: $Bool, tag: \"js:\\\"disabled\\\"\"}, {prop: \"Label\", name: \"Label\", pkg: \"\", typ: $String, tag: \"js:\\\"label\\\"\"}]);\n\tHTMLOptionElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"DefaultSelected\", name: \"DefaultSelected\", pkg: \"\", typ: $Bool, tag: \"js:\\\"defaultSelected\\\"\"}, {prop: \"Disabled\", name: \"Disabled\", pkg: \"\", typ: $Bool, tag: \"js:\\\"disabled\\\"\"}, {prop: \"Index\", name: \"Index\", pkg: \"\", typ: $Int, tag: \"js:\\\"index\\\"\"}, {prop: \"Label\", name: \"Label\", pkg: \"\", typ: $String, tag: \"js:\\\"label\\\"\"}, {prop: \"Selected\", name: \"Selected\", pkg: \"\", typ: $Bool, tag: \"js:\\\"selected\\\"\"}, {prop: \"Text\", name: \"Text\", pkg: \"\", typ: $String, tag: \"js:\\\"text\\\"\"}, {prop: \"Value\", name: \"Value\", pkg: \"\", typ: $String, tag: \"js:\\\"value\\\"\"}]);\n\tHTMLOutputElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"DefaultValue\", name: \"DefaultValue\", pkg: \"\", typ: $String, tag: \"js:\\\"defaultValue\\\"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $String, tag: \"js:\\\"name\\\"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: $String, tag: \"js:\\\"type\\\"\"}, {prop: \"ValidationMessage\", name: \"ValidationMessage\", pkg: \"\", typ: $String, tag: \"js:\\\"validationMessage\\\"\"}, {prop: \"Value\", name: \"Value\", pkg: \"\", typ: $String, tag: \"js:\\\"value\\\"\"}, {prop: \"WillValidate\", name: \"WillValidate\", pkg: \"\", typ: $Bool, tag: \"js:\\\"willValidate\\\"\"}]);\n\tHTMLParagraphElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLParamElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $String, tag: \"js:\\\"name\\\"\"}, {prop: \"Value\", name: \"Value\", pkg: \"\", typ: $String, tag: \"js:\\\"value\\\"\"}]);\n\tHTMLPreElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLProgressElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Max\", name: \"Max\", pkg: \"\", typ: $Float64, tag: \"js:\\\"max\\\"\"}, {prop: \"Position\", name: \"Position\", pkg: \"\", typ: $Float64, tag: \"js:\\\"position\\\"\"}, {prop: \"Value\", name: \"Value\", pkg: \"\", typ: $Float64, tag: \"js:\\\"value\\\"\"}]);\n\tHTMLQuoteElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Cite\", name: \"Cite\", pkg: \"\", typ: $String, tag: \"js:\\\"cite\\\"\"}]);\n\tHTMLScriptElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: $String, tag: \"js:\\\"type\\\"\"}, {prop: \"Src\", name: \"Src\", pkg: \"\", typ: $String, tag: \"js:\\\"src\\\"\"}, {prop: \"Charset\", name: \"Charset\", pkg: \"\", typ: $String, tag: \"js:\\\"charset\\\"\"}, {prop: \"Async\", name: \"Async\", pkg: \"\", typ: $Bool, tag: \"js:\\\"async\\\"\"}, {prop: \"Defer\", name: \"Defer\", pkg: \"\", typ: $Bool, tag: \"js:\\\"defer\\\"\"}, {prop: \"Text\", name: \"Text\", pkg: \"\", typ: $String, tag: \"js:\\\"text\\\"\"}]);\n\tHTMLSelectElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Autofocus\", name: \"Autofocus\", pkg: \"\", typ: $Bool, tag: \"js:\\\"autofocus\\\"\"}, {prop: \"Disabled\", name: \"Disabled\", pkg: \"\", typ: $Bool, tag: \"js:\\\"disabled\\\"\"}, {prop: \"Length\", name: \"Length\", pkg: \"\", typ: $Int, tag: \"js:\\\"length\\\"\"}, {prop: \"Multiple\", name: \"Multiple\", pkg: \"\", typ: $Bool, tag: \"js:\\\"multiple\\\"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $String, tag: \"js:\\\"name\\\"\"}, {prop: \"Required\", name: \"Required\", pkg: \"\", typ: $Bool, tag: \"js:\\\"required\\\"\"}, {prop: \"SelectedIndex\", name: \"SelectedIndex\", pkg: \"\", typ: $Int, tag: \"js:\\\"selectedIndex\\\"\"}, {prop: \"Size\", name: \"Size\", pkg: \"\", typ: $Int, tag: \"js:\\\"size\\\"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: $String, tag: \"js:\\\"type\\\"\"}, {prop: \"ValidationMessage\", name: \"ValidationMessage\", pkg: \"\", typ: $String, tag: \"js:\\\"validationMessage\\\"\"}, {prop: \"Value\", name: \"Value\", pkg: \"\", typ: $String, tag: \"js:\\\"value\\\"\"}, {prop: \"WillValidate\", name: \"WillValidate\", pkg: \"\", typ: $Bool, tag: \"js:\\\"willValidate\\\"\"}]);\n\tHTMLSourceElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Media\", name: \"Media\", pkg: \"\", typ: $String, tag: \"js:\\\"media\\\"\"}, {prop: \"Src\", name: \"Src\", pkg: \"\", typ: $String, tag: \"js:\\\"src\\\"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: $String, tag: \"js:\\\"type\\\"\"}]);\n\tHTMLSpanElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLStyleElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLTableCaptionElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLTableCellElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"ColSpan\", name: \"ColSpan\", pkg: \"\", typ: $Int, tag: \"js:\\\"colSpan\\\"\"}, {prop: \"RowSpan\", name: \"RowSpan\", pkg: \"\", typ: $Int, tag: \"js:\\\"rowSpan\\\"\"}, {prop: \"CellIndex\", name: \"CellIndex\", pkg: \"\", typ: $Int, tag: \"js:\\\"cellIndex\\\"\"}]);\n\tHTMLTableColElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Span\", name: \"Span\", pkg: \"\", typ: $Int, tag: \"js:\\\"span\\\"\"}]);\n\tHTMLTableDataCellElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLTableElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLTableHeaderCellElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Abbr\", name: \"Abbr\", pkg: \"\", typ: $String, tag: \"js:\\\"abbr\\\"\"}, {prop: \"Scope\", name: \"Scope\", pkg: \"\", typ: $String, tag: \"js:\\\"scope\\\"\"}]);\n\tHTMLTableRowElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"RowIndex\", name: \"RowIndex\", pkg: \"\", typ: $Int, tag: \"js:\\\"rowIndex\\\"\"}, {prop: \"SectionRowIndex\", name: \"SectionRowIndex\", pkg: \"\", typ: $Int, tag: \"js:\\\"sectionRowIndex\\\"\"}]);\n\tHTMLTableSectionElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLTextAreaElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Autocomplete\", name: \"Autocomplete\", pkg: \"\", typ: $String, tag: \"js:\\\"autocomplete\\\"\"}, {prop: \"Autofocus\", name: \"Autofocus\", pkg: \"\", typ: $Bool, tag: \"js:\\\"autofocus\\\"\"}, {prop: \"Cols\", name: \"Cols\", pkg: \"\", typ: $Int, tag: \"js:\\\"cols\\\"\"}, {prop: \"DefaultValue\", name: \"DefaultValue\", pkg: \"\", typ: $String, tag: \"js:\\\"defaultValue\\\"\"}, {prop: \"DirName\", name: \"DirName\", pkg: \"\", typ: $String, tag: \"js:\\\"dirName\\\"\"}, {prop: \"Disabled\", name: \"Disabled\", pkg: \"\", typ: $Bool, tag: \"js:\\\"disabled\\\"\"}, {prop: \"MaxLength\", name: \"MaxLength\", pkg: \"\", typ: $Int, tag: \"js:\\\"maxLength\\\"\"}, {prop: \"Name\", name: \"Name\", pkg: \"\", typ: $String, tag: \"js:\\\"name\\\"\"}, {prop: \"Placeholder\", name: \"Placeholder\", pkg: \"\", typ: $String, tag: \"js:\\\"placeholder\\\"\"}, {prop: \"ReadOnly\", name: \"ReadOnly\", pkg: \"\", typ: $Bool, tag: \"js:\\\"readOnly\\\"\"}, {prop: \"Required\", name: \"Required\", pkg: \"\", typ: $Bool, tag: \"js:\\\"required\\\"\"}, {prop: \"Rows\", name: \"Rows\", pkg: \"\", typ: $Int, tag: \"js:\\\"rows\\\"\"}, {prop: \"SelectionDirection\", name: \"SelectionDirection\", pkg: \"\", typ: $String, tag: \"js:\\\"selectionDirection\\\"\"}, {prop: \"SelectionStart\", name: \"SelectionStart\", pkg: \"\", typ: $Int, tag: \"js:\\\"selectionStart\\\"\"}, {prop: \"SelectionEnd\", name: \"SelectionEnd\", pkg: \"\", typ: $Int, tag: \"js:\\\"selectionEnd\\\"\"}, {prop: \"TabIndex\", name: \"TabIndex\", pkg: \"\", typ: $Int, tag: \"js:\\\"tabIndex\\\"\"}, {prop: \"TextLength\", name: \"TextLength\", pkg: \"\", typ: $Int, tag: \"js:\\\"textLength\\\"\"}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: $String, tag: \"js:\\\"type\\\"\"}, {prop: \"ValidationMessage\", name: \"ValidationMessage\", pkg: \"\", typ: $String, tag: \"js:\\\"validationMessage\\\"\"}, {prop: \"Value\", name: \"Value\", pkg: \"\", typ: $String, tag: \"js:\\\"value\\\"\"}, {prop: \"WillValidate\", name: \"WillValidate\", pkg: \"\", typ: $Bool, tag: \"js:\\\"willValidate\\\"\"}, {prop: \"Wrap\", name: \"Wrap\", pkg: \"\", typ: $String, tag: \"js:\\\"wrap\\\"\"}]);\n\tHTMLTimeElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"DateTime\", name: \"DateTime\", pkg: \"\", typ: $String, tag: \"js:\\\"dateTime\\\"\"}]);\n\tHTMLTitleElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Text\", name: \"Text\", pkg: \"\", typ: $String, tag: \"js:\\\"text\\\"\"}]);\n\tTextTrack.init([{prop: \"Object\", name: \"\", pkg: \"\", typ: ptrType$11, tag: \"\"}]);\n\tHTMLTrackElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}, {prop: \"Kind\", name: \"Kind\", pkg: \"\", typ: $String, tag: \"js:\\\"kind\\\"\"}, {prop: \"Src\", name: \"Src\", pkg: \"\", typ: $String, tag: \"js:\\\"src\\\"\"}, {prop: \"Srclang\", name: \"Srclang\", pkg: \"\", typ: $String, tag: \"js:\\\"srclang\\\"\"}, {prop: \"Label\", name: \"Label\", pkg: \"\", typ: $String, tag: \"js:\\\"label\\\"\"}, {prop: \"Default\", name: \"Default\", pkg: \"\", typ: $Bool, tag: \"js:\\\"default\\\"\"}, {prop: \"ReadyState\", name: \"ReadyState\", pkg: \"\", typ: $Int, tag: \"js:\\\"readyState\\\"\"}]);\n\tHTMLUListElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLUnknownElement.init([{prop: \"BasicHTMLElement\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tHTMLVideoElement.init([{prop: \"HTMLMediaElement\", name: \"\", pkg: \"\", typ: ptrType$2, tag: \"\"}]);\n\tCSSStyleDeclaration.init([{prop: \"Object\", name: \"\", pkg: \"\", typ: ptrType$11, tag: \"\"}]);\n\tText.init([{prop: \"BasicNode\", name: \"\", pkg: \"\", typ: ptrType$21, tag: \"\"}]);\n\tEvent.init([{prop: \"Bubbles\", name: \"Bubbles\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Cancelable\", name: \"Cancelable\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"CurrentTarget\", name: \"CurrentTarget\", pkg: \"\", typ: $funcType([], [Element], false)}, {prop: \"DefaultPrevented\", name: \"DefaultPrevented\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"EventPhase\", name: \"EventPhase\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"PreventDefault\", name: \"PreventDefault\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"StopImmediatePropagation\", name: \"StopImmediatePropagation\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"StopPropagation\", name: \"StopPropagation\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"Target\", name: \"Target\", pkg: \"\", typ: $funcType([], [Element], false)}, {prop: \"Timestamp\", name: \"Timestamp\", pkg: \"\", typ: $funcType([], [time.Time], false)}, {prop: \"Type\", name: \"Type\", pkg: \"\", typ: $funcType([], [$String], false)}]);\n\tBasicEvent.init([{prop: \"Object\", name: \"\", pkg: \"\", typ: ptrType$11, tag: \"\"}]);\n\tAnimationEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tAudioProcessingEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tBeforeInputEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tBeforeUnloadEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tBlobEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tClipboardEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tCloseEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}, {prop: \"Code\", name: \"Code\", pkg: \"\", typ: $Int, tag: \"js:\\\"code\\\"\"}, {prop: \"Reason\", name: \"Reason\", pkg: \"\", typ: $String, tag: \"js:\\\"reason\\\"\"}, {prop: \"WasClean\", name: \"WasClean\", pkg: \"\", typ: $Bool, tag: \"js:\\\"wasClean\\\"\"}]);\n\tCompositionEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tCSSFontFaceLoadEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tCustomEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tDeviceLightEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tDeviceMotionEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tDeviceOrientationEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tDeviceProximityEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tDOMTransactionEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tDragEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tEditingBeforeInputEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tErrorEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tFocusEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tGamepadEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tHashChangeEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tIDBVersionChangeEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tKeyboardEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}, {prop: \"AltKey\", name: \"AltKey\", pkg: \"\", typ: $Bool, tag: \"js:\\\"altKey\\\"\"}, {prop: \"CharCode\", name: \"CharCode\", pkg: \"\", typ: $Int, tag: \"js:\\\"charCode\\\"\"}, {prop: \"CtrlKey\", name: \"CtrlKey\", pkg: \"\", typ: $Bool, tag: \"js:\\\"ctrlKey\\\"\"}, {prop: \"Key\", name: \"Key\", pkg: \"\", typ: $String, tag: \"js:\\\"key\\\"\"}, {prop: \"KeyIdentifier\", name: \"KeyIdentifier\", pkg: \"\", typ: $String, tag: \"js:\\\"keyIdentifier\\\"\"}, {prop: \"KeyCode\", name: \"KeyCode\", pkg: \"\", typ: $Int, tag: \"js:\\\"keyCode\\\"\"}, {prop: \"Locale\", name: \"Locale\", pkg: \"\", typ: $String, tag: \"js:\\\"locale\\\"\"}, {prop: \"Location\", name: \"Location\", pkg: \"\", typ: $Int, tag: \"js:\\\"location\\\"\"}, {prop: \"KeyLocation\", name: \"KeyLocation\", pkg: \"\", typ: $Int, tag: \"js:\\\"keyLocation\\\"\"}, {prop: \"MetaKey\", name: \"MetaKey\", pkg: \"\", typ: $Bool, tag: \"js:\\\"metaKey\\\"\"}, {prop: \"Repeat\", name: \"Repeat\", pkg: \"\", typ: $Bool, tag: \"js:\\\"repeat\\\"\"}, {prop: \"ShiftKey\", name: \"ShiftKey\", pkg: \"\", typ: $Bool, tag: \"js:\\\"shiftKey\\\"\"}]);\n\tMediaStreamEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tMessageEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}, {prop: \"Data\", name: \"Data\", pkg: \"\", typ: ptrType$11, tag: \"js:\\\"data\\\"\"}]);\n\tMouseEvent.init([{prop: \"UIEvent\", name: \"\", pkg: \"\", typ: ptrType$18, tag: \"\"}, {prop: \"AltKey\", name: \"AltKey\", pkg: \"\", typ: $Bool, tag: \"js:\\\"altKey\\\"\"}, {prop: \"Button\", name: \"Button\", pkg: \"\", typ: $Int, tag: \"js:\\\"button\\\"\"}, {prop: \"ClientX\", name: \"ClientX\", pkg: \"\", typ: $Int, tag: \"js:\\\"clientX\\\"\"}, {prop: \"ClientY\", name: \"ClientY\", pkg: \"\", typ: $Int, tag: \"js:\\\"clientY\\\"\"}, {prop: \"CtrlKey\", name: \"CtrlKey\", pkg: \"\", typ: $Bool, tag: \"js:\\\"ctrlKey\\\"\"}, {prop: \"MetaKey\", name: \"MetaKey\", pkg: \"\", typ: $Bool, tag: \"js:\\\"metaKey\\\"\"}, {prop: \"MovementX\", name: \"MovementX\", pkg: \"\", typ: $Int, tag: \"js:\\\"movementX\\\"\"}, {prop: \"MovementY\", name: \"MovementY\", pkg: \"\", typ: $Int, tag: \"js:\\\"movementY\\\"\"}, {prop: \"ScreenX\", name: \"ScreenX\", pkg: \"\", typ: $Int, tag: \"js:\\\"screenX\\\"\"}, {prop: \"ScreenY\", name: \"ScreenY\", pkg: \"\", typ: $Int, tag: \"js:\\\"screenY\\\"\"}, {prop: \"ShiftKey\", name: \"ShiftKey\", pkg: \"\", typ: $Bool, tag: \"js:\\\"shiftKey\\\"\"}]);\n\tMutationEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tOfflineAudioCompletionEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tPageTransitionEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tPointerEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tPopStateEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tProgressEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tRelatedEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tRTCPeerConnectionIceEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tSensorEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tStorageEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tSVGEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tSVGZoomEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tTimeEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tTouchEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tTrackEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tTransitionEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tUIEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tUserProximityEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}]);\n\tWheelEvent.init([{prop: \"BasicEvent\", name: \"\", pkg: \"\", typ: ptrType$17, tag: \"\"}, {prop: \"DeltaX\", name: \"DeltaX\", pkg: \"\", typ: $Float64, tag: \"js:\\\"deltaX\\\"\"}, {prop: \"DeltaY\", name: \"DeltaY\", pkg: \"\", typ: $Float64, tag: \"js:\\\"deltaY\\\"\"}, {prop: \"DeltaZ\", name: \"DeltaZ\", pkg: \"\", typ: $Float64, tag: \"js:\\\"deltaZ\\\"\"}, {prop: \"DeltaMode\", name: \"DeltaMode\", pkg: \"\", typ: $Int, tag: \"js:\\\"deltaMode\\\"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = strings.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = time.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"honnef.co/go/js/util\"] = (function() {\n\tvar $pkg = {}, $init, js, EventTarget, ptrType, funcType;\n\tjs = $packages[\"github.com/gopherjs/gopherjs/js\"];\n\tEventTarget = $pkg.EventTarget = $newType(0, $kindStruct, \"util.EventTarget\", \"EventTarget\", \"honnef.co/go/js/util\", function(Object_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Object = null;\n\t\t\treturn;\n\t\t}\n\t\tthis.Object = Object_;\n\t});\n\tptrType = $ptrType(js.Object);\n\tfuncType = $funcType([ptrType], [], false);\n\tEventTarget.ptr.prototype.AddEventListener = function(typ, useCapture, listener) {\n\t\tvar $ptr, listener, t, typ, useCapture;\n\t\tt = $clone(this, EventTarget);\n\t\tt.Object.addEventListener($externalize(typ, $String), $externalize(listener, funcType), $externalize(useCapture, $Bool));\n\t};\n\tEventTarget.prototype.AddEventListener = function(typ, useCapture, listener) { return this.$val.AddEventListener(typ, useCapture, listener); };\n\tEventTarget.ptr.prototype.RemoveEventListener = function(typ, useCapture, listener) {\n\t\tvar $ptr, listener, t, typ, useCapture;\n\t\tt = $clone(this, EventTarget);\n\t\tt.Object.removeEventListener($externalize(typ, $String), $externalize(listener, funcType), $externalize(useCapture, $Bool));\n\t};\n\tEventTarget.prototype.RemoveEventListener = function(typ, useCapture, listener) { return this.$val.RemoveEventListener(typ, useCapture, listener); };\n\tEventTarget.methods = [{prop: \"AddEventListener\", name: \"AddEventListener\", pkg: \"\", typ: $funcType([$String, $Bool, funcType], [], false)}, {prop: \"RemoveEventListener\", name: \"RemoveEventListener\", pkg: \"\", typ: $funcType([$String, $Bool, funcType], [], false)}];\n\tEventTarget.init([{prop: \"Object\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"flag\"] = (function() {\n\tvar $pkg = {}, $init, errors, fmt, io, os, sort, strconv, time, boolValue, boolFlag, intValue, int64Value, uintValue, uint64Value, stringValue, float64Value, durationValue, Value, ErrorHandling, FlagSet, Flag, sliceType, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, sliceType$1, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, sliceType$2, funcType, ptrType$17, funcType$1, mapType, x, newBoolValue, newIntValue, newInt64Value, newUintValue, newUint64Value, newStringValue, newFloat64Value, newDurationValue, sortFlags, PrintDefaults, defaultUsage, Bool, Int, String, Duration, NewFlagSet;\n\terrors = $packages[\"errors\"];\n\tfmt = $packages[\"fmt\"];\n\tio = $packages[\"io\"];\n\tos = $packages[\"os\"];\n\tsort = $packages[\"sort\"];\n\tstrconv = $packages[\"strconv\"];\n\ttime = $packages[\"time\"];\n\tboolValue = $pkg.boolValue = $newType(1, $kindBool, \"flag.boolValue\", \"boolValue\", \"flag\", null);\n\tboolFlag = $pkg.boolFlag = $newType(8, $kindInterface, \"flag.boolFlag\", \"boolFlag\", \"flag\", null);\n\tintValue = $pkg.intValue = $newType(4, $kindInt, \"flag.intValue\", \"intValue\", \"flag\", null);\n\tint64Value = $pkg.int64Value = $newType(8, $kindInt64, \"flag.int64Value\", \"int64Value\", \"flag\", null);\n\tuintValue = $pkg.uintValue = $newType(4, $kindUint, \"flag.uintValue\", \"uintValue\", \"flag\", null);\n\tuint64Value = $pkg.uint64Value = $newType(8, $kindUint64, \"flag.uint64Value\", \"uint64Value\", \"flag\", null);\n\tstringValue = $pkg.stringValue = $newType(8, $kindString, \"flag.stringValue\", \"stringValue\", \"flag\", null);\n\tfloat64Value = $pkg.float64Value = $newType(8, $kindFloat64, \"flag.float64Value\", \"float64Value\", \"flag\", null);\n\tdurationValue = $pkg.durationValue = $newType(8, $kindInt64, \"flag.durationValue\", \"durationValue\", \"flag\", null);\n\tValue = $pkg.Value = $newType(8, $kindInterface, \"flag.Value\", \"Value\", \"flag\", null);\n\tErrorHandling = $pkg.ErrorHandling = $newType(4, $kindInt, \"flag.ErrorHandling\", \"ErrorHandling\", \"flag\", null);\n\tFlagSet = $pkg.FlagSet = $newType(0, $kindStruct, \"flag.FlagSet\", \"FlagSet\", \"flag\", function(Usage_, name_, parsed_, actual_, formal_, args_, errorHandling_, output_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Usage = $throwNilPointerError;\n\t\t\tthis.name = \"\";\n\t\t\tthis.parsed = false;\n\t\t\tthis.actual = false;\n\t\t\tthis.formal = false;\n\t\t\tthis.args = sliceType$2.nil;\n\t\t\tthis.errorHandling = 0;\n\t\t\tthis.output = $ifaceNil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Usage = Usage_;\n\t\tthis.name = name_;\n\t\tthis.parsed = parsed_;\n\t\tthis.actual = actual_;\n\t\tthis.formal = formal_;\n\t\tthis.args = args_;\n\t\tthis.errorHandling = errorHandling_;\n\t\tthis.output = output_;\n\t});\n\tFlag = $pkg.Flag = $newType(0, $kindStruct, \"flag.Flag\", \"Flag\", \"flag\", function(Name_, Usage_, Value_, DefValue_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Name = \"\";\n\t\t\tthis.Usage = \"\";\n\t\t\tthis.Value = $ifaceNil;\n\t\t\tthis.DefValue = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.Name = Name_;\n\t\tthis.Usage = Usage_;\n\t\tthis.Value = Value_;\n\t\tthis.DefValue = DefValue_;\n\t});\n\tsliceType = $sliceType($emptyInterface);\n\tptrType = $ptrType(boolValue);\n\tptrType$1 = $ptrType(intValue);\n\tptrType$2 = $ptrType(int64Value);\n\tptrType$3 = $ptrType(uintValue);\n\tptrType$4 = $ptrType(uint64Value);\n\tptrType$5 = $ptrType(stringValue);\n\tptrType$6 = $ptrType(float64Value);\n\tptrType$7 = $ptrType(durationValue);\n\tptrType$8 = $ptrType(time.Duration);\n\tptrType$9 = $ptrType(Flag);\n\tsliceType$1 = $sliceType(ptrType$9);\n\tptrType$10 = $ptrType($Bool);\n\tptrType$11 = $ptrType($Int);\n\tptrType$12 = $ptrType($Int64);\n\tptrType$13 = $ptrType($Uint);\n\tptrType$14 = $ptrType($Uint64);\n\tptrType$15 = $ptrType($String);\n\tptrType$16 = $ptrType($Float64);\n\tsliceType$2 = $sliceType($String);\n\tfuncType = $funcType([ptrType$9], [], false);\n\tptrType$17 = $ptrType(FlagSet);\n\tfuncType$1 = $funcType([], [], false);\n\tmapType = $mapType($String, ptrType$9);\n\tnewBoolValue = function(val, p) {\n\t\tvar $ptr, _ptr, p, val;\n\t\tp.$set(val);\n\t\treturn (_ptr = p, new ptrType(function() { return _ptr.$get(); }, function($v) { _ptr.$set($v); }, _ptr.$target));\n\t};\n\t$ptrType(boolValue).prototype.Set = function(s) {\n\t\tvar $ptr, _tuple, b, err, s, v;\n\t\tb = this;\n\t\t_tuple = strconv.ParseBool(s); v = _tuple[0]; err = _tuple[1];\n\t\tb.$set(v);\n\t\treturn err;\n\t};\n\t$ptrType(boolValue).prototype.Get = function() {\n\t\tvar $ptr, b;\n\t\tb = this;\n\t\treturn new $Bool(b.$get());\n\t};\n\t$ptrType(boolValue).prototype.String = function() {\n\t\tvar $ptr, _r, b, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tb = this;\n\t\t_r = fmt.Sprintf(\"%v\", new sliceType([new boolValue(b.$get())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $ptrType(boolValue).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$ptrType(boolValue).prototype.IsBoolFlag = function() {\n\t\tvar $ptr, b;\n\t\tb = this;\n\t\treturn true;\n\t};\n\tnewIntValue = function(val, p) {\n\t\tvar $ptr, _ptr, p, val;\n\t\tp.$set(val);\n\t\treturn (_ptr = p, new ptrType$1(function() { return (_ptr.$get() >> 0); }, function($v) { _ptr.$set(($v >> 0)); }, _ptr.$target));\n\t};\n\t$ptrType(intValue).prototype.Set = function(s) {\n\t\tvar $ptr, _tuple, err, i, s, v;\n\t\ti = this;\n\t\t_tuple = strconv.ParseInt(s, 0, 64); v = _tuple[0]; err = _tuple[1];\n\t\ti.$set(((v.$low + ((v.$high >> 31) * 4294967296)) >> 0));\n\t\treturn err;\n\t};\n\t$ptrType(intValue).prototype.Get = function() {\n\t\tvar $ptr, i;\n\t\ti = this;\n\t\treturn new $Int((i.$get() >> 0));\n\t};\n\t$ptrType(intValue).prototype.String = function() {\n\t\tvar $ptr, _r, i, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ti = this;\n\t\t_r = fmt.Sprintf(\"%v\", new sliceType([new intValue(i.$get())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $ptrType(intValue).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tnewInt64Value = function(val, p) {\n\t\tvar $ptr, _ptr, p, val, x$1;\n\t\tp.$set(val);\n\t\treturn (_ptr = p, new ptrType$2(function() { return (x$1 = _ptr.$get(), new int64Value(x$1.$high, x$1.$low)); }, function($v) { _ptr.$set(new $Int64($v.$high, $v.$low)); }, _ptr.$target));\n\t};\n\t$ptrType(int64Value).prototype.Set = function(s) {\n\t\tvar $ptr, _tuple, err, i, s, v;\n\t\ti = this;\n\t\t_tuple = strconv.ParseInt(s, 0, 64); v = _tuple[0]; err = _tuple[1];\n\t\ti.$set(new int64Value(v.$high, v.$low));\n\t\treturn err;\n\t};\n\t$ptrType(int64Value).prototype.Get = function() {\n\t\tvar $ptr, i, x$1;\n\t\ti = this;\n\t\treturn (x$1 = i.$get(), new $Int64(x$1.$high, x$1.$low));\n\t};\n\t$ptrType(int64Value).prototype.String = function() {\n\t\tvar $ptr, _r, i, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ti = this;\n\t\t_r = fmt.Sprintf(\"%v\", new sliceType([i.$get()])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $ptrType(int64Value).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tnewUintValue = function(val, p) {\n\t\tvar $ptr, _ptr, p, val;\n\t\tp.$set(val);\n\t\treturn (_ptr = p, new ptrType$3(function() { return (_ptr.$get() >>> 0); }, function($v) { _ptr.$set(($v >>> 0)); }, _ptr.$target));\n\t};\n\t$ptrType(uintValue).prototype.Set = function(s) {\n\t\tvar $ptr, _tuple, err, i, s, v;\n\t\ti = this;\n\t\t_tuple = strconv.ParseUint(s, 0, 64); v = _tuple[0]; err = _tuple[1];\n\t\ti.$set((v.$low >>> 0));\n\t\treturn err;\n\t};\n\t$ptrType(uintValue).prototype.Get = function() {\n\t\tvar $ptr, i;\n\t\ti = this;\n\t\treturn new $Uint((i.$get() >>> 0));\n\t};\n\t$ptrType(uintValue).prototype.String = function() {\n\t\tvar $ptr, _r, i, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ti = this;\n\t\t_r = fmt.Sprintf(\"%v\", new sliceType([new uintValue(i.$get())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $ptrType(uintValue).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tnewUint64Value = function(val, p) {\n\t\tvar $ptr, _ptr, p, val, x$1;\n\t\tp.$set(val);\n\t\treturn (_ptr = p, new ptrType$4(function() { return (x$1 = _ptr.$get(), new uint64Value(x$1.$high, x$1.$low)); }, function($v) { _ptr.$set(new $Uint64($v.$high, $v.$low)); }, _ptr.$target));\n\t};\n\t$ptrType(uint64Value).prototype.Set = function(s) {\n\t\tvar $ptr, _tuple, err, i, s, v;\n\t\ti = this;\n\t\t_tuple = strconv.ParseUint(s, 0, 64); v = _tuple[0]; err = _tuple[1];\n\t\ti.$set(new uint64Value(v.$high, v.$low));\n\t\treturn err;\n\t};\n\t$ptrType(uint64Value).prototype.Get = function() {\n\t\tvar $ptr, i, x$1;\n\t\ti = this;\n\t\treturn (x$1 = i.$get(), new $Uint64(x$1.$high, x$1.$low));\n\t};\n\t$ptrType(uint64Value).prototype.String = function() {\n\t\tvar $ptr, _r, i, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ti = this;\n\t\t_r = fmt.Sprintf(\"%v\", new sliceType([i.$get()])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $ptrType(uint64Value).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tnewStringValue = function(val, p) {\n\t\tvar $ptr, _ptr, p, val;\n\t\tp.$set(val);\n\t\treturn (_ptr = p, new ptrType$5(function() { return _ptr.$get(); }, function($v) { _ptr.$set($v); }, _ptr.$target));\n\t};\n\t$ptrType(stringValue).prototype.Set = function(val) {\n\t\tvar $ptr, s, val;\n\t\ts = this;\n\t\ts.$set(val);\n\t\treturn $ifaceNil;\n\t};\n\t$ptrType(stringValue).prototype.Get = function() {\n\t\tvar $ptr, s;\n\t\ts = this;\n\t\treturn new $String(s.$get());\n\t};\n\t$ptrType(stringValue).prototype.String = function() {\n\t\tvar $ptr, _r, s, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\ts = this;\n\t\t_r = fmt.Sprintf(\"%s\", new sliceType([new stringValue(s.$get())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $ptrType(stringValue).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tnewFloat64Value = function(val, p) {\n\t\tvar $ptr, _ptr, p, val;\n\t\tp.$set(val);\n\t\treturn (_ptr = p, new ptrType$6(function() { return _ptr.$get(); }, function($v) { _ptr.$set($v); }, _ptr.$target));\n\t};\n\t$ptrType(float64Value).prototype.Set = function(s) {\n\t\tvar $ptr, _tuple, err, f, s, v;\n\t\tf = this;\n\t\t_tuple = strconv.ParseFloat(s, 64); v = _tuple[0]; err = _tuple[1];\n\t\tf.$set(v);\n\t\treturn err;\n\t};\n\t$ptrType(float64Value).prototype.Get = function() {\n\t\tvar $ptr, f;\n\t\tf = this;\n\t\treturn new $Float64(f.$get());\n\t};\n\t$ptrType(float64Value).prototype.String = function() {\n\t\tvar $ptr, _r, f, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\t_r = fmt.Sprintf(\"%v\", new sliceType([new float64Value(f.$get())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $ptrType(float64Value).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tnewDurationValue = function(val, p) {\n\t\tvar $ptr, _ptr, p, val, x$1;\n\t\tp.$set(val);\n\t\treturn (_ptr = p, new ptrType$7(function() { return (x$1 = _ptr.$get(), new durationValue(x$1.$high, x$1.$low)); }, function($v) { _ptr.$set(new time.Duration($v.$high, $v.$low)); }, _ptr.$target));\n\t};\n\t$ptrType(durationValue).prototype.Set = function(s) {\n\t\tvar $ptr, _tuple, d, err, s, v;\n\t\td = this;\n\t\t_tuple = time.ParseDuration(s); v = _tuple[0]; err = _tuple[1];\n\t\td.$set(new durationValue(v.$high, v.$low));\n\t\treturn err;\n\t};\n\t$ptrType(durationValue).prototype.Get = function() {\n\t\tvar $ptr, d, x$1;\n\t\td = this;\n\t\treturn (x$1 = d.$get(), new time.Duration(x$1.$high, x$1.$low));\n\t};\n\t$ptrType(durationValue).prototype.String = function() {\n\t\tvar $ptr, _ptr, d, x$1;\n\t\td = this;\n\t\treturn (_ptr = d, new ptrType$8(function() { return (x$1 = _ptr.$get(), new time.Duration(x$1.$high, x$1.$low)); }, function($v) { _ptr.$set(new durationValue($v.$high, $v.$low)); }, _ptr.$target)).String();\n\t};\n\tsortFlags = function(flags) {\n\t\tvar $ptr, _entry, _entry$1, _i, _i$1, _keys, _ref, _ref$1, f, flags, i, i$1, list, name, result, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _keys = $f._keys; _ref = $f._ref; _ref$1 = $f._ref$1; f = $f.f; flags = $f.flags; i = $f.i; i$1 = $f.i$1; list = $f.list; name = $f.name; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tlist = $makeSlice(sort.StringSlice, $keys(flags).length);\n\t\ti = 0;\n\t\t_ref = flags;\n\t\t_i = 0;\n\t\t_keys = $keys(_ref);\n\t\twhile (true) {\n\t\t\tif (!(_i < _keys.length)) { break; }\n\t\t\t_entry = _ref[_keys[_i]];\n\t\t\tif (_entry === undefined) {\n\t\t\t\t_i++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tf = _entry.v;\n\t\t\t((i < 0 || i >= list.$length) ? $throwRuntimeError(\"index out of range\") : list.$array[list.$offset + i] = f.Name);\n\t\t\ti = i + (1) >> 0;\n\t\t\t_i++;\n\t\t}\n\t\t$r = list.Sort(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tresult = $makeSlice(sliceType$1, list.$length);\n\t\t_ref$1 = list;\n\t\t_i$1 = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i$1 < _ref$1.$length)) { break; }\n\t\t\ti$1 = _i$1;\n\t\t\tname = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError(\"index out of range\") : _ref$1.$array[_ref$1.$offset + _i$1]);\n\t\t\t((i$1 < 0 || i$1 >= result.$length) ? $throwRuntimeError(\"index out of range\") : result.$array[result.$offset + i$1] = (_entry$1 = flags[name], _entry$1 !== undefined ? _entry$1.v : ptrType$9.nil));\n\t\t\t_i$1++;\n\t\t}\n\t\treturn result;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: sortFlags }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._keys = _keys; $f._ref = _ref; $f._ref$1 = _ref$1; $f.f = f; $f.flags = flags; $f.i = i; $f.i$1 = i$1; $f.list = list; $f.name = name; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.ptr.prototype.out = function() {\n\t\tvar $ptr, f;\n\t\tf = this;\n\t\tif ($interfaceIsEqual(f.output, $ifaceNil)) {\n\t\t\treturn os.Stderr;\n\t\t}\n\t\treturn f.output;\n\t};\n\tFlagSet.prototype.out = function() { return this.$val.out(); };\n\tFlagSet.ptr.prototype.SetOutput = function(output) {\n\t\tvar $ptr, f, output;\n\t\tf = this;\n\t\tf.output = output;\n\t};\n\tFlagSet.prototype.SetOutput = function(output) { return this.$val.SetOutput(output); };\n\tFlagSet.ptr.prototype.VisitAll = function(fn) {\n\t\tvar $ptr, _i, _r, _ref, f, flag, fn, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; f = $f.f; flag = $f.flag; fn = $f.fn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\t_r = sortFlags(f.formal); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_ref = _r;\n\t\t_i = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }\n\t\t\tflag = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\t$r = fn(flag); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t_i++;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.VisitAll }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.f = f; $f.flag = flag; $f.fn = fn; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.VisitAll = function(fn) { return this.$val.VisitAll(fn); };\n\tFlagSet.ptr.prototype.Visit = function(fn) {\n\t\tvar $ptr, _i, _r, _ref, f, flag, fn, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; f = $f.f; flag = $f.flag; fn = $f.fn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\t_r = sortFlags(f.actual); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_ref = _r;\n\t\t_i = 0;\n\t\t/* while (true) { */ case 2:\n\t\t\t/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }\n\t\t\tflag = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\t$r = fn(flag); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t_i++;\n\t\t/* } */ $s = 2; continue; case 3:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Visit }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.f = f; $f.flag = flag; $f.fn = fn; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.Visit = function(fn) { return this.$val.Visit(fn); };\n\tFlagSet.ptr.prototype.Lookup = function(name) {\n\t\tvar $ptr, _entry, f, name;\n\t\tf = this;\n\t\treturn (_entry = f.formal[name], _entry !== undefined ? _entry.v : ptrType$9.nil);\n\t};\n\tFlagSet.prototype.Lookup = function(name) { return this.$val.Lookup(name); };\n\tFlagSet.ptr.prototype.Set = function(name, value) {\n\t\tvar $ptr, _entry, _key, _r, _r$1, _tuple, err, f, flag, name, ok, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; f = $f.f; flag = $f.flag; name = $f.name; ok = $f.ok; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\t_tuple = (_entry = f.formal[name], _entry !== undefined ? [_entry.v, true] : [ptrType$9.nil, false]); flag = _tuple[0]; ok = _tuple[1];\n\t\t/* */ if (!ok) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!ok) { */ case 1:\n\t\t\t_r = fmt.Errorf(\"no such flag -%v\", new sliceType([new $String(name)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\treturn _r;\n\t\t/* } */ case 2:\n\t\t_r$1 = flag.Value.Set(value); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\terr = _r$1;\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn err;\n\t\t}\n\t\tif (f.actual === false) {\n\t\t\tf.actual = new $Map();\n\t\t}\n\t\t_key = name; (f.actual || $throwRuntimeError(\"assignment to entry in nil map\"))[_key] = { k: _key, v: flag };\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.flag = flag; $f.name = name; $f.ok = ok; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.Set = function(name, value) { return this.$val.Set(name, value); };\n\tFlagSet.ptr.prototype.PrintDefaults = function() {\n\t\tvar $ptr, f, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = [f];\n\t\tf[0] = this;\n\t\t$r = f[0].VisitAll((function(f) { return function $b(flag) {\n\t\t\tvar $ptr, _r, _tuple, flag, format, ok, $s, $r;\n\t\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; flag = $f.flag; format = $f.format; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t\tformat = \"  -%s=%s: %s\\n\";\n\t\t\t_tuple = $assertType(flag.Value, ptrType$5, true); ok = _tuple[1];\n\t\t\tif (ok) {\n\t\t\t\tformat = \"  -%s=%q: %s\\n\";\n\t\t\t}\n\t\t\t_r = fmt.Fprintf(f[0].out(), format, new sliceType([new $String(flag.Name), new $String(flag.DefValue), new $String(flag.Usage)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t_r;\n\t\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.flag = flag; $f.format = format; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;\n\t\t}; })(f)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.PrintDefaults }; } $f.$ptr = $ptr; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.PrintDefaults = function() { return this.$val.PrintDefaults(); };\n\tPrintDefaults = function() {\n\t\tvar $ptr, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = $pkg.CommandLine.PrintDefaults(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PrintDefaults }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.PrintDefaults = PrintDefaults;\n\tdefaultUsage = function(f) {\n\t\tvar $ptr, _r, _r$1, f, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t/* */ if (f.name === \"\") { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (f.name === \"\") { */ case 1:\n\t\t\t_r = fmt.Fprintf(f.out(), \"Usage:\\n\", new sliceType([])); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t_r;\n\t\t\t$s = 3; continue;\n\t\t/* } else { */ case 2:\n\t\t\t_r$1 = fmt.Fprintf(f.out(), \"Usage of %s:\\n\", new sliceType([new $String(f.name)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t_r$1;\n\t\t/* } */ case 3:\n\t\t$r = f.PrintDefaults(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: defaultUsage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.ptr.prototype.NFlag = function() {\n\t\tvar $ptr, f;\n\t\tf = this;\n\t\treturn $keys(f.actual).length;\n\t};\n\tFlagSet.prototype.NFlag = function() { return this.$val.NFlag(); };\n\tFlagSet.ptr.prototype.Arg = function(i) {\n\t\tvar $ptr, f, i, x$1;\n\t\tf = this;\n\t\tif (i < 0 || i >= f.args.$length) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn (x$1 = f.args, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError(\"index out of range\") : x$1.$array[x$1.$offset + i]));\n\t};\n\tFlagSet.prototype.Arg = function(i) { return this.$val.Arg(i); };\n\tFlagSet.ptr.prototype.NArg = function() {\n\t\tvar $ptr, f;\n\t\tf = this;\n\t\treturn f.args.$length;\n\t};\n\tFlagSet.prototype.NArg = function() { return this.$val.NArg(); };\n\tFlagSet.ptr.prototype.Args = function() {\n\t\tvar $ptr, f;\n\t\tf = this;\n\t\treturn f.args;\n\t};\n\tFlagSet.prototype.Args = function() { return this.$val.Args(); };\n\tFlagSet.ptr.prototype.BoolVar = function(p, name, value, usage) {\n\t\tvar $ptr, f, name, p, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\t$r = f.Var(newBoolValue(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.BoolVar }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.BoolVar = function(p, name, value, usage) { return this.$val.BoolVar(p, name, value, usage); };\n\tFlagSet.ptr.prototype.Bool = function(name, value, usage) {\n\t\tvar $ptr, f, name, p, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\tp = $newDataPointer(false, ptrType$10);\n\t\t$r = f.BoolVar(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\treturn p;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Bool }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.Bool = function(name, value, usage) { return this.$val.Bool(name, value, usage); };\n\tBool = function(name, value, usage) {\n\t\tvar $ptr, _r, name, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = $pkg.CommandLine.Bool(name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Bool }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Bool = Bool;\n\tFlagSet.ptr.prototype.IntVar = function(p, name, value, usage) {\n\t\tvar $ptr, f, name, p, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\t$r = f.Var(newIntValue(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.IntVar }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.IntVar = function(p, name, value, usage) { return this.$val.IntVar(p, name, value, usage); };\n\tFlagSet.ptr.prototype.Int = function(name, value, usage) {\n\t\tvar $ptr, f, name, p, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\tp = $newDataPointer(0, ptrType$11);\n\t\t$r = f.IntVar(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\treturn p;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Int }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.Int = function(name, value, usage) { return this.$val.Int(name, value, usage); };\n\tInt = function(name, value, usage) {\n\t\tvar $ptr, _r, name, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = $pkg.CommandLine.Int(name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Int }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Int = Int;\n\tFlagSet.ptr.prototype.Int64Var = function(p, name, value, usage) {\n\t\tvar $ptr, f, name, p, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\t$r = f.Var(newInt64Value(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Int64Var }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.Int64Var = function(p, name, value, usage) { return this.$val.Int64Var(p, name, value, usage); };\n\tFlagSet.ptr.prototype.Int64 = function(name, value, usage) {\n\t\tvar $ptr, f, name, p, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\tp = $newDataPointer(new $Int64(0, 0), ptrType$12);\n\t\t$r = f.Int64Var(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\treturn p;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Int64 }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.Int64 = function(name, value, usage) { return this.$val.Int64(name, value, usage); };\n\tFlagSet.ptr.prototype.UintVar = function(p, name, value, usage) {\n\t\tvar $ptr, f, name, p, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\t$r = f.Var(newUintValue(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.UintVar }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.UintVar = function(p, name, value, usage) { return this.$val.UintVar(p, name, value, usage); };\n\tFlagSet.ptr.prototype.Uint = function(name, value, usage) {\n\t\tvar $ptr, f, name, p, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\tp = $newDataPointer(0, ptrType$13);\n\t\t$r = f.UintVar(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\treturn p;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Uint }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.Uint = function(name, value, usage) { return this.$val.Uint(name, value, usage); };\n\tFlagSet.ptr.prototype.Uint64Var = function(p, name, value, usage) {\n\t\tvar $ptr, f, name, p, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\t$r = f.Var(newUint64Value(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Uint64Var }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.Uint64Var = function(p, name, value, usage) { return this.$val.Uint64Var(p, name, value, usage); };\n\tFlagSet.ptr.prototype.Uint64 = function(name, value, usage) {\n\t\tvar $ptr, f, name, p, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\tp = $newDataPointer(new $Uint64(0, 0), ptrType$14);\n\t\t$r = f.Uint64Var(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\treturn p;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Uint64 }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.Uint64 = function(name, value, usage) { return this.$val.Uint64(name, value, usage); };\n\tFlagSet.ptr.prototype.StringVar = function(p, name, value, usage) {\n\t\tvar $ptr, f, name, p, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\t$r = f.Var(newStringValue(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.StringVar }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.StringVar = function(p, name, value, usage) { return this.$val.StringVar(p, name, value, usage); };\n\tFlagSet.ptr.prototype.String = function(name, value, usage) {\n\t\tvar $ptr, f, name, p, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\tp = $newDataPointer(\"\", ptrType$15);\n\t\t$r = f.StringVar(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\treturn p;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.String }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.String = function(name, value, usage) { return this.$val.String(name, value, usage); };\n\tString = function(name, value, usage) {\n\t\tvar $ptr, _r, name, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = $pkg.CommandLine.String(name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: String }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.String = String;\n\tFlagSet.ptr.prototype.Float64Var = function(p, name, value, usage) {\n\t\tvar $ptr, f, name, p, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\t$r = f.Var(newFloat64Value(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Float64Var }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.Float64Var = function(p, name, value, usage) { return this.$val.Float64Var(p, name, value, usage); };\n\tFlagSet.ptr.prototype.Float64 = function(name, value, usage) {\n\t\tvar $ptr, f, name, p, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\tp = $newDataPointer(0, ptrType$16);\n\t\t$r = f.Float64Var(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\treturn p;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Float64 }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.Float64 = function(name, value, usage) { return this.$val.Float64(name, value, usage); };\n\tFlagSet.ptr.prototype.DurationVar = function(p, name, value, usage) {\n\t\tvar $ptr, f, name, p, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\t$r = f.Var(newDurationValue(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.DurationVar }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.DurationVar = function(p, name, value, usage) { return this.$val.DurationVar(p, name, value, usage); };\n\tFlagSet.ptr.prototype.Duration = function(name, value, usage) {\n\t\tvar $ptr, f, name, p, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\tp = $newDataPointer(new time.Duration(0, 0), ptrType$8);\n\t\t$r = f.DurationVar(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\treturn p;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Duration }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.Duration = function(name, value, usage) { return this.$val.Duration(name, value, usage); };\n\tDuration = function(name, value, usage) {\n\t\tvar $ptr, _r, name, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = $pkg.CommandLine.Duration(name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Duration }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Duration = Duration;\n\tFlagSet.ptr.prototype.Var = function(value, name, usage) {\n\t\tvar $ptr, _entry, _key, _r, _r$1, _r$2, _r$3, _tuple, alreadythere, f, flag, msg, name, usage, value, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; alreadythere = $f.alreadythere; f = $f.f; flag = $f.flag; msg = $f.msg; name = $f.name; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\t_r = value.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tflag = new Flag.ptr(name, usage, value, _r);\n\t\t_tuple = (_entry = f.formal[name], _entry !== undefined ? [_entry.v, true] : [ptrType$9.nil, false]); alreadythere = _tuple[1];\n\t\t/* */ if (alreadythere) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (alreadythere) { */ case 2:\n\t\t\tmsg = \"\";\n\t\t\t/* */ if (f.name === \"\") { $s = 4; continue; }\n\t\t\t/* */ $s = 5; continue;\n\t\t\t/* if (f.name === \"\") { */ case 4:\n\t\t\t\t_r$1 = fmt.Sprintf(\"flag redefined: %s\", new sliceType([new $String(name)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t\tmsg = _r$1;\n\t\t\t\t$s = 6; continue;\n\t\t\t/* } else { */ case 5:\n\t\t\t\t_r$2 = fmt.Sprintf(\"%s flag redefined: %s\", new sliceType([new $String(f.name), new $String(name)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\tmsg = _r$2;\n\t\t\t/* } */ case 6:\n\t\t\t_r$3 = fmt.Fprintln(f.out(), new sliceType([new $String(msg)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t_r$3;\n\t\t\t$panic(new $String(msg));\n\t\t/* } */ case 3:\n\t\tif (f.formal === false) {\n\t\t\tf.formal = new $Map();\n\t\t}\n\t\t_key = name; (f.formal || $throwRuntimeError(\"assignment to entry in nil map\"))[_key] = { k: _key, v: flag };\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Var }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.alreadythere = alreadythere; $f.f = f; $f.flag = flag; $f.msg = msg; $f.name = name; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.Var = function(value, name, usage) { return this.$val.Var(value, name, usage); };\n\tFlagSet.ptr.prototype.failf = function(format, a) {\n\t\tvar $ptr, _r, _r$1, a, err, f, format, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; a = $f.a; err = $f.err; f = $f.f; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\t_r = fmt.Errorf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\terr = _r;\n\t\t_r$1 = fmt.Fprintln(f.out(), new sliceType([err])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_r$1;\n\t\t$r = f.usage(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\treturn err;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.failf }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.err = err; $f.f = f; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.failf = function(format, a) { return this.$val.failf(format, a); };\n\tFlagSet.ptr.prototype.usage = function() {\n\t\tvar $ptr, f, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\t/* */ if (f.Usage === $throwNilPointerError) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (f.Usage === $throwNilPointerError) { */ case 1:\n\t\t\t/* */ if (f === $pkg.CommandLine) { $s = 4; continue; }\n\t\t\t/* */ $s = 5; continue;\n\t\t\t/* if (f === $pkg.CommandLine) { */ case 4:\n\t\t\t\t$r = $pkg.Usage(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$s = 6; continue;\n\t\t\t/* } else { */ case 5:\n\t\t\t\t$r = defaultUsage(f); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* } */ case 6:\n\t\t\t$s = 3; continue;\n\t\t/* } else { */ case 2:\n\t\t\t$r = f.Usage(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* } */ case 3:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.usage }; } $f.$ptr = $ptr; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.usage = function() { return this.$val.usage(); };\n\tFlagSet.ptr.prototype.parseOne = function() {\n\t\tvar $ptr, _entry, _key, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tmp, _tmp$1, _tuple, _tuple$1, _v, alreadythere, err, err$1, f, flag, fv, has_value, i, m, name, num_minuses, ok, s, value, x$1, x$2, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; alreadythere = $f.alreadythere; err = $f.err; err$1 = $f.err$1; f = $f.f; flag = $f.flag; fv = $f.fv; has_value = $f.has_value; i = $f.i; m = $f.m; name = $f.name; num_minuses = $f.num_minuses; ok = $f.ok; s = $f.s; value = $f.value; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\tif (f.args.$length === 0) {\n\t\t\treturn [false, $ifaceNil];\n\t\t}\n\t\ts = (x$1 = f.args, (0 >= x$1.$length ? $throwRuntimeError(\"index out of range\") : x$1.$array[x$1.$offset + 0]));\n\t\tif ((s.length === 0) || !((s.charCodeAt(0) === 45)) || (s.length === 1)) {\n\t\t\treturn [false, $ifaceNil];\n\t\t}\n\t\tnum_minuses = 1;\n\t\tif (s.charCodeAt(1) === 45) {\n\t\t\tnum_minuses = num_minuses + (1) >> 0;\n\t\t\tif (s.length === 2) {\n\t\t\t\tf.args = $subslice(f.args, 1);\n\t\t\t\treturn [false, $ifaceNil];\n\t\t\t}\n\t\t}\n\t\tname = s.substring(num_minuses);\n\t\t/* */ if ((name.length === 0) || (name.charCodeAt(0) === 45) || (name.charCodeAt(0) === 61)) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if ((name.length === 0) || (name.charCodeAt(0) === 45) || (name.charCodeAt(0) === 61)) { */ case 1:\n\t\t\t_r = f.failf(\"bad flag syntax: %s\", new sliceType([new $String(s)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\treturn [false, _r];\n\t\t/* } */ case 2:\n\t\tf.args = $subslice(f.args, 1);\n\t\thas_value = false;\n\t\tvalue = \"\";\n\t\ti = 1;\n\t\twhile (true) {\n\t\t\tif (!(i < name.length)) { break; }\n\t\t\tif (name.charCodeAt(i) === 61) {\n\t\t\t\tvalue = name.substring((i + 1 >> 0));\n\t\t\t\thas_value = true;\n\t\t\t\tname = name.substring(0, i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\tm = f.formal;\n\t\t_tuple = (_entry = m[name], _entry !== undefined ? [_entry.v, true] : [ptrType$9.nil, false]); flag = _tuple[0]; alreadythere = _tuple[1];\n\t\t/* */ if (!alreadythere) { $s = 4; continue; }\n\t\t/* */ $s = 5; continue;\n\t\t/* if (!alreadythere) { */ case 4:\n\t\t\t/* */ if (name === \"help\" || name === \"h\") { $s = 6; continue; }\n\t\t\t/* */ $s = 7; continue;\n\t\t\t/* if (name === \"help\" || name === \"h\") { */ case 6:\n\t\t\t\t$r = f.usage(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\treturn [false, $pkg.ErrHelp];\n\t\t\t/* } */ case 7:\n\t\t\t_r$1 = f.failf(\"flag provided but not defined: -%s\", new sliceType([new $String(name)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\treturn [false, _r$1];\n\t\t/* } */ case 5:\n\t\t_tuple$1 = $assertType(flag.Value, boolFlag, true); fv = _tuple$1[0]; ok = _tuple$1[1];\n\t\tif (!(ok)) { _v = false; $s = 13; continue s; }\n\t\t_r$2 = fv.IsBoolFlag(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_v = _r$2; case 13:\n\t\t/* */ if (_v) { $s = 10; continue; }\n\t\t/* */ $s = 11; continue;\n\t\t/* if (_v) { */ case 10:\n\t\t\t/* */ if (has_value) { $s = 15; continue; }\n\t\t\t/* */ $s = 16; continue;\n\t\t\t/* if (has_value) { */ case 15:\n\t\t\t\t_r$3 = fv.Set(value); /* */ $s = 18; case 18: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t\terr = _r$3;\n\t\t\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 19; continue; }\n\t\t\t\t/* */ $s = 20; continue;\n\t\t\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 19:\n\t\t\t\t\t_r$4 = f.failf(\"invalid boolean value %q for -%s: %v\", new sliceType([new $String(value), new $String(name), err])); /* */ $s = 21; case 21: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t\t\treturn [false, _r$4];\n\t\t\t\t/* } */ case 20:\n\t\t\t\t$s = 17; continue;\n\t\t\t/* } else { */ case 16:\n\t\t\t\t_r$5 = fv.Set(\"true\"); /* */ $s = 22; case 22: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t\t_r$5;\n\t\t\t/* } */ case 17:\n\t\t\t$s = 12; continue;\n\t\t/* } else { */ case 11:\n\t\t\tif (!has_value && f.args.$length > 0) {\n\t\t\t\thas_value = true;\n\t\t\t\t_tmp = (x$2 = f.args, (0 >= x$2.$length ? $throwRuntimeError(\"index out of range\") : x$2.$array[x$2.$offset + 0])); _tmp$1 = $subslice(f.args, 1); value = _tmp; f.args = _tmp$1;\n\t\t\t}\n\t\t\t/* */ if (!has_value) { $s = 23; continue; }\n\t\t\t/* */ $s = 24; continue;\n\t\t\t/* if (!has_value) { */ case 23:\n\t\t\t\t_r$6 = f.failf(\"flag needs an argument: -%s\", new sliceType([new $String(name)])); /* */ $s = 25; case 25: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t\treturn [false, _r$6];\n\t\t\t/* } */ case 24:\n\t\t\t_r$7 = flag.Value.Set(value); /* */ $s = 26; case 26: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\terr$1 = _r$7;\n\t\t\t/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 27; continue; }\n\t\t\t/* */ $s = 28; continue;\n\t\t\t/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 27:\n\t\t\t\t_r$8 = f.failf(\"invalid value %q for flag -%s: %v\", new sliceType([new $String(value), new $String(name), err$1])); /* */ $s = 29; case 29: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\t\t\treturn [false, _r$8];\n\t\t\t/* } */ case 28:\n\t\t/* } */ case 12:\n\t\tif (f.actual === false) {\n\t\t\tf.actual = new $Map();\n\t\t}\n\t\t_key = name; (f.actual || $throwRuntimeError(\"assignment to entry in nil map\"))[_key] = { k: _key, v: flag };\n\t\treturn [true, $ifaceNil];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.parseOne }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f.alreadythere = alreadythere; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.flag = flag; $f.fv = fv; $f.has_value = has_value; $f.i = i; $f.m = m; $f.name = name; $f.num_minuses = num_minuses; $f.ok = ok; $f.s = s; $f.value = value; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.parseOne = function() { return this.$val.parseOne(); };\n\tFlagSet.ptr.prototype.Parse = function(arguments$1) {\n\t\tvar $ptr, _r, _ref, _tuple, arguments$1, err, f, seen, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; arguments$1 = $f.arguments$1; err = $f.err; f = $f.f; seen = $f.seen; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tf = this;\n\t\tf.parsed = true;\n\t\tf.args = arguments$1;\n\t\t/* while (true) { */ case 1:\n\t\t\t_r = f.parseOne(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t_tuple = _r; seen = _tuple[0]; err = _tuple[1];\n\t\t\tif (seen) {\n\t\t\t\t/* continue; */ $s = 1; continue;\n\t\t\t}\n\t\t\tif ($interfaceIsEqual(err, $ifaceNil)) {\n\t\t\t\t/* break; */ $s = 2; continue;\n\t\t\t}\n\t\t\t_ref = f.errorHandling;\n\t\t\tif (_ref === 0) {\n\t\t\t\treturn err;\n\t\t\t} else if (_ref === 1) {\n\t\t\t\tos.Exit(2);\n\t\t\t} else if (_ref === 2) {\n\t\t\t\t$panic(err);\n\t\t\t}\n\t\t/* } */ $s = 1; continue; case 2:\n\t\treturn $ifaceNil;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Parse }; } $f.$ptr = $ptr; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.arguments$1 = arguments$1; $f.err = err; $f.f = f; $f.seen = seen; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tFlagSet.prototype.Parse = function(arguments$1) { return this.$val.Parse(arguments$1); };\n\tFlagSet.ptr.prototype.Parsed = function() {\n\t\tvar $ptr, f;\n\t\tf = this;\n\t\treturn f.parsed;\n\t};\n\tFlagSet.prototype.Parsed = function() { return this.$val.Parsed(); };\n\tNewFlagSet = function(name, errorHandling) {\n\t\tvar $ptr, errorHandling, f, name;\n\t\tf = new FlagSet.ptr($throwNilPointerError, name, false, false, false, sliceType$2.nil, errorHandling, $ifaceNil);\n\t\treturn f;\n\t};\n\t$pkg.NewFlagSet = NewFlagSet;\n\tFlagSet.ptr.prototype.Init = function(name, errorHandling) {\n\t\tvar $ptr, errorHandling, f, name;\n\t\tf = this;\n\t\tf.name = name;\n\t\tf.errorHandling = errorHandling;\n\t};\n\tFlagSet.prototype.Init = function(name, errorHandling) { return this.$val.Init(name, errorHandling); };\n\tptrType.methods = [{prop: \"Set\", name: \"Set\", pkg: \"\", typ: $funcType([$String], [$error], false)}, {prop: \"Get\", name: \"Get\", pkg: \"\", typ: $funcType([], [$emptyInterface], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"IsBoolFlag\", name: \"IsBoolFlag\", pkg: \"\", typ: $funcType([], [$Bool], false)}];\n\tptrType$1.methods = [{prop: \"Set\", name: \"Set\", pkg: \"\", typ: $funcType([$String], [$error], false)}, {prop: \"Get\", name: \"Get\", pkg: \"\", typ: $funcType([], [$emptyInterface], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$2.methods = [{prop: \"Set\", name: \"Set\", pkg: \"\", typ: $funcType([$String], [$error], false)}, {prop: \"Get\", name: \"Get\", pkg: \"\", typ: $funcType([], [$emptyInterface], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$3.methods = [{prop: \"Set\", name: \"Set\", pkg: \"\", typ: $funcType([$String], [$error], false)}, {prop: \"Get\", name: \"Get\", pkg: \"\", typ: $funcType([], [$emptyInterface], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$4.methods = [{prop: \"Set\", name: \"Set\", pkg: \"\", typ: $funcType([$String], [$error], false)}, {prop: \"Get\", name: \"Get\", pkg: \"\", typ: $funcType([], [$emptyInterface], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$5.methods = [{prop: \"Set\", name: \"Set\", pkg: \"\", typ: $funcType([$String], [$error], false)}, {prop: \"Get\", name: \"Get\", pkg: \"\", typ: $funcType([], [$emptyInterface], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$6.methods = [{prop: \"Set\", name: \"Set\", pkg: \"\", typ: $funcType([$String], [$error], false)}, {prop: \"Get\", name: \"Get\", pkg: \"\", typ: $funcType([], [$emptyInterface], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$7.methods = [{prop: \"Set\", name: \"Set\", pkg: \"\", typ: $funcType([$String], [$error], false)}, {prop: \"Get\", name: \"Get\", pkg: \"\", typ: $funcType([], [$emptyInterface], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$17.methods = [{prop: \"out\", name: \"out\", pkg: \"flag\", typ: $funcType([], [io.Writer], false)}, {prop: \"SetOutput\", name: \"SetOutput\", pkg: \"\", typ: $funcType([io.Writer], [], false)}, {prop: \"VisitAll\", name: \"VisitAll\", pkg: \"\", typ: $funcType([funcType], [], false)}, {prop: \"Visit\", name: \"Visit\", pkg: \"\", typ: $funcType([funcType], [], false)}, {prop: \"Lookup\", name: \"Lookup\", pkg: \"\", typ: $funcType([$String], [ptrType$9], false)}, {prop: \"Set\", name: \"Set\", pkg: \"\", typ: $funcType([$String, $String], [$error], false)}, {prop: \"PrintDefaults\", name: \"PrintDefaults\", pkg: \"\", typ: $funcType([], [], false)}, {prop: \"NFlag\", name: \"NFlag\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Arg\", name: \"Arg\", pkg: \"\", typ: $funcType([$Int], [$String], false)}, {prop: \"NArg\", name: \"NArg\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Args\", name: \"Args\", pkg: \"\", typ: $funcType([], [sliceType$2], false)}, {prop: \"BoolVar\", name: \"BoolVar\", pkg: \"\", typ: $funcType([ptrType$10, $String, $Bool, $String], [], false)}, {prop: \"Bool\", name: \"Bool\", pkg: \"\", typ: $funcType([$String, $Bool, $String], [ptrType$10], false)}, {prop: \"IntVar\", name: \"IntVar\", pkg: \"\", typ: $funcType([ptrType$11, $String, $Int, $String], [], false)}, {prop: \"Int\", name: \"Int\", pkg: \"\", typ: $funcType([$String, $Int, $String], [ptrType$11], false)}, {prop: \"Int64Var\", name: \"Int64Var\", pkg: \"\", typ: $funcType([ptrType$12, $String, $Int64, $String], [], false)}, {prop: \"Int64\", name: \"Int64\", pkg: \"\", typ: $funcType([$String, $Int64, $String], [ptrType$12], false)}, {prop: \"UintVar\", name: \"UintVar\", pkg: \"\", typ: $funcType([ptrType$13, $String, $Uint, $String], [], false)}, {prop: \"Uint\", name: \"Uint\", pkg: \"\", typ: $funcType([$String, $Uint, $String], [ptrType$13], false)}, {prop: \"Uint64Var\", name: \"Uint64Var\", pkg: \"\", typ: $funcType([ptrType$14, $String, $Uint64, $String], [], false)}, {prop: \"Uint64\", name: \"Uint64\", pkg: \"\", typ: $funcType([$String, $Uint64, $String], [ptrType$14], false)}, {prop: \"StringVar\", name: \"StringVar\", pkg: \"\", typ: $funcType([ptrType$15, $String, $String, $String], [], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([$String, $String, $String], [ptrType$15], false)}, {prop: \"Float64Var\", name: \"Float64Var\", pkg: \"\", typ: $funcType([ptrType$16, $String, $Float64, $String], [], false)}, {prop: \"Float64\", name: \"Float64\", pkg: \"\", typ: $funcType([$String, $Float64, $String], [ptrType$16], false)}, {prop: \"DurationVar\", name: \"DurationVar\", pkg: \"\", typ: $funcType([ptrType$8, $String, time.Duration, $String], [], false)}, {prop: \"Duration\", name: \"Duration\", pkg: \"\", typ: $funcType([$String, time.Duration, $String], [ptrType$8], false)}, {prop: \"Var\", name: \"Var\", pkg: \"\", typ: $funcType([Value, $String, $String], [], false)}, {prop: \"failf\", name: \"failf\", pkg: \"flag\", typ: $funcType([$String, sliceType], [$error], true)}, {prop: \"usage\", name: \"usage\", pkg: \"flag\", typ: $funcType([], [], false)}, {prop: \"parseOne\", name: \"parseOne\", pkg: \"flag\", typ: $funcType([], [$Bool, $error], false)}, {prop: \"Parse\", name: \"Parse\", pkg: \"\", typ: $funcType([sliceType$2], [$error], false)}, {prop: \"Parsed\", name: \"Parsed\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Init\", name: \"Init\", pkg: \"\", typ: $funcType([$String, ErrorHandling], [], false)}];\n\tboolFlag.init([{prop: \"IsBoolFlag\", name: \"IsBoolFlag\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Set\", name: \"Set\", pkg: \"\", typ: $funcType([$String], [$error], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}]);\n\tValue.init([{prop: \"Set\", name: \"Set\", pkg: \"\", typ: $funcType([$String], [$error], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}]);\n\tFlagSet.init([{prop: \"Usage\", name: \"Usage\", pkg: \"\", typ: funcType$1, tag: \"\"}, {prop: \"name\", name: \"name\", pkg: \"flag\", typ: $String, tag: \"\"}, {prop: \"parsed\", name: \"parsed\", pkg: \"flag\", typ: $Bool, tag: \"\"}, {prop: \"actual\", name: \"actual\", pkg: \"flag\", typ: mapType, tag: \"\"}, {prop: \"formal\", name: \"formal\", pkg: \"flag\", typ: mapType, tag: \"\"}, {prop: \"args\", name: \"args\", pkg: \"flag\", typ: sliceType$2, tag: \"\"}, {prop: \"errorHandling\", name: \"errorHandling\", pkg: \"flag\", typ: ErrorHandling, tag: \"\"}, {prop: \"output\", name: \"output\", pkg: \"flag\", typ: io.Writer, tag: \"\"}]);\n\tFlag.init([{prop: \"Name\", name: \"Name\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Usage\", name: \"Usage\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Value\", name: \"Value\", pkg: \"\", typ: Value, tag: \"\"}, {prop: \"DefValue\", name: \"DefValue\", pkg: \"\", typ: $String, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = time.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$pkg.ErrHelp = errors.New(\"flag: help requested\");\n\t\t$pkg.CommandLine = NewFlagSet((x = os.Args, (0 >= x.$length ? $throwRuntimeError(\"index out of range\") : x.$array[x.$offset + 0])), 1);\n\t\t$pkg.Usage = (function $b() {\n\t\t\tvar $ptr, _r, x$1, $s, $r;\n\t\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t\t_r = fmt.Fprintf(os.Stderr, \"Usage of %s:\\n\", new sliceType([new $String((x$1 = os.Args, (0 >= x$1.$length ? $throwRuntimeError(\"index out of range\") : x$1.$array[x$1.$offset + 0])))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t_r;\n\t\t\t$r = PrintDefaults(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;\n\t\t});\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"runtime/pprof\"] = (function() {\n\tvar $pkg = {}, $init, io, sync;\n\tio = $packages[\"io\"];\n\tsync = $packages[\"sync\"];\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"testing\"] = (function() {\n\tvar $pkg = {}, $init, bytes, flag, fmt, nosync, io, os, runtime, pprof, strconv, strings, atomic, time, matchBenchmarks, benchTime, benchmarkMemory, short$1, outputDir, chatty, coverProfile, match, memProfile, memProfileRate, cpuProfile, blockProfile, blockProfileRate, timeout, cpuListStr, parallel, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15;\n\tbytes = $packages[\"bytes\"];\n\tflag = $packages[\"flag\"];\n\tfmt = $packages[\"fmt\"];\n\tnosync = $packages[\"github.com/gopherjs/gopherjs/nosync\"];\n\tio = $packages[\"io\"];\n\tos = $packages[\"os\"];\n\truntime = $packages[\"runtime\"];\n\tpprof = $packages[\"runtime/pprof\"];\n\tstrconv = $packages[\"strconv\"];\n\tstrings = $packages[\"strings\"];\n\tatomic = $packages[\"sync/atomic\"];\n\ttime = $packages[\"time\"];\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = flag.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = nosync.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = io.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = os.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = runtime.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = pprof.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = strconv.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = strings.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = atomic.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = time.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t_r = flag.String(\"test.bench\", \"\", \"regular expression to select benchmarks to run\"); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tmatchBenchmarks = _r;\n\t\t_r$1 = flag.Duration(\"test.benchtime\", new time.Duration(0, 1000000000), \"approximate run time for each benchmark\"); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\tbenchTime = _r$1;\n\t\t_r$2 = flag.Bool(\"test.benchmem\", false, \"print memory allocations for benchmarks\"); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\tbenchmarkMemory = _r$2;\n\t\t_r$3 = flag.Bool(\"test.short\", false, \"run smaller test suite to save time\"); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\tshort$1 = _r$3;\n\t\t_r$4 = flag.String(\"test.outputdir\", \"\", \"directory in which to write profiles\"); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\toutputDir = _r$4;\n\t\t_r$5 = flag.Bool(\"test.v\", false, \"verbose: print additional output\"); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\tchatty = _r$5;\n\t\t_r$6 = flag.String(\"test.coverprofile\", \"\", \"write a coverage profile to the named file after execution\"); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\tcoverProfile = _r$6;\n\t\t_r$7 = flag.String(\"test.run\", \"\", \"regular expression to select tests and examples to run\"); /* */ $s = 20; case 20: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\tmatch = _r$7;\n\t\t_r$8 = flag.String(\"test.memprofile\", \"\", \"write a memory profile to the named file after execution\"); /* */ $s = 21; case 21: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }\n\t\tmemProfile = _r$8;\n\t\t_r$9 = flag.Int(\"test.memprofilerate\", 0, \"if >=0, sets runtime.MemProfileRate\"); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }\n\t\tmemProfileRate = _r$9;\n\t\t_r$10 = flag.String(\"test.cpuprofile\", \"\", \"write a cpu profile to the named file during execution\"); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }\n\t\tcpuProfile = _r$10;\n\t\t_r$11 = flag.String(\"test.blockprofile\", \"\", \"write a goroutine blocking profile to the named file after execution\"); /* */ $s = 24; case 24: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }\n\t\tblockProfile = _r$11;\n\t\t_r$12 = flag.Int(\"test.blockprofilerate\", 1, \"if >= 0, calls runtime.SetBlockProfileRate()\"); /* */ $s = 25; case 25: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }\n\t\tblockProfileRate = _r$12;\n\t\t_r$13 = flag.Duration(\"test.timeout\", new time.Duration(0, 0), \"if positive, sets an aggregate time limit for all tests\"); /* */ $s = 26; case 26: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }\n\t\ttimeout = _r$13;\n\t\t_r$14 = flag.String(\"test.cpu\", \"\", \"comma-separated list of number of CPUs to use for each test\"); /* */ $s = 27; case 27: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }\n\t\tcpuListStr = _r$14;\n\t\t_r$15 = flag.Int(\"test.parallel\", runtime.GOMAXPROCS(0), \"maximum test parallelism\"); /* */ $s = 28; case 28: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }\n\t\tparallel = _r$15;\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"math/rand\"] = (function() {\n\tvar $pkg = {}, $init, nosync, math, testing, Source, Rand, lockedSource, rngSource, sliceType$1, ptrType$1, ptrType$2, arrayType, ptrType$3, ke, we, fe, kn, wn, fn, globalRand, rng_cooked, absInt32, NewSource, New, seedrand;\n\tnosync = $packages[\"github.com/gopherjs/gopherjs/nosync\"];\n\tmath = $packages[\"math\"];\n\ttesting = $packages[\"testing\"];\n\tSource = $pkg.Source = $newType(8, $kindInterface, \"rand.Source\", \"Source\", \"math/rand\", null);\n\tRand = $pkg.Rand = $newType(0, $kindStruct, \"rand.Rand\", \"Rand\", \"math/rand\", function(src_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.src = $ifaceNil;\n\t\t\treturn;\n\t\t}\n\t\tthis.src = src_;\n\t});\n\tlockedSource = $pkg.lockedSource = $newType(0, $kindStruct, \"rand.lockedSource\", \"lockedSource\", \"math/rand\", function(lk_, src_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.lk = new nosync.Mutex.ptr();\n\t\t\tthis.src = $ifaceNil;\n\t\t\treturn;\n\t\t}\n\t\tthis.lk = lk_;\n\t\tthis.src = src_;\n\t});\n\trngSource = $pkg.rngSource = $newType(0, $kindStruct, \"rand.rngSource\", \"rngSource\", \"math/rand\", function(tap_, feed_, vec_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.tap = 0;\n\t\t\tthis.feed = 0;\n\t\t\tthis.vec = arrayType.zero();\n\t\t\treturn;\n\t\t}\n\t\tthis.tap = tap_;\n\t\tthis.feed = feed_;\n\t\tthis.vec = vec_;\n\t});\n\tsliceType$1 = $sliceType($Int);\n\tptrType$1 = $ptrType(Rand);\n\tptrType$2 = $ptrType(lockedSource);\n\tarrayType = $arrayType($Int64, 607);\n\tptrType$3 = $ptrType(rngSource);\n\tRand.ptr.prototype.ExpFloat64 = function() {\n\t\tvar $ptr, _r, _r$1, _r$2, _r$3, i, j, r, x, x$1, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; j = $f.j; r = $f.r; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tr = this;\n\t\t/* while (true) { */ case 1:\n\t\t\t_r = r.Uint32(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\tj = _r;\n\t\t\ti = (j & 255) >>> 0;\n\t\t\tx = j * ((i < 0 || i >= we.length) ? $throwRuntimeError(\"index out of range\") : we[i]);\n\t\t\tif (j < ((i < 0 || i >= ke.length) ? $throwRuntimeError(\"index out of range\") : ke[i])) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t/* */ if (i === 0) { $s = 4; continue; }\n\t\t\t/* */ $s = 5; continue;\n\t\t\t/* if (i === 0) { */ case 4:\n\t\t\t\t_r$1 = r.Float64(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t\t_r$2 = math.Log(_r$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\treturn 7.69711747013105 - _r$2;\n\t\t\t/* } */ case 5:\n\t\t\t_r$3 = r.Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t/* */ if ($fround(((i < 0 || i >= fe.length) ? $throwRuntimeError(\"index out of range\") : fe[i]) + $fround($fround(_r$3) * ($fround((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? $throwRuntimeError(\"index out of range\") : fe[x$1])) - ((i < 0 || i >= fe.length) ? $throwRuntimeError(\"index out of range\") : fe[i]))))) < $fround(math.Exp(-x))) { $s = 8; continue; }\n\t\t\t/* */ $s = 9; continue;\n\t\t\t/* if ($fround(((i < 0 || i >= fe.length) ? $throwRuntimeError(\"index out of range\") : fe[i]) + $fround($fround(_r$3) * ($fround((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? $throwRuntimeError(\"index out of range\") : fe[x$1])) - ((i < 0 || i >= fe.length) ? $throwRuntimeError(\"index out of range\") : fe[i]))))) < $fround(math.Exp(-x))) { */ case 8:\n\t\t\t\treturn x;\n\t\t\t/* } */ case 9:\n\t\t/* } */ $s = 1; continue; case 2:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.ExpFloat64 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.j = j; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tRand.prototype.ExpFloat64 = function() { return this.$val.ExpFloat64(); };\n\tabsInt32 = function(i) {\n\t\tvar $ptr, i;\n\t\tif (i < 0) {\n\t\t\treturn (-i >>> 0);\n\t\t}\n\t\treturn (i >>> 0);\n\t};\n\tRand.ptr.prototype.NormFloat64 = function() {\n\t\tvar $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, i, j, r, x, x$1, y, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; i = $f.i; j = $f.j; r = $f.r; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tr = this;\n\t\t/* while (true) { */ case 1:\n\t\t\t_r = r.Uint32(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\tj = (_r >> 0);\n\t\t\ti = j & 127;\n\t\t\tx = j * ((i < 0 || i >= wn.length) ? $throwRuntimeError(\"index out of range\") : wn[i]);\n\t\t\tif (absInt32(j) < ((i < 0 || i >= kn.length) ? $throwRuntimeError(\"index out of range\") : kn[i])) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t/* */ if (i === 0) { $s = 4; continue; }\n\t\t\t/* */ $s = 5; continue;\n\t\t\t/* if (i === 0) { */ case 4:\n\t\t\t\t/* while (true) { */ case 6:\n\t\t\t\t\t_r$1 = r.Float64(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$2 = math.Log(_r$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\t\t\tx = -_r$2 * 0.29047645161474317;\n\t\t\t\t\t_r$3 = r.Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\t\t\t_r$4 = math.Log(_r$3); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t\t\ty = -_r$4;\n\t\t\t\t\tif (y + y >= x * x) {\n\t\t\t\t\t\t/* break; */ $s = 7; continue;\n\t\t\t\t\t}\n\t\t\t\t/* } */ $s = 6; continue; case 7:\n\t\t\t\tif (j > 0) {\n\t\t\t\t\treturn 3.442619855899 + x;\n\t\t\t\t}\n\t\t\t\treturn -3.442619855899 - x;\n\t\t\t/* } */ case 5:\n\t\t\t_r$5 = r.Float64(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t/* */ if ($fround(((i < 0 || i >= fn.length) ? $throwRuntimeError(\"index out of range\") : fn[i]) + $fround($fround(_r$5) * ($fround((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? $throwRuntimeError(\"index out of range\") : fn[x$1])) - ((i < 0 || i >= fn.length) ? $throwRuntimeError(\"index out of range\") : fn[i]))))) < $fround(math.Exp(-0.5 * x * x))) { $s = 12; continue; }\n\t\t\t/* */ $s = 13; continue;\n\t\t\t/* if ($fround(((i < 0 || i >= fn.length) ? $throwRuntimeError(\"index out of range\") : fn[i]) + $fround($fround(_r$5) * ($fround((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? $throwRuntimeError(\"index out of range\") : fn[x$1])) - ((i < 0 || i >= fn.length) ? $throwRuntimeError(\"index out of range\") : fn[i]))))) < $fround(math.Exp(-0.5 * x * x))) { */ case 12:\n\t\t\t\treturn x;\n\t\t\t/* } */ case 13:\n\t\t/* } */ $s = 1; continue; case 2:\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.NormFloat64 }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.i = i; $f.j = j; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tRand.prototype.NormFloat64 = function() { return this.$val.NormFloat64(); };\n\tNewSource = function(seed) {\n\t\tvar $ptr, rng, seed;\n\t\trng = $clone(new rngSource.ptr(), rngSource);\n\t\trng.Seed(seed);\n\t\treturn rng;\n\t};\n\t$pkg.NewSource = NewSource;\n\tNew = function(src) {\n\t\tvar $ptr, src;\n\t\treturn new Rand.ptr(src);\n\t};\n\t$pkg.New = New;\n\tRand.ptr.prototype.Seed = function(seed) {\n\t\tvar $ptr, r, seed, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tr = this;\n\t\t$r = r.src.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Seed }; } $f.$ptr = $ptr; $f.r = r; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tRand.prototype.Seed = function(seed) { return this.$val.Seed(seed); };\n\tRand.ptr.prototype.Int63 = function() {\n\t\tvar $ptr, _r, r, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tr = this;\n\t\t_r = r.src.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int63 }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tRand.prototype.Int63 = function() { return this.$val.Int63(); };\n\tRand.ptr.prototype.Uint32 = function() {\n\t\tvar $ptr, _r, r, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tr = this;\n\t\t_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn ($shiftRightInt64(_r, 31).$low >>> 0);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Uint32 }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tRand.prototype.Uint32 = function() { return this.$val.Uint32(); };\n\tRand.ptr.prototype.Int31 = function() {\n\t\tvar $ptr, _r, r, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tr = this;\n\t\t_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn ((x = $shiftRightInt64(_r, 32), x.$low + ((x.$high >> 31) * 4294967296)) >> 0);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int31 }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tRand.prototype.Int31 = function() { return this.$val.Int31(); };\n\tRand.ptr.prototype.Int = function() {\n\t\tvar $ptr, _r, r, u, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tr = this;\n\t\t_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tu = (_r.$low >>> 0);\n\t\treturn (((u << 1 >>> 0) >>> 1 >>> 0) >> 0);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tRand.prototype.Int = function() { return this.$val.Int(); };\n\tRand.ptr.prototype.Int63n = function(n) {\n\t\tvar $ptr, _r, _r$1, _r$2, max, n, r, v, x, x$1, x$2, x$3, x$4, x$5, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; max = $f.max; n = $f.n; r = $f.r; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tr = this;\n\t\tif ((n.$high < 0 || (n.$high === 0 && n.$low <= 0))) {\n\t\t\t$panic(new $String(\"invalid argument to Int63n\"));\n\t\t}\n\t\t/* */ if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) { */ case 1:\n\t\t\t_r = r.Int63(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\treturn (x$2 = _r, x$3 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));\n\t\t/* } */ case 2:\n\t\tmax = (x$4 = (x$5 = $div64(new $Uint64(2147483648, 0), new $Uint64(n.$high, n.$low), true), new $Uint64(2147483647 - x$5.$high, 4294967295 - x$5.$low)), new $Int64(x$4.$high, x$4.$low));\n\t\t_r$1 = r.Int63(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\tv = _r$1;\n\t\t/* while (true) { */ case 5:\n\t\t\t/* if (!((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low)))) { break; } */ if(!((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low)))) { $s = 6; continue; }\n\t\t\t_r$2 = r.Int63(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t\tv = _r$2;\n\t\t/* } */ $s = 5; continue; case 6:\n\t\treturn $div64(v, n, true);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int63n }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.max = max; $f.n = n; $f.r = r; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tRand.prototype.Int63n = function(n) { return this.$val.Int63n(n); };\n\tRand.ptr.prototype.Int31n = function(n) {\n\t\tvar $ptr, _r, _r$1, _r$2, _r$3, _r$4, max, n, r, v, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; max = $f.max; n = $f.n; r = $f.r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tr = this;\n\t\tif (n <= 0) {\n\t\t\t$panic(new $String(\"invalid argument to Int31n\"));\n\t\t}\n\t\t/* */ if ((n & ((n - 1 >> 0))) === 0) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if ((n & ((n - 1 >> 0))) === 0) { */ case 1:\n\t\t\t_r = r.Int31(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\treturn _r & ((n - 1 >> 0));\n\t\t/* } */ case 2:\n\t\tmax = ((2147483647 - (_r$1 = 2147483648 % (n >>> 0), _r$1 === _r$1 ? _r$1 : $throwRuntimeError(\"integer divide by zero\")) >>> 0) >> 0);\n\t\t_r$2 = r.Int31(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\tv = _r$2;\n\t\t/* while (true) { */ case 5:\n\t\t\t/* if (!(v > max)) { break; } */ if(!(v > max)) { $s = 6; continue; }\n\t\t\t_r$3 = r.Int31(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\tv = _r$3;\n\t\t/* } */ $s = 5; continue; case 6:\n\t\treturn (_r$4 = v % n, _r$4 === _r$4 ? _r$4 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int31n }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.max = max; $f.n = n; $f.r = r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tRand.prototype.Int31n = function(n) { return this.$val.Int31n(n); };\n\tRand.ptr.prototype.Intn = function(n) {\n\t\tvar $ptr, _r, _r$1, n, r, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; n = $f.n; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tr = this;\n\t\tif (n <= 0) {\n\t\t\t$panic(new $String(\"invalid argument to Intn\"));\n\t\t}\n\t\t/* */ if (n <= 2147483647) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (n <= 2147483647) { */ case 1:\n\t\t\t_r = r.Int31n((n >> 0)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\treturn (_r >> 0);\n\t\t/* } */ case 2:\n\t\t_r$1 = r.Int63n(new $Int64(0, n)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn ((x = _r$1, x.$low + ((x.$high >> 31) * 4294967296)) >> 0);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Intn }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.n = n; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tRand.prototype.Intn = function(n) { return this.$val.Intn(n); };\n\tRand.ptr.prototype.Float64 = function() {\n\t\tvar $ptr, _r, f, r, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tr = this;\n\t\t_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tf = $flatten64(_r) / 9.223372036854776e+18;\n\t\tif (f === 1) {\n\t\t\tf = 0;\n\t\t}\n\t\treturn f;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Float64 }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tRand.prototype.Float64 = function() { return this.$val.Float64(); };\n\tRand.ptr.prototype.Float32 = function() {\n\t\tvar $ptr, _r, f, r, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tr = this;\n\t\t_r = r.Float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tf = $fround(_r);\n\t\tif (f === 1) {\n\t\t\tf = 0;\n\t\t}\n\t\treturn f;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Float32 }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tRand.prototype.Float32 = function() { return this.$val.Float32(); };\n\tRand.ptr.prototype.Perm = function(n) {\n\t\tvar $ptr, _r, i, j, m, n, r, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; j = $f.j; m = $f.m; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tr = this;\n\t\tm = $makeSlice(sliceType$1, n);\n\t\ti = 0;\n\t\t/* while (true) { */ case 1:\n\t\t\t/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }\n\t\t\t_r = r.Intn(i + 1 >> 0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\tj = _r;\n\t\t\t((i < 0 || i >= m.$length) ? $throwRuntimeError(\"index out of range\") : m.$array[m.$offset + i] = ((j < 0 || j >= m.$length) ? $throwRuntimeError(\"index out of range\") : m.$array[m.$offset + j]));\n\t\t\t((j < 0 || j >= m.$length) ? $throwRuntimeError(\"index out of range\") : m.$array[m.$offset + j] = i);\n\t\t\ti = i + (1) >> 0;\n\t\t/* } */ $s = 1; continue; case 2:\n\t\treturn m;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Perm }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.j = j; $f.m = m; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tRand.prototype.Perm = function(n) { return this.$val.Perm(n); };\n\tlockedSource.ptr.prototype.Int63 = function() {\n\t\tvar $ptr, _r, n, r, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = new $Int64(0, 0);\n\t\tr = this;\n\t\tr.lk.Lock();\n\t\t_r = r.src.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tn = _r;\n\t\tr.lk.Unlock();\n\t\treturn n;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Int63 }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tlockedSource.prototype.Int63 = function() { return this.$val.Int63(); };\n\tlockedSource.ptr.prototype.Seed = function(seed) {\n\t\tvar $ptr, r, seed, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tr = this;\n\t\tr.lk.Lock();\n\t\t$r = r.src.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tr.lk.Unlock();\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Seed }; } $f.$ptr = $ptr; $f.r = r; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tlockedSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };\n\tseedrand = function(x) {\n\t\tvar $ptr, _q, _r, hi, lo, x;\n\t\thi = (_q = x / 44488, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\tlo = (_r = x % 44488, _r === _r ? _r : $throwRuntimeError(\"integer divide by zero\"));\n\t\tx = ((((48271 >>> 16 << 16) * lo >> 0) + (48271 << 16 >>> 16) * lo) >> 0) - ((((3399 >>> 16 << 16) * hi >> 0) + (3399 << 16 >>> 16) * hi) >> 0) >> 0;\n\t\tif (x < 0) {\n\t\t\tx = x + (2147483647) >> 0;\n\t\t}\n\t\treturn x;\n\t};\n\trngSource.ptr.prototype.Seed = function(seed) {\n\t\tvar $ptr, i, rng, seed, u, x, x$1, x$2, x$3, x$4, x$5;\n\t\trng = this;\n\t\trng.tap = 0;\n\t\trng.feed = 334;\n\t\tseed = $div64(seed, new $Int64(0, 2147483647), true);\n\t\tif ((seed.$high < 0 || (seed.$high === 0 && seed.$low < 0))) {\n\t\t\tseed = (x = new $Int64(0, 2147483647), new $Int64(seed.$high + x.$high, seed.$low + x.$low));\n\t\t}\n\t\tif ((seed.$high === 0 && seed.$low === 0)) {\n\t\t\tseed = new $Int64(0, 89482311);\n\t\t}\n\t\tx$1 = ((seed.$low + ((seed.$high >> 31) * 4294967296)) >> 0);\n\t\ti = -20;\n\t\twhile (true) {\n\t\t\tif (!(i < 607)) { break; }\n\t\t\tx$1 = seedrand(x$1);\n\t\t\tif (i >= 0) {\n\t\t\t\tu = new $Int64(0, 0);\n\t\t\t\tu = $shiftLeft64(new $Int64(0, x$1), 40);\n\t\t\t\tx$1 = seedrand(x$1);\n\t\t\t\tu = (x$2 = $shiftLeft64(new $Int64(0, x$1), 20), new $Int64(u.$high ^ x$2.$high, (u.$low ^ x$2.$low) >>> 0));\n\t\t\t\tx$1 = seedrand(x$1);\n\t\t\t\tu = (x$3 = new $Int64(0, x$1), new $Int64(u.$high ^ x$3.$high, (u.$low ^ x$3.$low) >>> 0));\n\t\t\t\tu = (x$4 = ((i < 0 || i >= rng_cooked.length) ? $throwRuntimeError(\"index out of range\") : rng_cooked[i]), new $Int64(u.$high ^ x$4.$high, (u.$low ^ x$4.$low) >>> 0));\n\t\t\t\t(x$5 = rng.vec, ((i < 0 || i >= x$5.length) ? $throwRuntimeError(\"index out of range\") : x$5[i] = new $Int64(u.$high & 2147483647, (u.$low & 4294967295) >>> 0)));\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t};\n\trngSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };\n\trngSource.ptr.prototype.Int63 = function() {\n\t\tvar $ptr, rng, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;\n\t\trng = this;\n\t\trng.tap = rng.tap - (1) >> 0;\n\t\tif (rng.tap < 0) {\n\t\t\trng.tap = rng.tap + (607) >> 0;\n\t\t}\n\t\trng.feed = rng.feed - (1) >> 0;\n\t\tif (rng.feed < 0) {\n\t\t\trng.feed = rng.feed + (607) >> 0;\n\t\t}\n\t\tx$7 = (x = (x$1 = (x$2 = rng.vec, x$3 = rng.feed, ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError(\"index out of range\") : x$2[x$3])), x$4 = (x$5 = rng.vec, x$6 = rng.tap, ((x$6 < 0 || x$6 >= x$5.length) ? $throwRuntimeError(\"index out of range\") : x$5[x$6])), new $Int64(x$1.$high + x$4.$high, x$1.$low + x$4.$low)), new $Int64(x.$high & 2147483647, (x.$low & 4294967295) >>> 0));\n\t\t(x$8 = rng.vec, x$9 = rng.feed, ((x$9 < 0 || x$9 >= x$8.length) ? $throwRuntimeError(\"index out of range\") : x$8[x$9] = x$7));\n\t\treturn x$7;\n\t};\n\trngSource.prototype.Int63 = function() { return this.$val.Int63(); };\n\tptrType$1.methods = [{prop: \"ExpFloat64\", name: \"ExpFloat64\", pkg: \"\", typ: $funcType([], [$Float64], false)}, {prop: \"NormFloat64\", name: \"NormFloat64\", pkg: \"\", typ: $funcType([], [$Float64], false)}, {prop: \"Seed\", name: \"Seed\", pkg: \"\", typ: $funcType([$Int64], [], false)}, {prop: \"Int63\", name: \"Int63\", pkg: \"\", typ: $funcType([], [$Int64], false)}, {prop: \"Uint32\", name: \"Uint32\", pkg: \"\", typ: $funcType([], [$Uint32], false)}, {prop: \"Int31\", name: \"Int31\", pkg: \"\", typ: $funcType([], [$Int32], false)}, {prop: \"Int\", name: \"Int\", pkg: \"\", typ: $funcType([], [$Int], false)}, {prop: \"Int63n\", name: \"Int63n\", pkg: \"\", typ: $funcType([$Int64], [$Int64], false)}, {prop: \"Int31n\", name: \"Int31n\", pkg: \"\", typ: $funcType([$Int32], [$Int32], false)}, {prop: \"Intn\", name: \"Intn\", pkg: \"\", typ: $funcType([$Int], [$Int], false)}, {prop: \"Float64\", name: \"Float64\", pkg: \"\", typ: $funcType([], [$Float64], false)}, {prop: \"Float32\", name: \"Float32\", pkg: \"\", typ: $funcType([], [$Float32], false)}, {prop: \"Perm\", name: \"Perm\", pkg: \"\", typ: $funcType([$Int], [sliceType$1], false)}];\n\tptrType$2.methods = [{prop: \"Int63\", name: \"Int63\", pkg: \"\", typ: $funcType([], [$Int64], false)}, {prop: \"Seed\", name: \"Seed\", pkg: \"\", typ: $funcType([$Int64], [], false)}];\n\tptrType$3.methods = [{prop: \"Seed\", name: \"Seed\", pkg: \"\", typ: $funcType([$Int64], [], false)}, {prop: \"Int63\", name: \"Int63\", pkg: \"\", typ: $funcType([], [$Int64], false)}];\n\tSource.init([{prop: \"Int63\", name: \"Int63\", pkg: \"\", typ: $funcType([], [$Int64], false)}, {prop: \"Seed\", name: \"Seed\", pkg: \"\", typ: $funcType([$Int64], [], false)}]);\n\tRand.init([{prop: \"src\", name: \"src\", pkg: \"math/rand\", typ: Source, tag: \"\"}]);\n\tlockedSource.init([{prop: \"lk\", name: \"lk\", pkg: \"math/rand\", typ: nosync.Mutex, tag: \"\"}, {prop: \"src\", name: \"src\", pkg: \"math/rand\", typ: Source, tag: \"\"}]);\n\trngSource.init([{prop: \"tap\", name: \"tap\", pkg: \"math/rand\", typ: $Int, tag: \"\"}, {prop: \"feed\", name: \"feed\", pkg: \"math/rand\", typ: $Int, tag: \"\"}, {prop: \"vec\", name: \"vec\", pkg: \"math/rand\", typ: arrayType, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = nosync.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = testing.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tke = $toNativeArray($kindUint32, [3801129273, 0, 2615860924, 3279400049, 3571300752, 3733536696, 3836274812, 3906990442, 3958562475, 3997804264, 4028649213, 4053523342, 4074002619, 4091154507, 4105727352, 4118261130, 4129155133, 4138710916, 4147160435, 4154685009, 4161428406, 4167506077, 4173011791, 4178022498, 4182601930, 4186803325, 4190671498, 4194244443, 4197554582, 4200629752, 4203493986, 4206168142, 4208670408, 4211016720, 4213221098, 4215295924, 4217252177, 4219099625, 4220846988, 4222502074, 4224071896, 4225562770, 4226980400, 4228329951, 4229616109, 4230843138, 4232014925, 4233135020, 4234206673, 4235232866, 4236216336, 4237159604, 4238064994, 4238934652, 4239770563, 4240574564, 4241348362, 4242093539, 4242811568, 4243503822, 4244171579, 4244816032, 4245438297, 4246039419, 4246620374, 4247182079, 4247725394, 4248251127, 4248760037, 4249252839, 4249730206, 4250192773, 4250641138, 4251075867, 4251497493, 4251906522, 4252303431, 4252688672, 4253062674, 4253425844, 4253778565, 4254121205, 4254454110, 4254777611, 4255092022, 4255397640, 4255694750, 4255983622, 4256264513, 4256537670, 4256803325, 4257061702, 4257313014, 4257557464, 4257795244, 4258026541, 4258251531, 4258470383, 4258683258, 4258890309, 4259091685, 4259287526, 4259477966, 4259663135, 4259843154, 4260018142, 4260188212, 4260353470, 4260514019, 4260669958, 4260821380, 4260968374, 4261111028, 4261249421, 4261383632, 4261513736, 4261639802, 4261761900, 4261880092, 4261994441, 4262105003, 4262211835, 4262314988, 4262414513, 4262510454, 4262602857, 4262691764, 4262777212, 4262859239, 4262937878, 4263013162, 4263085118, 4263153776, 4263219158, 4263281289, 4263340187, 4263395872, 4263448358, 4263497660, 4263543789, 4263586755, 4263626565, 4263663224, 4263696735, 4263727099, 4263754314, 4263778377, 4263799282, 4263817020, 4263831582, 4263842955, 4263851124, 4263856071, 4263857776, 4263856218, 4263851370, 4263843206, 4263831695, 4263816804, 4263798497, 4263776735, 4263751476, 4263722676, 4263690284, 4263654251, 4263614520, 4263571032, 4263523724, 4263472530, 4263417377, 4263358192, 4263294892, 4263227394, 4263155608, 4263079437, 4262998781, 4262913534, 4262823581, 4262728804, 4262629075, 4262524261, 4262414220, 4262298801, 4262177846, 4262051187, 4261918645, 4261780032, 4261635148, 4261483780, 4261325704, 4261160681, 4260988457, 4260808763, 4260621313, 4260425802, 4260221905, 4260009277, 4259787550, 4259556329, 4259315195, 4259063697, 4258801357, 4258527656, 4258242044, 4257943926, 4257632664, 4257307571, 4256967906, 4256612870, 4256241598, 4255853155, 4255446525, 4255020608, 4254574202, 4254106002, 4253614578, 4253098370, 4252555662, 4251984571, 4251383021, 4250748722, 4250079132, 4249371435, 4248622490, 4247828790, 4246986404, 4246090910, 4245137315, 4244119963, 4243032411, 4241867296, 4240616155, 4239269214, 4237815118, 4236240596, 4234530035, 4232664930, 4230623176, 4228378137, 4225897409, 4223141146, 4220059768, 4216590757, 4212654085, 4208145538, 4202926710, 4196809522, 4189531420, 4180713890, 4169789475, 4155865042, 4137444620, 4111806704, 4073393724, 4008685917, 3873074895]);\n\t\twe = $toNativeArray($kindFloat32, [2.0249555365836613e-09, 1.4866739783681027e-11, 2.4409616689036184e-11, 3.1968806074589295e-11, 3.844677007314168e-11, 4.42282044321729e-11, 4.951644302919611e-11, 5.443358958023836e-11, 5.905943789574764e-11, 6.34494193296753e-11, 6.764381416113352e-11, 7.167294535648239e-11, 7.556032188826833e-11, 7.932458162551725e-11, 8.298078890689453e-11, 8.654132271912474e-11, 9.001651507523079e-11, 9.341507428706208e-11, 9.674443190998971e-11, 1.0001099254308699e-10, 1.0322031424037093e-10, 1.0637725422757427e-10, 1.0948611461891744e-10, 1.1255067711157807e-10, 1.1557434870246297e-10, 1.1856014781042035e-10, 1.2151082917633005e-10, 1.2442885610752796e-10, 1.2731647680563896e-10, 1.3017574518325858e-10, 1.330085347417409e-10, 1.3581656632677408e-10, 1.386014220061682e-10, 1.413645728254309e-10, 1.4410737880776736e-10, 1.4683107507629245e-10, 1.4953686899854546e-10, 1.522258291641876e-10, 1.5489899640730442e-10, 1.575573282952547e-10, 1.6020171300645814e-10, 1.628330109637588e-10, 1.6545202707884954e-10, 1.68059510752272e-10, 1.7065616975120435e-10, 1.73242697965037e-10, 1.758197337720091e-10, 1.783878739169964e-10, 1.8094774290045024e-10, 1.834998542005195e-10, 1.8604476292871652e-10, 1.8858298256319017e-10, 1.9111498494872592e-10, 1.9364125580789704e-10, 1.9616222535212557e-10, 1.9867835154840918e-10, 2.011900368525943e-10, 2.0369768372052732e-10, 2.062016807302669e-10, 2.0870240258208383e-10, 2.1120022397624894e-10, 2.136955057352452e-10, 2.1618855317040442e-10, 2.1867974098199738e-10, 2.2116936060356807e-10, 2.2365774510202385e-10, 2.2614519978869652e-10, 2.2863201609713002e-10, 2.3111849933865614e-10, 2.3360494094681883e-10, 2.3609159072179864e-10, 2.3857874009713953e-10, 2.4106666662859766e-10, 2.4355562011635357e-10, 2.460458781161634e-10, 2.485376904282077e-10, 2.5103127909709144e-10, 2.5352694943414633e-10, 2.560248957284017e-10, 2.585253955356137e-10, 2.610286709003873e-10, 2.6353494386732734e-10, 2.6604446423661443e-10, 2.6855745405285347e-10, 2.71074163116225e-10, 2.7359478571575835e-10, 2.7611959940720965e-10, 2.786487707240326e-10, 2.8118254946640775e-10, 2.8372118543451563e-10, 2.8626484516180994e-10, 2.8881380620404684e-10, 2.9136826285025563e-10, 2.9392840938946563e-10, 2.96494523377433e-10, 2.990667713476114e-10, 3.016454031001814e-10, 3.042306406797479e-10, 3.068226783753403e-10, 3.09421765987139e-10, 3.12028125559749e-10, 3.1464195138219964e-10, 3.17263521010247e-10, 3.1989300097734485e-10, 3.225306410836737e-10, 3.2517669112941405e-10, 3.2783134540359526e-10, 3.3049485370639786e-10, 3.3316743808242677e-10, 3.3584937608743815e-10, 3.385408342548857e-10, 3.4124211789610115e-10, 3.4395342130011386e-10, 3.4667499426710435e-10, 3.494071143528288e-10, 3.521500313574677e-10, 3.54903967325626e-10, 3.576691720574843e-10, 3.6044595086437425e-10, 3.632345535464765e-10, 3.660352021483959e-10, 3.688482297370399e-10, 3.716738583570134e-10, 3.7451239331964814e-10, 3.773641121807003e-10, 3.802292924959261e-10, 3.831082673322328e-10, 3.8600128648980103e-10, 3.8890865527996255e-10, 3.9183070676962473e-10, 3.9476774627011935e-10, 3.977200790927782e-10, 4.006880383045086e-10, 4.0367195697221803e-10, 4.066721681628138e-10, 4.0968900494320337e-10, 4.127228558914453e-10, 4.15774054074447e-10, 4.188429603146915e-10, 4.2192993543466173e-10, 4.25035395767992e-10, 4.2815970213716525e-10, 4.313032986313914e-10, 4.3446651831757777e-10, 4.376498607960855e-10, 4.408536868893975e-10, 4.4407846844229937e-10, 4.4732464954400086e-10, 4.5059267428371186e-10, 4.538830145062178e-10, 4.5719619756745544e-10, 4.605326675566346e-10, 4.638929240741163e-10, 4.672775499869886e-10, 4.706869893844612e-10, 4.74121908400349e-10, 4.775827511238617e-10, 4.810701836888143e-10, 4.845848167178701e-10, 4.881271498113904e-10, 4.916979601254923e-10, 4.952977472605369e-10, 4.989272883726414e-10, 5.025872495956207e-10, 5.062783525744408e-10, 5.100013189540675e-10, 5.13756870379467e-10, 5.175458395179078e-10, 5.21369003525507e-10, 5.252272505806843e-10, 5.29121357839557e-10, 5.330522134805449e-10, 5.3702081670437e-10, 5.41028055689452e-10, 5.450749851476644e-10, 5.491624932574268e-10, 5.532918012640664e-10, 5.574638528571541e-10, 5.616799247931681e-10, 5.659410717839819e-10, 5.702485705860738e-10, 5.746036979559221e-10, 5.790077306500052e-10, 5.83462111958255e-10, 5.879682296594524e-10, 5.925275825546805e-10, 5.971417249561739e-10, 6.01812211176167e-10, 6.065408175714992e-10, 6.113292094767075e-10, 6.16179329782085e-10, 6.21092954844471e-10, 6.260721940876124e-10, 6.311191569352559e-10, 6.362359528111483e-10, 6.414249686947926e-10, 6.466885360545405e-10, 6.520292639144998e-10, 6.574497612987784e-10, 6.629528592760892e-10, 6.685415554485985e-10, 6.742187919073217e-10, 6.799880103436351e-10, 6.858525969377638e-10, 6.918161599145378e-10, 6.978825850545434e-10, 7.040559801829716e-10, 7.103406751696184e-10, 7.167412219288849e-10, 7.232625609532306e-10, 7.2990985477972e-10, 7.366885990123251e-10, 7.436047333442275e-10, 7.506645305355164e-10, 7.57874762946642e-10, 7.652426470272644e-10, 7.727759543385559e-10, 7.804830115532013e-10, 7.883728114777e-10, 7.964550685635174e-10, 8.047402189070851e-10, 8.132396422944055e-10, 8.219657177122031e-10, 8.309318788590758e-10, 8.401527806789488e-10, 8.496445214056791e-10, 8.594246980742071e-10, 8.695127395874636e-10, 8.799300732498239e-10, 8.90700457834015e-10, 9.01850316648023e-10, 9.134091816243028e-10, 9.254100818978372e-10, 9.37890431984556e-10, 9.508922538259412e-10, 9.64463842123564e-10, 9.78660263939446e-10, 9.935448019859905e-10, 1.0091912860943353e-09, 1.0256859805934937e-09, 1.0431305819125214e-09, 1.0616465484503124e-09, 1.0813799855569073e-09, 1.1025096391392708e-09, 1.1252564435793033e-09, 1.149898620766976e-09, 1.176793218427008e-09, 1.2064089727203964e-09, 1.2393785997488749e-09, 1.2765849488616254e-09, 1.319313880365769e-09, 1.36954347862428e-09, 1.4305497897382224e-09, 1.5083649884672923e-09, 1.6160853766322703e-09, 1.7921247819074893e-09]);\n\t\tfe = $toNativeArray($kindFloat32, [1, 0.9381436705589294, 0.900469958782196, 0.8717043399810791, 0.847785472869873, 0.8269932866096497, 0.8084216713905334, 0.7915276288986206, 0.7759568691253662, 0.7614634037017822, 0.7478685975074768, 0.7350381016731262, 0.7228676676750183, 0.7112747430801392, 0.7001926302909851, 0.6895664930343628, 0.6793505549430847, 0.669506311416626, 0.6600008606910706, 0.6508058309555054, 0.6418967247009277, 0.633251965045929, 0.62485271692276, 0.6166821718215942, 0.608725368976593, 0.6009689569473267, 0.5934008955955505, 0.5860103368759155, 0.5787873864173889, 0.5717230439186096, 0.5648092031478882, 0.5580382943153381, 0.5514034032821655, 0.5448982119560242, 0.5385168790817261, 0.5322538614273071, 0.526104211807251, 0.5200631618499756, 0.5141264200210571, 0.5082897543907166, 0.5025495290756226, 0.4969019889831543, 0.4913438558578491, 0.4858720004558563, 0.48048335313796997, 0.4751752018928528, 0.4699448347091675, 0.4647897481918335, 0.4597076177597046, 0.4546961486339569, 0.4497532546520233, 0.44487687945365906, 0.4400651156902313, 0.4353161156177521, 0.4306281507015228, 0.42599955201148987, 0.42142874002456665, 0.4169141948223114, 0.4124544560909271, 0.40804818272590637, 0.4036940038204193, 0.39939069747924805, 0.3951369822025299, 0.39093172550201416, 0.38677382469177246, 0.38266217708587646, 0.378595769405365, 0.37457355856895447, 0.37059465050697327, 0.366658091545105, 0.362762987613678, 0.358908474445343, 0.35509374737739563, 0.35131800174713135, 0.3475804924964905, 0.34388044476509094, 0.34021714329719543, 0.33658990263938904, 0.3329980671405792, 0.3294409513473511, 0.32591795921325684, 0.32242849469184875, 0.3189719021320343, 0.3155476748943329, 0.31215524673461914, 0.3087940812110901, 0.30546361207962036, 0.30216339230537415, 0.29889291524887085, 0.29565170407295227, 0.2924392819404602, 0.2892552316188812, 0.28609907627105713, 0.2829704284667969, 0.27986884117126465, 0.2767939269542694, 0.2737452983856201, 0.2707225978374481, 0.26772540807724, 0.26475343108177185, 0.2618062496185303, 0.258883535861969, 0.2559850215911865, 0.25311028957366943, 0.25025907158851624, 0.24743106961250305, 0.2446259707212448, 0.24184346199035645, 0.23908329010009766, 0.23634515702724457, 0.2336287796497345, 0.23093391954898834, 0.22826029360294342, 0.22560766339302063, 0.22297576069831848, 0.22036437690258026, 0.21777324378490448, 0.21520215272903442, 0.212650865316391, 0.21011915802955627, 0.20760682225227356, 0.20511364936828613, 0.20263944566249847, 0.20018397271633148, 0.19774706661701202, 0.1953285187482834, 0.19292815029621124, 0.19054576754570007, 0.18818120658397675, 0.18583425879478455, 0.18350479006767273, 0.18119260668754578, 0.17889754474163055, 0.17661945521831512, 0.17435817420482635, 0.1721135377883911, 0.16988539695739746, 0.16767361760139465, 0.16547803580760956, 0.16329853236675262, 0.16113494336605072, 0.1589871346950531, 0.15685498714447021, 0.15473836660385132, 0.15263713896274567, 0.1505511850118637, 0.1484803706407547, 0.14642459154129028, 0.1443837285041809, 0.14235764741897583, 0.1403462439775467, 0.13834942877292633, 0.136367067694664, 0.13439907133579254, 0.1324453204870224, 0.1305057406425476, 0.12858019769191742, 0.12666863203048706, 0.12477091699838638, 0.12288697808980942, 0.1210167184472084, 0.11916005611419678, 0.11731690168380737, 0.11548716574907303, 0.11367076635360718, 0.11186762899160385, 0.11007767915725708, 0.1083008274435997, 0.10653700679540634, 0.10478614270687103, 0.1030481606721878, 0.10132300108671188, 0.0996105819940567, 0.09791085124015808, 0.09622374176979065, 0.09454918652772903, 0.09288713335990906, 0.09123751521110535, 0.08960027992725372, 0.08797537535429001, 0.08636274188756943, 0.0847623273730278, 0.08317409455776215, 0.08159798383712769, 0.08003395050764084, 0.07848194986581802, 0.07694194465875626, 0.07541389018297195, 0.07389774918556213, 0.07239348441362381, 0.070901058614254, 0.06942043453454971, 0.06795158982276917, 0.06649449467658997, 0.06504911929368973, 0.06361543387174606, 0.06219341605901718, 0.06078304722905159, 0.0593843050301075, 0.05799717456102371, 0.05662164092063904, 0.05525768920779228, 0.05390531197190285, 0.05256449431180954, 0.05123523622751236, 0.04991753399372101, 0.04861138388514519, 0.047316793352365494, 0.04603376239538193, 0.044762298464775085, 0.04350241273641586, 0.04225412383675575, 0.04101744294166565, 0.039792392402887344, 0.03857899457216263, 0.03737728297710419, 0.03618728369474411, 0.03500903770327568, 0.03384258225560188, 0.0326879620552063, 0.031545232981443405, 0.030414443463087082, 0.0292956605553627, 0.028188949450850487, 0.027094384655356407, 0.02601204626262188, 0.024942025542259216, 0.023884421214461327, 0.022839335724711418, 0.021806888282299042, 0.020787203684449196, 0.019780423492193222, 0.018786700442433357, 0.017806200310587883, 0.016839107498526573, 0.015885621309280396, 0.014945968054234982, 0.01402039173990488, 0.013109165243804455, 0.012212592177093029, 0.011331013403832912, 0.010464809834957123, 0.009614413604140282, 0.008780314587056637, 0.007963077165186405, 0.007163353264331818, 0.0063819061033427715, 0.005619642324745655, 0.004877655766904354, 0.004157294984906912, 0.003460264764726162, 0.0027887988835573196, 0.0021459676790982485, 0.001536299823783338, 0.0009672692976891994, 0.0004541343660093844]);\n\t\tkn = $toNativeArray($kindUint32, [1991057938, 0, 1611602771, 1826899878, 1918584482, 1969227037, 2001281515, 2023368125, 2039498179, 2051788381, 2061460127, 2069267110, 2075699398, 2081089314, 2085670119, 2089610331, 2093034710, 2096037586, 2098691595, 2101053571, 2103168620, 2105072996, 2106796166, 2108362327, 2109791536, 2111100552, 2112303493, 2113412330, 2114437283, 2115387130, 2116269447, 2117090813, 2117856962, 2118572919, 2119243101, 2119871411, 2120461303, 2121015852, 2121537798, 2122029592, 2122493434, 2122931299, 2123344971, 2123736059, 2124106020, 2124456175, 2124787725, 2125101763, 2125399283, 2125681194, 2125948325, 2126201433, 2126441213, 2126668298, 2126883268, 2127086657, 2127278949, 2127460589, 2127631985, 2127793506, 2127945490, 2128088244, 2128222044, 2128347141, 2128463758, 2128572095, 2128672327, 2128764606, 2128849065, 2128925811, 2128994934, 2129056501, 2129110560, 2129157136, 2129196237, 2129227847, 2129251929, 2129268426, 2129277255, 2129278312, 2129271467, 2129256561, 2129233410, 2129201800, 2129161480, 2129112170, 2129053545, 2128985244, 2128906855, 2128817916, 2128717911, 2128606255, 2128482298, 2128345305, 2128194452, 2128028813, 2127847342, 2127648860, 2127432031, 2127195339, 2126937058, 2126655214, 2126347546, 2126011445, 2125643893, 2125241376, 2124799783, 2124314271, 2123779094, 2123187386, 2122530867, 2121799464, 2120980787, 2120059418, 2119015917, 2117825402, 2116455471, 2114863093, 2112989789, 2110753906, 2108037662, 2104664315, 2100355223, 2094642347, 2086670106, 2074676188, 2054300022, 2010539237]);\n\t\twn = $toNativeArray($kindFloat32, [1.7290404663583558e-09, 1.2680928529462676e-10, 1.689751810696194e-10, 1.9862687883343e-10, 2.223243117382978e-10, 2.4244936613904144e-10, 2.601613091623989e-10, 2.761198769629658e-10, 2.9073962681813725e-10, 3.042996965518796e-10, 3.169979556627567e-10, 3.289802041894774e-10, 3.4035738116777736e-10, 3.5121602848242617e-10, 3.61625090983253e-10, 3.7164057942185025e-10, 3.813085680537398e-10, 3.906675816178762e-10, 3.997501218933053e-10, 4.0858399996679395e-10, 4.1719308563337165e-10, 4.255982233303257e-10, 4.3381759295968436e-10, 4.4186720948857783e-10, 4.497613115272969e-10, 4.57512583373898e-10, 4.6513240481438345e-10, 4.726310454117311e-10, 4.800177477726209e-10, 4.873009773476156e-10, 4.944885056978876e-10, 5.015873272284921e-10, 5.086040477664255e-10, 5.155446070048697e-10, 5.224146670812502e-10, 5.292193350214802e-10, 5.359634958068682e-10, 5.426517013518151e-10, 5.492881705038144e-10, 5.558769555769061e-10, 5.624218868405251e-10, 5.689264614971989e-10, 5.75394121238304e-10, 5.818281967329142e-10, 5.882316855831959e-10, 5.946076964136182e-10, 6.009590047817426e-10, 6.072883862451306e-10, 6.135985053390414e-10, 6.19892026598734e-10, 6.261713370037114e-10, 6.324390455780815e-10, 6.386973727678935e-10, 6.449488165749528e-10, 6.511955974453087e-10, 6.574400468473129e-10, 6.636843297158634e-10, 6.699307220081607e-10, 6.761814441702541e-10, 6.824387166481927e-10, 6.887046488657234e-10, 6.949815167800466e-10, 7.012714853260604e-10, 7.075767749498141e-10, 7.13899661608508e-10, 7.202424212593428e-10, 7.266072743483676e-10, 7.329966078550854e-10, 7.394128087589991e-10, 7.458582640396116e-10, 7.523354716987285e-10, 7.588469852493063e-10, 7.653954137154528e-10, 7.719834771435785e-10, 7.786139510912449e-10, 7.852897221383159e-10, 7.920137878869582e-10, 7.987892014504894e-10, 8.056192379868321e-10, 8.125072836762115e-10, 8.194568912323064e-10, 8.264716688799467e-10, 8.3355555791087e-10, 8.407127216614185e-10, 8.479473234679347e-10, 8.552640262671218e-10, 8.626675485068347e-10, 8.701631637464402e-10, 8.777562010564566e-10, 8.854524335966119e-10, 8.932581896381464e-10, 9.011799639857543e-10, 9.092249730890956e-10, 9.174008219758889e-10, 9.25715837318819e-10, 9.341788453909317e-10, 9.42799727177146e-10, 9.515889187738935e-10, 9.605578554783278e-10, 9.697193048552322e-10, 9.790869226478094e-10, 9.886760299337993e-10, 9.985036131254788e-10, 1.008588212947359e-09, 1.0189509236369076e-09, 1.0296150598776421e-09, 1.040606933955246e-09, 1.0519566329136865e-09, 1.0636980185552147e-09, 1.0758701707302976e-09, 1.0885182755160372e-09, 1.101694735439196e-09, 1.115461056855338e-09, 1.1298901814171813e-09, 1.1450695946990663e-09, 1.1611052119775422e-09, 1.178127595480305e-09, 1.1962995039027646e-09, 1.2158286599728285e-09, 1.2369856250415978e-09, 1.2601323318151003e-09, 1.2857697129220469e-09, 1.3146201904845611e-09, 1.3477839955200466e-09, 1.3870635751089821e-09, 1.43574030442295e-09, 1.5008658760251592e-09, 1.6030947680434338e-09]);\n\t\tfn = $toNativeArray($kindFloat32, [1, 0.963599681854248, 0.9362826943397522, 0.9130436182022095, 0.8922816514968872, 0.8732430338859558, 0.8555005788803101, 0.8387836217880249, 0.8229072093963623, 0.8077383041381836, 0.7931770086288452, 0.7791460752487183, 0.7655841708183289, 0.7524415850639343, 0.7396772503852844, 0.7272568941116333, 0.7151514887809753, 0.7033361196517944, 0.6917891502380371, 0.6804918646812439, 0.6694276928901672, 0.6585819721221924, 0.6479418277740479, 0.6374954581260681, 0.6272324919700623, 0.6171433925628662, 0.6072195172309875, 0.5974531769752502, 0.5878370404243469, 0.5783646702766418, 0.5690299868583679, 0.5598273873329163, 0.550751805305481, 0.5417983531951904, 0.5329626798629761, 0.5242405533790588, 0.5156282186508179, 0.5071220397949219, 0.49871864914894104, 0.4904148280620575, 0.48220765590667725, 0.47409430146217346, 0.466072142124176, 0.45813870429992676, 0.45029163360595703, 0.44252872467041016, 0.4348478317260742, 0.42724698781967163, 0.41972434520721436, 0.41227802634239197, 0.40490642189979553, 0.39760786294937134, 0.3903807997703552, 0.3832238018512726, 0.3761354684829712, 0.3691144585609436, 0.36215949058532715, 0.3552693724632263, 0.3484429717063904, 0.3416791558265686, 0.33497685194015503, 0.32833510637283325, 0.3217529058456421, 0.3152293860912323, 0.30876362323760986, 0.3023548424243927, 0.2960021495819092, 0.2897048592567444, 0.28346219658851624, 0.2772735059261322, 0.271138072013855, 0.2650552988052368, 0.25902456045150757, 0.25304529070854187, 0.24711695313453674, 0.24123899638652802, 0.23541094362735748, 0.22963231801986694, 0.22390270233154297, 0.21822164952754974, 0.21258877217769623, 0.20700371265411377, 0.20146611332893372, 0.1959756463766098, 0.19053204357624054, 0.18513499200344086, 0.17978426814079285, 0.1744796335697174, 0.16922089457511902, 0.16400785744190216, 0.1588403731584549, 0.15371830761432648, 0.14864157140254974, 0.14361007511615753, 0.13862377405166626, 0.13368265330791473, 0.12878671288490295, 0.12393598258495331, 0.11913054436445236, 0.11437050998210907, 0.10965602099895477, 0.1049872562289238, 0.10036443918943405, 0.09578784555196762, 0.09125780314207077, 0.08677466958761215, 0.08233889937400818, 0.07795098423957825, 0.07361150532960892, 0.06932111829519272, 0.06508058309555054, 0.06089077144861221, 0.05675266310572624, 0.05266740173101425, 0.048636294901371, 0.044660862535238266, 0.040742866694927216, 0.03688438981771469, 0.03308788686990738, 0.029356317594647408, 0.025693291798233986, 0.02210330404341221, 0.018592102453112602, 0.015167297795414925, 0.011839478276669979, 0.0086244847625494, 0.005548994988203049, 0.0026696291752159595]);\n\t\trng_cooked = $toNativeArray($kindInt64, [new $Int64(1173834291, 3952672746), new $Int64(1081821761, 3130416987), new $Int64(324977939, 3414273807), new $Int64(1241840476, 2806224363), new $Int64(669549340, 1997590414), new $Int64(2103305448, 2402795971), new $Int64(1663160183, 1140819369), new $Int64(1120601685, 1788868961), new $Int64(1848035537, 1089001426), new $Int64(1235702047, 873593504), new $Int64(1911387977, 581324885), new $Int64(492609478, 1609182556), new $Int64(1069394745, 1241596776), new $Int64(1895445337, 1771189259), new $Int64(772864846, 3467012610), new $Int64(2006957225, 2344407434), new $Int64(402115761, 782467244), new $Int64(26335124, 3404933915), new $Int64(1063924276, 618867887), new $Int64(1178782866, 520164395), new $Int64(555910815, 1341358184), new $Int64(632398609, 665794848), new $Int64(1527227641, 3183648150), new $Int64(1781176124, 696329606), new $Int64(1789146075, 4151988961), new $Int64(60039534, 998951326), new $Int64(1535158725, 1364957564), new $Int64(63173359, 4090230633), new $Int64(649454641, 4009697548), new $Int64(248009524, 2569622517), new $Int64(778703922, 3742421481), new $Int64(1038377625, 1506914633), new $Int64(1738099768, 1983412561), new $Int64(236311649, 1436266083), new $Int64(1035966148, 3922894967), new $Int64(810508934, 1792680179), new $Int64(563141142, 1188796351), new $Int64(1349617468, 405968250), new $Int64(1044074554, 433754187), new $Int64(870549669, 4073162024), new $Int64(1053232044, 433121399), new $Int64(2451824, 4162580594), new $Int64(2010221076, 4132415622), new $Int64(611252600, 3033822028), new $Int64(2016407895, 824682382), new $Int64(2366218, 3583765414), new $Int64(1522878809, 535386927), new $Int64(1637219058, 2286693689), new $Int64(1453075389, 2968466525), new $Int64(193683513, 1351410206), new $Int64(1863677552, 1412813499), new $Int64(492736522, 4126267639), new $Int64(512765208, 2105529399), new $Int64(2132966268, 2413882233), new $Int64(947457634, 32226200), new $Int64(1149341356, 2032329073), new $Int64(106485445, 1356518208), new $Int64(79673492, 3430061722), new $Int64(663048513, 3820169661), new $Int64(481498454, 2981816134), new $Int64(1017155588, 4184371017), new $Int64(206574701, 2119206761), new $Int64(1295374591, 2472200560), new $Int64(1587026100, 2853524696), new $Int64(1307803389, 1681119904), new $Int64(1972496813, 95608918), new $Int64(392686347, 3690479145), new $Int64(941912722, 1397922290), new $Int64(988169623, 1516129515), new $Int64(1827305493, 1547420459), new $Int64(1311333971, 1470949486), new $Int64(194013850, 1336785672), new $Int64(2102397034, 4131677129), new $Int64(755205548, 4246329084), new $Int64(1004983461, 3788585631), new $Int64(2081005363, 3080389532), new $Int64(1501045284, 2215402037), new $Int64(391002300, 1171593935), new $Int64(1408774047, 1423855166), new $Int64(1628305930, 2276716302), new $Int64(1779030508, 2068027241), new $Int64(1369359303, 3427553297), new $Int64(189241615, 3289637845), new $Int64(1057480830, 3486407650), new $Int64(634572984, 3071877822), new $Int64(1159653919, 3363620705), new $Int64(1213226718, 4159821533), new $Int64(2070861710, 1894661), new $Int64(1472989750, 1156868282), new $Int64(348271067, 776219088), new $Int64(1646054810, 2425634259), new $Int64(1716021749, 680510161), new $Int64(1573220192, 1310101429), new $Int64(1095885995, 2964454134), new $Int64(1821788136, 3467098407), new $Int64(1990672920, 2109628894), new $Int64(7834944, 1232604732), new $Int64(309412934, 3261916179), new $Int64(1699175360, 434597899), new $Int64(235436061, 1624796439), new $Int64(521080809, 3589632480), new $Int64(1198416575, 864579159), new $Int64(208735487, 1380889830), new $Int64(619206309, 2654509477), new $Int64(1419738251, 1468209306), new $Int64(403198876, 100794388), new $Int64(956062190, 2991674471), new $Int64(1938816907, 2224662036), new $Int64(1973824487, 977097250), new $Int64(1351320195, 726419512), new $Int64(1964023751, 1747974366), new $Int64(1394388465, 1556430604), new $Int64(1097991433, 1080776742), new $Int64(1761636690, 280794874), new $Int64(117767733, 919835643), new $Int64(1180474222, 3434019658), new $Int64(196069168, 2461941785), new $Int64(133215641, 3615001066), new $Int64(417204809, 3103414427), new $Int64(790056561, 3380809712), new $Int64(879802240, 2724693469), new $Int64(547796833, 598827710), new $Int64(300924196, 3452273442), new $Int64(2071705424, 649274915), new $Int64(1346182319, 2585724112), new $Int64(636549385, 3165579553), new $Int64(1185578221, 2635894283), new $Int64(2094573470, 2053289721), new $Int64(985976581, 3169337108), new $Int64(1170569632, 144717764), new $Int64(1079216270, 1383666384), new $Int64(2022678706, 681540375), new $Int64(1375448925, 537050586), new $Int64(182715304, 315246468), new $Int64(226402871, 849323088), new $Int64(1262421183, 45543944), new $Int64(1201038398, 2319052083), new $Int64(2106775454, 3613090841), new $Int64(560472520, 2992171180), new $Int64(1765620479, 2068244785), new $Int64(917538188, 4239862634), new $Int64(777927839, 3892253031), new $Int64(720683925, 958186149), new $Int64(1724185863, 1877702262), new $Int64(1357886971, 837674867), new $Int64(1837048883, 1507589294), new $Int64(1905518400, 873336795), new $Int64(267722611, 2764496274), new $Int64(341003118, 4196182374), new $Int64(1080717893, 550964545), new $Int64(818747069, 420611474), new $Int64(222653272, 204265180), new $Int64(1549974541, 1787046383), new $Int64(1215581865, 3102292318), new $Int64(418321538, 1552199393), new $Int64(1243493047, 980542004), new $Int64(267284263, 3293718720), new $Int64(1179528763, 3771917473), new $Int64(599484404, 2195808264), new $Int64(252818753, 3894702887), new $Int64(780007692, 2099949527), new $Int64(1424094358, 338442522), new $Int64(490737398, 637158004), new $Int64(419862118, 281976339), new $Int64(574970164, 3619802330), new $Int64(1715552825, 3084554784), new $Int64(882872465, 4129772886), new $Int64(43084605, 1680378557), new $Int64(525521057, 3339087776), new $Int64(1680500332, 4220317857), new $Int64(211654685, 2959322499), new $Int64(1675600481, 1488354890), new $Int64(1312620086, 3958162143), new $Int64(920972075, 2773705983), new $Int64(1876039582, 225908689), new $Int64(963748535, 908216283), new $Int64(1541787429, 3574646075), new $Int64(319760557, 1936937569), new $Int64(1519770881, 75492235), new $Int64(816689472, 1935193178), new $Int64(2142521206, 2018250883), new $Int64(455141620, 3943126022), new $Int64(1546084160, 3066544345), new $Int64(1932392669, 2793082663), new $Int64(908474287, 3297036421), new $Int64(1640597065, 2206987825), new $Int64(1594236910, 807894872), new $Int64(366158341, 766252117), new $Int64(2060649606, 3833114345), new $Int64(845619743, 1255067973), new $Int64(1201145605, 741697208), new $Int64(671241040, 2810093753), new $Int64(1109032642, 4229340371), new $Int64(1462188720, 1361684224), new $Int64(988084219, 1906263026), new $Int64(475781207, 3904421704), new $Int64(1523946520, 1769075545), new $Int64(1062308525, 2621599764), new $Int64(1279509432, 3431891480), new $Int64(404732502, 1871896503), new $Int64(128756421, 1412808876), new $Int64(1605404688, 952876175), new $Int64(1917039957, 1824438899), new $Int64(1662295856, 1005035476), new $Int64(1990909507, 527508597), new $Int64(1288873303, 3066806859), new $Int64(565995893, 3244940914), new $Int64(1257737460, 209092916), new $Int64(1899814242, 1242699167), new $Int64(1433653252, 456723774), new $Int64(1776978905, 1001252870), new $Int64(1468772157, 2026725874), new $Int64(857254202, 2137562569), new $Int64(765939740, 3183366709), new $Int64(1533887628, 2612072960), new $Int64(56977098, 1727148468), new $Int64(949899753, 3803658212), new $Int64(1883670356, 479946959), new $Int64(685713571, 1562982345), new $Int64(201241205, 1766109365), new $Int64(700596547, 3257093788), new $Int64(1962768719, 2365720207), new $Int64(93384808, 3742754173), new $Int64(1689098413, 2878193673), new $Int64(1096135042, 2174002182), new $Int64(1313222695, 3573511231), new $Int64(1392911121, 1760299077), new $Int64(771856457, 2260779833), new $Int64(1281464374, 1452805722), new $Int64(917811730, 2940011802), new $Int64(1890251082, 1886183802), new $Int64(893897673, 2514369088), new $Int64(1644345561, 3924317791), new $Int64(172616216, 500935732), new $Int64(1403501753, 676580929), new $Int64(581571365, 1184984890), new $Int64(1455515235, 1271474274), new $Int64(318728910, 3163791473), new $Int64(2051027584, 2842487377), new $Int64(1511537551, 2170968612), new $Int64(573262976, 3535856740), new $Int64(94256461, 1488599718), new $Int64(966951817, 3408913763), new $Int64(60951736, 2501050084), new $Int64(1272353200, 1639124157), new $Int64(138001144, 4088176393), new $Int64(1574896563, 3989947576), new $Int64(1982239940, 3414355209), new $Int64(1355154361, 2275136352), new $Int64(89709303, 2151835223), new $Int64(1216338715, 1654534827), new $Int64(1467562197, 377892833), new $Int64(1664767638, 660204544), new $Int64(85706799, 390828249), new $Int64(725310955, 3402783878), new $Int64(678849488, 3717936603), new $Int64(1113532086, 2211058823), new $Int64(1564224320, 2692150867), new $Int64(1952770442, 1928910388), new $Int64(788716862, 3931011137), new $Int64(1083670504, 1112701047), new $Int64(2079333076, 2452299106), new $Int64(1251318826, 2337204777), new $Int64(1774877857, 273889282), new $Int64(1798719843, 1462008793), new $Int64(2138834788, 1554494002), new $Int64(952516517, 182675323), new $Int64(548928884, 1882802136), new $Int64(589279648, 3700220025), new $Int64(381039426, 3083431543), new $Int64(1295624457, 3622207527), new $Int64(338126939, 432729309), new $Int64(480013522, 2391914317), new $Int64(297925497, 235747924), new $Int64(2120733629, 3088823825), new $Int64(1402403853, 2314658321), new $Int64(1165929723, 2957634338), new $Int64(501323675, 4117056981), new $Int64(1564699815, 1482500298), new $Int64(1406657158, 840489337), new $Int64(799522364, 3483178565), new $Int64(532129761, 2074004656), new $Int64(724246478, 3643392642), new $Int64(1482330167, 1583624461), new $Int64(1261660694, 287473085), new $Int64(1667835381, 3136843981), new $Int64(1138806821, 1266970974), new $Int64(135185781, 1998688839), new $Int64(392094735, 1492900209), new $Int64(1031326774, 1538112737), new $Int64(76914806, 2207265429), new $Int64(260686035, 963263315), new $Int64(1671145500, 2295892134), new $Int64(1068469660, 2002560897), new $Int64(1791233343, 1369254035), new $Int64(33436120, 3353312708), new $Int64(57507843, 947771099), new $Int64(201728503, 1747061399), new $Int64(1507240140, 2047354631), new $Int64(720000810, 4165367136), new $Int64(479265078, 3388864963), new $Int64(1195302398, 286492130), new $Int64(2045622690, 2795735007), new $Int64(1431753082, 3703961339), new $Int64(1999047161, 1797825479), new $Int64(1429039600, 1116589674), new $Int64(482063550, 2593309206), new $Int64(1329049334, 3404995677), new $Int64(1396904208, 3453462936), new $Int64(1014767077, 3016498634), new $Int64(75698599, 1650371545), new $Int64(1592007860, 212344364), new $Int64(1127766888, 3843932156), new $Int64(1399463792, 3573129983), new $Int64(1256901817, 665897820), new $Int64(1071492673, 1675628772), new $Int64(243225682, 2831752928), new $Int64(2120298836, 1486294219), new $Int64(193076235, 268782709), new $Int64(1145360145, 4186179080), new $Int64(624342951, 1613720397), new $Int64(857179861, 2703686015), new $Int64(1235864944, 2205342611), new $Int64(1474779655, 1411666394), new $Int64(619028749, 677744900), new $Int64(270855115, 4172867247), new $Int64(135494707, 2163418403), new $Int64(849547544, 2841526879), new $Int64(1029966689, 1082141470), new $Int64(377371856, 4046134367), new $Int64(51415528, 2142943655), new $Int64(1897659315, 3124627521), new $Int64(998228909, 219992939), new $Int64(1068692697, 1756846531), new $Int64(1283749206, 1225118210), new $Int64(1621625642, 1647770243), new $Int64(111523943, 444807907), new $Int64(2036369448, 3952076173), new $Int64(53201823, 1461839639), new $Int64(315761893, 3699250910), new $Int64(702974850, 1373688981), new $Int64(734022261, 147523747), new $Int64(100152742, 1211276581), new $Int64(1294440951, 2548832680), new $Int64(1144696256, 1995631888), new $Int64(154500578, 2011457303), new $Int64(796460974, 3057425772), new $Int64(667839456, 81484597), new $Int64(465502760, 3646681560), new $Int64(775020923, 635548515), new $Int64(602489502, 2508044581), new $Int64(353263531, 1014917157), new $Int64(719992433, 3214891315), new $Int64(852684611, 959582252), new $Int64(226415134, 3347040449), new $Int64(1784615552, 4102971975), new $Int64(397887437, 4078022210), new $Int64(1610679822, 2851767182), new $Int64(749162636, 1540160644), new $Int64(598384772, 1057290595), new $Int64(2034890660, 3907769253), new $Int64(579300318, 4248952684), new $Int64(1092907599, 132554364), new $Int64(1061621234, 1029351092), new $Int64(697840928, 2583007416), new $Int64(298619124, 1486185789), new $Int64(55905697, 2871589073), new $Int64(2017643612, 723203291), new $Int64(146250550, 2494333952), new $Int64(1064490251, 2230939180), new $Int64(342915576, 3943232912), new $Int64(1768732449, 2181367922), new $Int64(1418222537, 2889274791), new $Int64(1824032949, 2046728161), new $Int64(1653899792, 1376052477), new $Int64(1022327048, 381236993), new $Int64(1034385958, 3188942166), new $Int64(2073003539, 350070824), new $Int64(144881592, 61758415), new $Int64(1405659422, 3492950336), new $Int64(117440928, 3093818430), new $Int64(1693893113, 2962480613), new $Int64(235432940, 3154871160), new $Int64(511005079, 3228564679), new $Int64(610731502, 888276216), new $Int64(1200780674, 3574998604), new $Int64(870415268, 1967526716), new $Int64(591335707, 1554691298), new $Int64(574459414, 339944798), new $Int64(1223764147, 1154515356), new $Int64(1825645307, 967516237), new $Int64(1546195135, 596588202), new $Int64(279882768, 3764362170), new $Int64(492091056, 266611402), new $Int64(1754227768, 2047856075), new $Int64(1146757215, 21444105), new $Int64(1198058894, 3065563181), new $Int64(1915064845, 1140663212), new $Int64(633187674, 2323741028), new $Int64(2126290159, 3103873707), new $Int64(1008658319, 2766828349), new $Int64(1661896145, 1970872996), new $Int64(1628585413, 3766615585), new $Int64(1552335120, 2036813414), new $Int64(152606527, 3105536507), new $Int64(13954645, 3396176938), new $Int64(1426081645, 1377154485), new $Int64(2085644467, 3807014186), new $Int64(543009040, 3710110597), new $Int64(396058129, 916420443), new $Int64(734556788, 2103831255), new $Int64(381322154, 717331943), new $Int64(572884752, 3550505941), new $Int64(45939673, 378749927), new $Int64(149867929, 611017331), new $Int64(592130075, 758907650), new $Int64(1012992349, 154266815), new $Int64(1107028706, 1407468696), new $Int64(469292398, 970098704), new $Int64(1862426162, 1971660656), new $Int64(998365243, 3332747885), new $Int64(1947089649, 1935189867), new $Int64(1510248801, 203520055), new $Int64(842317902, 3916463034), new $Int64(1758884993, 3474113316), new $Int64(1036101639, 316544223), new $Int64(373738757, 1650844677), new $Int64(1240292229, 4267565603), new $Int64(1077208624, 2501167616), new $Int64(626831785, 3929401789), new $Int64(56122796, 337170252), new $Int64(1186981558, 2061966842), new $Int64(1843292800, 2508461464), new $Int64(206012532, 2791377107), new $Int64(1240791848, 1227227588), new $Int64(1813978778, 1709681848), new $Int64(1153692192, 3768820575), new $Int64(1145186199, 2887126398), new $Int64(700372314, 296561685), new $Int64(700300844, 3729960077), new $Int64(575172304, 372833036), new $Int64(2078875613, 2409779288), new $Int64(1829161290, 555274064), new $Int64(1041887929, 4239804901), new $Int64(1839403216, 3723486978), new $Int64(498390553, 2145871984), new $Int64(564717933, 3565480803), new $Int64(578829821, 2197313814), new $Int64(974785092, 3613674566), new $Int64(438638731, 3042093666), new $Int64(2050927384, 3324034321), new $Int64(869420878, 3708873369), new $Int64(946682149, 1698090092), new $Int64(1618900382, 4213940712), new $Int64(304003901, 2087477361), new $Int64(381315848, 2407950639), new $Int64(851258090, 3942568569), new $Int64(923583198, 4088074412), new $Int64(723260036, 2964773675), new $Int64(1473561819, 1539178386), new $Int64(1062961552, 2694849566), new $Int64(460977733, 2120273838), new $Int64(542912908, 2484608657), new $Int64(880846449, 2956190677), new $Int64(1970902366, 4223313749), new $Int64(662161910, 3502682327), new $Int64(705634754, 4133891139), new $Int64(1116124348, 1166449596), new $Int64(1038247601, 3362705993), new $Int64(93734798, 3892921029), new $Int64(1876124043, 786869787), new $Int64(1057490746, 1046342263), new $Int64(242763728, 493777327), new $Int64(1293910447, 3304827646), new $Int64(616460742, 125356352), new $Int64(499300063, 74094113), new $Int64(1351896723, 2500816079), new $Int64(1657235204, 514015239), new $Int64(1377565129, 543520454), new $Int64(107706923, 3614531153), new $Int64(2056746300, 2356753985), new $Int64(1390062617, 2018141668), new $Int64(131272971, 2087974891), new $Int64(644556607, 3166972343), new $Int64(372256200, 1517638666), new $Int64(1212207984, 173466846), new $Int64(1451709187, 4241513471), new $Int64(733932806, 2783126920), new $Int64(1972004134, 4167264826), new $Int64(29260506, 3907395640), new $Int64(1236582087, 1539634186), new $Int64(1551526350, 178241987), new $Int64(2034206012, 182168164), new $Int64(1044953189, 2386154934), new $Int64(1379126408, 4077374341), new $Int64(32803926, 1732699140), new $Int64(1726425903, 1041306002), new $Int64(1860414813, 2068001749), new $Int64(1005320202, 3208962910), new $Int64(844054010, 697710380), new $Int64(638124245, 2228431183), new $Int64(1337169671, 3554678728), new $Int64(1396494601, 173470263), new $Int64(2061597383, 3848297795), new $Int64(1220546671, 246236185), new $Int64(163293187, 2066374846), new $Int64(1771673660, 312890749), new $Int64(703378057, 3573310289), new $Int64(1548631747, 143166754), new $Int64(613554316, 2081511079), new $Int64(1197802104, 486038032), new $Int64(240999859, 2982218564), new $Int64(364901986, 1000939191), new $Int64(1902782651, 2750454885), new $Int64(1475638791, 3375313137), new $Int64(503615608, 881302957), new $Int64(638698903, 2514186393), new $Int64(443860803, 360024739), new $Int64(1399671872, 292500025), new $Int64(1381210821, 2276300752), new $Int64(521803381, 4069087683), new $Int64(208500981, 1637778212), new $Int64(720490469, 1676670893), new $Int64(1067262482, 3855174429), new $Int64(2114075974, 2067248671), new $Int64(2058057389, 2884561259), new $Int64(1341742553, 2456511185), new $Int64(983726246, 561175414), new $Int64(427994085, 432588903), new $Int64(885133709, 4059399550), new $Int64(2054387382, 1075014784), new $Int64(413651020, 2728058415), new $Int64(1839142064, 1299703678), new $Int64(1262333188, 2347583393), new $Int64(1285481956, 2468164145), new $Int64(989129637, 1140014346), new $Int64(2033889184, 1936972070), new $Int64(409904655, 3870530098), new $Int64(1662989391, 1717789158), new $Int64(1914486492, 1153452491), new $Int64(1157059232, 3948827651), new $Int64(790338018, 2101413152), new $Int64(1495744672, 3854091229), new $Int64(83644069, 4215565463), new $Int64(762206335, 1202710438), new $Int64(1582574611, 2072216740), new $Int64(705690639, 2066751068), new $Int64(33900336, 173902580), new $Int64(1405499842, 142459001), new $Int64(172391592, 1889151926), new $Int64(1648540523, 3034199774), new $Int64(1618587731, 516490102), new $Int64(93114264, 3692577783), new $Int64(68662295, 2953948865), new $Int64(1826544975, 4041040923), new $Int64(204965672, 592046130), new $Int64(1441840008, 384297211), new $Int64(95834184, 265863924), new $Int64(2101717619, 1333136237), new $Int64(1499611781, 1406273556), new $Int64(1074670496, 426305476), new $Int64(125704633, 2750898176), new $Int64(488068495, 1633944332), new $Int64(2037723464, 3236349343), new $Int64(444060402, 4013676611), new $Int64(1718532237, 2265047407), new $Int64(1433593806, 875071080), new $Int64(1804436145, 1418843655), new $Int64(2009228711, 451657300), new $Int64(1229446621, 1866374663), new $Int64(1653472867, 1551455622), new $Int64(577191481, 3560962459), new $Int64(1669204077, 3347903778), new $Int64(1849156454, 2675874918), new $Int64(316128071, 2762991672), new $Int64(530492383, 3689068477), new $Int64(844089962, 4071997905), new $Int64(1508155730, 1381702441), new $Int64(2089931018, 2373284878), new $Int64(1283216186, 2143983064), new $Int64(308739063, 1938207195), new $Int64(1754949306, 1188152253), new $Int64(1272345009, 615870490), new $Int64(742653194, 2662252621), new $Int64(1477718295, 3839976789), new $Int64(56149435, 306752547), new $Int64(720795581, 2162363077), new $Int64(2090431015, 2767224719), new $Int64(675859549, 2628837712), new $Int64(1678405918, 2967771969), new $Int64(1694285728, 499792248), new $Int64(403352367, 4285253508), new $Int64(962357072, 2856511070), new $Int64(679471692, 2526409716), new $Int64(353777175, 1240875658), new $Int64(1232590226, 2577342868), new $Int64(1146185433, 4136853496), new $Int64(670368674, 2403540137), new $Int64(1372824515, 1371410668), new $Int64(1970921600, 371758825), new $Int64(1706420536, 1528834084), new $Int64(2075795018, 1504757260), new $Int64(685663576, 699052551), new $Int64(1641940109, 3347789870), new $Int64(1951619734, 3430604759), new $Int64(2119672219, 1935601723), new $Int64(966789690, 834676166)]);\n\t\tglobalRand = New(new lockedSource.ptr(new nosync.Mutex.ptr(), NewSource(new $Int64(0, 1))));\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"net\"] = (function() {\n\tvar $pkg = {}, $init, errors, io, rand, os, runtime, sort, sync, atomic, syscall, time, dnsRR_Header, dnsRR_CNAME, dnsRR_HINFO, dnsRR_MB, dnsRR_MG, dnsRR_MINFO, dnsRR_MR, dnsRR_MX, dnsRR_NS, dnsRR_PTR, dnsRR_SOA, dnsRR_TXT, dnsRR_SRV, dnsRR_A, dnsRR_AAAA, IP, IPMask, ParseError, Addr, structType, chanType, sliceType$1, ptrType$7, ptrType$8, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, arrayType, ptrType$38, ptrType$39, ptrType$40, ptrType$41, ptrType$42, arrayType$2, arrayType$3, funcType$1, ptrType$55, ptrType$56, ptrType$57, ptrType$58, ptrType$59, ptrType$60, ptrType$64, ptrType$65, rr_mk, errInvalidInterface, errInvalidInterfaceIndex, errInvalidInterfaceName, errNoSuchInterface, errNoSuchMulticastInterface, v4InV6Prefix, classAMask, classBMask, classCMask, supportsIPv4, supportsIPv6, supportsIPv4map, errNoSuitableAddress, listenerBacklog, errMissingAddress, errClosing, threadLimit, _map, _key, sysInit, probeIPv4Stack, probeIPv6Stack, maxListenerBacklog, IPv4, IPv4Mask, isZeros, allFF, bytesEqual, simpleMaskLength, parseIPv4, parseIPv6, ParseIP, init, splitHostZone, dtoi, xtoi, itod, appendHex, last;\n\terrors = $packages[\"errors\"];\n\tio = $packages[\"io\"];\n\trand = $packages[\"math/rand\"];\n\tos = $packages[\"os\"];\n\truntime = $packages[\"runtime\"];\n\tsort = $packages[\"sort\"];\n\tsync = $packages[\"sync\"];\n\tatomic = $packages[\"sync/atomic\"];\n\tsyscall = $packages[\"syscall\"];\n\ttime = $packages[\"time\"];\n\tdnsRR_Header = $pkg.dnsRR_Header = $newType(0, $kindStruct, \"net.dnsRR_Header\", \"dnsRR_Header\", \"net\", function(Name_, Rrtype_, Class_, Ttl_, Rdlength_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Name = \"\";\n\t\t\tthis.Rrtype = 0;\n\t\t\tthis.Class = 0;\n\t\t\tthis.Ttl = 0;\n\t\t\tthis.Rdlength = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.Name = Name_;\n\t\tthis.Rrtype = Rrtype_;\n\t\tthis.Class = Class_;\n\t\tthis.Ttl = Ttl_;\n\t\tthis.Rdlength = Rdlength_;\n\t});\n\tdnsRR_CNAME = $pkg.dnsRR_CNAME = $newType(0, $kindStruct, \"net.dnsRR_CNAME\", \"dnsRR_CNAME\", \"net\", function(Hdr_, Cname_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Hdr = new dnsRR_Header.ptr();\n\t\t\tthis.Cname = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.Hdr = Hdr_;\n\t\tthis.Cname = Cname_;\n\t});\n\tdnsRR_HINFO = $pkg.dnsRR_HINFO = $newType(0, $kindStruct, \"net.dnsRR_HINFO\", \"dnsRR_HINFO\", \"net\", function(Hdr_, Cpu_, Os_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Hdr = new dnsRR_Header.ptr();\n\t\t\tthis.Cpu = \"\";\n\t\t\tthis.Os = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.Hdr = Hdr_;\n\t\tthis.Cpu = Cpu_;\n\t\tthis.Os = Os_;\n\t});\n\tdnsRR_MB = $pkg.dnsRR_MB = $newType(0, $kindStruct, \"net.dnsRR_MB\", \"dnsRR_MB\", \"net\", function(Hdr_, Mb_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Hdr = new dnsRR_Header.ptr();\n\t\t\tthis.Mb = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.Hdr = Hdr_;\n\t\tthis.Mb = Mb_;\n\t});\n\tdnsRR_MG = $pkg.dnsRR_MG = $newType(0, $kindStruct, \"net.dnsRR_MG\", \"dnsRR_MG\", \"net\", function(Hdr_, Mg_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Hdr = new dnsRR_Header.ptr();\n\t\t\tthis.Mg = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.Hdr = Hdr_;\n\t\tthis.Mg = Mg_;\n\t});\n\tdnsRR_MINFO = $pkg.dnsRR_MINFO = $newType(0, $kindStruct, \"net.dnsRR_MINFO\", \"dnsRR_MINFO\", \"net\", function(Hdr_, Rmail_, Email_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Hdr = new dnsRR_Header.ptr();\n\t\t\tthis.Rmail = \"\";\n\t\t\tthis.Email = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.Hdr = Hdr_;\n\t\tthis.Rmail = Rmail_;\n\t\tthis.Email = Email_;\n\t});\n\tdnsRR_MR = $pkg.dnsRR_MR = $newType(0, $kindStruct, \"net.dnsRR_MR\", \"dnsRR_MR\", \"net\", function(Hdr_, Mr_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Hdr = new dnsRR_Header.ptr();\n\t\t\tthis.Mr = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.Hdr = Hdr_;\n\t\tthis.Mr = Mr_;\n\t});\n\tdnsRR_MX = $pkg.dnsRR_MX = $newType(0, $kindStruct, \"net.dnsRR_MX\", \"dnsRR_MX\", \"net\", function(Hdr_, Pref_, Mx_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Hdr = new dnsRR_Header.ptr();\n\t\t\tthis.Pref = 0;\n\t\t\tthis.Mx = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.Hdr = Hdr_;\n\t\tthis.Pref = Pref_;\n\t\tthis.Mx = Mx_;\n\t});\n\tdnsRR_NS = $pkg.dnsRR_NS = $newType(0, $kindStruct, \"net.dnsRR_NS\", \"dnsRR_NS\", \"net\", function(Hdr_, Ns_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Hdr = new dnsRR_Header.ptr();\n\t\t\tthis.Ns = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.Hdr = Hdr_;\n\t\tthis.Ns = Ns_;\n\t});\n\tdnsRR_PTR = $pkg.dnsRR_PTR = $newType(0, $kindStruct, \"net.dnsRR_PTR\", \"dnsRR_PTR\", \"net\", function(Hdr_, Ptr_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Hdr = new dnsRR_Header.ptr();\n\t\t\tthis.Ptr = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.Hdr = Hdr_;\n\t\tthis.Ptr = Ptr_;\n\t});\n\tdnsRR_SOA = $pkg.dnsRR_SOA = $newType(0, $kindStruct, \"net.dnsRR_SOA\", \"dnsRR_SOA\", \"net\", function(Hdr_, Ns_, Mbox_, Serial_, Refresh_, Retry_, Expire_, Minttl_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Hdr = new dnsRR_Header.ptr();\n\t\t\tthis.Ns = \"\";\n\t\t\tthis.Mbox = \"\";\n\t\t\tthis.Serial = 0;\n\t\t\tthis.Refresh = 0;\n\t\t\tthis.Retry = 0;\n\t\t\tthis.Expire = 0;\n\t\t\tthis.Minttl = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.Hdr = Hdr_;\n\t\tthis.Ns = Ns_;\n\t\tthis.Mbox = Mbox_;\n\t\tthis.Serial = Serial_;\n\t\tthis.Refresh = Refresh_;\n\t\tthis.Retry = Retry_;\n\t\tthis.Expire = Expire_;\n\t\tthis.Minttl = Minttl_;\n\t});\n\tdnsRR_TXT = $pkg.dnsRR_TXT = $newType(0, $kindStruct, \"net.dnsRR_TXT\", \"dnsRR_TXT\", \"net\", function(Hdr_, Txt_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Hdr = new dnsRR_Header.ptr();\n\t\t\tthis.Txt = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.Hdr = Hdr_;\n\t\tthis.Txt = Txt_;\n\t});\n\tdnsRR_SRV = $pkg.dnsRR_SRV = $newType(0, $kindStruct, \"net.dnsRR_SRV\", \"dnsRR_SRV\", \"net\", function(Hdr_, Priority_, Weight_, Port_, Target_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Hdr = new dnsRR_Header.ptr();\n\t\t\tthis.Priority = 0;\n\t\t\tthis.Weight = 0;\n\t\t\tthis.Port = 0;\n\t\t\tthis.Target = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.Hdr = Hdr_;\n\t\tthis.Priority = Priority_;\n\t\tthis.Weight = Weight_;\n\t\tthis.Port = Port_;\n\t\tthis.Target = Target_;\n\t});\n\tdnsRR_A = $pkg.dnsRR_A = $newType(0, $kindStruct, \"net.dnsRR_A\", \"dnsRR_A\", \"net\", function(Hdr_, A_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Hdr = new dnsRR_Header.ptr();\n\t\t\tthis.A = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.Hdr = Hdr_;\n\t\tthis.A = A_;\n\t});\n\tdnsRR_AAAA = $pkg.dnsRR_AAAA = $newType(0, $kindStruct, \"net.dnsRR_AAAA\", \"dnsRR_AAAA\", \"net\", function(Hdr_, AAAA_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Hdr = new dnsRR_Header.ptr();\n\t\t\tthis.AAAA = arrayType$3.zero();\n\t\t\treturn;\n\t\t}\n\t\tthis.Hdr = Hdr_;\n\t\tthis.AAAA = AAAA_;\n\t});\n\tIP = $pkg.IP = $newType(12, $kindSlice, \"net.IP\", \"IP\", \"net\", null);\n\tIPMask = $pkg.IPMask = $newType(12, $kindSlice, \"net.IPMask\", \"IPMask\", \"net\", null);\n\tParseError = $pkg.ParseError = $newType(0, $kindStruct, \"net.ParseError\", \"ParseError\", \"net\", function(Type_, Text_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Type = \"\";\n\t\t\tthis.Text = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.Type = Type_;\n\t\tthis.Text = Text_;\n\t});\n\tAddr = $pkg.Addr = $newType(8, $kindInterface, \"net.Addr\", \"Addr\", \"net\", null);\n\tstructType = $structType([]);\n\tchanType = $chanType(structType, false, false);\n\tsliceType$1 = $sliceType($Uint8);\n\tptrType$7 = $ptrType(dnsRR_Header);\n\tptrType$8 = $ptrType(dnsRR_CNAME);\n\tptrType$12 = $ptrType(dnsRR_A);\n\tptrType$13 = $ptrType(dnsRR_AAAA);\n\tptrType$14 = $ptrType($Uint16);\n\tptrType$15 = $ptrType($String);\n\tptrType$16 = $ptrType($Uint32);\n\tarrayType = $arrayType($Uint8, 4);\n\tptrType$38 = $ptrType(dnsRR_SRV);\n\tptrType$39 = $ptrType(dnsRR_MX);\n\tptrType$40 = $ptrType(dnsRR_NS);\n\tptrType$41 = $ptrType(dnsRR_TXT);\n\tptrType$42 = $ptrType(dnsRR_PTR);\n\tarrayType$2 = $arrayType($Uint8, 32);\n\tarrayType$3 = $arrayType($Uint8, 16);\n\tfuncType$1 = $funcType([$emptyInterface, $String, $String], [$Bool], false);\n\tptrType$55 = $ptrType(dnsRR_HINFO);\n\tptrType$56 = $ptrType(dnsRR_MB);\n\tptrType$57 = $ptrType(dnsRR_MG);\n\tptrType$58 = $ptrType(dnsRR_MINFO);\n\tptrType$59 = $ptrType(dnsRR_MR);\n\tptrType$60 = $ptrType(dnsRR_SOA);\n\tptrType$64 = $ptrType(IP);\n\tptrType$65 = $ptrType(ParseError);\n\tsysInit = function() {\n\t\tvar $ptr;\n\t};\n\tprobeIPv4Stack = function() {\n\t\tvar $ptr;\n\t\treturn false;\n\t};\n\tprobeIPv6Stack = function() {\n\t\tvar $ptr, _tmp, _tmp$1, supportsIPv4map$1, supportsIPv6$1;\n\t\tsupportsIPv6$1 = false;\n\t\tsupportsIPv4map$1 = false;\n\t\t_tmp = false; _tmp$1 = false; supportsIPv6$1 = _tmp; supportsIPv4map$1 = _tmp$1;\n\t\treturn [supportsIPv6$1, supportsIPv4map$1];\n\t};\n\tmaxListenerBacklog = function() {\n\t\tvar $ptr;\n\t\treturn 128;\n\t};\n\tdnsRR_Header.ptr.prototype.Header = function() {\n\t\tvar $ptr, h;\n\t\th = this;\n\t\treturn h;\n\t};\n\tdnsRR_Header.prototype.Header = function() { return this.$val.Header(); };\n\tdnsRR_Header.ptr.prototype.Walk = function(f) {\n\t\tvar $ptr, _r, _r$1, _r$2, _r$3, _r$4, _v, _v$1, _v$2, _v$3, f, h, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; f = $f.f; h = $f.h; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\th = this;\n\t\t_r = f((h.$ptr_Name || (h.$ptr_Name = new ptrType$15(function() { return this.$target.Name; }, function($v) { this.$target.Name = $v; }, h))), \"Name\", \"domain\"); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tif (!(_r)) { _v$3 = false; $s = 4; continue s; }\n\t\t_r$1 = f((h.$ptr_Rrtype || (h.$ptr_Rrtype = new ptrType$14(function() { return this.$target.Rrtype; }, function($v) { this.$target.Rrtype = $v; }, h))), \"Rrtype\", \"\"); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_v$3 = _r$1; case 4:\n\t\tif (!(_v$3)) { _v$2 = false; $s = 3; continue s; }\n\t\t_r$2 = f((h.$ptr_Class || (h.$ptr_Class = new ptrType$14(function() { return this.$target.Class; }, function($v) { this.$target.Class = $v; }, h))), \"Class\", \"\"); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_v$2 = _r$2; case 3:\n\t\tif (!(_v$2)) { _v$1 = false; $s = 2; continue s; }\n\t\t_r$3 = f((h.$ptr_Ttl || (h.$ptr_Ttl = new ptrType$16(function() { return this.$target.Ttl; }, function($v) { this.$target.Ttl = $v; }, h))), \"Ttl\", \"\"); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t_v$1 = _r$3; case 2:\n\t\tif (!(_v$1)) { _v = false; $s = 1; continue s; }\n\t\t_r$4 = f((h.$ptr_Rdlength || (h.$ptr_Rdlength = new ptrType$14(function() { return this.$target.Rdlength; }, function($v) { this.$target.Rdlength = $v; }, h))), \"Rdlength\", \"\"); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t_v = _r$4; case 1:\n\t\treturn _v;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_Header.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.f = f; $f.h = h; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdnsRR_Header.prototype.Walk = function(f) { return this.$val.Walk(f); };\n\tdnsRR_CNAME.ptr.prototype.Header = function() {\n\t\tvar $ptr, rr;\n\t\trr = this;\n\t\treturn rr.Hdr;\n\t};\n\tdnsRR_CNAME.prototype.Header = function() { return this.$val.Header(); };\n\tdnsRR_CNAME.ptr.prototype.Walk = function(f) {\n\t\tvar $ptr, _r, _r$1, _v, f, rr, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\trr = this;\n\t\t_r = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tif (!(_r)) { _v = false; $s = 1; continue s; }\n\t\t_r$1 = f((rr.$ptr_Cname || (rr.$ptr_Cname = new ptrType$15(function() { return this.$target.Cname; }, function($v) { this.$target.Cname = $v; }, rr))), \"Cname\", \"domain\"); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_v = _r$1; case 1:\n\t\treturn _v;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_CNAME.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdnsRR_CNAME.prototype.Walk = function(f) { return this.$val.Walk(f); };\n\tdnsRR_HINFO.ptr.prototype.Header = function() {\n\t\tvar $ptr, rr;\n\t\trr = this;\n\t\treturn rr.Hdr;\n\t};\n\tdnsRR_HINFO.prototype.Header = function() { return this.$val.Header(); };\n\tdnsRR_HINFO.ptr.prototype.Walk = function(f) {\n\t\tvar $ptr, _r, _r$1, _r$2, _v, _v$1, f, rr, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _v = $f._v; _v$1 = $f._v$1; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\trr = this;\n\t\t_r = rr.Hdr.Walk(f); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tif (!(_r)) { _v$1 = false; $s = 2; continue s; }\n\t\t_r$1 = f((rr.$ptr_Cpu || (rr.$ptr_Cpu = new ptrType$15(function() { return this.$target.Cpu; }, function($v) { this.$target.Cpu = $v; }, rr))), \"Cpu\", \"\"); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_v$1 = _r$1; case 2:\n\t\tif (!(_v$1)) { _v = false; $s = 1; continue s; }\n\t\t_r$2 = f((rr.$ptr_Os || (rr.$ptr_Os = new ptrType$15(function() { return this.$target.Os; }, function($v) { this.$target.Os = $v; }, rr))), \"Os\", \"\"); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_v = _r$2; case 1:\n\t\treturn _v;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_HINFO.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._v = _v; $f._v$1 = _v$1; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdnsRR_HINFO.prototype.Walk = function(f) { return this.$val.Walk(f); };\n\tdnsRR_MB.ptr.prototype.Header = function() {\n\t\tvar $ptr, rr;\n\t\trr = this;\n\t\treturn rr.Hdr;\n\t};\n\tdnsRR_MB.prototype.Header = function() { return this.$val.Header(); };\n\tdnsRR_MB.ptr.prototype.Walk = function(f) {\n\t\tvar $ptr, _r, _r$1, _v, f, rr, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\trr = this;\n\t\t_r = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tif (!(_r)) { _v = false; $s = 1; continue s; }\n\t\t_r$1 = f((rr.$ptr_Mb || (rr.$ptr_Mb = new ptrType$15(function() { return this.$target.Mb; }, function($v) { this.$target.Mb = $v; }, rr))), \"Mb\", \"domain\"); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_v = _r$1; case 1:\n\t\treturn _v;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_MB.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdnsRR_MB.prototype.Walk = function(f) { return this.$val.Walk(f); };\n\tdnsRR_MG.ptr.prototype.Header = function() {\n\t\tvar $ptr, rr;\n\t\trr = this;\n\t\treturn rr.Hdr;\n\t};\n\tdnsRR_MG.prototype.Header = function() { return this.$val.Header(); };\n\tdnsRR_MG.ptr.prototype.Walk = function(f) {\n\t\tvar $ptr, _r, _r$1, _v, f, rr, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\trr = this;\n\t\t_r = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tif (!(_r)) { _v = false; $s = 1; continue s; }\n\t\t_r$1 = f((rr.$ptr_Mg || (rr.$ptr_Mg = new ptrType$15(function() { return this.$target.Mg; }, function($v) { this.$target.Mg = $v; }, rr))), \"Mg\", \"domain\"); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_v = _r$1; case 1:\n\t\treturn _v;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_MG.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdnsRR_MG.prototype.Walk = function(f) { return this.$val.Walk(f); };\n\tdnsRR_MINFO.ptr.prototype.Header = function() {\n\t\tvar $ptr, rr;\n\t\trr = this;\n\t\treturn rr.Hdr;\n\t};\n\tdnsRR_MINFO.prototype.Header = function() { return this.$val.Header(); };\n\tdnsRR_MINFO.ptr.prototype.Walk = function(f) {\n\t\tvar $ptr, _r, _r$1, _r$2, _v, _v$1, f, rr, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _v = $f._v; _v$1 = $f._v$1; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\trr = this;\n\t\t_r = rr.Hdr.Walk(f); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tif (!(_r)) { _v$1 = false; $s = 2; continue s; }\n\t\t_r$1 = f((rr.$ptr_Rmail || (rr.$ptr_Rmail = new ptrType$15(function() { return this.$target.Rmail; }, function($v) { this.$target.Rmail = $v; }, rr))), \"Rmail\", \"domain\"); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_v$1 = _r$1; case 2:\n\t\tif (!(_v$1)) { _v = false; $s = 1; continue s; }\n\t\t_r$2 = f((rr.$ptr_Email || (rr.$ptr_Email = new ptrType$15(function() { return this.$target.Email; }, function($v) { this.$target.Email = $v; }, rr))), \"Email\", \"domain\"); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_v = _r$2; case 1:\n\t\treturn _v;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_MINFO.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._v = _v; $f._v$1 = _v$1; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdnsRR_MINFO.prototype.Walk = function(f) { return this.$val.Walk(f); };\n\tdnsRR_MR.ptr.prototype.Header = function() {\n\t\tvar $ptr, rr;\n\t\trr = this;\n\t\treturn rr.Hdr;\n\t};\n\tdnsRR_MR.prototype.Header = function() { return this.$val.Header(); };\n\tdnsRR_MR.ptr.prototype.Walk = function(f) {\n\t\tvar $ptr, _r, _r$1, _v, f, rr, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\trr = this;\n\t\t_r = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tif (!(_r)) { _v = false; $s = 1; continue s; }\n\t\t_r$1 = f((rr.$ptr_Mr || (rr.$ptr_Mr = new ptrType$15(function() { return this.$target.Mr; }, function($v) { this.$target.Mr = $v; }, rr))), \"Mr\", \"domain\"); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_v = _r$1; case 1:\n\t\treturn _v;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_MR.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdnsRR_MR.prototype.Walk = function(f) { return this.$val.Walk(f); };\n\tdnsRR_MX.ptr.prototype.Header = function() {\n\t\tvar $ptr, rr;\n\t\trr = this;\n\t\treturn rr.Hdr;\n\t};\n\tdnsRR_MX.prototype.Header = function() { return this.$val.Header(); };\n\tdnsRR_MX.ptr.prototype.Walk = function(f) {\n\t\tvar $ptr, _r, _r$1, _r$2, _v, _v$1, f, rr, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _v = $f._v; _v$1 = $f._v$1; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\trr = this;\n\t\t_r = rr.Hdr.Walk(f); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tif (!(_r)) { _v$1 = false; $s = 2; continue s; }\n\t\t_r$1 = f((rr.$ptr_Pref || (rr.$ptr_Pref = new ptrType$14(function() { return this.$target.Pref; }, function($v) { this.$target.Pref = $v; }, rr))), \"Pref\", \"\"); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_v$1 = _r$1; case 2:\n\t\tif (!(_v$1)) { _v = false; $s = 1; continue s; }\n\t\t_r$2 = f((rr.$ptr_Mx || (rr.$ptr_Mx = new ptrType$15(function() { return this.$target.Mx; }, function($v) { this.$target.Mx = $v; }, rr))), \"Mx\", \"domain\"); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_v = _r$2; case 1:\n\t\treturn _v;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_MX.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._v = _v; $f._v$1 = _v$1; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdnsRR_MX.prototype.Walk = function(f) { return this.$val.Walk(f); };\n\tdnsRR_NS.ptr.prototype.Header = function() {\n\t\tvar $ptr, rr;\n\t\trr = this;\n\t\treturn rr.Hdr;\n\t};\n\tdnsRR_NS.prototype.Header = function() { return this.$val.Header(); };\n\tdnsRR_NS.ptr.prototype.Walk = function(f) {\n\t\tvar $ptr, _r, _r$1, _v, f, rr, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\trr = this;\n\t\t_r = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tif (!(_r)) { _v = false; $s = 1; continue s; }\n\t\t_r$1 = f((rr.$ptr_Ns || (rr.$ptr_Ns = new ptrType$15(function() { return this.$target.Ns; }, function($v) { this.$target.Ns = $v; }, rr))), \"Ns\", \"domain\"); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_v = _r$1; case 1:\n\t\treturn _v;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_NS.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdnsRR_NS.prototype.Walk = function(f) { return this.$val.Walk(f); };\n\tdnsRR_PTR.ptr.prototype.Header = function() {\n\t\tvar $ptr, rr;\n\t\trr = this;\n\t\treturn rr.Hdr;\n\t};\n\tdnsRR_PTR.prototype.Header = function() { return this.$val.Header(); };\n\tdnsRR_PTR.ptr.prototype.Walk = function(f) {\n\t\tvar $ptr, _r, _r$1, _v, f, rr, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\trr = this;\n\t\t_r = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tif (!(_r)) { _v = false; $s = 1; continue s; }\n\t\t_r$1 = f((rr.$ptr_Ptr || (rr.$ptr_Ptr = new ptrType$15(function() { return this.$target.Ptr; }, function($v) { this.$target.Ptr = $v; }, rr))), \"Ptr\", \"domain\"); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_v = _r$1; case 1:\n\t\treturn _v;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_PTR.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdnsRR_PTR.prototype.Walk = function(f) { return this.$val.Walk(f); };\n\tdnsRR_SOA.ptr.prototype.Header = function() {\n\t\tvar $ptr, rr;\n\t\trr = this;\n\t\treturn rr.Hdr;\n\t};\n\tdnsRR_SOA.prototype.Header = function() { return this.$val.Header(); };\n\tdnsRR_SOA.ptr.prototype.Walk = function(f) {\n\t\tvar $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _v, _v$1, _v$2, _v$3, _v$4, _v$5, _v$6, f, rr, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; _v$5 = $f._v$5; _v$6 = $f._v$6; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\trr = this;\n\t\t_r = rr.Hdr.Walk(f); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tif (!(_r)) { _v$6 = false; $s = 7; continue s; }\n\t\t_r$1 = f((rr.$ptr_Ns || (rr.$ptr_Ns = new ptrType$15(function() { return this.$target.Ns; }, function($v) { this.$target.Ns = $v; }, rr))), \"Ns\", \"domain\"); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_v$6 = _r$1; case 7:\n\t\tif (!(_v$6)) { _v$5 = false; $s = 6; continue s; }\n\t\t_r$2 = f((rr.$ptr_Mbox || (rr.$ptr_Mbox = new ptrType$15(function() { return this.$target.Mbox; }, function($v) { this.$target.Mbox = $v; }, rr))), \"Mbox\", \"domain\"); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_v$5 = _r$2; case 6:\n\t\tif (!(_v$5)) { _v$4 = false; $s = 5; continue s; }\n\t\t_r$3 = f((rr.$ptr_Serial || (rr.$ptr_Serial = new ptrType$16(function() { return this.$target.Serial; }, function($v) { this.$target.Serial = $v; }, rr))), \"Serial\", \"\"); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t_v$4 = _r$3; case 5:\n\t\tif (!(_v$4)) { _v$3 = false; $s = 4; continue s; }\n\t\t_r$4 = f((rr.$ptr_Refresh || (rr.$ptr_Refresh = new ptrType$16(function() { return this.$target.Refresh; }, function($v) { this.$target.Refresh = $v; }, rr))), \"Refresh\", \"\"); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t_v$3 = _r$4; case 4:\n\t\tif (!(_v$3)) { _v$2 = false; $s = 3; continue s; }\n\t\t_r$5 = f((rr.$ptr_Retry || (rr.$ptr_Retry = new ptrType$16(function() { return this.$target.Retry; }, function($v) { this.$target.Retry = $v; }, rr))), \"Retry\", \"\"); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t_v$2 = _r$5; case 3:\n\t\tif (!(_v$2)) { _v$1 = false; $s = 2; continue s; }\n\t\t_r$6 = f((rr.$ptr_Expire || (rr.$ptr_Expire = new ptrType$16(function() { return this.$target.Expire; }, function($v) { this.$target.Expire = $v; }, rr))), \"Expire\", \"\"); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t_v$1 = _r$6; case 2:\n\t\tif (!(_v$1)) { _v = false; $s = 1; continue s; }\n\t\t_r$7 = f((rr.$ptr_Minttl || (rr.$ptr_Minttl = new ptrType$16(function() { return this.$target.Minttl; }, function($v) { this.$target.Minttl = $v; }, rr))), \"Minttl\", \"\"); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t_v = _r$7; case 1:\n\t\treturn _v;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_SOA.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f._v$5 = _v$5; $f._v$6 = _v$6; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdnsRR_SOA.prototype.Walk = function(f) { return this.$val.Walk(f); };\n\tdnsRR_TXT.ptr.prototype.Header = function() {\n\t\tvar $ptr, rr;\n\t\trr = this;\n\t\treturn rr.Hdr;\n\t};\n\tdnsRR_TXT.prototype.Header = function() { return this.$val.Header(); };\n\tdnsRR_TXT.ptr.prototype.Walk = function(f) {\n\t\tvar $ptr, _r, _r$1, _v, f, rr, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\trr = this;\n\t\t_r = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tif (!(_r)) { _v = false; $s = 1; continue s; }\n\t\t_r$1 = f((rr.$ptr_Txt || (rr.$ptr_Txt = new ptrType$15(function() { return this.$target.Txt; }, function($v) { this.$target.Txt = $v; }, rr))), \"Txt\", \"\"); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_v = _r$1; case 1:\n\t\treturn _v;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_TXT.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdnsRR_TXT.prototype.Walk = function(f) { return this.$val.Walk(f); };\n\tdnsRR_SRV.ptr.prototype.Header = function() {\n\t\tvar $ptr, rr;\n\t\trr = this;\n\t\treturn rr.Hdr;\n\t};\n\tdnsRR_SRV.prototype.Header = function() { return this.$val.Header(); };\n\tdnsRR_SRV.ptr.prototype.Walk = function(f) {\n\t\tvar $ptr, _r, _r$1, _r$2, _r$3, _r$4, _v, _v$1, _v$2, _v$3, f, rr, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\trr = this;\n\t\t_r = rr.Hdr.Walk(f); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tif (!(_r)) { _v$3 = false; $s = 4; continue s; }\n\t\t_r$1 = f((rr.$ptr_Priority || (rr.$ptr_Priority = new ptrType$14(function() { return this.$target.Priority; }, function($v) { this.$target.Priority = $v; }, rr))), \"Priority\", \"\"); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_v$3 = _r$1; case 4:\n\t\tif (!(_v$3)) { _v$2 = false; $s = 3; continue s; }\n\t\t_r$2 = f((rr.$ptr_Weight || (rr.$ptr_Weight = new ptrType$14(function() { return this.$target.Weight; }, function($v) { this.$target.Weight = $v; }, rr))), \"Weight\", \"\"); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_v$2 = _r$2; case 3:\n\t\tif (!(_v$2)) { _v$1 = false; $s = 2; continue s; }\n\t\t_r$3 = f((rr.$ptr_Port || (rr.$ptr_Port = new ptrType$14(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, rr))), \"Port\", \"\"); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t_v$1 = _r$3; case 2:\n\t\tif (!(_v$1)) { _v = false; $s = 1; continue s; }\n\t\t_r$4 = f((rr.$ptr_Target || (rr.$ptr_Target = new ptrType$15(function() { return this.$target.Target; }, function($v) { this.$target.Target = $v; }, rr))), \"Target\", \"domain\"); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t_v = _r$4; case 1:\n\t\treturn _v;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_SRV.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdnsRR_SRV.prototype.Walk = function(f) { return this.$val.Walk(f); };\n\tdnsRR_A.ptr.prototype.Header = function() {\n\t\tvar $ptr, rr;\n\t\trr = this;\n\t\treturn rr.Hdr;\n\t};\n\tdnsRR_A.prototype.Header = function() { return this.$val.Header(); };\n\tdnsRR_A.ptr.prototype.Walk = function(f) {\n\t\tvar $ptr, _r, _r$1, _v, f, rr, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\trr = this;\n\t\t_r = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tif (!(_r)) { _v = false; $s = 1; continue s; }\n\t\t_r$1 = f((rr.$ptr_A || (rr.$ptr_A = new ptrType$16(function() { return this.$target.A; }, function($v) { this.$target.A = $v; }, rr))), \"A\", \"ipv4\"); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_v = _r$1; case 1:\n\t\treturn _v;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_A.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdnsRR_A.prototype.Walk = function(f) { return this.$val.Walk(f); };\n\tdnsRR_AAAA.ptr.prototype.Header = function() {\n\t\tvar $ptr, rr;\n\t\trr = this;\n\t\treturn rr.Hdr;\n\t};\n\tdnsRR_AAAA.prototype.Header = function() { return this.$val.Header(); };\n\tdnsRR_AAAA.ptr.prototype.Walk = function(f) {\n\t\tvar $ptr, _r, _r$1, _v, f, rr, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; f = $f.f; rr = $f.rr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\trr = this;\n\t\t_r = rr.Hdr.Walk(f); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\tif (!(_r)) { _v = false; $s = 1; continue s; }\n\t\t_r$1 = f(new sliceType$1(rr.AAAA), \"AAAA\", \"ipv6\"); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_v = _r$1; case 1:\n\t\treturn _v;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: dnsRR_AAAA.ptr.prototype.Walk }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.f = f; $f.rr = rr; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tdnsRR_AAAA.prototype.Walk = function(f) { return this.$val.Walk(f); };\n\tIPv4 = function(a, b, c, d) {\n\t\tvar $ptr, a, b, c, d, p;\n\t\tp = $makeSlice(IP, 16);\n\t\t$copySlice(p, v4InV6Prefix);\n\t\t(12 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 12] = a);\n\t\t(13 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 13] = b);\n\t\t(14 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 14] = c);\n\t\t(15 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 15] = d);\n\t\treturn p;\n\t};\n\t$pkg.IPv4 = IPv4;\n\tIPv4Mask = function(a, b, c, d) {\n\t\tvar $ptr, a, b, c, d, p;\n\t\tp = $makeSlice(IPMask, 4);\n\t\t(0 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 0] = a);\n\t\t(1 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 1] = b);\n\t\t(2 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 2] = c);\n\t\t(3 >= p.$length ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + 3] = d);\n\t\treturn p;\n\t};\n\t$pkg.IPv4Mask = IPv4Mask;\n\tIP.prototype.IsUnspecified = function() {\n\t\tvar $ptr, ip;\n\t\tip = this;\n\t\tif (ip.Equal($pkg.IPv4zero) || ip.Equal($pkg.IPv6unspecified)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t};\n\t$ptrType(IP).prototype.IsUnspecified = function() { return this.$get().IsUnspecified(); };\n\tIP.prototype.IsLoopback = function() {\n\t\tvar $ptr, ip, ip4;\n\t\tip = this;\n\t\tip4 = ip.To4();\n\t\tif (!(ip4 === IP.nil) && ((0 >= ip4.$length ? $throwRuntimeError(\"index out of range\") : ip4.$array[ip4.$offset + 0]) === 127)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn ip.Equal($pkg.IPv6loopback);\n\t};\n\t$ptrType(IP).prototype.IsLoopback = function() { return this.$get().IsLoopback(); };\n\tIP.prototype.IsMulticast = function() {\n\t\tvar $ptr, ip, ip4;\n\t\tip = this;\n\t\tip4 = ip.To4();\n\t\tif (!(ip4 === IP.nil) && ((((0 >= ip4.$length ? $throwRuntimeError(\"index out of range\") : ip4.$array[ip4.$offset + 0]) & 240) >>> 0) === 224)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn (0 >= ip.$length ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + 0]) === 255;\n\t};\n\t$ptrType(IP).prototype.IsMulticast = function() { return this.$get().IsMulticast(); };\n\tIP.prototype.IsInterfaceLocalMulticast = function() {\n\t\tvar $ptr, ip;\n\t\tip = this;\n\t\treturn (ip.$length === 16) && ((0 >= ip.$length ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + 0]) === 255) && ((((1 >= ip.$length ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + 1]) & 15) >>> 0) === 1);\n\t};\n\t$ptrType(IP).prototype.IsInterfaceLocalMulticast = function() { return this.$get().IsInterfaceLocalMulticast(); };\n\tIP.prototype.IsLinkLocalMulticast = function() {\n\t\tvar $ptr, ip, ip4;\n\t\tip = this;\n\t\tip4 = ip.To4();\n\t\tif (!(ip4 === IP.nil) && ((0 >= ip4.$length ? $throwRuntimeError(\"index out of range\") : ip4.$array[ip4.$offset + 0]) === 224) && ((1 >= ip4.$length ? $throwRuntimeError(\"index out of range\") : ip4.$array[ip4.$offset + 1]) === 0) && ((2 >= ip4.$length ? $throwRuntimeError(\"index out of range\") : ip4.$array[ip4.$offset + 2]) === 0)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn ((0 >= ip.$length ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + 0]) === 255) && ((((1 >= ip.$length ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + 1]) & 15) >>> 0) === 2);\n\t};\n\t$ptrType(IP).prototype.IsLinkLocalMulticast = function() { return this.$get().IsLinkLocalMulticast(); };\n\tIP.prototype.IsLinkLocalUnicast = function() {\n\t\tvar $ptr, ip, ip4;\n\t\tip = this;\n\t\tip4 = ip.To4();\n\t\tif (!(ip4 === IP.nil) && ((0 >= ip4.$length ? $throwRuntimeError(\"index out of range\") : ip4.$array[ip4.$offset + 0]) === 169) && ((1 >= ip4.$length ? $throwRuntimeError(\"index out of range\") : ip4.$array[ip4.$offset + 1]) === 254)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn ((0 >= ip.$length ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + 0]) === 254) && ((((1 >= ip.$length ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + 1]) & 192) >>> 0) === 128);\n\t};\n\t$ptrType(IP).prototype.IsLinkLocalUnicast = function() { return this.$get().IsLinkLocalUnicast(); };\n\tIP.prototype.IsGlobalUnicast = function() {\n\t\tvar $ptr, ip;\n\t\tip = this;\n\t\treturn !ip.IsUnspecified() && !ip.IsLoopback() && !ip.IsMulticast() && !ip.IsLinkLocalUnicast();\n\t};\n\t$ptrType(IP).prototype.IsGlobalUnicast = function() { return this.$get().IsGlobalUnicast(); };\n\tisZeros = function(p) {\n\t\tvar $ptr, i, p;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < p.$length)) { break; }\n\t\t\tif (!((((i < 0 || i >= p.$length) ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + i]) === 0))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn true;\n\t};\n\tIP.prototype.To4 = function() {\n\t\tvar $ptr, ip;\n\t\tip = this;\n\t\tif (ip.$length === 4) {\n\t\t\treturn ip;\n\t\t}\n\t\tif ((ip.$length === 16) && isZeros($subslice(ip, 0, 10)) && ((10 >= ip.$length ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + 10]) === 255) && ((11 >= ip.$length ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + 11]) === 255)) {\n\t\t\treturn $subslice(ip, 12, 16);\n\t\t}\n\t\treturn IP.nil;\n\t};\n\t$ptrType(IP).prototype.To4 = function() { return this.$get().To4(); };\n\tIP.prototype.To16 = function() {\n\t\tvar $ptr, ip;\n\t\tip = this;\n\t\tif (ip.$length === 4) {\n\t\t\treturn IPv4((0 >= ip.$length ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + 0]), (1 >= ip.$length ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + 1]), (2 >= ip.$length ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + 2]), (3 >= ip.$length ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + 3]));\n\t\t}\n\t\tif (ip.$length === 16) {\n\t\t\treturn ip;\n\t\t}\n\t\treturn IP.nil;\n\t};\n\t$ptrType(IP).prototype.To16 = function() { return this.$get().To16(); };\n\tIP.prototype.DefaultMask = function() {\n\t\tvar $ptr, _ref, ip;\n\t\tip = this;\n\t\tip = ip.To4();\n\t\tif (ip === IP.nil) {\n\t\t\treturn IPMask.nil;\n\t\t}\n\t\t_ref = true;\n\t\tif (_ref === (0 >= ip.$length ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + 0]) < 128) {\n\t\t\treturn classAMask;\n\t\t} else if (_ref === (0 >= ip.$length ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + 0]) < 192) {\n\t\t\treturn classBMask;\n\t\t} else {\n\t\t\treturn classCMask;\n\t\t}\n\t};\n\t$ptrType(IP).prototype.DefaultMask = function() { return this.$get().DefaultMask(); };\n\tallFF = function(b) {\n\t\tvar $ptr, _i, _ref, b, c;\n\t\t_ref = b;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\tc = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tif (!((c === 255))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t_i++;\n\t\t}\n\t\treturn true;\n\t};\n\tIP.prototype.Mask = function(mask) {\n\t\tvar $ptr, i, ip, mask, n, out, x, x$1;\n\t\tip = this;\n\t\tif ((mask.$length === 16) && (ip.$length === 4) && allFF((x = $subslice(mask, 0, 12), $subslice(new sliceType$1(x.$array), x.$offset, x.$offset + x.$length)))) {\n\t\t\tmask = $subslice(mask, 12);\n\t\t}\n\t\tif ((mask.$length === 4) && (ip.$length === 16) && bytesEqual((x$1 = $subslice(ip, 0, 12), $subslice(new sliceType$1(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), v4InV6Prefix)) {\n\t\t\tip = $subslice(ip, 12);\n\t\t}\n\t\tn = ip.$length;\n\t\tif (!((n === mask.$length))) {\n\t\t\treturn IP.nil;\n\t\t}\n\t\tout = $makeSlice(IP, n);\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < n)) { break; }\n\t\t\t((i < 0 || i >= out.$length) ? $throwRuntimeError(\"index out of range\") : out.$array[out.$offset + i] = (((i < 0 || i >= ip.$length) ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + i]) & ((i < 0 || i >= mask.$length) ? $throwRuntimeError(\"index out of range\") : mask.$array[mask.$offset + i])) >>> 0);\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn out;\n\t};\n\t$ptrType(IP).prototype.Mask = function(mask) { return this.$get().Mask(mask); };\n\tIP.prototype.String = function() {\n\t\tvar $ptr, b, e0, e1, i, i$1, ip, j, p, p4, x, x$1;\n\t\tip = this;\n\t\tp = ip;\n\t\tif (ip.$length === 0) {\n\t\t\treturn \"<nil>\";\n\t\t}\n\t\tp4 = p.To4();\n\t\tif (p4.$length === 4) {\n\t\t\treturn itod(((0 >= p4.$length ? $throwRuntimeError(\"index out of range\") : p4.$array[p4.$offset + 0]) >>> 0)) + \".\" + itod(((1 >= p4.$length ? $throwRuntimeError(\"index out of range\") : p4.$array[p4.$offset + 1]) >>> 0)) + \".\" + itod(((2 >= p4.$length ? $throwRuntimeError(\"index out of range\") : p4.$array[p4.$offset + 2]) >>> 0)) + \".\" + itod(((3 >= p4.$length ? $throwRuntimeError(\"index out of range\") : p4.$array[p4.$offset + 3]) >>> 0));\n\t\t}\n\t\tif (!((p.$length === 16))) {\n\t\t\treturn \"?\";\n\t\t}\n\t\te0 = -1;\n\t\te1 = -1;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < 16)) { break; }\n\t\t\tj = i;\n\t\t\twhile (true) {\n\t\t\t\tif (!(j < 16 && (((j < 0 || j >= p.$length) ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + j]) === 0) && ((x = j + 1 >> 0, ((x < 0 || x >= p.$length) ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + x])) === 0))) { break; }\n\t\t\t\tj = j + (2) >> 0;\n\t\t\t}\n\t\t\tif (j > i && (j - i >> 0) > (e1 - e0 >> 0)) {\n\t\t\t\te0 = i;\n\t\t\t\te1 = j;\n\t\t\t\ti = j;\n\t\t\t}\n\t\t\ti = i + (2) >> 0;\n\t\t}\n\t\tif ((e1 - e0 >> 0) <= 2) {\n\t\t\te0 = -1;\n\t\t\te1 = -1;\n\t\t}\n\t\tb = $makeSlice(sliceType$1, 0, 39);\n\t\ti$1 = 0;\n\t\twhile (true) {\n\t\t\tif (!(i$1 < 16)) { break; }\n\t\t\tif (i$1 === e0) {\n\t\t\t\tb = $append(b, 58, 58);\n\t\t\t\ti$1 = e1;\n\t\t\t\tif (i$1 >= 16) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (i$1 > 0) {\n\t\t\t\tb = $append(b, 58);\n\t\t\t}\n\t\t\tb = appendHex(b, ((((((i$1 < 0 || i$1 >= p.$length) ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + i$1]) >>> 0) << 8 >>> 0)) | ((x$1 = i$1 + 1 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? $throwRuntimeError(\"index out of range\") : p.$array[p.$offset + x$1])) >>> 0)) >>> 0);\n\t\t\ti$1 = i$1 + (2) >> 0;\n\t\t}\n\t\treturn $bytesToString(b);\n\t};\n\t$ptrType(IP).prototype.String = function() { return this.$get().String(); };\n\tIP.prototype.MarshalText = function() {\n\t\tvar $ptr, ip;\n\t\tip = this;\n\t\tif (ip.$length === 0) {\n\t\t\treturn [new sliceType$1($stringToBytes(\"\")), $ifaceNil];\n\t\t}\n\t\tif (!((ip.$length === 4)) && !((ip.$length === 16))) {\n\t\t\treturn [sliceType$1.nil, errors.New(\"invalid IP address\")];\n\t\t}\n\t\treturn [new sliceType$1($stringToBytes(ip.String())), $ifaceNil];\n\t};\n\t$ptrType(IP).prototype.MarshalText = function() { return this.$get().MarshalText(); };\n\t$ptrType(IP).prototype.UnmarshalText = function(text) {\n\t\tvar $ptr, ip, s, text, x;\n\t\tip = this;\n\t\tif (text.$length === 0) {\n\t\t\tip.$set(IP.nil);\n\t\t\treturn $ifaceNil;\n\t\t}\n\t\ts = $bytesToString(text);\n\t\tx = ParseIP(s);\n\t\tif (x === IP.nil) {\n\t\t\treturn new ParseError.ptr(\"IP address\", s);\n\t\t}\n\t\tip.$set(x);\n\t\treturn $ifaceNil;\n\t};\n\tIP.prototype.Equal = function(x) {\n\t\tvar $ptr, ip, x, x$1, x$2, x$3, x$4;\n\t\tip = this;\n\t\tif (ip.$length === x.$length) {\n\t\t\treturn bytesEqual($subslice(new sliceType$1(ip.$array), ip.$offset, ip.$offset + ip.$length), $subslice(new sliceType$1(x.$array), x.$offset, x.$offset + x.$length));\n\t\t}\n\t\tif ((ip.$length === 4) && (x.$length === 16)) {\n\t\t\treturn bytesEqual((x$1 = $subslice(x, 0, 12), $subslice(new sliceType$1(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), v4InV6Prefix) && bytesEqual($subslice(new sliceType$1(ip.$array), ip.$offset, ip.$offset + ip.$length), (x$2 = $subslice(x, 12), $subslice(new sliceType$1(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)));\n\t\t}\n\t\tif ((ip.$length === 16) && (x.$length === 4)) {\n\t\t\treturn bytesEqual((x$3 = $subslice(ip, 0, 12), $subslice(new sliceType$1(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), v4InV6Prefix) && bytesEqual((x$4 = $subslice(ip, 12), $subslice(new sliceType$1(x$4.$array), x$4.$offset, x$4.$offset + x$4.$length)), $subslice(new sliceType$1(x.$array), x.$offset, x.$offset + x.$length));\n\t\t}\n\t\treturn false;\n\t};\n\t$ptrType(IP).prototype.Equal = function(x) { return this.$get().Equal(x); };\n\tbytesEqual = function(x, y) {\n\t\tvar $ptr, _i, _ref, b, i, x, y;\n\t\tif (!((x.$length === y.$length))) {\n\t\t\treturn false;\n\t\t}\n\t\t_ref = x;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\tb = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tif (!((((i < 0 || i >= y.$length) ? $throwRuntimeError(\"index out of range\") : y.$array[y.$offset + i]) === b))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t_i++;\n\t\t}\n\t\treturn true;\n\t};\n\tsimpleMaskLength = function(mask) {\n\t\tvar $ptr, _i, _ref, i, mask, n, v, y;\n\t\tn = 0;\n\t\t_ref = mask;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\tv = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\tif (v === 255) {\n\t\t\t\tn = n + (8) >> 0;\n\t\t\t\t_i++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\twhile (true) {\n\t\t\t\tif (!(!((((v & 128) >>> 0) === 0)))) { break; }\n\t\t\t\tn = n + (1) >> 0;\n\t\t\t\tv = (y = (1), y < 32 ? (v << y) : 0) << 24 >>> 24;\n\t\t\t}\n\t\t\tif (!((v === 0))) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(i < mask.$length)) { break; }\n\t\t\t\tif (!((((i < 0 || i >= mask.$length) ? $throwRuntimeError(\"index out of range\") : mask.$array[mask.$offset + i]) === 0))) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\treturn n;\n\t};\n\tIPMask.prototype.Size = function() {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, bits, m, ones;\n\t\tones = 0;\n\t\tbits = 0;\n\t\tm = this;\n\t\t_tmp = simpleMaskLength(m); _tmp$1 = m.$length * 8 >> 0; ones = _tmp; bits = _tmp$1;\n\t\tif (ones === -1) {\n\t\t\t_tmp$2 = 0; _tmp$3 = 0; ones = _tmp$2; bits = _tmp$3;\n\t\t\treturn [ones, bits];\n\t\t}\n\t\treturn [ones, bits];\n\t};\n\t$ptrType(IPMask).prototype.Size = function() { return this.$get().Size(); };\n\tIPMask.prototype.String = function() {\n\t\tvar $ptr, _i, _ref, _tmp, _tmp$1, b, buf, i, m, x, x$1;\n\t\tm = this;\n\t\tif (m.$length === 0) {\n\t\t\treturn \"<nil>\";\n\t\t}\n\t\tbuf = $makeSlice(sliceType$1, (m.$length * 2 >> 0));\n\t\t_ref = m;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\ti = _i;\n\t\t\tb = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\t_tmp = \"0123456789abcdef\".charCodeAt((b >>> 4 << 24 >>> 24)); _tmp$1 = \"0123456789abcdef\".charCodeAt(((b & 15) >>> 0)); (x = i * 2 >> 0, ((x < 0 || x >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + x] = _tmp)); (x$1 = (i * 2 >> 0) + 1 >> 0, ((x$1 < 0 || x$1 >= buf.$length) ? $throwRuntimeError(\"index out of range\") : buf.$array[buf.$offset + x$1] = _tmp$1));\n\t\t\t_i++;\n\t\t}\n\t\treturn $bytesToString(buf);\n\t};\n\t$ptrType(IPMask).prototype.String = function() { return this.$get().String(); };\n\tparseIPv4 = function(s) {\n\t\tvar $ptr, _tuple, i, j, n, ok, p, s;\n\t\tp = $clone(arrayType.zero(), arrayType);\n\t\ti = 0;\n\t\tj = 0;\n\t\twhile (true) {\n\t\t\tif (!(j < 4)) { break; }\n\t\t\tif (i >= s.length) {\n\t\t\t\treturn IP.nil;\n\t\t\t}\n\t\t\tif (j > 0) {\n\t\t\t\tif (!((s.charCodeAt(i) === 46))) {\n\t\t\t\t\treturn IP.nil;\n\t\t\t\t}\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t\tn = 0;\n\t\t\tok = false;\n\t\t\t_tuple = dtoi(s, i); n = _tuple[0]; i = _tuple[1]; ok = _tuple[2];\n\t\t\tif (!ok || n > 255) {\n\t\t\t\treturn IP.nil;\n\t\t\t}\n\t\t\t((j < 0 || j >= p.length) ? $throwRuntimeError(\"index out of range\") : p[j] = (n << 24 >>> 24));\n\t\t\tj = j + (1) >> 0;\n\t\t}\n\t\tif (!((i === s.length))) {\n\t\t\treturn IP.nil;\n\t\t}\n\t\treturn IPv4(p[0], p[1], p[2], p[3]);\n\t};\n\tparseIPv6 = function(s, zoneAllowed) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, ellipsis, i, i1, ip, ip4, j, k, k$1, n, n$1, ok, s, x, x$1, x$2, x$3, x$4, zone, zoneAllowed;\n\t\tip = IP.nil;\n\t\tzone = \"\";\n\t\tip = $makeSlice(IP, 16);\n\t\tellipsis = -1;\n\t\ti = 0;\n\t\tif (zoneAllowed) {\n\t\t\t_tuple = splitHostZone(s); s = _tuple[0]; zone = _tuple[1];\n\t\t}\n\t\tif (s.length >= 2 && (s.charCodeAt(0) === 58) && (s.charCodeAt(1) === 58)) {\n\t\t\tellipsis = 0;\n\t\t\ti = 2;\n\t\t\tif (i === s.length) {\n\t\t\t\t_tmp = ip; _tmp$1 = zone; ip = _tmp; zone = _tmp$1;\n\t\t\t\treturn [ip, zone];\n\t\t\t}\n\t\t}\n\t\tj = 0;\n\t\twhile (true) {\n\t\t\tif (!(j < 16)) { break; }\n\t\t\t_tuple$1 = xtoi(s, i); n = _tuple$1[0]; i1 = _tuple$1[1]; ok = _tuple$1[2];\n\t\t\tif (!ok || n > 65535) {\n\t\t\t\t_tmp$2 = IP.nil; _tmp$3 = zone; ip = _tmp$2; zone = _tmp$3;\n\t\t\t\treturn [ip, zone];\n\t\t\t}\n\t\t\tif (i1 < s.length && (s.charCodeAt(i1) === 46)) {\n\t\t\t\tif (ellipsis < 0 && !((j === 12))) {\n\t\t\t\t\t_tmp$4 = IP.nil; _tmp$5 = zone; ip = _tmp$4; zone = _tmp$5;\n\t\t\t\t\treturn [ip, zone];\n\t\t\t\t}\n\t\t\t\tif ((j + 4 >> 0) > 16) {\n\t\t\t\t\t_tmp$6 = IP.nil; _tmp$7 = zone; ip = _tmp$6; zone = _tmp$7;\n\t\t\t\t\treturn [ip, zone];\n\t\t\t\t}\n\t\t\t\tip4 = parseIPv4(s.substring(i));\n\t\t\t\tif (ip4 === IP.nil) {\n\t\t\t\t\t_tmp$8 = IP.nil; _tmp$9 = zone; ip = _tmp$8; zone = _tmp$9;\n\t\t\t\t\treturn [ip, zone];\n\t\t\t\t}\n\t\t\t\t((j < 0 || j >= ip.$length) ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + j] = (12 >= ip4.$length ? $throwRuntimeError(\"index out of range\") : ip4.$array[ip4.$offset + 12]));\n\t\t\t\t(x = j + 1 >> 0, ((x < 0 || x >= ip.$length) ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + x] = (13 >= ip4.$length ? $throwRuntimeError(\"index out of range\") : ip4.$array[ip4.$offset + 13])));\n\t\t\t\t(x$1 = j + 2 >> 0, ((x$1 < 0 || x$1 >= ip.$length) ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + x$1] = (14 >= ip4.$length ? $throwRuntimeError(\"index out of range\") : ip4.$array[ip4.$offset + 14])));\n\t\t\t\t(x$2 = j + 3 >> 0, ((x$2 < 0 || x$2 >= ip.$length) ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + x$2] = (15 >= ip4.$length ? $throwRuntimeError(\"index out of range\") : ip4.$array[ip4.$offset + 15])));\n\t\t\t\ti = s.length;\n\t\t\t\tj = j + (4) >> 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t((j < 0 || j >= ip.$length) ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + j] = ((n >> 8 >> 0) << 24 >>> 24));\n\t\t\t(x$3 = j + 1 >> 0, ((x$3 < 0 || x$3 >= ip.$length) ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + x$3] = (n << 24 >>> 24)));\n\t\t\tj = j + (2) >> 0;\n\t\t\ti = i1;\n\t\t\tif (i === s.length) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!((s.charCodeAt(i) === 58)) || ((i + 1 >> 0) === s.length)) {\n\t\t\t\t_tmp$10 = IP.nil; _tmp$11 = zone; ip = _tmp$10; zone = _tmp$11;\n\t\t\t\treturn [ip, zone];\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t\tif (s.charCodeAt(i) === 58) {\n\t\t\t\tif (ellipsis >= 0) {\n\t\t\t\t\t_tmp$12 = IP.nil; _tmp$13 = zone; ip = _tmp$12; zone = _tmp$13;\n\t\t\t\t\treturn [ip, zone];\n\t\t\t\t}\n\t\t\t\tellipsis = j;\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t\tif (i === s.length) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!((i === s.length))) {\n\t\t\t_tmp$14 = IP.nil; _tmp$15 = zone; ip = _tmp$14; zone = _tmp$15;\n\t\t\treturn [ip, zone];\n\t\t}\n\t\tif (j < 16) {\n\t\t\tif (ellipsis < 0) {\n\t\t\t\t_tmp$16 = IP.nil; _tmp$17 = zone; ip = _tmp$16; zone = _tmp$17;\n\t\t\t\treturn [ip, zone];\n\t\t\t}\n\t\t\tn$1 = 16 - j >> 0;\n\t\t\tk = j - 1 >> 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(k >= ellipsis)) { break; }\n\t\t\t\t(x$4 = k + n$1 >> 0, ((x$4 < 0 || x$4 >= ip.$length) ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + x$4] = ((k < 0 || k >= ip.$length) ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + k])));\n\t\t\t\tk = k - (1) >> 0;\n\t\t\t}\n\t\t\tk$1 = (ellipsis + n$1 >> 0) - 1 >> 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(k$1 >= ellipsis)) { break; }\n\t\t\t\t((k$1 < 0 || k$1 >= ip.$length) ? $throwRuntimeError(\"index out of range\") : ip.$array[ip.$offset + k$1] = 0);\n\t\t\t\tk$1 = k$1 - (1) >> 0;\n\t\t\t}\n\t\t} else if (ellipsis >= 0) {\n\t\t\t_tmp$18 = IP.nil; _tmp$19 = zone; ip = _tmp$18; zone = _tmp$19;\n\t\t\treturn [ip, zone];\n\t\t}\n\t\t_tmp$20 = ip; _tmp$21 = zone; ip = _tmp$20; zone = _tmp$21;\n\t\treturn [ip, zone];\n\t};\n\tParseError.ptr.prototype.Error = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn \"invalid \" + e.Type + \": \" + e.Text;\n\t};\n\tParseError.prototype.Error = function() { return this.$val.Error(); };\n\tParseIP = function(s) {\n\t\tvar $ptr, _ref, _tuple, i, ip, s;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < s.length)) { break; }\n\t\t\t_ref = s.charCodeAt(i);\n\t\t\tif (_ref === 46) {\n\t\t\t\treturn parseIPv4(s);\n\t\t\t} else if (_ref === 58) {\n\t\t\t\t_tuple = parseIPv6(s, false); ip = _tuple[0];\n\t\t\t\treturn ip;\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\treturn IP.nil;\n\t};\n\t$pkg.ParseIP = ParseIP;\n\tinit = function() {\n\t\tvar $ptr, _tuple;\n\t\tsysInit();\n\t\tsupportsIPv4 = probeIPv4Stack();\n\t\t_tuple = probeIPv6Stack(); supportsIPv6 = _tuple[0]; supportsIPv4map = _tuple[1];\n\t};\n\tsplitHostZone = function(s) {\n\t\tvar $ptr, _tmp, _tmp$1, host, i, s, zone;\n\t\thost = \"\";\n\t\tzone = \"\";\n\t\ti = last(s, 37);\n\t\tif (i > 0) {\n\t\t\t_tmp = s.substring(0, i); _tmp$1 = s.substring((i + 1 >> 0)); host = _tmp; zone = _tmp$1;\n\t\t} else {\n\t\t\thost = s;\n\t\t}\n\t\treturn [host, zone];\n\t};\n\tdtoi = function(s, i0) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, i, i0, n, ok, s;\n\t\tn = 0;\n\t\ti = 0;\n\t\tok = false;\n\t\tn = 0;\n\t\ti = i0;\n\t\twhile (true) {\n\t\t\tif (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }\n\t\t\tn = (n * 10 >> 0) + ((s.charCodeAt(i) - 48 << 24 >>> 24) >> 0) >> 0;\n\t\t\tif (n >= 16777215) {\n\t\t\t\t_tmp = 0; _tmp$1 = i; _tmp$2 = false; n = _tmp; i = _tmp$1; ok = _tmp$2;\n\t\t\t\treturn [n, i, ok];\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\tif (i === i0) {\n\t\t\t_tmp$3 = 0; _tmp$4 = i; _tmp$5 = false; n = _tmp$3; i = _tmp$4; ok = _tmp$5;\n\t\t\treturn [n, i, ok];\n\t\t}\n\t\t_tmp$6 = n; _tmp$7 = i; _tmp$8 = true; n = _tmp$6; i = _tmp$7; ok = _tmp$8;\n\t\treturn [n, i, ok];\n\t};\n\txtoi = function(s, i0) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, i, i0, n, ok, s;\n\t\tn = 0;\n\t\ti = 0;\n\t\tok = false;\n\t\tn = 0;\n\t\ti = i0;\n\t\twhile (true) {\n\t\t\tif (!(i < s.length)) { break; }\n\t\t\tif (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {\n\t\t\t\tn = n * (16) >> 0;\n\t\t\t\tn = n + (((s.charCodeAt(i) - 48 << 24 >>> 24) >> 0)) >> 0;\n\t\t\t} else if (97 <= s.charCodeAt(i) && s.charCodeAt(i) <= 102) {\n\t\t\t\tn = n * (16) >> 0;\n\t\t\t\tn = n + ((((s.charCodeAt(i) - 97 << 24 >>> 24) >> 0) + 10 >> 0)) >> 0;\n\t\t\t} else if (65 <= s.charCodeAt(i) && s.charCodeAt(i) <= 70) {\n\t\t\t\tn = n * (16) >> 0;\n\t\t\t\tn = n + ((((s.charCodeAt(i) - 65 << 24 >>> 24) >> 0) + 10 >> 0)) >> 0;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (n >= 16777215) {\n\t\t\t\t_tmp = 0; _tmp$1 = i; _tmp$2 = false; n = _tmp; i = _tmp$1; ok = _tmp$2;\n\t\t\t\treturn [n, i, ok];\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\tif (i === i0) {\n\t\t\t_tmp$3 = 0; _tmp$4 = i; _tmp$5 = false; n = _tmp$3; i = _tmp$4; ok = _tmp$5;\n\t\t\treturn [n, i, ok];\n\t\t}\n\t\t_tmp$6 = n; _tmp$7 = i; _tmp$8 = true; n = _tmp$6; i = _tmp$7; ok = _tmp$8;\n\t\treturn [n, i, ok];\n\t};\n\titod = function(i) {\n\t\tvar $ptr, _q, _r, b, bp, i;\n\t\tif (i === 0) {\n\t\t\treturn \"0\";\n\t\t}\n\t\tb = $clone(arrayType$2.zero(), arrayType$2);\n\t\tbp = 32;\n\t\twhile (true) {\n\t\t\tif (!(i > 0)) { break; }\n\t\t\tbp = bp - (1) >> 0;\n\t\t\t((bp < 0 || bp >= b.length) ? $throwRuntimeError(\"index out of range\") : b[bp] = ((_r = i % 10, _r === _r ? _r : $throwRuntimeError(\"integer divide by zero\")) << 24 >>> 24) + 48 << 24 >>> 24);\n\t\t\ti = (_q = i / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError(\"integer divide by zero\"));\n\t\t}\n\t\treturn $bytesToString($subslice(new sliceType$1(b), bp));\n\t};\n\tappendHex = function(dst, i) {\n\t\tvar $ptr, dst, i, j, v, y;\n\t\tif (i === 0) {\n\t\t\treturn $append(dst, 48);\n\t\t}\n\t\tj = 7;\n\t\twhile (true) {\n\t\t\tif (!(j >= 0)) { break; }\n\t\t\tv = (y = ((j * 4 >> 0) >>> 0), y < 32 ? (i >>> y) : 0) >>> 0;\n\t\t\tif (v > 0) {\n\t\t\t\tdst = $append(dst, \"0123456789abcdef\".charCodeAt(((v & 15) >>> 0)));\n\t\t\t}\n\t\t\tj = j - (1) >> 0;\n\t\t}\n\t\treturn dst;\n\t};\n\tlast = function(s, b) {\n\t\tvar $ptr, b, i, s;\n\t\ti = s.length;\n\t\ti = i - (1) >> 0;\n\t\twhile (true) {\n\t\t\tif (!(i >= 0)) { break; }\n\t\t\tif (s.charCodeAt(i) === b) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti = i - (1) >> 0;\n\t\t}\n\t\treturn i;\n\t};\n\tptrType$7.methods = [{prop: \"Header\", name: \"Header\", pkg: \"\", typ: $funcType([], [ptrType$7], false)}, {prop: \"Walk\", name: \"Walk\", pkg: \"\", typ: $funcType([funcType$1], [$Bool], false)}];\n\tptrType$8.methods = [{prop: \"Header\", name: \"Header\", pkg: \"\", typ: $funcType([], [ptrType$7], false)}, {prop: \"Walk\", name: \"Walk\", pkg: \"\", typ: $funcType([funcType$1], [$Bool], false)}];\n\tptrType$55.methods = [{prop: \"Header\", name: \"Header\", pkg: \"\", typ: $funcType([], [ptrType$7], false)}, {prop: \"Walk\", name: \"Walk\", pkg: \"\", typ: $funcType([funcType$1], [$Bool], false)}];\n\tptrType$56.methods = [{prop: \"Header\", name: \"Header\", pkg: \"\", typ: $funcType([], [ptrType$7], false)}, {prop: \"Walk\", name: \"Walk\", pkg: \"\", typ: $funcType([funcType$1], [$Bool], false)}];\n\tptrType$57.methods = [{prop: \"Header\", name: \"Header\", pkg: \"\", typ: $funcType([], [ptrType$7], false)}, {prop: \"Walk\", name: \"Walk\", pkg: \"\", typ: $funcType([funcType$1], [$Bool], false)}];\n\tptrType$58.methods = [{prop: \"Header\", name: \"Header\", pkg: \"\", typ: $funcType([], [ptrType$7], false)}, {prop: \"Walk\", name: \"Walk\", pkg: \"\", typ: $funcType([funcType$1], [$Bool], false)}];\n\tptrType$59.methods = [{prop: \"Header\", name: \"Header\", pkg: \"\", typ: $funcType([], [ptrType$7], false)}, {prop: \"Walk\", name: \"Walk\", pkg: \"\", typ: $funcType([funcType$1], [$Bool], false)}];\n\tptrType$39.methods = [{prop: \"Header\", name: \"Header\", pkg: \"\", typ: $funcType([], [ptrType$7], false)}, {prop: \"Walk\", name: \"Walk\", pkg: \"\", typ: $funcType([funcType$1], [$Bool], false)}];\n\tptrType$40.methods = [{prop: \"Header\", name: \"Header\", pkg: \"\", typ: $funcType([], [ptrType$7], false)}, {prop: \"Walk\", name: \"Walk\", pkg: \"\", typ: $funcType([funcType$1], [$Bool], false)}];\n\tptrType$42.methods = [{prop: \"Header\", name: \"Header\", pkg: \"\", typ: $funcType([], [ptrType$7], false)}, {prop: \"Walk\", name: \"Walk\", pkg: \"\", typ: $funcType([funcType$1], [$Bool], false)}];\n\tptrType$60.methods = [{prop: \"Header\", name: \"Header\", pkg: \"\", typ: $funcType([], [ptrType$7], false)}, {prop: \"Walk\", name: \"Walk\", pkg: \"\", typ: $funcType([funcType$1], [$Bool], false)}];\n\tptrType$41.methods = [{prop: \"Header\", name: \"Header\", pkg: \"\", typ: $funcType([], [ptrType$7], false)}, {prop: \"Walk\", name: \"Walk\", pkg: \"\", typ: $funcType([funcType$1], [$Bool], false)}];\n\tptrType$38.methods = [{prop: \"Header\", name: \"Header\", pkg: \"\", typ: $funcType([], [ptrType$7], false)}, {prop: \"Walk\", name: \"Walk\", pkg: \"\", typ: $funcType([funcType$1], [$Bool], false)}];\n\tptrType$12.methods = [{prop: \"Header\", name: \"Header\", pkg: \"\", typ: $funcType([], [ptrType$7], false)}, {prop: \"Walk\", name: \"Walk\", pkg: \"\", typ: $funcType([funcType$1], [$Bool], false)}];\n\tptrType$13.methods = [{prop: \"Header\", name: \"Header\", pkg: \"\", typ: $funcType([], [ptrType$7], false)}, {prop: \"Walk\", name: \"Walk\", pkg: \"\", typ: $funcType([funcType$1], [$Bool], false)}];\n\tIP.methods = [{prop: \"IsUnspecified\", name: \"IsUnspecified\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"IsLoopback\", name: \"IsLoopback\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"IsMulticast\", name: \"IsMulticast\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"IsInterfaceLocalMulticast\", name: \"IsInterfaceLocalMulticast\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"IsLinkLocalMulticast\", name: \"IsLinkLocalMulticast\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"IsLinkLocalUnicast\", name: \"IsLinkLocalUnicast\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"IsGlobalUnicast\", name: \"IsGlobalUnicast\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"To4\", name: \"To4\", pkg: \"\", typ: $funcType([], [IP], false)}, {prop: \"To16\", name: \"To16\", pkg: \"\", typ: $funcType([], [IP], false)}, {prop: \"DefaultMask\", name: \"DefaultMask\", pkg: \"\", typ: $funcType([], [IPMask], false)}, {prop: \"Mask\", name: \"Mask\", pkg: \"\", typ: $funcType([IPMask], [IP], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"MarshalText\", name: \"MarshalText\", pkg: \"\", typ: $funcType([], [sliceType$1, $error], false)}, {prop: \"Equal\", name: \"Equal\", pkg: \"\", typ: $funcType([IP], [$Bool], false)}];\n\tptrType$64.methods = [{prop: \"UnmarshalText\", name: \"UnmarshalText\", pkg: \"\", typ: $funcType([sliceType$1], [$error], false)}];\n\tIPMask.methods = [{prop: \"Size\", name: \"Size\", pkg: \"\", typ: $funcType([], [$Int, $Int], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$65.methods = [{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tdnsRR_Header.init([{prop: \"Name\", name: \"Name\", pkg: \"\", typ: $String, tag: \"net:\\\"domain-name\\\"\"}, {prop: \"Rrtype\", name: \"Rrtype\", pkg: \"\", typ: $Uint16, tag: \"\"}, {prop: \"Class\", name: \"Class\", pkg: \"\", typ: $Uint16, tag: \"\"}, {prop: \"Ttl\", name: \"Ttl\", pkg: \"\", typ: $Uint32, tag: \"\"}, {prop: \"Rdlength\", name: \"Rdlength\", pkg: \"\", typ: $Uint16, tag: \"\"}]);\n\tdnsRR_CNAME.init([{prop: \"Hdr\", name: \"Hdr\", pkg: \"\", typ: dnsRR_Header, tag: \"\"}, {prop: \"Cname\", name: \"Cname\", pkg: \"\", typ: $String, tag: \"net:\\\"domain-name\\\"\"}]);\n\tdnsRR_HINFO.init([{prop: \"Hdr\", name: \"Hdr\", pkg: \"\", typ: dnsRR_Header, tag: \"\"}, {prop: \"Cpu\", name: \"Cpu\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Os\", name: \"Os\", pkg: \"\", typ: $String, tag: \"\"}]);\n\tdnsRR_MB.init([{prop: \"Hdr\", name: \"Hdr\", pkg: \"\", typ: dnsRR_Header, tag: \"\"}, {prop: \"Mb\", name: \"Mb\", pkg: \"\", typ: $String, tag: \"net:\\\"domain-name\\\"\"}]);\n\tdnsRR_MG.init([{prop: \"Hdr\", name: \"Hdr\", pkg: \"\", typ: dnsRR_Header, tag: \"\"}, {prop: \"Mg\", name: \"Mg\", pkg: \"\", typ: $String, tag: \"net:\\\"domain-name\\\"\"}]);\n\tdnsRR_MINFO.init([{prop: \"Hdr\", name: \"Hdr\", pkg: \"\", typ: dnsRR_Header, tag: \"\"}, {prop: \"Rmail\", name: \"Rmail\", pkg: \"\", typ: $String, tag: \"net:\\\"domain-name\\\"\"}, {prop: \"Email\", name: \"Email\", pkg: \"\", typ: $String, tag: \"net:\\\"domain-name\\\"\"}]);\n\tdnsRR_MR.init([{prop: \"Hdr\", name: \"Hdr\", pkg: \"\", typ: dnsRR_Header, tag: \"\"}, {prop: \"Mr\", name: \"Mr\", pkg: \"\", typ: $String, tag: \"net:\\\"domain-name\\\"\"}]);\n\tdnsRR_MX.init([{prop: \"Hdr\", name: \"Hdr\", pkg: \"\", typ: dnsRR_Header, tag: \"\"}, {prop: \"Pref\", name: \"Pref\", pkg: \"\", typ: $Uint16, tag: \"\"}, {prop: \"Mx\", name: \"Mx\", pkg: \"\", typ: $String, tag: \"net:\\\"domain-name\\\"\"}]);\n\tdnsRR_NS.init([{prop: \"Hdr\", name: \"Hdr\", pkg: \"\", typ: dnsRR_Header, tag: \"\"}, {prop: \"Ns\", name: \"Ns\", pkg: \"\", typ: $String, tag: \"net:\\\"domain-name\\\"\"}]);\n\tdnsRR_PTR.init([{prop: \"Hdr\", name: \"Hdr\", pkg: \"\", typ: dnsRR_Header, tag: \"\"}, {prop: \"Ptr\", name: \"Ptr\", pkg: \"\", typ: $String, tag: \"net:\\\"domain-name\\\"\"}]);\n\tdnsRR_SOA.init([{prop: \"Hdr\", name: \"Hdr\", pkg: \"\", typ: dnsRR_Header, tag: \"\"}, {prop: \"Ns\", name: \"Ns\", pkg: \"\", typ: $String, tag: \"net:\\\"domain-name\\\"\"}, {prop: \"Mbox\", name: \"Mbox\", pkg: \"\", typ: $String, tag: \"net:\\\"domain-name\\\"\"}, {prop: \"Serial\", name: \"Serial\", pkg: \"\", typ: $Uint32, tag: \"\"}, {prop: \"Refresh\", name: \"Refresh\", pkg: \"\", typ: $Uint32, tag: \"\"}, {prop: \"Retry\", name: \"Retry\", pkg: \"\", typ: $Uint32, tag: \"\"}, {prop: \"Expire\", name: \"Expire\", pkg: \"\", typ: $Uint32, tag: \"\"}, {prop: \"Minttl\", name: \"Minttl\", pkg: \"\", typ: $Uint32, tag: \"\"}]);\n\tdnsRR_TXT.init([{prop: \"Hdr\", name: \"Hdr\", pkg: \"\", typ: dnsRR_Header, tag: \"\"}, {prop: \"Txt\", name: \"Txt\", pkg: \"\", typ: $String, tag: \"\"}]);\n\tdnsRR_SRV.init([{prop: \"Hdr\", name: \"Hdr\", pkg: \"\", typ: dnsRR_Header, tag: \"\"}, {prop: \"Priority\", name: \"Priority\", pkg: \"\", typ: $Uint16, tag: \"\"}, {prop: \"Weight\", name: \"Weight\", pkg: \"\", typ: $Uint16, tag: \"\"}, {prop: \"Port\", name: \"Port\", pkg: \"\", typ: $Uint16, tag: \"\"}, {prop: \"Target\", name: \"Target\", pkg: \"\", typ: $String, tag: \"net:\\\"domain-name\\\"\"}]);\n\tdnsRR_A.init([{prop: \"Hdr\", name: \"Hdr\", pkg: \"\", typ: dnsRR_Header, tag: \"\"}, {prop: \"A\", name: \"A\", pkg: \"\", typ: $Uint32, tag: \"net:\\\"ipv4\\\"\"}]);\n\tdnsRR_AAAA.init([{prop: \"Hdr\", name: \"Hdr\", pkg: \"\", typ: dnsRR_Header, tag: \"\"}, {prop: \"AAAA\", name: \"AAAA\", pkg: \"\", typ: arrayType$3, tag: \"net:\\\"ipv6\\\"\"}]);\n\tIP.init($Uint8);\n\tIPMask.init($Uint8);\n\tParseError.init([{prop: \"Type\", name: \"Type\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Text\", name: \"Text\", pkg: \"\", typ: $String, tag: \"\"}]);\n\tAddr.init([{prop: \"Network\", name: \"Network\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = rand.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = runtime.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = sort.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = atomic.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = syscall.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = time.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tsupportsIPv4 = false;\n\t\tsupportsIPv6 = false;\n\t\tsupportsIPv4map = false;\n\t\trr_mk = (_map = new $Map(), _key = 5, _map[_key] = { k: _key, v: (function() {\n\t\t\tvar $ptr;\n\t\t\treturn new dnsRR_CNAME.ptr();\n\t\t}) }, _key = 13, _map[_key] = { k: _key, v: (function() {\n\t\t\tvar $ptr;\n\t\t\treturn new dnsRR_HINFO.ptr();\n\t\t}) }, _key = 7, _map[_key] = { k: _key, v: (function() {\n\t\t\tvar $ptr;\n\t\t\treturn new dnsRR_MB.ptr();\n\t\t}) }, _key = 8, _map[_key] = { k: _key, v: (function() {\n\t\t\tvar $ptr;\n\t\t\treturn new dnsRR_MG.ptr();\n\t\t}) }, _key = 14, _map[_key] = { k: _key, v: (function() {\n\t\t\tvar $ptr;\n\t\t\treturn new dnsRR_MINFO.ptr();\n\t\t}) }, _key = 9, _map[_key] = { k: _key, v: (function() {\n\t\t\tvar $ptr;\n\t\t\treturn new dnsRR_MR.ptr();\n\t\t}) }, _key = 15, _map[_key] = { k: _key, v: (function() {\n\t\t\tvar $ptr;\n\t\t\treturn new dnsRR_MX.ptr();\n\t\t}) }, _key = 2, _map[_key] = { k: _key, v: (function() {\n\t\t\tvar $ptr;\n\t\t\treturn new dnsRR_NS.ptr();\n\t\t}) }, _key = 12, _map[_key] = { k: _key, v: (function() {\n\t\t\tvar $ptr;\n\t\t\treturn new dnsRR_PTR.ptr();\n\t\t}) }, _key = 6, _map[_key] = { k: _key, v: (function() {\n\t\t\tvar $ptr;\n\t\t\treturn new dnsRR_SOA.ptr();\n\t\t}) }, _key = 16, _map[_key] = { k: _key, v: (function() {\n\t\t\tvar $ptr;\n\t\t\treturn new dnsRR_TXT.ptr();\n\t\t}) }, _key = 33, _map[_key] = { k: _key, v: (function() {\n\t\t\tvar $ptr;\n\t\t\treturn new dnsRR_SRV.ptr();\n\t\t}) }, _key = 1, _map[_key] = { k: _key, v: (function() {\n\t\t\tvar $ptr;\n\t\t\treturn new dnsRR_A.ptr();\n\t\t}) }, _key = 28, _map[_key] = { k: _key, v: (function() {\n\t\t\tvar $ptr;\n\t\t\treturn new dnsRR_AAAA.ptr();\n\t\t}) }, _map);\n\t\terrInvalidInterface = errors.New(\"invalid network interface\");\n\t\terrInvalidInterfaceIndex = errors.New(\"invalid network interface index\");\n\t\terrInvalidInterfaceName = errors.New(\"invalid network interface name\");\n\t\terrNoSuchInterface = errors.New(\"no such network interface\");\n\t\terrNoSuchMulticastInterface = errors.New(\"no such multicast network interface\");\n\t\tv4InV6Prefix = new sliceType$1([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255]);\n\t\t$pkg.IPv4bcast = IPv4(255, 255, 255, 255);\n\t\t$pkg.IPv4allsys = IPv4(224, 0, 0, 1);\n\t\t$pkg.IPv4allrouter = IPv4(224, 0, 0, 2);\n\t\t$pkg.IPv4zero = IPv4(0, 0, 0, 0);\n\t\t$pkg.IPv6unspecified = new IP([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n\t\t$pkg.IPv6loopback = new IP([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]);\n\t\tclassAMask = IPv4Mask(255, 0, 0, 0);\n\t\tclassBMask = IPv4Mask(255, 255, 0, 0);\n\t\tclassCMask = IPv4Mask(255, 255, 255, 0);\n\t\terrNoSuitableAddress = errors.New(\"no suitable address found\");\n\t\tlistenerBacklog = maxListenerBacklog();\n\t\terrMissingAddress = errors.New(\"missing address\");\n\t\terrClosing = errors.New(\"use of closed network connection\");\n\t\t$pkg.ErrWriteToConnected = errors.New(\"use of WriteTo with pre-connected connection\");\n\t\tthreadLimit = new chanType(500);\n\t\tinit();\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"net/url\"] = (function() {\n\tvar $pkg = {}, $init, bytes, errors, sort, strconv, strings, Error, EscapeError, URL, Userinfo, Values, sliceType, ptrType, ptrType$1, sliceType$1, ptrType$2, ishex, unhex, shouldEscape, QueryUnescape, unescape, QueryEscape, escape, User, UserPassword, getscheme, split, Parse, parse, parseAuthority, ParseQuery, parseQuery, resolvePath;\n\tbytes = $packages[\"bytes\"];\n\terrors = $packages[\"errors\"];\n\tsort = $packages[\"sort\"];\n\tstrconv = $packages[\"strconv\"];\n\tstrings = $packages[\"strings\"];\n\tError = $pkg.Error = $newType(0, $kindStruct, \"url.Error\", \"Error\", \"net/url\", function(Op_, URL_, Err_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Op = \"\";\n\t\t\tthis.URL = \"\";\n\t\t\tthis.Err = $ifaceNil;\n\t\t\treturn;\n\t\t}\n\t\tthis.Op = Op_;\n\t\tthis.URL = URL_;\n\t\tthis.Err = Err_;\n\t});\n\tEscapeError = $pkg.EscapeError = $newType(8, $kindString, \"url.EscapeError\", \"EscapeError\", \"net/url\", null);\n\tURL = $pkg.URL = $newType(0, $kindStruct, \"url.URL\", \"URL\", \"net/url\", function(Scheme_, Opaque_, User_, Host_, Path_, RawQuery_, Fragment_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Scheme = \"\";\n\t\t\tthis.Opaque = \"\";\n\t\t\tthis.User = ptrType$1.nil;\n\t\t\tthis.Host = \"\";\n\t\t\tthis.Path = \"\";\n\t\t\tthis.RawQuery = \"\";\n\t\t\tthis.Fragment = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.Scheme = Scheme_;\n\t\tthis.Opaque = Opaque_;\n\t\tthis.User = User_;\n\t\tthis.Host = Host_;\n\t\tthis.Path = Path_;\n\t\tthis.RawQuery = RawQuery_;\n\t\tthis.Fragment = Fragment_;\n\t});\n\tUserinfo = $pkg.Userinfo = $newType(0, $kindStruct, \"url.Userinfo\", \"Userinfo\", \"net/url\", function(username_, password_, passwordSet_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.username = \"\";\n\t\t\tthis.password = \"\";\n\t\t\tthis.passwordSet = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.username = username_;\n\t\tthis.password = password_;\n\t\tthis.passwordSet = passwordSet_;\n\t});\n\tValues = $pkg.Values = $newType(4, $kindMap, \"url.Values\", \"Values\", \"net/url\", null);\n\tsliceType = $sliceType($Uint8);\n\tptrType = $ptrType(URL);\n\tptrType$1 = $ptrType(Userinfo);\n\tsliceType$1 = $sliceType($String);\n\tptrType$2 = $ptrType(Error);\n\tError.ptr.prototype.Error = function() {\n\t\tvar $ptr, _r, e, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\te = this;\n\t\t_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn e.Op + \" \" + e.URL + \": \" + _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Error.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tError.prototype.Error = function() { return this.$val.Error(); };\n\tishex = function(c) {\n\t\tvar $ptr, c;\n\t\tif (48 <= c && c <= 57) {\n\t\t\treturn true;\n\t\t} else if (97 <= c && c <= 102) {\n\t\t\treturn true;\n\t\t} else if (65 <= c && c <= 70) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t};\n\tunhex = function(c) {\n\t\tvar $ptr, c;\n\t\tif (48 <= c && c <= 57) {\n\t\t\treturn c - 48 << 24 >>> 24;\n\t\t} else if (97 <= c && c <= 102) {\n\t\t\treturn (c - 97 << 24 >>> 24) + 10 << 24 >>> 24;\n\t\t} else if (65 <= c && c <= 70) {\n\t\t\treturn (c - 65 << 24 >>> 24) + 10 << 24 >>> 24;\n\t\t}\n\t\treturn 0;\n\t};\n\tEscapeError.prototype.Error = function() {\n\t\tvar $ptr, e;\n\t\te = this.$val;\n\t\treturn \"invalid URL escape \" + strconv.Quote(e);\n\t};\n\t$ptrType(EscapeError).prototype.Error = function() { return new EscapeError(this.$get()).Error(); };\n\tshouldEscape = function(c, mode) {\n\t\tvar $ptr, _ref, _ref$1, c, mode;\n\t\tif (65 <= c && c <= 90 || 97 <= c && c <= 122 || 48 <= c && c <= 57) {\n\t\t\treturn false;\n\t\t}\n\t\t_ref = c;\n\t\tif (_ref === 45 || _ref === 95 || _ref === 46 || _ref === 126) {\n\t\t\treturn false;\n\t\t} else if (_ref === 36 || _ref === 38 || _ref === 43 || _ref === 44 || _ref === 47 || _ref === 58 || _ref === 59 || _ref === 61 || _ref === 63 || _ref === 64) {\n\t\t\t_ref$1 = mode;\n\t\t\tif (_ref$1 === 1) {\n\t\t\t\treturn c === 63;\n\t\t\t} else if (_ref$1 === 2) {\n\t\t\t\treturn (c === 64) || (c === 47) || (c === 63) || (c === 58);\n\t\t\t} else if (_ref$1 === 3) {\n\t\t\t\treturn true;\n\t\t\t} else if (_ref$1 === 4) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t};\n\tQueryUnescape = function(s) {\n\t\tvar $ptr, s;\n\t\treturn unescape(s, 3);\n\t};\n\t$pkg.QueryUnescape = QueryUnescape;\n\tunescape = function(s, mode) {\n\t\tvar $ptr, _ref, _ref$1, hasPlus, i, i$1, j, mode, n, s, t;\n\t\tn = 0;\n\t\thasPlus = false;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < s.length)) { break; }\n\t\t\t_ref = s.charCodeAt(i);\n\t\t\tif (_ref === 37) {\n\t\t\t\tn = n + (1) >> 0;\n\t\t\t\tif ((i + 2 >> 0) >= s.length || !ishex(s.charCodeAt((i + 1 >> 0))) || !ishex(s.charCodeAt((i + 2 >> 0)))) {\n\t\t\t\t\ts = s.substring(i);\n\t\t\t\t\tif (s.length > 3) {\n\t\t\t\t\t\ts = s.substring(0, 3);\n\t\t\t\t\t}\n\t\t\t\t\treturn [\"\", new EscapeError(s)];\n\t\t\t\t}\n\t\t\t\ti = i + (3) >> 0;\n\t\t\t} else if (_ref === 43) {\n\t\t\t\thasPlus = mode === 3;\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t} else {\n\t\t\t\ti = i + (1) >> 0;\n\t\t\t}\n\t\t}\n\t\tif ((n === 0) && !hasPlus) {\n\t\t\treturn [s, $ifaceNil];\n\t\t}\n\t\tt = $makeSlice(sliceType, (s.length - (2 * n >> 0) >> 0));\n\t\tj = 0;\n\t\ti$1 = 0;\n\t\twhile (true) {\n\t\t\tif (!(i$1 < s.length)) { break; }\n\t\t\t_ref$1 = s.charCodeAt(i$1);\n\t\t\tif (_ref$1 === 37) {\n\t\t\t\t((j < 0 || j >= t.$length) ? $throwRuntimeError(\"index out of range\") : t.$array[t.$offset + j] = ((unhex(s.charCodeAt((i$1 + 1 >> 0))) << 4 << 24 >>> 24) | unhex(s.charCodeAt((i$1 + 2 >> 0)))) >>> 0);\n\t\t\t\tj = j + (1) >> 0;\n\t\t\t\ti$1 = i$1 + (3) >> 0;\n\t\t\t} else if (_ref$1 === 43) {\n\t\t\t\tif (mode === 3) {\n\t\t\t\t\t((j < 0 || j >= t.$length) ? $throwRuntimeError(\"index out of range\") : t.$array[t.$offset + j] = 32);\n\t\t\t\t} else {\n\t\t\t\t\t((j < 0 || j >= t.$length) ? $throwRuntimeError(\"index out of range\") : t.$array[t.$offset + j] = 43);\n\t\t\t\t}\n\t\t\t\tj = j + (1) >> 0;\n\t\t\t\ti$1 = i$1 + (1) >> 0;\n\t\t\t} else {\n\t\t\t\t((j < 0 || j >= t.$length) ? $throwRuntimeError(\"index out of range\") : t.$array[t.$offset + j] = s.charCodeAt(i$1));\n\t\t\t\tj = j + (1) >> 0;\n\t\t\t\ti$1 = i$1 + (1) >> 0;\n\t\t\t}\n\t\t}\n\t\treturn [$bytesToString(t), $ifaceNil];\n\t};\n\tQueryEscape = function(s) {\n\t\tvar $ptr, s;\n\t\treturn escape(s, 3);\n\t};\n\t$pkg.QueryEscape = QueryEscape;\n\tescape = function(s, mode) {\n\t\tvar $ptr, _tmp, _tmp$1, c, c$1, hexCount, i, i$1, j, mode, s, spaceCount, t, x, x$1;\n\t\t_tmp = 0; _tmp$1 = 0; spaceCount = _tmp; hexCount = _tmp$1;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < s.length)) { break; }\n\t\t\tc = s.charCodeAt(i);\n\t\t\tif (shouldEscape(c, mode)) {\n\t\t\t\tif ((c === 32) && (mode === 3)) {\n\t\t\t\t\tspaceCount = spaceCount + (1) >> 0;\n\t\t\t\t} else {\n\t\t\t\t\thexCount = hexCount + (1) >> 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\tif ((spaceCount === 0) && (hexCount === 0)) {\n\t\t\treturn s;\n\t\t}\n\t\tt = $makeSlice(sliceType, (s.length + (2 * hexCount >> 0) >> 0));\n\t\tj = 0;\n\t\ti$1 = 0;\n\t\twhile (true) {\n\t\t\tif (!(i$1 < s.length)) { break; }\n\t\t\tc$1 = s.charCodeAt(i$1);\n\t\t\tif ((c$1 === 32) && (mode === 3)) {\n\t\t\t\t((j < 0 || j >= t.$length) ? $throwRuntimeError(\"index out of range\") : t.$array[t.$offset + j] = 43);\n\t\t\t\tj = j + (1) >> 0;\n\t\t\t} else if (shouldEscape(c$1, mode)) {\n\t\t\t\t((j < 0 || j >= t.$length) ? $throwRuntimeError(\"index out of range\") : t.$array[t.$offset + j] = 37);\n\t\t\t\t(x = j + 1 >> 0, ((x < 0 || x >= t.$length) ? $throwRuntimeError(\"index out of range\") : t.$array[t.$offset + x] = \"0123456789ABCDEF\".charCodeAt((c$1 >>> 4 << 24 >>> 24))));\n\t\t\t\t(x$1 = j + 2 >> 0, ((x$1 < 0 || x$1 >= t.$length) ? $throwRuntimeError(\"index out of range\") : t.$array[t.$offset + x$1] = \"0123456789ABCDEF\".charCodeAt(((c$1 & 15) >>> 0))));\n\t\t\t\tj = j + (3) >> 0;\n\t\t\t} else {\n\t\t\t\t((j < 0 || j >= t.$length) ? $throwRuntimeError(\"index out of range\") : t.$array[t.$offset + j] = s.charCodeAt(i$1));\n\t\t\t\tj = j + (1) >> 0;\n\t\t\t}\n\t\t\ti$1 = i$1 + (1) >> 0;\n\t\t}\n\t\treturn $bytesToString(t);\n\t};\n\tUser = function(username) {\n\t\tvar $ptr, username;\n\t\treturn new Userinfo.ptr(username, \"\", false);\n\t};\n\t$pkg.User = User;\n\tUserPassword = function(username, password) {\n\t\tvar $ptr, password, username;\n\t\treturn new Userinfo.ptr(username, password, true);\n\t};\n\t$pkg.UserPassword = UserPassword;\n\tUserinfo.ptr.prototype.Username = function() {\n\t\tvar $ptr, u;\n\t\tu = this;\n\t\treturn u.username;\n\t};\n\tUserinfo.prototype.Username = function() { return this.$val.Username(); };\n\tUserinfo.ptr.prototype.Password = function() {\n\t\tvar $ptr, u;\n\t\tu = this;\n\t\tif (u.passwordSet) {\n\t\t\treturn [u.password, true];\n\t\t}\n\t\treturn [\"\", false];\n\t};\n\tUserinfo.prototype.Password = function() { return this.$val.Password(); };\n\tUserinfo.ptr.prototype.String = function() {\n\t\tvar $ptr, s, u;\n\t\tu = this;\n\t\ts = escape(u.username, 2);\n\t\tif (u.passwordSet) {\n\t\t\ts = s + (\":\" + escape(u.password, 2));\n\t\t}\n\t\treturn s;\n\t};\n\tUserinfo.prototype.String = function() { return this.$val.String(); };\n\tgetscheme = function(rawurl) {\n\t\tvar $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, err, i, path, rawurl, scheme;\n\t\tscheme = \"\";\n\t\tpath = \"\";\n\t\terr = $ifaceNil;\n\t\ti = 0;\n\t\twhile (true) {\n\t\t\tif (!(i < rawurl.length)) { break; }\n\t\t\tc = rawurl.charCodeAt(i);\n\t\t\tif (97 <= c && c <= 122 || 65 <= c && c <= 90) {\n\t\t\t} else if (48 <= c && c <= 57 || (c === 43) || (c === 45) || (c === 46)) {\n\t\t\t\tif (i === 0) {\n\t\t\t\t\t_tmp = \"\"; _tmp$1 = rawurl; _tmp$2 = $ifaceNil; scheme = _tmp; path = _tmp$1; err = _tmp$2;\n\t\t\t\t\treturn [scheme, path, err];\n\t\t\t\t}\n\t\t\t} else if (c === 58) {\n\t\t\t\tif (i === 0) {\n\t\t\t\t\t_tmp$3 = \"\"; _tmp$4 = \"\"; _tmp$5 = errors.New(\"missing protocol scheme\"); scheme = _tmp$3; path = _tmp$4; err = _tmp$5;\n\t\t\t\t\treturn [scheme, path, err];\n\t\t\t\t}\n\t\t\t\t_tmp$6 = rawurl.substring(0, i); _tmp$7 = rawurl.substring((i + 1 >> 0)); _tmp$8 = $ifaceNil; scheme = _tmp$6; path = _tmp$7; err = _tmp$8;\n\t\t\t\treturn [scheme, path, err];\n\t\t\t} else {\n\t\t\t\t_tmp$9 = \"\"; _tmp$10 = rawurl; _tmp$11 = $ifaceNil; scheme = _tmp$9; path = _tmp$10; err = _tmp$11;\n\t\t\t\treturn [scheme, path, err];\n\t\t\t}\n\t\t\ti = i + (1) >> 0;\n\t\t}\n\t\t_tmp$12 = \"\"; _tmp$13 = rawurl; _tmp$14 = $ifaceNil; scheme = _tmp$12; path = _tmp$13; err = _tmp$14;\n\t\treturn [scheme, path, err];\n\t};\n\tsplit = function(s, c, cutc) {\n\t\tvar $ptr, c, cutc, i, s;\n\t\ti = strings.Index(s, c);\n\t\tif (i < 0) {\n\t\t\treturn [s, \"\"];\n\t\t}\n\t\tif (cutc) {\n\t\t\treturn [s.substring(0, i), s.substring((i + c.length >> 0))];\n\t\t}\n\t\treturn [s.substring(0, i), s.substring(i)];\n\t};\n\tParse = function(rawurl) {\n\t\tvar $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, err, frag, rawurl, u, url, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; frag = $f.frag; rawurl = $f.rawurl; u = $f.u; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\turl = ptrType.nil;\n\t\terr = $ifaceNil;\n\t\t_tuple = split(rawurl, \"#\", true); u = _tuple[0]; frag = _tuple[1];\n\t\t_r = parse(u, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r; url = _tuple$1[0]; err = _tuple$1[1];\n\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }\n\t\t/* */ $s = 3; continue;\n\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:\n\t\t\t_tmp = ptrType.nil; _tmp$1 = err; url = _tmp; err = _tmp$1;\n\t\t\treturn [url, err];\n\t\t/* } */ case 3:\n\t\tif (frag === \"\") {\n\t\t\t_tmp$2 = url; _tmp$3 = $ifaceNil; url = _tmp$2; err = _tmp$3;\n\t\t\treturn [url, err];\n\t\t}\n\t\t_tuple$2 = unescape(frag, 4); url.Fragment = _tuple$2[0]; err = _tuple$2[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t_tmp$4 = ptrType.nil; _tmp$5 = new Error.ptr(\"parse\", rawurl, err); url = _tmp$4; err = _tmp$5;\n\t\t\treturn [url, err];\n\t\t}\n\t\t_tmp$6 = url; _tmp$7 = $ifaceNil; url = _tmp$6; err = _tmp$7;\n\t\treturn [url, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.frag = frag; $f.rawurl = rawurl; $f.u = u; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Parse = Parse;\n\tparse = function(rawurl, viaRequest) {\n\t\tvar $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, authority, err, rawurl, rest, url, viaRequest, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; authority = $f.authority; err = $f.err; rawurl = $f.rawurl; rest = $f.rest; url = $f.url; viaRequest = $f.viaRequest; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\turl = ptrType.nil;\n\t\terr = $ifaceNil;\n\t\trest = \"\";\n\t\t/* */ if (rawurl === \"\" && viaRequest) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (rawurl === \"\" && viaRequest) { */ case 1:\n\t\t\terr = errors.New(\"empty url\");\n\t\t\t/* goto Error */ $s = 3; continue;\n\t\t/* } */ case 2:\n\t\turl = new URL.ptr();\n\t\tif (rawurl === \"*\") {\n\t\t\turl.Path = \"*\";\n\t\t\treturn [url, err];\n\t\t}\n\t\t_tuple = getscheme(rawurl); url.Scheme = _tuple[0]; rest = _tuple[1]; err = _tuple[2];\n\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }\n\t\t/* */ $s = 5; continue;\n\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:\n\t\t\t/* goto Error */ $s = 3; continue;\n\t\t/* } */ case 5:\n\t\t_r = strings.ToLower(url.Scheme); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\turl.Scheme = _r;\n\t\t_tuple$1 = split(rest, \"?\", true); rest = _tuple$1[0]; url.RawQuery = _tuple$1[1];\n\t\t/* */ if (!strings.HasPrefix(rest, \"/\")) { $s = 7; continue; }\n\t\t/* */ $s = 8; continue;\n\t\t/* if (!strings.HasPrefix(rest, \"/\")) { */ case 7:\n\t\t\tif (!(url.Scheme === \"\")) {\n\t\t\t\turl.Opaque = rest;\n\t\t\t\t_tmp = url; _tmp$1 = $ifaceNil; url = _tmp; err = _tmp$1;\n\t\t\t\treturn [url, err];\n\t\t\t}\n\t\t\t/* */ if (viaRequest) { $s = 9; continue; }\n\t\t\t/* */ $s = 10; continue;\n\t\t\t/* if (viaRequest) { */ case 9:\n\t\t\t\terr = errors.New(\"invalid URI for request\");\n\t\t\t\t/* goto Error */ $s = 3; continue;\n\t\t\t/* } */ case 10:\n\t\t/* } */ case 8:\n\t\t/* */ if ((!(url.Scheme === \"\") || !viaRequest && !strings.HasPrefix(rest, \"///\")) && strings.HasPrefix(rest, \"//\")) { $s = 11; continue; }\n\t\t/* */ $s = 12; continue;\n\t\t/* if ((!(url.Scheme === \"\") || !viaRequest && !strings.HasPrefix(rest, \"///\")) && strings.HasPrefix(rest, \"//\")) { */ case 11:\n\t\t\tauthority = \"\";\n\t\t\t_tuple$2 = split(rest.substring(2), \"/\", false); authority = _tuple$2[0]; rest = _tuple$2[1];\n\t\t\t_tuple$3 = parseAuthority(authority); url.User = _tuple$3[0]; url.Host = _tuple$3[1]; err = _tuple$3[2];\n\t\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 13; continue; }\n\t\t\t/* */ $s = 14; continue;\n\t\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 13:\n\t\t\t\t/* goto Error */ $s = 3; continue;\n\t\t\t/* } */ case 14:\n\t\t\t/* */ if (strings.Contains(url.Host, \"%\")) { $s = 15; continue; }\n\t\t\t/* */ $s = 16; continue;\n\t\t\t/* if (strings.Contains(url.Host, \"%\")) { */ case 15:\n\t\t\t\terr = errors.New(\"hexadecimal escape in host\");\n\t\t\t\t/* goto Error */ $s = 3; continue;\n\t\t\t/* } */ case 16:\n\t\t/* } */ case 12:\n\t\t_tuple$4 = unescape(rest, 1); url.Path = _tuple$4[0]; err = _tuple$4[1];\n\t\t/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 17; continue; }\n\t\t/* */ $s = 18; continue;\n\t\t/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 17:\n\t\t\t/* goto Error */ $s = 3; continue;\n\t\t/* } */ case 18:\n\t\t_tmp$2 = url; _tmp$3 = $ifaceNil; url = _tmp$2; err = _tmp$3;\n\t\treturn [url, err];\n\t\t/* Error: */ case 3:\n\t\t_tmp$4 = ptrType.nil; _tmp$5 = new Error.ptr(\"parse\", rawurl, err); url = _tmp$4; err = _tmp$5;\n\t\treturn [url, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parse }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.authority = authority; $f.err = err; $f.rawurl = rawurl; $f.rest = rest; $f.url = url; $f.viaRequest = viaRequest; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tparseAuthority = function(authority) {\n\t\tvar $ptr, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, authority, err, host, i, password, user, userinfo, username;\n\t\tuser = ptrType$1.nil;\n\t\thost = \"\";\n\t\terr = $ifaceNil;\n\t\ti = strings.LastIndex(authority, \"@\");\n\t\tif (i < 0) {\n\t\t\thost = authority;\n\t\t\treturn [user, host, err];\n\t\t}\n\t\t_tmp = authority.substring(0, i); _tmp$1 = authority.substring((i + 1 >> 0)); userinfo = _tmp; host = _tmp$1;\n\t\tif (strings.Index(userinfo, \":\") < 0) {\n\t\t\t_tuple = unescape(userinfo, 2); userinfo = _tuple[0]; err = _tuple[1];\n\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\treturn [user, host, err];\n\t\t\t}\n\t\t\tuser = User(userinfo);\n\t\t} else {\n\t\t\t_tuple$1 = split(userinfo, \":\", true); username = _tuple$1[0]; password = _tuple$1[1];\n\t\t\t_tuple$2 = unescape(username, 2); username = _tuple$2[0]; err = _tuple$2[1];\n\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\treturn [user, host, err];\n\t\t\t}\n\t\t\t_tuple$3 = unescape(password, 2); password = _tuple$3[0]; err = _tuple$3[1];\n\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\treturn [user, host, err];\n\t\t\t}\n\t\t\tuser = UserPassword(username, password);\n\t\t}\n\t\treturn [user, host, err];\n\t};\n\tURL.ptr.prototype.String = function() {\n\t\tvar $ptr, buf, h, u, ui;\n\t\tu = this;\n\t\tbuf = $clone(new bytes.Buffer.ptr(), bytes.Buffer);\n\t\tif (!(u.Scheme === \"\")) {\n\t\t\tbuf.WriteString(u.Scheme);\n\t\t\tbuf.WriteByte(58);\n\t\t}\n\t\tif (!(u.Opaque === \"\")) {\n\t\t\tbuf.WriteString(u.Opaque);\n\t\t} else {\n\t\t\tif (!(u.Scheme === \"\") || !(u.Host === \"\") || !(u.User === ptrType$1.nil)) {\n\t\t\t\tbuf.WriteString(\"//\");\n\t\t\t\tui = u.User;\n\t\t\t\tif (!(ui === ptrType$1.nil)) {\n\t\t\t\t\tbuf.WriteString(ui.String());\n\t\t\t\t\tbuf.WriteByte(64);\n\t\t\t\t}\n\t\t\t\th = u.Host;\n\t\t\t\tif (!(h === \"\")) {\n\t\t\t\t\tbuf.WriteString(h);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!(u.Path === \"\") && !((u.Path.charCodeAt(0) === 47)) && !(u.Host === \"\")) {\n\t\t\t\tbuf.WriteByte(47);\n\t\t\t}\n\t\t\tbuf.WriteString(escape(u.Path, 1));\n\t\t}\n\t\tif (!(u.RawQuery === \"\")) {\n\t\t\tbuf.WriteByte(63);\n\t\t\tbuf.WriteString(u.RawQuery);\n\t\t}\n\t\tif (!(u.Fragment === \"\")) {\n\t\t\tbuf.WriteByte(35);\n\t\t\tbuf.WriteString(escape(u.Fragment, 4));\n\t\t}\n\t\treturn buf.String();\n\t};\n\tURL.prototype.String = function() { return this.$val.String(); };\n\tValues.prototype.Get = function(key) {\n\t\tvar $ptr, _entry, _tuple, key, ok, v, vs;\n\t\tv = this.$val;\n\t\tif (v === false) {\n\t\t\treturn \"\";\n\t\t}\n\t\t_tuple = (_entry = v[key], _entry !== undefined ? [_entry.v, true] : [sliceType$1.nil, false]); vs = _tuple[0]; ok = _tuple[1];\n\t\tif (!ok || (vs.$length === 0)) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn (0 >= vs.$length ? $throwRuntimeError(\"index out of range\") : vs.$array[vs.$offset + 0]);\n\t};\n\t$ptrType(Values).prototype.Get = function(key) { return new Values(this.$get()).Get(key); };\n\tValues.prototype.Set = function(key, value) {\n\t\tvar $ptr, _key, key, v, value;\n\t\tv = this.$val;\n\t\t_key = key; (v || $throwRuntimeError(\"assignment to entry in nil map\"))[_key] = { k: _key, v: new sliceType$1([value]) };\n\t};\n\t$ptrType(Values).prototype.Set = function(key, value) { return new Values(this.$get()).Set(key, value); };\n\tValues.prototype.Add = function(key, value) {\n\t\tvar $ptr, _entry, _key, key, v, value;\n\t\tv = this.$val;\n\t\t_key = key; (v || $throwRuntimeError(\"assignment to entry in nil map\"))[_key] = { k: _key, v: $append((_entry = v[key], _entry !== undefined ? _entry.v : sliceType$1.nil), value) };\n\t};\n\t$ptrType(Values).prototype.Add = function(key, value) { return new Values(this.$get()).Add(key, value); };\n\tValues.prototype.Del = function(key) {\n\t\tvar $ptr, key, v;\n\t\tv = this.$val;\n\t\tdelete v[key];\n\t};\n\t$ptrType(Values).prototype.Del = function(key) { return new Values(this.$get()).Del(key); };\n\tParseQuery = function(query) {\n\t\tvar $ptr, err, m, query;\n\t\tm = false;\n\t\terr = $ifaceNil;\n\t\tm = new $Map();\n\t\terr = parseQuery(m, query);\n\t\treturn [m, err];\n\t};\n\t$pkg.ParseQuery = ParseQuery;\n\tparseQuery = function(m, query) {\n\t\tvar $ptr, _entry, _key, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, err, err1, i, i$1, key, m, query, value;\n\t\terr = $ifaceNil;\n\t\twhile (true) {\n\t\t\tif (!(!(query === \"\"))) { break; }\n\t\t\tkey = query;\n\t\t\ti = strings.IndexAny(key, \"&;\");\n\t\t\tif (i >= 0) {\n\t\t\t\t_tmp = key.substring(0, i); _tmp$1 = key.substring((i + 1 >> 0)); key = _tmp; query = _tmp$1;\n\t\t\t} else {\n\t\t\t\tquery = \"\";\n\t\t\t}\n\t\t\tif (key === \"\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvalue = \"\";\n\t\t\ti$1 = strings.Index(key, \"=\");\n\t\t\tif (i$1 >= 0) {\n\t\t\t\t_tmp$2 = key.substring(0, i$1); _tmp$3 = key.substring((i$1 + 1 >> 0)); key = _tmp$2; value = _tmp$3;\n\t\t\t}\n\t\t\t_tuple = QueryUnescape(key); key = _tuple[0]; err1 = _tuple[1];\n\t\t\tif (!($interfaceIsEqual(err1, $ifaceNil))) {\n\t\t\t\tif ($interfaceIsEqual(err, $ifaceNil)) {\n\t\t\t\t\terr = err1;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t_tuple$1 = QueryUnescape(value); value = _tuple$1[0]; err1 = _tuple$1[1];\n\t\t\tif (!($interfaceIsEqual(err1, $ifaceNil))) {\n\t\t\t\tif ($interfaceIsEqual(err, $ifaceNil)) {\n\t\t\t\t\terr = err1;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t_key = key; (m || $throwRuntimeError(\"assignment to entry in nil map\"))[_key] = { k: _key, v: $append((_entry = m[key], _entry !== undefined ? _entry.v : sliceType$1.nil), value) };\n\t\t}\n\t\terr = err;\n\t\treturn err;\n\t};\n\tValues.prototype.Encode = function() {\n\t\tvar $ptr, _entry, _entry$1, _i, _i$1, _i$2, _keys, _ref, _ref$1, _ref$2, buf, k, k$1, keys, prefix, v, v$1, vs, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _keys = $f._keys; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; buf = $f.buf; k = $f.k; k$1 = $f.k$1; keys = $f.keys; prefix = $f.prefix; v = $f.v; v$1 = $f.v$1; vs = $f.vs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tv = this.$val;\n\t\tif (v === false) {\n\t\t\treturn \"\";\n\t\t}\n\t\tbuf = $clone(new bytes.Buffer.ptr(), bytes.Buffer);\n\t\tkeys = $makeSlice(sliceType$1, 0, $keys(v).length);\n\t\t_ref = v;\n\t\t_i = 0;\n\t\t_keys = $keys(_ref);\n\t\twhile (true) {\n\t\t\tif (!(_i < _keys.length)) { break; }\n\t\t\t_entry = _ref[_keys[_i]];\n\t\t\tif (_entry === undefined) {\n\t\t\t\t_i++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tk = _entry.k;\n\t\t\tkeys = $append(keys, k);\n\t\t\t_i++;\n\t\t}\n\t\t$r = sort.Strings(keys); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t_ref$1 = keys;\n\t\t_i$1 = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i$1 < _ref$1.$length)) { break; }\n\t\t\tk$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError(\"index out of range\") : _ref$1.$array[_ref$1.$offset + _i$1]);\n\t\t\tvs = (_entry$1 = v[k$1], _entry$1 !== undefined ? _entry$1.v : sliceType$1.nil);\n\t\t\tprefix = QueryEscape(k$1) + \"=\";\n\t\t\t_ref$2 = vs;\n\t\t\t_i$2 = 0;\n\t\t\twhile (true) {\n\t\t\t\tif (!(_i$2 < _ref$2.$length)) { break; }\n\t\t\t\tv$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError(\"index out of range\") : _ref$2.$array[_ref$2.$offset + _i$2]);\n\t\t\t\tif (buf.Len() > 0) {\n\t\t\t\t\tbuf.WriteByte(38);\n\t\t\t\t}\n\t\t\t\tbuf.WriteString(prefix);\n\t\t\t\tbuf.WriteString(QueryEscape(v$1));\n\t\t\t\t_i$2++;\n\t\t\t}\n\t\t\t_i$1++;\n\t\t}\n\t\treturn buf.String();\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Values.prototype.Encode }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._keys = _keys; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.buf = buf; $f.k = k; $f.k$1 = k$1; $f.keys = keys; $f.prefix = prefix; $f.v = v; $f.v$1 = v$1; $f.vs = vs; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$ptrType(Values).prototype.Encode = function() { return new Values(this.$get()).Encode(); };\n\tresolvePath = function(base, ref) {\n\t\tvar $ptr, _i, _r, _ref, _ref$1, base, dst, elem, full, i, last, ref, src, x, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; base = $f.base; dst = $f.dst; elem = $f.elem; full = $f.full; i = $f.i; last = $f.last; ref = $f.ref; src = $f.src; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tfull = \"\";\n\t\tif (ref === \"\") {\n\t\t\tfull = base;\n\t\t} else if (!((ref.charCodeAt(0) === 47))) {\n\t\t\ti = strings.LastIndex(base, \"/\");\n\t\t\tfull = base.substring(0, (i + 1 >> 0)) + ref;\n\t\t} else {\n\t\t\tfull = ref;\n\t\t}\n\t\tif (full === \"\") {\n\t\t\treturn \"\";\n\t\t}\n\t\tdst = sliceType$1.nil;\n\t\tsrc = strings.Split(full, \"/\");\n\t\t_ref = src;\n\t\t_i = 0;\n\t\twhile (true) {\n\t\t\tif (!(_i < _ref.$length)) { break; }\n\t\t\telem = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError(\"index out of range\") : _ref.$array[_ref.$offset + _i]);\n\t\t\t_ref$1 = elem;\n\t\t\tif (_ref$1 === \".\") {\n\t\t\t} else if (_ref$1 === \"..\") {\n\t\t\t\tif (dst.$length > 0) {\n\t\t\t\t\tdst = $subslice(dst, 0, (dst.$length - 1 >> 0));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdst = $append(dst, elem);\n\t\t\t}\n\t\t\t_i++;\n\t\t}\n\t\tlast = (x = src.$length - 1 >> 0, ((x < 0 || x >= src.$length) ? $throwRuntimeError(\"index out of range\") : src.$array[src.$offset + x]));\n\t\tif (last === \".\" || last === \"..\") {\n\t\t\tdst = $append(dst, \"\");\n\t\t}\n\t\t_r = strings.TrimLeft(strings.Join(dst, \"/\"), \"/\"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn \"/\" + _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: resolvePath }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.base = base; $f.dst = dst; $f.elem = elem; $f.full = full; $f.i = i; $f.last = last; $f.ref = ref; $f.src = src; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tURL.ptr.prototype.IsAbs = function() {\n\t\tvar $ptr, u;\n\t\tu = this;\n\t\treturn !(u.Scheme === \"\");\n\t};\n\tURL.prototype.IsAbs = function() { return this.$val.IsAbs(); };\n\tURL.ptr.prototype.Parse = function(ref) {\n\t\tvar $ptr, _r, _r$1, _tuple, err, ref, refurl, u, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; ref = $f.ref; refurl = $f.refurl; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tu = this;\n\t\t_r = Parse(ref); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; refurl = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn [ptrType.nil, err];\n\t\t}\n\t\t_r$1 = u.ResolveReference(refurl); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn [_r$1, $ifaceNil];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: URL.ptr.prototype.Parse }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.ref = ref; $f.refurl = refurl; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tURL.prototype.Parse = function(ref) { return this.$val.Parse(ref); };\n\tURL.ptr.prototype.ResolveReference = function(ref) {\n\t\tvar $ptr, _r, _r$1, ref, u, url, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; ref = $f.ref; u = $f.u; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\turl = [url];\n\t\tu = this;\n\t\turl[0] = $clone(ref, URL);\n\t\tif (ref.Scheme === \"\") {\n\t\t\turl[0].Scheme = u.Scheme;\n\t\t}\n\t\t/* */ if (!(ref.Scheme === \"\") || !(ref.Host === \"\") || !(ref.User === ptrType$1.nil)) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (!(ref.Scheme === \"\") || !(ref.Host === \"\") || !(ref.User === ptrType$1.nil)) { */ case 1:\n\t\t\t_r = resolvePath(ref.Path, \"\"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\turl[0].Path = _r;\n\t\t\treturn url[0];\n\t\t/* } */ case 2:\n\t\tif (!(ref.Opaque === \"\")) {\n\t\t\turl[0].User = ptrType$1.nil;\n\t\t\turl[0].Host = \"\";\n\t\t\turl[0].Path = \"\";\n\t\t\treturn url[0];\n\t\t}\n\t\tif (ref.Path === \"\") {\n\t\t\tif (ref.RawQuery === \"\") {\n\t\t\t\turl[0].RawQuery = u.RawQuery;\n\t\t\t\tif (ref.Fragment === \"\") {\n\t\t\t\t\turl[0].Fragment = u.Fragment;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\turl[0].Host = u.Host;\n\t\turl[0].User = u.User;\n\t\t_r$1 = resolvePath(u.Path, ref.Path); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\turl[0].Path = _r$1;\n\t\treturn url[0];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: URL.ptr.prototype.ResolveReference }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.ref = ref; $f.u = u; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tURL.prototype.ResolveReference = function(ref) { return this.$val.ResolveReference(ref); };\n\tURL.ptr.prototype.Query = function() {\n\t\tvar $ptr, _tuple, u, v;\n\t\tu = this;\n\t\t_tuple = ParseQuery(u.RawQuery); v = _tuple[0];\n\t\treturn v;\n\t};\n\tURL.prototype.Query = function() { return this.$val.Query(); };\n\tURL.ptr.prototype.RequestURI = function() {\n\t\tvar $ptr, result, u;\n\t\tu = this;\n\t\tresult = u.Opaque;\n\t\tif (result === \"\") {\n\t\t\tresult = escape(u.Path, 1);\n\t\t\tif (result === \"\") {\n\t\t\t\tresult = \"/\";\n\t\t\t}\n\t\t} else {\n\t\t\tif (strings.HasPrefix(result, \"//\")) {\n\t\t\t\tresult = u.Scheme + \":\" + result;\n\t\t\t}\n\t\t}\n\t\tif (!(u.RawQuery === \"\")) {\n\t\t\tresult = result + (\"?\" + u.RawQuery);\n\t\t}\n\t\treturn result;\n\t};\n\tURL.prototype.RequestURI = function() { return this.$val.RequestURI(); };\n\tptrType$2.methods = [{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tEscapeError.methods = [{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType.methods = [{prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"IsAbs\", name: \"IsAbs\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Parse\", name: \"Parse\", pkg: \"\", typ: $funcType([$String], [ptrType, $error], false)}, {prop: \"ResolveReference\", name: \"ResolveReference\", pkg: \"\", typ: $funcType([ptrType], [ptrType], false)}, {prop: \"Query\", name: \"Query\", pkg: \"\", typ: $funcType([], [Values], false)}, {prop: \"RequestURI\", name: \"RequestURI\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$1.methods = [{prop: \"Username\", name: \"Username\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Password\", name: \"Password\", pkg: \"\", typ: $funcType([], [$String, $Bool], false)}, {prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tValues.methods = [{prop: \"Get\", name: \"Get\", pkg: \"\", typ: $funcType([$String], [$String], false)}, {prop: \"Set\", name: \"Set\", pkg: \"\", typ: $funcType([$String, $String], [], false)}, {prop: \"Add\", name: \"Add\", pkg: \"\", typ: $funcType([$String, $String], [], false)}, {prop: \"Del\", name: \"Del\", pkg: \"\", typ: $funcType([$String], [], false)}, {prop: \"Encode\", name: \"Encode\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tError.init([{prop: \"Op\", name: \"Op\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"URL\", name: \"URL\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Err\", name: \"Err\", pkg: \"\", typ: $error, tag: \"\"}]);\n\tURL.init([{prop: \"Scheme\", name: \"Scheme\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Opaque\", name: \"Opaque\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"User\", name: \"User\", pkg: \"\", typ: ptrType$1, tag: \"\"}, {prop: \"Host\", name: \"Host\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Path\", name: \"Path\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"RawQuery\", name: \"RawQuery\", pkg: \"\", typ: $String, tag: \"\"}, {prop: \"Fragment\", name: \"Fragment\", pkg: \"\", typ: $String, tag: \"\"}]);\n\tUserinfo.init([{prop: \"username\", name: \"username\", pkg: \"net/url\", typ: $String, tag: \"\"}, {prop: \"password\", name: \"password\", pkg: \"net/url\", typ: $String, tag: \"\"}, {prop: \"passwordSet\", name: \"passwordSet\", pkg: \"net/url\", typ: $Bool, tag: \"\"}]);\n\tValues.init($String, sliceType$1);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = sort.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = strconv.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"github.com/gopherjs/websocket\"] = (function() {\n\tvar $pkg = {}, $init, bytes, fmt, js, dom, util, io, net, url, time, addr, closeError, deadlineErr, Conn, ReadyState, WebSocket, sliceType, ptrType, ptrType$1, ptrType$2, ptrType$3, chanType, ptrType$4, chanType$1, chanType$2, sliceType$1, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, errDeadlineReached, beginHandlerOpen, beginHandlerClose, Dial, getFrameData, New;\n\tbytes = $packages[\"bytes\"];\n\tfmt = $packages[\"fmt\"];\n\tjs = $packages[\"github.com/gopherjs/gopherjs/js\"];\n\tdom = $packages[\"honnef.co/go/js/dom\"];\n\tutil = $packages[\"honnef.co/go/js/util\"];\n\tio = $packages[\"io\"];\n\tnet = $packages[\"net\"];\n\turl = $packages[\"net/url\"];\n\ttime = $packages[\"time\"];\n\taddr = $pkg.addr = $newType(0, $kindStruct, \"websocket.addr\", \"addr\", \"github.com/gopherjs/websocket\", function(URL_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.URL = ptrType$6.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.URL = URL_;\n\t});\n\tcloseError = $pkg.closeError = $newType(0, $kindStruct, \"websocket.closeError\", \"closeError\", \"github.com/gopherjs/websocket\", function(CloseEvent_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.CloseEvent = ptrType.nil;\n\t\t\treturn;\n\t\t}\n\t\tthis.CloseEvent = CloseEvent_;\n\t});\n\tdeadlineErr = $pkg.deadlineErr = $newType(0, $kindStruct, \"websocket.deadlineErr\", \"deadlineErr\", \"github.com/gopherjs/websocket\", function() {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\treturn;\n\t\t}\n\t});\n\tConn = $pkg.Conn = $newType(0, $kindStruct, \"websocket.Conn\", \"Conn\", \"github.com/gopherjs/websocket\", function(WebSocket_, ch_, readBuf_, readDeadline_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.WebSocket = ptrType$2.nil;\n\t\t\tthis.ch = chanType.nil;\n\t\t\tthis.readBuf = ptrType$4.nil;\n\t\t\tthis.readDeadline = new time.Time.ptr();\n\t\t\treturn;\n\t\t}\n\t\tthis.WebSocket = WebSocket_;\n\t\tthis.ch = ch_;\n\t\tthis.readBuf = readBuf_;\n\t\tthis.readDeadline = readDeadline_;\n\t});\n\tReadyState = $pkg.ReadyState = $newType(2, $kindUint16, \"websocket.ReadyState\", \"ReadyState\", \"github.com/gopherjs/websocket\", null);\n\tWebSocket = $pkg.WebSocket = $newType(0, $kindStruct, \"websocket.WebSocket\", \"WebSocket\", \"github.com/gopherjs/websocket\", function(Object_, EventTarget_, URL_, ReadyState_, BufferedAmount_, Extensions_, Protocol_, BinaryType_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Object = null;\n\t\t\tthis.EventTarget = new util.EventTarget.ptr();\n\t\t\tthis.URL = \"\";\n\t\t\tthis.ReadyState = 0;\n\t\t\tthis.BufferedAmount = 0;\n\t\t\tthis.Extensions = \"\";\n\t\t\tthis.Protocol = \"\";\n\t\t\tthis.BinaryType = \"\";\n\t\t\treturn;\n\t\t}\n\t\tthis.Object = Object_;\n\t\tthis.EventTarget = EventTarget_;\n\t\tthis.URL = URL_;\n\t\tthis.ReadyState = ReadyState_;\n\t\tthis.BufferedAmount = BufferedAmount_;\n\t\tthis.Extensions = Extensions_;\n\t\tthis.Protocol = Protocol_;\n\t\tthis.BinaryType = BinaryType_;\n\t});\n\tsliceType = $sliceType($emptyInterface);\n\tptrType = $ptrType(dom.CloseEvent);\n\tptrType$1 = $ptrType(Conn);\n\tptrType$2 = $ptrType(WebSocket);\n\tptrType$3 = $ptrType(dom.MessageEvent);\n\tchanType = $chanType(ptrType$3, false, false);\n\tptrType$4 = $ptrType(bytes.Reader);\n\tchanType$1 = $chanType($error, false, false);\n\tchanType$2 = $chanType(time.Time, false, true);\n\tsliceType$1 = $sliceType($Uint8);\n\tptrType$5 = $ptrType(js.Error);\n\tptrType$6 = $ptrType(url.URL);\n\tptrType$7 = $ptrType(addr);\n\tptrType$8 = $ptrType(closeError);\n\tptrType$9 = $ptrType(deadlineErr);\n\tptrType$10 = $ptrType(js.Object);\n\taddr.ptr.prototype.Network = function() {\n\t\tvar $ptr, addr$1;\n\t\taddr$1 = this;\n\t\treturn \"websocket\";\n\t};\n\taddr.prototype.Network = function() { return this.$val.Network(); };\n\tbeginHandlerOpen = function(ch, removeHandlers) {\n\t\tvar $ptr, ch, removeHandlers;\n\t\treturn (function $b(ev) {\n\t\t\tvar $ptr, ev, $s, $r;\n\t\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; ev = $f.ev; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t\t$r = removeHandlers(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$close(ch);\n\t\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.ev = ev; $f.$s = $s; $f.$r = $r; return $f;\n\t\t});\n\t};\n\tcloseError.ptr.prototype.Error = function() {\n\t\tvar $ptr, _r, cleanStmt, e, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; cleanStmt = $f.cleanStmt; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\te = this;\n\t\tcleanStmt = \"\";\n\t\tif (!!(e.CloseEvent.BasicEvent.Object.wasClean)) {\n\t\t\tcleanStmt = \"clean\";\n\t\t} else {\n\t\t\tcleanStmt = \"unclean\";\n\t\t}\n\t\t_r = fmt.Sprintf(\"CloseEvent: (%s) (%d) %s\", new sliceType([new $String(cleanStmt), new $Int(($parseInt(e.CloseEvent.BasicEvent.Object.code) >> 0)), new $String($internalize(e.CloseEvent.BasicEvent.Object.reason, $String))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: closeError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.cleanStmt = cleanStmt; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tcloseError.prototype.Error = function() { return this.$val.Error(); };\n\tbeginHandlerClose = function(ch, removeHandlers) {\n\t\tvar $ptr, ch, removeHandlers;\n\t\treturn (function $b(ev) {\n\t\t\tvar $ptr, ev, $s, $r;\n\t\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; ev = $f.ev; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t\tev = [ev];\n\t\t\t$r = removeHandlers(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t$go((function(ev) { return function $b() {\n\t\t\t\tvar $ptr, ce, $s, $r;\n\t\t\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; ce = $f.ce; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t\t\tce = $assertType(dom.WrapEvent(ev[0]), ptrType);\n\t\t\t\t$r = $send(ch, new closeError.ptr(ce)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t\t$close(ch);\n\t\t\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.ce = ce; $f.$s = $s; $f.$r = $r; return $f;\n\t\t\t}; })(ev), []);\n\t\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.ev = ev; $f.$s = $s; $f.$r = $r; return $f;\n\t\t});\n\t};\n\tdeadlineErr.ptr.prototype.Error = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn \"i/o timeout: deadline reached\";\n\t};\n\tdeadlineErr.prototype.Error = function() { return this.$val.Error(); };\n\tdeadlineErr.ptr.prototype.Timeout = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn true;\n\t};\n\tdeadlineErr.prototype.Timeout = function() { return this.$val.Timeout(); };\n\tdeadlineErr.ptr.prototype.Temporary = function() {\n\t\tvar $ptr, e;\n\t\te = this;\n\t\treturn true;\n\t};\n\tdeadlineErr.prototype.Temporary = function() { return this.$val.Temporary(); };\n\tDial = function(url$1) {\n\t\tvar $ptr, _r, _tuple, _tuple$1, closeHandler, conn, err, ok, openCh, openHandler, removeHandlers, url$1, ws, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; closeHandler = $f.closeHandler; conn = $f.conn; err = $f.err; ok = $f.ok; openCh = $f.openCh; openHandler = $f.openHandler; removeHandlers = $f.removeHandlers; url$1 = $f.url$1; ws = $f.ws; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tcloseHandler = [closeHandler];\n\t\topenHandler = [openHandler];\n\t\tws = [ws];\n\t\t_tuple = New(url$1); ws[0] = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn [ptrType$1.nil, err];\n\t\t}\n\t\tconn = new Conn.ptr(ws[0], new chanType(1), ptrType$4.nil, new time.Time.ptr());\n\t\tconn.initialize();\n\t\topenCh = new chanType$1(1);\n\t\topenHandler[0] = $throwNilPointerError;\n\t\tcloseHandler[0] = $throwNilPointerError;\n\t\tremoveHandlers = (function(closeHandler, openHandler, ws) { return function() {\n\t\t\tvar $ptr;\n\t\t\tws[0].EventTarget.RemoveEventListener(\"open\", false, openHandler[0]);\n\t\t\tws[0].EventTarget.RemoveEventListener(\"close\", false, closeHandler[0]);\n\t\t}; })(closeHandler, openHandler, ws);\n\t\topenHandler[0] = beginHandlerOpen(openCh, removeHandlers);\n\t\tcloseHandler[0] = beginHandlerClose(openCh, removeHandlers);\n\t\tws[0].EventTarget.AddEventListener(\"open\", false, openHandler[0]);\n\t\tws[0].EventTarget.AddEventListener(\"close\", false, closeHandler[0]);\n\t\t_r = $recv(openCh); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r; err = _tuple$1[0]; ok = _tuple$1[1];\n\t\tif (ok && !($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn [ptrType$1.nil, err];\n\t\t}\n\t\treturn [conn, $ifaceNil];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Dial }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.closeHandler = closeHandler; $f.conn = conn; $f.err = err; $f.ok = ok; $f.openCh = openCh; $f.openHandler = openHandler; $f.removeHandlers = removeHandlers; $f.url$1 = url$1; $f.ws = ws; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Dial = Dial;\n\tConn.ptr.prototype.onMessage = function(event) {\n\t\tvar $ptr, c, event;\n\t\tc = this;\n\t\t$go((function $b() {\n\t\t\tvar $ptr, $s, $r;\n\t\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t\t$r = $send(c.ch, $assertType(dom.WrapEvent(event), ptrType$3)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;\n\t\t}), []);\n\t};\n\tConn.prototype.onMessage = function(event) { return this.$val.onMessage(event); };\n\tConn.ptr.prototype.onClose = function(event) {\n\t\tvar $ptr, c, event;\n\t\tc = this;\n\t\t$go((function $b() {\n\t\t\tvar $ptr, $s, $r;\n\t\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t\t$r = $send(c.ch, ptrType$3.nil); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;\n\t\t}), []);\n\t};\n\tConn.prototype.onClose = function(event) { return this.$val.onClose(event); };\n\tConn.ptr.prototype.initialize = function() {\n\t\tvar $ptr, c;\n\t\tc = this;\n\t\tc.WebSocket.Object.binaryType = $externalize(\"arraybuffer\", $String);\n\t\tc.WebSocket.EventTarget.AddEventListener(\"message\", false, $methodVal(c, \"onMessage\"));\n\t\tc.WebSocket.EventTarget.AddEventListener(\"close\", false, $methodVal(c, \"onClose\"));\n\t};\n\tConn.prototype.initialize = function() { return this.$val.initialize(); };\n\tConn.ptr.prototype.handleFrame = function(item, ok) {\n\t\tvar $ptr, c, item, ok;\n\t\tc = this;\n\t\tif (!ok) {\n\t\t\treturn [ptrType$3.nil, io.EOF];\n\t\t} else if (item === ptrType$3.nil) {\n\t\t\t$close(c.ch);\n\t\t\treturn [ptrType$3.nil, io.EOF];\n\t\t}\n\t\treturn [item, $ifaceNil];\n\t};\n\tConn.prototype.handleFrame = function(item, ok) { return this.$val.handleFrame(item, ok); };\n\tConn.ptr.prototype.receiveFrame = function(observeDeadline) {\n\t\tvar $ptr, _r, _selection, _selection$1, _tuple, _tuple$1, c, deadlineChan, item, item$1, now, observeDeadline, ok, ok$1, timer, $s, $deferred, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _selection = $f._selection; _selection$1 = $f._selection$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; deadlineChan = $f.deadlineChan; item = $f.item; item$1 = $f.item$1; now = $f.now; observeDeadline = $f.observeDeadline; ok = $f.ok; ok$1 = $f.ok$1; timer = $f.timer; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\tc = this;\n\t\tdeadlineChan = chanType$2.nil;\n\t\t/* */ if (observeDeadline && !c.readDeadline.IsZero()) { $s = 1; continue; }\n\t\t/* */ $s = 2; continue;\n\t\t/* if (observeDeadline && !c.readDeadline.IsZero()) { */ case 1:\n\t\t\tnow = $clone(time.Now(), time.Time);\n\t\t\tif (now.After(c.readDeadline)) {\n\t\t\t\t_selection = $select([[c.ch], []]);\n\t\t\t\tif (_selection[0] === 0) {\n\t\t\t\t\t_tuple = _selection[1]; item = _tuple[0]; ok = _tuple[1];\n\t\t\t\t\treturn c.handleFrame(item, ok);\n\t\t\t\t} else if (_selection[0] === 1) {\n\t\t\t\t\treturn [ptrType$3.nil, errDeadlineReached];\n\t\t\t\t}\n\t\t\t}\n\t\t\ttimer = time.NewTimer(c.readDeadline.Sub(now));\n\t\t\t$deferred.push([$methodVal(timer, \"Stop\"), []]);\n\t\t\tdeadlineChan = timer.C;\n\t\t/* } */ case 2:\n\t\t_r = $select([[c.ch], [deadlineChan]]); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_selection$1 = _r;\n\t\tif (_selection$1[0] === 0) {\n\t\t\t_tuple$1 = _selection$1[1]; item$1 = _tuple$1[0]; ok$1 = _tuple$1[1];\n\t\t\treturn c.handleFrame(item$1, ok$1);\n\t\t} else if (_selection$1[0] === 1) {\n\t\t\treturn [ptrType$3.nil, errDeadlineReached];\n\t\t}\n\t\t/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; return [ptrType$3.nil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.receiveFrame }; } $f.$ptr = $ptr; $f._r = _r; $f._selection = _selection; $f._selection$1 = _selection$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.deadlineChan = deadlineChan; $f.item = item; $f.item$1 = item$1; $f.now = now; $f.observeDeadline = observeDeadline; $f.ok = ok; $f.ok$1 = ok$1; $f.timer = timer; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }\n\t};\n\tConn.prototype.receiveFrame = function(observeDeadline) { return this.$val.receiveFrame(observeDeadline); };\n\tgetFrameData = function(obj) {\n\t\tvar $ptr, constructor, int8Array, obj;\n\t\tconstructor = obj.constructor;\n\t\tif (constructor === $global.ArrayBuffer) {\n\t\t\tint8Array = new ($global.Uint8Array)(obj);\n\t\t\treturn $assertType($internalize(int8Array, $emptyInterface), sliceType$1);\n\t\t}\n\t\treturn new sliceType$1($stringToBytes($internalize(obj, $String)));\n\t};\n\tConn.ptr.prototype.Read = function(b) {\n\t\tvar $ptr, _r, _tmp, _tmp$1, _tuple, _tuple$1, b, c, err, frame, n, receivedBytes, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; c = $f.c; err = $f.err; frame = $f.frame; n = $f.n; receivedBytes = $f.receivedBytes; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tc = this;\n\t\tif (!(c.readBuf === ptrType$4.nil)) {\n\t\t\t_tuple = c.readBuf.Read(b); n = _tuple[0]; err = _tuple[1];\n\t\t\tif ($interfaceIsEqual(err, io.EOF)) {\n\t\t\t\tc.readBuf = ptrType$4.nil;\n\t\t\t\terr = $ifaceNil;\n\t\t\t}\n\t\t\tif (n > 0) {\n\t\t\t\treturn [n, err];\n\t\t\t}\n\t\t}\n\t\t_r = c.receiveFrame(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r; frame = _tuple$1[0]; err = _tuple$1[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t_tmp = 0; _tmp$1 = err; n = _tmp; err = _tmp$1;\n\t\t\treturn [n, err];\n\t\t}\n\t\treceivedBytes = getFrameData(frame.BasicEvent.Object.data);\n\t\tn = $copySlice(b, receivedBytes);\n\t\tif (n >= receivedBytes.$length) {\n\t\t\treturn [n, err];\n\t\t}\n\t\tc.readBuf = bytes.NewReader($subslice(receivedBytes, n));\n\t\treturn [n, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.c = c; $f.err = err; $f.frame = frame; $f.n = n; $f.receivedBytes = receivedBytes; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.Read = function(b) { return this.$val.Read(b); };\n\tConn.ptr.prototype.Write = function(b) {\n\t\tvar $ptr, b, c, err, n;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tc = this;\n\t\terr = c.WebSocket.Send(b);\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn [n, err];\n\t\t}\n\t\tn = b.$length;\n\t\treturn [n, err];\n\t};\n\tConn.prototype.Write = function(b) { return this.$val.Write(b); };\n\tConn.ptr.prototype.WriteString = function(s) {\n\t\tvar $ptr, c, err, n, s;\n\t\tn = 0;\n\t\terr = $ifaceNil;\n\t\tc = this;\n\t\terr = c.WebSocket.Send(new $String(s));\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn [n, err];\n\t\t}\n\t\tn = s.length;\n\t\treturn [n, err];\n\t};\n\tConn.prototype.WriteString = function(s) { return this.$val.WriteString(s); };\n\tConn.ptr.prototype.LocalAddr = function() {\n\t\tvar $ptr, c;\n\t\tc = this;\n\t\t$panic(new $String(\"we are unable to implement websocket.Conn.LocalAddr() due to limitations in the underlying JavaScript API\"));\n\t};\n\tConn.prototype.LocalAddr = function() { return this.$val.LocalAddr(); };\n\tConn.ptr.prototype.RemoteAddr = function() {\n\t\tvar $ptr, _r, _tuple, c, err, wsURL, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; wsURL = $f.wsURL; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tc = this;\n\t\t_r = url.Parse($internalize(c.WebSocket.Object.url, $String)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; wsURL = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t$panic(err);\n\t\t}\n\t\treturn new addr.ptr(wsURL);\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.RemoteAddr }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.wsURL = wsURL; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.RemoteAddr = function() { return this.$val.RemoteAddr(); };\n\tConn.ptr.prototype.SetDeadline = function(t) {\n\t\tvar $ptr, c, t;\n\t\tc = this;\n\t\tt = $clone(t, time.Time);\n\t\t$copy(c.readDeadline, t, time.Time);\n\t\treturn $ifaceNil;\n\t};\n\tConn.prototype.SetDeadline = function(t) { return this.$val.SetDeadline(t); };\n\tConn.ptr.prototype.SetReadDeadline = function(t) {\n\t\tvar $ptr, c, t;\n\t\tc = this;\n\t\tt = $clone(t, time.Time);\n\t\t$copy(c.readDeadline, t, time.Time);\n\t\treturn $ifaceNil;\n\t};\n\tConn.prototype.SetReadDeadline = function(t) { return this.$val.SetReadDeadline(t); };\n\tConn.ptr.prototype.SetWriteDeadline = function(t) {\n\t\tvar $ptr, c, t;\n\t\tc = this;\n\t\tt = $clone(t, time.Time);\n\t\treturn $ifaceNil;\n\t};\n\tConn.prototype.SetWriteDeadline = function(t) { return this.$val.SetWriteDeadline(t); };\n\tReadyState.prototype.String = function() {\n\t\tvar $ptr, _ref, rs;\n\t\trs = this.$val;\n\t\t_ref = rs;\n\t\tif (_ref === 0) {\n\t\t\treturn \"Connecting\";\n\t\t} else if (_ref === 1) {\n\t\t\treturn \"Open\";\n\t\t} else if (_ref === 2) {\n\t\t\treturn \"Closing\";\n\t\t} else if (_ref === 3) {\n\t\t\treturn \"Closed\";\n\t\t} else {\n\t\t\treturn \"Unknown\";\n\t\t}\n\t};\n\t$ptrType(ReadyState).prototype.String = function() { return new ReadyState(this.$get()).String(); };\n\tNew = function(url$1) {\n\t\tvar $ptr, err, object, url$1, ws, $deferred;\n\t\t/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\tws = ptrType$2.nil;\n\t\terr = $ifaceNil;\n\t\t$deferred.push([(function() {\n\t\t\tvar $ptr, _tuple, e, jsErr, ok;\n\t\t\te = $recover();\n\t\t\tif ($interfaceIsEqual(e, $ifaceNil)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t_tuple = $assertType(e, ptrType$5, true); jsErr = _tuple[0]; ok = _tuple[1];\n\t\t\tif (ok && !(jsErr === ptrType$5.nil)) {\n\t\t\t\tws = ptrType$2.nil;\n\t\t\t\terr = jsErr;\n\t\t\t} else {\n\t\t\t\t$panic(e);\n\t\t\t}\n\t\t}), []]);\n\t\tobject = new ($global.WebSocket)($externalize(url$1, $String));\n\t\tws = new WebSocket.ptr(object, new util.EventTarget.ptr(object), \"\", 0, 0, \"\", \"\", \"\");\n\t\treturn [ws, err];\n\t\t/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [ws, err]; } }\n\t};\n\t$pkg.New = New;\n\tWebSocket.ptr.prototype.Send = function(data) {\n\t\tvar $ptr, data, err, ws, $deferred;\n\t\t/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\terr = $ifaceNil;\n\t\tws = this;\n\t\t$deferred.push([(function() {\n\t\t\tvar $ptr, _tuple, e, jsErr, ok;\n\t\t\te = $recover();\n\t\t\tif ($interfaceIsEqual(e, $ifaceNil)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t_tuple = $assertType(e, ptrType$5, true); jsErr = _tuple[0]; ok = _tuple[1];\n\t\t\tif (ok && !(jsErr === ptrType$5.nil)) {\n\t\t\t\terr = jsErr;\n\t\t\t} else {\n\t\t\t\t$panic(e);\n\t\t\t}\n\t\t}), []]);\n\t\tws.Object.send($externalize(data, $emptyInterface));\n\t\treturn err;\n\t\t/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } }\n\t};\n\tWebSocket.prototype.Send = function(data) { return this.$val.Send(data); };\n\tWebSocket.ptr.prototype.Close = function() {\n\t\tvar $ptr, err, ws, $deferred;\n\t\t/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\terr = $ifaceNil;\n\t\tws = this;\n\t\t$deferred.push([(function() {\n\t\t\tvar $ptr, _tuple, e, jsErr, ok;\n\t\t\te = $recover();\n\t\t\tif ($interfaceIsEqual(e, $ifaceNil)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t_tuple = $assertType(e, ptrType$5, true); jsErr = _tuple[0]; ok = _tuple[1];\n\t\t\tif (ok && !(jsErr === ptrType$5.nil)) {\n\t\t\t\terr = jsErr;\n\t\t\t} else {\n\t\t\t\t$panic(e);\n\t\t\t}\n\t\t}), []]);\n\t\tws.Object.close();\n\t\treturn err;\n\t\t/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } }\n\t};\n\tWebSocket.prototype.Close = function() { return this.$val.Close(); };\n\tptrType$7.methods = [{prop: \"Network\", name: \"Network\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$8.methods = [{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$9.methods = [{prop: \"Error\", name: \"Error\", pkg: \"\", typ: $funcType([], [$String], false)}, {prop: \"Timeout\", name: \"Timeout\", pkg: \"\", typ: $funcType([], [$Bool], false)}, {prop: \"Temporary\", name: \"Temporary\", pkg: \"\", typ: $funcType([], [$Bool], false)}];\n\tptrType$1.methods = [{prop: \"onMessage\", name: \"onMessage\", pkg: \"github.com/gopherjs/websocket\", typ: $funcType([ptrType$10], [], false)}, {prop: \"onClose\", name: \"onClose\", pkg: \"github.com/gopherjs/websocket\", typ: $funcType([ptrType$10], [], false)}, {prop: \"initialize\", name: \"initialize\", pkg: \"github.com/gopherjs/websocket\", typ: $funcType([], [], false)}, {prop: \"handleFrame\", name: \"handleFrame\", pkg: \"github.com/gopherjs/websocket\", typ: $funcType([ptrType$3, $Bool], [ptrType$3, $error], false)}, {prop: \"receiveFrame\", name: \"receiveFrame\", pkg: \"github.com/gopherjs/websocket\", typ: $funcType([$Bool], [ptrType$3, $error], false)}, {prop: \"Read\", name: \"Read\", pkg: \"\", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: \"Write\", name: \"Write\", pkg: \"\", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: \"WriteString\", name: \"WriteString\", pkg: \"\", typ: $funcType([$String], [$Int, $error], false)}, {prop: \"LocalAddr\", name: \"LocalAddr\", pkg: \"\", typ: $funcType([], [net.Addr], false)}, {prop: \"RemoteAddr\", name: \"RemoteAddr\", pkg: \"\", typ: $funcType([], [net.Addr], false)}, {prop: \"SetDeadline\", name: \"SetDeadline\", pkg: \"\", typ: $funcType([time.Time], [$error], false)}, {prop: \"SetReadDeadline\", name: \"SetReadDeadline\", pkg: \"\", typ: $funcType([time.Time], [$error], false)}, {prop: \"SetWriteDeadline\", name: \"SetWriteDeadline\", pkg: \"\", typ: $funcType([time.Time], [$error], false)}];\n\tReadyState.methods = [{prop: \"String\", name: \"String\", pkg: \"\", typ: $funcType([], [$String], false)}];\n\tptrType$2.methods = [{prop: \"Send\", name: \"Send\", pkg: \"\", typ: $funcType([$emptyInterface], [$error], false)}, {prop: \"Close\", name: \"Close\", pkg: \"\", typ: $funcType([], [$error], false)}];\n\taddr.init([{prop: \"URL\", name: \"\", pkg: \"\", typ: ptrType$6, tag: \"\"}]);\n\tcloseError.init([{prop: \"CloseEvent\", name: \"\", pkg: \"\", typ: ptrType, tag: \"\"}]);\n\tdeadlineErr.init([]);\n\tConn.init([{prop: \"WebSocket\", name: \"\", pkg: \"\", typ: ptrType$2, tag: \"\"}, {prop: \"ch\", name: \"ch\", pkg: \"github.com/gopherjs/websocket\", typ: chanType, tag: \"\"}, {prop: \"readBuf\", name: \"readBuf\", pkg: \"github.com/gopherjs/websocket\", typ: ptrType$4, tag: \"\"}, {prop: \"readDeadline\", name: \"readDeadline\", pkg: \"github.com/gopherjs/websocket\", typ: time.Time, tag: \"\"}]);\n\tWebSocket.init([{prop: \"Object\", name: \"\", pkg: \"\", typ: ptrType$10, tag: \"\"}, {prop: \"EventTarget\", name: \"\", pkg: \"\", typ: util.EventTarget, tag: \"\"}, {prop: \"URL\", name: \"URL\", pkg: \"\", typ: $String, tag: \"js:\\\"url\\\"\"}, {prop: \"ReadyState\", name: \"ReadyState\", pkg: \"\", typ: ReadyState, tag: \"js:\\\"readyState\\\"\"}, {prop: \"BufferedAmount\", name: \"BufferedAmount\", pkg: \"\", typ: $Uint32, tag: \"js:\\\"bufferedAmount\\\"\"}, {prop: \"Extensions\", name: \"Extensions\", pkg: \"\", typ: $String, tag: \"js:\\\"extensions\\\"\"}, {prop: \"Protocol\", name: \"Protocol\", pkg: \"\", typ: $String, tag: \"js:\\\"protocol\\\"\"}, {prop: \"BinaryType\", name: \"BinaryType\", pkg: \"\", typ: $String, tag: \"js:\\\"binaryType\\\"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = js.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = dom.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = util.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = io.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = net.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = url.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = time.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\terrDeadlineReached = new deadlineErr.ptr();\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"github.com/BenLubar/arm_ok/dfhack\"] = (function() {\n\tvar $pkg = {}, $init, binary, errors, RemoteFortressReader, dfproto, proto, js, websocket, io, sync, Conn, rpcHandshakeHeader, rpcMessageHeader, ptrType, ptrType$1, arrayType, ptrType$2, sliceType, arrayType$1, sliceType$1, arrayType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, sliceType$2, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, ptrType$23, mapType, mapType$1, knownErrors, rpcMagicRequest, rpcMagicResponse, pluginRemoteFortressReader, pluginRemoteFortressReader_ptr, _map, _key, Connect, Dial;\n\tbinary = $packages[\"encoding/binary\"];\n\terrors = $packages[\"errors\"];\n\tRemoteFortressReader = $packages[\"github.com/BenLubar/arm_ok/dfhack/RemoteFortressReader\"];\n\tdfproto = $packages[\"github.com/BenLubar/arm_ok/dfhack/dfproto\"];\n\tproto = $packages[\"github.com/golang/protobuf/proto\"];\n\tjs = $packages[\"github.com/gopherjs/gopherjs/js\"];\n\twebsocket = $packages[\"github.com/gopherjs/websocket\"];\n\tio = $packages[\"io\"];\n\tsync = $packages[\"sync\"];\n\tConn = $pkg.Conn = $newType(0, $kindStruct, \"dfhack.Conn\", \"Conn\", \"github.com/BenLubar/arm_ok/dfhack\", function(sock_, bound_, plugin_, mtx_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.sock = $ifaceNil;\n\t\t\tthis.bound = false;\n\t\t\tthis.plugin = false;\n\t\t\tthis.mtx = new sync.Mutex.ptr();\n\t\t\treturn;\n\t\t}\n\t\tthis.sock = sock_;\n\t\tthis.bound = bound_;\n\t\tthis.plugin = plugin_;\n\t\tthis.mtx = mtx_;\n\t});\n\trpcHandshakeHeader = $pkg.rpcHandshakeHeader = $newType(0, $kindStruct, \"dfhack.rpcHandshakeHeader\", \"rpcHandshakeHeader\", \"github.com/BenLubar/arm_ok/dfhack\", function(Magic_, Version_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.Magic = arrayType.zero();\n\t\t\tthis.Version = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.Magic = Magic_;\n\t\tthis.Version = Version_;\n\t});\n\trpcMessageHeader = $pkg.rpcMessageHeader = $newType(0, $kindStruct, \"dfhack.rpcMessageHeader\", \"rpcMessageHeader\", \"github.com/BenLubar/arm_ok/dfhack\", function(ID_, Pad_, Size_) {\n\t\tthis.$val = this;\n\t\tif (arguments.length === 0) {\n\t\t\tthis.ID = 0;\n\t\t\tthis.Pad = arrayType$1.zero();\n\t\t\tthis.Size = 0;\n\t\t\treturn;\n\t\t}\n\t\tthis.ID = ID_;\n\t\tthis.Pad = Pad_;\n\t\tthis.Size = Size_;\n\t});\n\tptrType = $ptrType($String);\n\tptrType$1 = $ptrType(Conn);\n\tarrayType = $arrayType($Uint8, 8);\n\tptrType$2 = $ptrType(dfproto.CoreTextNotification);\n\tsliceType = $sliceType(ptrType$2);\n\tarrayType$1 = $arrayType($Uint8, 2);\n\tsliceType$1 = $sliceType($Uint8);\n\tarrayType$2 = $arrayType($String, 3);\n\tptrType$3 = $ptrType(dfproto.GetWorldInfoOut);\n\tptrType$4 = $ptrType(dfproto.ListEnumsOut);\n\tptrType$5 = $ptrType(dfproto.ListJobSkillsOut);\n\tptrType$6 = $ptrType(dfproto.ListMaterialsIn);\n\tptrType$7 = $ptrType(dfproto.ListMaterialsOut);\n\tptrType$8 = $ptrType(dfproto.ListUnitsIn);\n\tptrType$9 = $ptrType(dfproto.ListUnitsOut);\n\tptrType$10 = $ptrType(dfproto.ListSquadsIn);\n\tptrType$11 = $ptrType(dfproto.ListSquadsOut);\n\tptrType$12 = $ptrType(dfproto.SetUnitLaborsIn);\n\tptrType$13 = $ptrType(dfproto.CoreBindRequest);\n\tptrType$14 = $ptrType(dfproto.CoreRunCommandRequest);\n\tptrType$15 = $ptrType(dfproto.CoreRunLuaRequest);\n\tsliceType$2 = $sliceType($String);\n\tptrType$16 = $ptrType(RemoteFortressReader.MaterialList);\n\tptrType$17 = $ptrType(RemoteFortressReader.TiletypeList);\n\tptrType$18 = $ptrType(RemoteFortressReader.BlockRequest);\n\tptrType$19 = $ptrType(RemoteFortressReader.BlockList);\n\tptrType$20 = $ptrType(RemoteFortressReader.PlantList);\n\tptrType$21 = $ptrType(RemoteFortressReader.UnitList);\n\tptrType$22 = $ptrType(RemoteFortressReader.ViewInfo);\n\tptrType$23 = $ptrType(RemoteFortressReader.MapInfo);\n\tmapType = $mapType(arrayType$2, $Int16);\n\tmapType$1 = $mapType($String, mapType);\n\tConn.ptr.prototype.GetVersion = function() {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\treq = [req];\n\t\tc = this;\n\t\treq[0] = $clone(new dfproto.EmptyMessage.ptr(), dfproto.EmptyMessage);\n\t\treply[0] = $clone(new dfproto.StringMessage.ptr(), dfproto.StringMessage);\n\t\t_r = c.RoundTripBind(\"GetVersion\", ptrType.nil, \"dfproto.EmptyMessage\", \"dfproto.StringMessage\", req[0], reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [reply[0].GetValue(), text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.GetVersion }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.GetVersion = function() { return this.$val.GetVersion(); };\n\tConn.ptr.prototype.GetDFVersion = function() {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\treq = [req];\n\t\tc = this;\n\t\treq[0] = $clone(new dfproto.EmptyMessage.ptr(), dfproto.EmptyMessage);\n\t\treply[0] = $clone(new dfproto.StringMessage.ptr(), dfproto.StringMessage);\n\t\t_r = c.RoundTripBind(\"GetDFVersion\", ptrType.nil, \"dfproto.EmptyMessage\", \"dfproto.StringMessage\", req[0], reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [reply[0].GetValue(), text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.GetDFVersion }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.GetDFVersion = function() { return this.$val.GetDFVersion(); };\n\tConn.ptr.prototype.GetWorldInfo = function() {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\treq = [req];\n\t\tc = this;\n\t\treq[0] = $clone(new dfproto.EmptyMessage.ptr(), dfproto.EmptyMessage);\n\t\treply[0] = $clone(new dfproto.GetWorldInfoOut.ptr(), dfproto.GetWorldInfoOut);\n\t\t_r = c.RoundTripBind(\"GetWorldInfo\", ptrType.nil, \"dfproto.EmptyMessage\", \"dfproto.GetWorldInfoOut\", req[0], reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [reply[0], text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.GetWorldInfo }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.GetWorldInfo = function() { return this.$val.GetWorldInfo(); };\n\tConn.ptr.prototype.ListEnums = function() {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\treq = [req];\n\t\tc = this;\n\t\treq[0] = $clone(new dfproto.EmptyMessage.ptr(), dfproto.EmptyMessage);\n\t\treply[0] = $clone(new dfproto.ListEnumsOut.ptr(), dfproto.ListEnumsOut);\n\t\t_r = c.RoundTripBind(\"ListEnums\", ptrType.nil, \"dfproto.EmptyMessage\", \"dfproto.ListEnumsOut\", req[0], reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [reply[0], text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.ListEnums }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.ListEnums = function() { return this.$val.ListEnums(); };\n\tConn.ptr.prototype.ListJobSkills = function() {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\treq = [req];\n\t\tc = this;\n\t\treq[0] = $clone(new dfproto.EmptyMessage.ptr(), dfproto.EmptyMessage);\n\t\treply[0] = $clone(new dfproto.ListJobSkillsOut.ptr(), dfproto.ListJobSkillsOut);\n\t\t_r = c.RoundTripBind(\"ListJobSkills\", ptrType.nil, \"dfproto.EmptyMessage\", \"dfproto.ListJobSkillsOut\", req[0], reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [reply[0], text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.ListJobSkills }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.ListJobSkills = function() { return this.$val.ListJobSkills(); };\n\tConn.ptr.prototype.ListMaterials = function(req) {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\tc = this;\n\t\treply[0] = $clone(new dfproto.ListMaterialsOut.ptr(), dfproto.ListMaterialsOut);\n\t\t_r = c.RoundTripBind(\"ListMaterials\", ptrType.nil, \"dfproto.ListMaterialsIn\", \"dfproto.ListMaterialsOut\", req, reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [reply[0], text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.ListMaterials }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.ListMaterials = function(req) { return this.$val.ListMaterials(req); };\n\tConn.ptr.prototype.ListUnits = function(req) {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\tc = this;\n\t\treply[0] = $clone(new dfproto.ListUnitsOut.ptr(), dfproto.ListUnitsOut);\n\t\t_r = c.RoundTripBind(\"ListUnits\", ptrType.nil, \"dfproto.ListUnitsIn\", \"dfproto.ListUnitsOut\", req, reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [reply[0], text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.ListUnits }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.ListUnits = function(req) { return this.$val.ListUnits(req); };\n\tConn.ptr.prototype.ListSquads = function(req) {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\tc = this;\n\t\treply[0] = $clone(new dfproto.ListSquadsOut.ptr(), dfproto.ListSquadsOut);\n\t\t_r = c.RoundTripBind(\"ListSquads\", ptrType.nil, \"dfproto.ListSquadsIn\", \"dfproto.ListSquadsOut\", req, reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [reply[0], text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.ListSquads }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.ListSquads = function(req) { return this.$val.ListSquads(req); };\n\tConn.ptr.prototype.SetUnitLabors = function(req) {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\tc = this;\n\t\treply[0] = $clone(new dfproto.EmptyMessage.ptr(), dfproto.EmptyMessage);\n\t\t_r = c.RoundTripBind(\"SetUnitLabors\", ptrType.nil, \"dfproto.SetUnitLaborsIn\", \"dfproto.EmptyMessage\", req, reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.SetUnitLabors }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.SetUnitLabors = function(req) { return this.$val.SetUnitLabors(req); };\n\tConn.ptr.prototype.init = function() {\n\t\tvar $ptr, _r, _r$1, c, err, response, self, x, x$1, $s, $deferred, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; c = $f.c; err = $f.err; response = $f.response; self = $f.self; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\tc = [c];\n\t\terr = [err];\n\t\tresponse = [response];\n\t\tself = [self];\n\t\tself[0] = ptrType$1.nil;\n\t\terr[0] = $ifaceNil;\n\t\tc[0] = this;\n\t\tself[0] = c[0];\n\t\t$deferred.push([(function(c, err, response, self) { return function $b() {\n\t\t\tvar $ptr, _r, $s, $r;\n\t\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t\t/* */ if (!($interfaceIsEqual(err[0], $ifaceNil))) { $s = 1; continue; }\n\t\t\t/* */ $s = 2; continue;\n\t\t\t/* if (!($interfaceIsEqual(err[0], $ifaceNil))) { */ case 1:\n\t\t\t\t_r = c[0].Close(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\t\t_r;\n\t\t\t\tself[0] = ptrType$1.nil;\n\t\t\t/* } */ case 2:\n\t\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;\n\t\t}; })(c, err, response, self), []]);\n\t\tc[0].bound = new $Map();\n\t\tc[0].plugin = new $Map();\n\t\t_r = binary.Write(c[0].sock, (x = binary.LittleEndian, new x.constructor.elem(x)), new rpcHandshakeHeader.ptr($clone(rpcMagicRequest, arrayType), 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\terr[0] = _r;\n\t\tif (!($interfaceIsEqual(err[0], $ifaceNil))) {\n\t\t\treturn [self[0], err[0]];\n\t\t}\n\t\tresponse[0] = $clone(new rpcHandshakeHeader.ptr(), rpcHandshakeHeader);\n\t\t_r$1 = binary.Read(c[0].sock, (x$1 = binary.LittleEndian, new x$1.constructor.elem(x$1)), response[0]); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\terr[0] = _r$1;\n\t\tif (!($interfaceIsEqual(err[0], $ifaceNil))) {\n\t\t\treturn [self[0], err[0]];\n\t\t}\n\t\tif (!($equal(response[0].Magic, rpcMagicResponse, arrayType)) || !((response[0].Version === 1))) {\n\t\t\terr[0] = $pkg.ErrInvalidHandshake;\n\t\t}\n\t\treturn [self[0], err[0]];\n\t\t/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [self[0], err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.init }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.err = err; $f.response = response; $f.self = self; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }\n\t};\n\tConn.prototype.init = function() { return this.$val.init(); };\n\tConn.ptr.prototype.roundTrip = function(id, req, resp) {\n\t\tvar $ptr, _entry, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, b$2, c, err, err$1, header, id, message, n, ok, req, resp, text, x, x$1, $s, $deferred, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; b = $f.b; b$1 = $f.b$1; b$2 = $f.b$2; c = $f.c; err = $f.err; err$1 = $f.err$1; header = $f.header; id = $f.id; message = $f.message; n = $f.n; ok = $f.ok; req = $f.req; resp = $f.resp; text = $f.text; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\tc = this;\n\t\t_r = proto.Marshal(req); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; b = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn [sliceType.nil, err];\n\t\t}\n\t\tif (b.$length > 8388608) {\n\t\t\treturn [sliceType.nil, $pkg.ErrMessageTooLarge];\n\t\t}\n\t\t$r = c.mtx.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$deferred.push([$methodVal(c.mtx, \"Unlock\"), []]);\n\t\t_r$1 = binary.Write(c.sock, (x = binary.LittleEndian, new x.constructor.elem(x)), new rpcMessageHeader.ptr(id, arrayType$1.zero(), (b.$length >> 0))); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\terr = _r$1;\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn [sliceType.nil, err];\n\t\t}\n\t\t_r$2 = c.sock.Write(b); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r$2; n = _tuple$1[0]; err = _tuple$1[1];\n\t\tif ($interfaceIsEqual(err, $ifaceNil) && !((n === b.$length))) {\n\t\t\terr = io.ErrShortWrite;\n\t\t}\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn [sliceType.nil, err];\n\t\t}\n\t\ttext = sliceType.nil;\n\t\t/* while (true) { */ case 5:\n\t\t\theader = [header];\n\t\t\tmessage = [message];\n\t\t\theader[0] = $clone(new rpcMessageHeader.ptr(), rpcMessageHeader);\n\t\t\t_r$3 = binary.Read(c.sock, (x$1 = binary.LittleEndian, new x$1.constructor.elem(x$1)), header[0]); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }\n\t\t\terr = _r$3;\n\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\treturn [text, err];\n\t\t\t}\n\t\t\t_ref = header[0].ID;\n\t\t\t/* */ if (_ref === -1) { $s = 8; continue; }\n\t\t\t/* */ if (_ref === -2) { $s = 9; continue; }\n\t\t\t/* */ if (_ref === -3) { $s = 10; continue; }\n\t\t\t/* */ $s = 11; continue;\n\t\t\t/* if (_ref === -1) { */ case 8:\n\t\t\t\tb$1 = $makeSlice(sliceType$1, header[0].Size);\n\t\t\t\t_r$4 = io.ReadFull(c.sock, b$1); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$2 = _r$4; err = _tuple$2[1];\n\t\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\t\treturn [text, err];\n\t\t\t\t}\n\t\t\t\t_r$5 = proto.Unmarshal(b$1, resp); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }\n\t\t\t\treturn [text, _r$5];\n\t\t\t\t$s = 11; continue;\n\t\t\t/* } else if (_ref === -2) { */ case 9:\n\t\t\t\t_tuple$3 = (_entry = knownErrors[header[0].Size], _entry !== undefined ? [_entry.v, true] : [$ifaceNil, false]); err$1 = _tuple$3[0]; ok = _tuple$3[1];\n\t\t\t\tif (ok) {\n\t\t\t\t\treturn [text, err$1];\n\t\t\t\t}\n\t\t\t\treturn [text, $pkg.ErrInvalidError];\n\t\t\t\t$s = 11; continue;\n\t\t\t/* } else if (_ref === -3) { */ case 10:\n\t\t\t\tmessage[0] = $clone(new dfproto.CoreTextNotification.ptr(), dfproto.CoreTextNotification);\n\t\t\t\tb$2 = $makeSlice(sliceType$1, header[0].Size);\n\t\t\t\t_r$6 = io.ReadFull(c.sock, b$2); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }\n\t\t\t\t_tuple$4 = _r$6; err = _tuple$4[1];\n\t\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\t\treturn [text, err];\n\t\t\t\t}\n\t\t\t\t_r$7 = proto.Unmarshal(b$2, message[0]); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }\n\t\t\t\terr = _r$7;\n\t\t\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t\t\treturn [text, err];\n\t\t\t\t}\n\t\t\t\ttext = $append(text, message[0]);\n\t\t\t/* } */ case 11:\n\t\t/* } */ $s = 5; continue; case 6:\n\t\t/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; return [sliceType.nil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.roundTrip }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.b = b; $f.b$1 = b$1; $f.b$2 = b$2; $f.c = c; $f.err = err; $f.err$1 = err$1; $f.header = header; $f.id = id; $f.message = message; $f.n = n; $f.ok = ok; $f.req = req; $f.resp = resp; $f.text = text; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }\n\t};\n\tConn.prototype.roundTrip = function(id, req, resp) { return this.$val.roundTrip(id, req, resp); };\n\tConn.ptr.prototype.Close = function() {\n\t\tvar $ptr, _r, _r$1, c, x, $s, $deferred, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; c = $f.c; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\tc = this;\n\t\t$r = c.mtx.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$deferred.push([$methodVal(c.mtx, \"Unlock\"), []]);\n\t\t_r = binary.Write(c.sock, (x = binary.LittleEndian, new x.constructor.elem(x)), new rpcMessageHeader.ptr(-4, arrayType$1.zero(), 0)); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_r;\n\t\t_r$1 = c.sock.Close(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn _r$1;\n\t\t/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.Close }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }\n\t};\n\tConn.prototype.Close = function() { return this.$val.Close(); };\n\tConnect = function() {\n\t\tvar $ptr, _r, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = Dial($internalize($global.location.host, $String)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\treturn _r;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Connect }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Connect = Connect;\n\tDial = function(addr) {\n\t\tvar $ptr, _r, _r$1, _tuple, addr, err, sock, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; addr = $f.addr; err = $f.err; sock = $f.sock; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t_r = websocket.Dial(\"ws://\" + addr + \"/ws\"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; sock = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn [ptrType$1.nil, err];\n\t\t}\n\t\t_r$1 = (new Conn.ptr(sock, false, false, new sync.Mutex.ptr())).init(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\treturn _r$1;\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Dial }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.addr = addr; $f.err = err; $f.sock = sock; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.Dial = Dial;\n\tConn.ptr.prototype.RoundTripBind = function(command, plugin, in$1, out, req, resp) {\n\t\tvar $ptr, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _key$1, _key$2, _key$3, _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, _tuple$3, bind, c, command, err, id, in$1, key, ok, out, plugin, req, resp, text, text2, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; bind = $f.bind; c = $f.c; command = $f.command; err = $f.err; id = $f.id; in$1 = $f.in$1; key = $f.key; ok = $f.ok; out = $f.out; plugin = $f.plugin; req = $f.req; resp = $f.resp; text = $f.text; text2 = $f.text2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\tcommand = [command];\n\t\tin$1 = [in$1];\n\t\tout = [out];\n\t\tc = this;\n\t\tid = 0;\n\t\tok = false;\n\t\tkey = $toNativeArray($kindString, [command[0], in$1[0], out[0]]);\n\t\t$r = c.mtx.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tif (plugin === ptrType.nil) {\n\t\t\t_tuple = (_entry = c.bound[(new arrayType$2(key)).$key()], _entry !== undefined ? [_entry.v, true] : [0, false]); id = _tuple[0]; ok = _tuple[1];\n\t\t} else {\n\t\t\t_tuple$1 = (_entry$1 = (_entry$2 = c.plugin[plugin.$get()], _entry$2 !== undefined ? _entry$2.v : false)[(new arrayType$2(key)).$key()], _entry$1 !== undefined ? [_entry$1.v, true] : [0, false]); id = _tuple$1[0]; ok = _tuple$1[1];\n\t\t}\n\t\t$r = c.mtx.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ if (ok) { $s = 3; continue; }\n\t\t/* */ $s = 4; continue;\n\t\t/* if (ok) { */ case 3:\n\t\t\t_r = c.roundTrip(id, req, resp); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t\treturn _r;\n\t\t/* } */ case 4:\n\t\t_r$1 = c.BindMethod(new dfproto.CoreBindRequest.ptr((command.$ptr || (command.$ptr = new ptrType(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, command))), (in$1.$ptr || (in$1.$ptr = new ptrType(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, in$1))), (out.$ptr || (out.$ptr = new ptrType(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, out))), plugin, sliceType$1.nil)); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_tuple$2 = _r$1; bind = _tuple$2[0]; text = _tuple$2[1]; err = _tuple$2[2];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\treturn [text, err];\n\t\t}\n\t\tid = (bind << 16 >> 16);\n\t\t$r = c.mtx.Lock(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\tif (plugin === ptrType.nil) {\n\t\t\t_key$1 = $clone(key, arrayType$2); (c.bound || $throwRuntimeError(\"assignment to entry in nil map\"))[(new arrayType$2(_key$1)).$key()] = { k: _key$1, v: id };\n\t\t} else {\n\t\t\tif ((_entry$3 = c.plugin[plugin.$get()], _entry$3 !== undefined ? _entry$3.v : false) === false) {\n\t\t\t\t_key$2 = plugin.$get(); (c.plugin || $throwRuntimeError(\"assignment to entry in nil map\"))[_key$2] = { k: _key$2, v: new $Map() };\n\t\t\t}\n\t\t\t_key$3 = $clone(key, arrayType$2); ((_entry$4 = c.plugin[plugin.$get()], _entry$4 !== undefined ? _entry$4.v : false) || $throwRuntimeError(\"assignment to entry in nil map\"))[(new arrayType$2(_key$3)).$key()] = { k: _key$3, v: id };\n\t\t}\n\t\t$r = c.mtx.Unlock(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t_r$2 = c.roundTrip(id, req, resp); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_tuple$3 = _r$2; text2 = _tuple$3[0]; err = _tuple$3[1];\n\t\tif (text === sliceType.nil) {\n\t\t\treturn [text2, err];\n\t\t}\n\t\treturn [$appendSlice(text, text2), err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.RoundTripBind }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.bind = bind; $f.c = c; $f.command = command; $f.err = err; $f.id = id; $f.in$1 = in$1; $f.key = key; $f.ok = ok; $f.out = out; $f.plugin = plugin; $f.req = req; $f.resp = resp; $f.text = text; $f.text2 = text2; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.RoundTripBind = function(command, plugin, in$1, out, req, resp) { return this.$val.RoundTripBind(command, plugin, in$1, out, req, resp); };\n\tConn.ptr.prototype.BindMethod = function(req) {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\tc = this;\n\t\treply[0] = $clone(new dfproto.CoreBindReply.ptr(), dfproto.CoreBindReply);\n\t\t_r = c.roundTrip(0, req, reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [reply[0].GetAssignedId(), text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.BindMethod }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.BindMethod = function(req) { return this.$val.BindMethod(req); };\n\tConn.ptr.prototype.RunCommand = function(req) {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\tc = this;\n\t\treply[0] = $clone(new dfproto.EmptyMessage.ptr(), dfproto.EmptyMessage);\n\t\t_r = c.RoundTripBind(\"RunCommand\", ptrType.nil, \"dfproto.CoreRunCommandRequest\", \"dfproto.EmptyMessage\", req, reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.RunCommand }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.RunCommand = function(req) { return this.$val.RunCommand(req); };\n\tConn.ptr.prototype.CoreSuspend = function() {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\treq = [req];\n\t\tc = this;\n\t\treq[0] = $clone(new dfproto.EmptyMessage.ptr(), dfproto.EmptyMessage);\n\t\treply[0] = $clone(new dfproto.IntMessage.ptr(), dfproto.IntMessage);\n\t\t_r = c.RoundTripBind(\"CoreSuspend\", ptrType.nil, \"dfproto.EmptyMessage\", \"dfproto.IntMessage\", req[0], reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [reply[0].GetValue(), text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.CoreSuspend }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.CoreSuspend = function() { return this.$val.CoreSuspend(); };\n\tConn.ptr.prototype.CoreResume = function() {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\treq = [req];\n\t\tc = this;\n\t\treq[0] = $clone(new dfproto.EmptyMessage.ptr(), dfproto.EmptyMessage);\n\t\treply[0] = $clone(new dfproto.IntMessage.ptr(), dfproto.IntMessage);\n\t\t_r = c.RoundTripBind(\"CoreResume\", ptrType.nil, \"dfproto.EmptyMessage\", \"dfproto.IntMessage\", req[0], reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [reply[0].GetValue(), text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.CoreResume }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.CoreResume = function() { return this.$val.CoreResume(); };\n\tConn.ptr.prototype.RunLua = function(req) {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\tc = this;\n\t\treply[0] = $clone(new dfproto.StringListMessage.ptr(), dfproto.StringListMessage);\n\t\t_r = c.RoundTripBind(\"RunLua\", ptrType.nil, \"dfproto.CoreRunLuaRequest\", \"dfproto.StringListMessage\", req, reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [reply[0].GetValue(), text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.RunLua }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.RunLua = function(req) { return this.$val.RunLua(req); };\n\tConn.ptr.prototype.GetGrowthList = function() {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\treq = [req];\n\t\tc = this;\n\t\treq[0] = $clone(new dfproto.EmptyMessage.ptr(), dfproto.EmptyMessage);\n\t\treply[0] = $clone(new RemoteFortressReader.MaterialList.ptr(), RemoteFortressReader.MaterialList);\n\t\t_r = c.RoundTripBind(\"GetGrowthList\", (pluginRemoteFortressReader_ptr || (pluginRemoteFortressReader_ptr = new ptrType(function() { return pluginRemoteFortressReader; }, function($v) { pluginRemoteFortressReader = $v; }))), \"dfproto.EmptyMessage\", \"RemoteFortressReader.MaterialList\", req[0], reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [reply[0], text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.GetGrowthList }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.GetGrowthList = function() { return this.$val.GetGrowthList(); };\n\tConn.ptr.prototype.GetMaterialList = function() {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\treq = [req];\n\t\tc = this;\n\t\treq[0] = $clone(new dfproto.EmptyMessage.ptr(), dfproto.EmptyMessage);\n\t\treply[0] = $clone(new RemoteFortressReader.MaterialList.ptr(), RemoteFortressReader.MaterialList);\n\t\t_r = c.RoundTripBind(\"GetMaterialList\", (pluginRemoteFortressReader_ptr || (pluginRemoteFortressReader_ptr = new ptrType(function() { return pluginRemoteFortressReader; }, function($v) { pluginRemoteFortressReader = $v; }))), \"dfproto.EmptyMessage\", \"RemoteFortressReader.MaterialList\", req[0], reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [reply[0], text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.GetMaterialList }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.GetMaterialList = function() { return this.$val.GetMaterialList(); };\n\tConn.ptr.prototype.GetTiletypeList = function() {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\treq = [req];\n\t\tc = this;\n\t\treq[0] = $clone(new dfproto.EmptyMessage.ptr(), dfproto.EmptyMessage);\n\t\treply[0] = $clone(new RemoteFortressReader.TiletypeList.ptr(), RemoteFortressReader.TiletypeList);\n\t\t_r = c.RoundTripBind(\"GetTiletypeList\", (pluginRemoteFortressReader_ptr || (pluginRemoteFortressReader_ptr = new ptrType(function() { return pluginRemoteFortressReader; }, function($v) { pluginRemoteFortressReader = $v; }))), \"dfproto.EmptyMessage\", \"RemoteFortressReader.TiletypeList\", req[0], reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [reply[0], text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.GetTiletypeList }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.GetTiletypeList = function() { return this.$val.GetTiletypeList(); };\n\tConn.ptr.prototype.GetBlockList = function(req) {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\tc = this;\n\t\treply[0] = $clone(new RemoteFortressReader.BlockList.ptr(), RemoteFortressReader.BlockList);\n\t\t_r = c.RoundTripBind(\"GetBlockList\", (pluginRemoteFortressReader_ptr || (pluginRemoteFortressReader_ptr = new ptrType(function() { return pluginRemoteFortressReader; }, function($v) { pluginRemoteFortressReader = $v; }))), \"RemoteFortressReader.BlockRequest\", \"RemoteFortressReader.BlockList\", req, reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [reply[0], text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.GetBlockList }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.GetBlockList = function(req) { return this.$val.GetBlockList(req); };\n\tConn.ptr.prototype.GetPlantList = function(req) {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\tc = this;\n\t\treply[0] = $clone(new RemoteFortressReader.PlantList.ptr(), RemoteFortressReader.PlantList);\n\t\t_r = c.RoundTripBind(\"GetPlantList\", (pluginRemoteFortressReader_ptr || (pluginRemoteFortressReader_ptr = new ptrType(function() { return pluginRemoteFortressReader; }, function($v) { pluginRemoteFortressReader = $v; }))), \"RemoteFortressReader.BlockRequest\", \"RemoteFortressReader.PlantList\", req, reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [reply[0], text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.GetPlantList }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.GetPlantList = function(req) { return this.$val.GetPlantList(req); };\n\tConn.ptr.prototype.CheckHashes = function() {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\treq = [req];\n\t\tc = this;\n\t\treq[0] = $clone(new dfproto.EmptyMessage.ptr(), dfproto.EmptyMessage);\n\t\treply[0] = $clone(new dfproto.EmptyMessage.ptr(), dfproto.EmptyMessage);\n\t\t_r = c.RoundTripBind(\"CheckHashes\", (pluginRemoteFortressReader_ptr || (pluginRemoteFortressReader_ptr = new ptrType(function() { return pluginRemoteFortressReader; }, function($v) { pluginRemoteFortressReader = $v; }))), \"dfproto.EmptyMessage\", \"dfproto.EmptyMessage\", req[0], reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.CheckHashes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.CheckHashes = function() { return this.$val.CheckHashes(); };\n\tConn.ptr.prototype.GetUnitList = function() {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\treq = [req];\n\t\tc = this;\n\t\treq[0] = $clone(new dfproto.EmptyMessage.ptr(), dfproto.EmptyMessage);\n\t\treply[0] = $clone(new RemoteFortressReader.UnitList.ptr(), RemoteFortressReader.UnitList);\n\t\t_r = c.RoundTripBind(\"GetUnitList\", (pluginRemoteFortressReader_ptr || (pluginRemoteFortressReader_ptr = new ptrType(function() { return pluginRemoteFortressReader; }, function($v) { pluginRemoteFortressReader = $v; }))), \"dfproto.EmptyMessage\", \"RemoteFortressReader.UnitList\", req[0], reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [reply[0], text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.GetUnitList }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.GetUnitList = function() { return this.$val.GetUnitList(); };\n\tConn.ptr.prototype.GetViewInfo = function() {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\treq = [req];\n\t\tc = this;\n\t\treq[0] = $clone(new dfproto.EmptyMessage.ptr(), dfproto.EmptyMessage);\n\t\treply[0] = $clone(new RemoteFortressReader.ViewInfo.ptr(), RemoteFortressReader.ViewInfo);\n\t\t_r = c.RoundTripBind(\"GetViewInfo\", (pluginRemoteFortressReader_ptr || (pluginRemoteFortressReader_ptr = new ptrType(function() { return pluginRemoteFortressReader; }, function($v) { pluginRemoteFortressReader = $v; }))), \"dfproto.EmptyMessage\", \"RemoteFortressReader.ViewInfo\", req[0], reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [reply[0], text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.GetViewInfo }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.GetViewInfo = function() { return this.$val.GetViewInfo(); };\n\tConn.ptr.prototype.GetMapInfo = function() {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\treq = [req];\n\t\tc = this;\n\t\treq[0] = $clone(new dfproto.EmptyMessage.ptr(), dfproto.EmptyMessage);\n\t\treply[0] = $clone(new RemoteFortressReader.MapInfo.ptr(), RemoteFortressReader.MapInfo);\n\t\t_r = c.RoundTripBind(\"GetMapInfo\", (pluginRemoteFortressReader_ptr || (pluginRemoteFortressReader_ptr = new ptrType(function() { return pluginRemoteFortressReader; }, function($v) { pluginRemoteFortressReader = $v; }))), \"dfproto.EmptyMessage\", \"RemoteFortressReader.MapInfo\", req[0], reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [reply[0], text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.GetMapInfo }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.GetMapInfo = function() { return this.$val.GetMapInfo(); };\n\tConn.ptr.prototype.ResetMapHashes = function() {\n\t\tvar $ptr, _r, _tuple, c, err, reply, req, text, $s, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; reply = $f.reply; req = $f.req; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\treply = [reply];\n\t\treq = [req];\n\t\tc = this;\n\t\treq[0] = $clone(new dfproto.EmptyMessage.ptr(), dfproto.EmptyMessage);\n\t\treply[0] = $clone(new dfproto.EmptyMessage.ptr(), dfproto.EmptyMessage);\n\t\t_r = c.RoundTripBind(\"ResetMapHashes\", (pluginRemoteFortressReader_ptr || (pluginRemoteFortressReader_ptr = new ptrType(function() { return pluginRemoteFortressReader; }, function($v) { pluginRemoteFortressReader = $v; }))), \"dfproto.EmptyMessage\", \"dfproto.EmptyMessage\", req[0], reply[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; text = _tuple[0]; err = _tuple[1];\n\t\treturn [text, err];\n\t\t/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Conn.ptr.prototype.ResetMapHashes }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.reply = reply; $f.req = req; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\tConn.prototype.ResetMapHashes = function() { return this.$val.ResetMapHashes(); };\n\tptrType$1.methods = [{prop: \"GetVersion\", name: \"GetVersion\", pkg: \"\", typ: $funcType([], [$String, sliceType, $error], false)}, {prop: \"GetDFVersion\", name: \"GetDFVersion\", pkg: \"\", typ: $funcType([], [$String, sliceType, $error], false)}, {prop: \"GetWorldInfo\", name: \"GetWorldInfo\", pkg: \"\", typ: $funcType([], [ptrType$3, sliceType, $error], false)}, {prop: \"ListEnums\", name: \"ListEnums\", pkg: \"\", typ: $funcType([], [ptrType$4, sliceType, $error], false)}, {prop: \"ListJobSkills\", name: \"ListJobSkills\", pkg: \"\", typ: $funcType([], [ptrType$5, sliceType, $error], false)}, {prop: \"ListMaterials\", name: \"ListMaterials\", pkg: \"\", typ: $funcType([ptrType$6], [ptrType$7, sliceType, $error], false)}, {prop: \"ListUnits\", name: \"ListUnits\", pkg: \"\", typ: $funcType([ptrType$8], [ptrType$9, sliceType, $error], false)}, {prop: \"ListSquads\", name: \"ListSquads\", pkg: \"\", typ: $funcType([ptrType$10], [ptrType$11, sliceType, $error], false)}, {prop: \"SetUnitLabors\", name: \"SetUnitLabors\", pkg: \"\", typ: $funcType([ptrType$12], [sliceType, $error], false)}, {prop: \"init\", name: \"init\", pkg: \"github.com/BenLubar/arm_ok/dfhack\", typ: $funcType([], [ptrType$1, $error], false)}, {prop: \"roundTrip\", name: \"roundTrip\", pkg: \"github.com/BenLubar/arm_ok/dfhack\", typ: $funcType([$Int16, proto.Message, proto.Message], [sliceType, $error], false)}, {prop: \"Close\", name: \"Close\", pkg: \"\", typ: $funcType([], [$error], false)}, {prop: \"RoundTripBind\", name: \"RoundTripBind\", pkg: \"\", typ: $funcType([$String, ptrType, $String, $String, proto.Message, proto.Message], [sliceType, $error], false)}, {prop: \"BindMethod\", name: \"BindMethod\", pkg: \"\", typ: $funcType([ptrType$13], [$Int32, sliceType, $error], false)}, {prop: \"RunCommand\", name: \"RunCommand\", pkg: \"\", typ: $funcType([ptrType$14], [sliceType, $error], false)}, {prop: \"CoreSuspend\", name: \"CoreSuspend\", pkg: \"\", typ: $funcType([], [$Int32, sliceType, $error], false)}, {prop: \"CoreResume\", name: \"CoreResume\", pkg: \"\", typ: $funcType([], [$Int32, sliceType, $error], false)}, {prop: \"RunLua\", name: \"RunLua\", pkg: \"\", typ: $funcType([ptrType$15], [sliceType$2, sliceType, $error], false)}, {prop: \"GetGrowthList\", name: \"GetGrowthList\", pkg: \"\", typ: $funcType([], [ptrType$16, sliceType, $error], false)}, {prop: \"GetMaterialList\", name: \"GetMaterialList\", pkg: \"\", typ: $funcType([], [ptrType$16, sliceType, $error], false)}, {prop: \"GetTiletypeList\", name: \"GetTiletypeList\", pkg: \"\", typ: $funcType([], [ptrType$17, sliceType, $error], false)}, {prop: \"GetBlockList\", name: \"GetBlockList\", pkg: \"\", typ: $funcType([ptrType$18], [ptrType$19, sliceType, $error], false)}, {prop: \"GetPlantList\", name: \"GetPlantList\", pkg: \"\", typ: $funcType([ptrType$18], [ptrType$20, sliceType, $error], false)}, {prop: \"CheckHashes\", name: \"CheckHashes\", pkg: \"\", typ: $funcType([], [sliceType, $error], false)}, {prop: \"GetUnitList\", name: \"GetUnitList\", pkg: \"\", typ: $funcType([], [ptrType$21, sliceType, $error], false)}, {prop: \"GetViewInfo\", name: \"GetViewInfo\", pkg: \"\", typ: $funcType([], [ptrType$22, sliceType, $error], false)}, {prop: \"GetMapInfo\", name: \"GetMapInfo\", pkg: \"\", typ: $funcType([], [ptrType$23, sliceType, $error], false)}, {prop: \"ResetMapHashes\", name: \"ResetMapHashes\", pkg: \"\", typ: $funcType([], [sliceType, $error], false)}];\n\tConn.init([{prop: \"sock\", name: \"sock\", pkg: \"github.com/BenLubar/arm_ok/dfhack\", typ: io.ReadWriteCloser, tag: \"\"}, {prop: \"bound\", name: \"bound\", pkg: \"github.com/BenLubar/arm_ok/dfhack\", typ: mapType, tag: \"\"}, {prop: \"plugin\", name: \"plugin\", pkg: \"github.com/BenLubar/arm_ok/dfhack\", typ: mapType$1, tag: \"\"}, {prop: \"mtx\", name: \"mtx\", pkg: \"github.com/BenLubar/arm_ok/dfhack\", typ: sync.Mutex, tag: \"\"}]);\n\trpcHandshakeHeader.init([{prop: \"Magic\", name: \"Magic\", pkg: \"\", typ: arrayType, tag: \"\"}, {prop: \"Version\", name: \"Version\", pkg: \"\", typ: $Int32, tag: \"\"}]);\n\trpcMessageHeader.init([{prop: \"ID\", name: \"ID\", pkg: \"\", typ: $Int16, tag: \"\"}, {prop: \"Pad\", name: \"Pad\", pkg: \"\", typ: arrayType$1, tag: \"\"}, {prop: \"Size\", name: \"Size\", pkg: \"\", typ: $Int32, tag: \"\"}]);\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = binary.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = RemoteFortressReader.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = dfproto.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = proto.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = js.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = websocket.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = io.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = sync.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$pkg.ErrInvalidHandshake = errors.New(\"dfhack: invalid handshake\");\n\t\t$pkg.ErrMessageTooLarge = errors.New(\"dfhack: message too large\");\n\t\t$pkg.ErrInvalidError = errors.New(\"dfhack: error code unknown\");\n\t\t$pkg.ErrLinkFailure = errors.New(\"dfhack: CR_LINK_FAILURE: RPC call failed due to I/O or protocol error\");\n\t\t$pkg.ErrNeedsConsole = errors.New(\"dfhack: CR_NEEDS_CONSOLE: attempt to call interactive command without console\");\n\t\t$pkg.ErrNotImplemented = errors.New(\"dfhack: CR_NOT_IMPLEMENTED: command not implemented, or plugin not loaded\");\n\t\t$pkg.ErrFailure = errors.New(\"dfhack: CR_FAILURE: failure\");\n\t\t$pkg.ErrWrongUsage = errors.New(\"dfhack: CR_WRONG_USAGE: wrong arguments or ui state\");\n\t\t$pkg.ErrNotFound = errors.New(\"dfhack: CR_NOT_FOUND: target object not found (for RPC mainly)\");\n\t\tknownErrors = (_map = new $Map(), _key = -3, _map[_key] = { k: _key, v: $pkg.ErrLinkFailure }, _key = -2, _map[_key] = { k: _key, v: $pkg.ErrNeedsConsole }, _key = -1, _map[_key] = { k: _key, v: $pkg.ErrNotImplemented }, _key = 1, _map[_key] = { k: _key, v: $pkg.ErrFailure }, _key = 2, _map[_key] = { k: _key, v: $pkg.ErrWrongUsage }, _key = 3, _map[_key] = { k: _key, v: $pkg.ErrNotFound }, _map);\n\t\trpcMagicRequest = $toNativeArray($kindUint8, [68, 70, 72, 97, 99, 107, 63, 10]);\n\t\trpcMagicResponse = $toNativeArray($kindUint8, [68, 70, 72, 97, 99, 107, 33, 10]);\n\t\tpluginRemoteFortressReader = \"RemoteFortressReader\";\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$packages[\"main\"] = (function() {\n\tvar $pkg = {}, $init, fmt, dfhack, sliceType, main;\n\tfmt = $packages[\"fmt\"];\n\tdfhack = $packages[\"github.com/BenLubar/arm_ok/dfhack\"];\n\tsliceType = $sliceType($emptyInterface);\n\tmain = function() {\n\t\tvar $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, conn, err, version, $s, $deferred, $r;\n\t\t/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; conn = $f.conn; err = $f.err; version = $f.version; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);\n\t\t_r = dfhack.Connect(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }\n\t\t_tuple = _r; conn = _tuple[0]; err = _tuple[1];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t$panic(err);\n\t\t}\n\t\t$deferred.push([$methodVal(conn, \"Close\"), []]);\n\t\t_r$1 = conn.GetDFVersion(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }\n\t\t_tuple$1 = _r$1; version = _tuple$1[0]; err = _tuple$1[2];\n\t\tif (!($interfaceIsEqual(err, $ifaceNil))) {\n\t\t\t$panic(err);\n\t\t}\n\t\t_r$2 = fmt.Println(new sliceType([new $String(version)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }\n\t\t_r$2;\n\t\t/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: main }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.conn = conn; $f.err = err; $f.version = version; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }\n\t};\n\t$init = function() {\n\t\t$pkg.$init = function() {};\n\t\t/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:\n\t\t$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = dfhack.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t$r = main(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }\n\t\t/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;\n\t};\n\t$pkg.$init = $init;\n\treturn $pkg;\n})();\n$synthesizeMethods();\n$packages[\"runtime\"].$init();\n$go($packages[\"main\"].$init, [], true);\n$flushConsole();\n\n}).call(this);\n//# sourceMappingURL=armok_web.js.map\n" +
	""}))
